/* 
This file contains a customized selection of TiddlyWiki plugin modules
for external plugin enabled wikis.
*/
window.$tw = (function ($tw) {
    "use strict";
    $tw = $tw || Object.create(null);
    $tw.preloadTiddlers = $tw.preloadTiddlers || [];
    $tw.preloadTiddlers = $tw.preloadTiddlers.concat(
[
  {
    "created": "20241027201824563",
    "title": "$:/config/ExternalJS/Exports",
    "text": "$:/plugins/cdr/external-js $:/plugins/EvidentlyCube/AutoComplete $:/plugins/flibbles/relink $:/plugins/mklauber/shuffle $:/plugins/sobjornstad/GrokTiddlyWiki $:/plugins/sobjornstad/TakeAway $:/plugins/sobjornstad/TiddlyRemember $:/plugins/telmiger/details $:/plugins/tiddlywiki/highlight $:/themes/tiddlywiki/snowwhite $:/themes/tiddlywiki/vanilla",
    "modified": "20241027201824563"
  },
  {
    "title": "$:/plugins/cdr/external-js",
    "name": "External JS",
    "description": "Ability to externalize core and plugins",
    "author": "cdruan",
    "version": "0.2.0",
    "core-version": ">=5.1.23",
    "list": "readme usage tiddlywiki.info FAQ",
    "plugin-type": "plugin",
    "dependents": "",
    "type": "application/json",
    "text": "{\"tiddlers\":{\"$:/config/ExternalJS/EnableExternalPlugins\":{\"title\":\"$:/config/ExternalJS/EnableExternalPlugins\",\"text\":\"no\"},\"$:/config/ExternalJS/Prefix/Core\":{\"title\":\"$:/config/ExternalJS/Prefix/Core\",\"text\":\"tiddlywikicore\"},\"$:/config/ExternalJS/Prefix/Plugins\":{\"title\":\"$:/config/ExternalJS/Prefix/Plugins\",\"text\":\"myplugins\"},\"$:/plugins/cdr/external-js/FAQ\":{\"title\":\"$:/plugins/cdr/external-js/FAQ\",\"text\":\"''How do I make changes to my collection of external plugins?''\\n\\nJust select or de-select any plugins. Confirm the changes and re-download the <$text text=\\\"JavaScript\\\"/> file. Reload your wiki.\\n\\n''How do I export plugins from multiple wikis into one collection?''\\n\\nAssuming you have already converted one wiki and exported out the desired plugins from that wiki, alter the conversion steps slightly for each of the remaining wikis:\\n\\n* Import this plugin.\\n* Check the \\\"Externalize plugins and themes\\\" option but skip the rest of step #3; i.e. leave all items unchecked and do not download the external plugins at this point. \\n* Proceed to step #4 and finish all of the remaining steps.\\n* Once you reload the converted wiki, plugins that have already been externalized from the earlier wikis will appear in this wiki.\\n* Now is the time to add additional plugins to the collection; just remember to:\\n\\t** confirm the changes\\n\\t** re-create the JS file by downloading the JS file to the local disk\\n\\t** save the wiki.\\n\\nTIP: You might want to externalize all official plugins to make upgrading multiple wikis easier in the future.\\n\\n''Can I configure the paths to the libraries?''\\n\\nYes. To change the path to the core library, edit the $:/config/ExternalJS/Prefix/Core tiddler. For example, if the URL of your core library is `https://example.com/lib/tiddlywikicore-5.2.3.js`, then set the value of the tiddler to:\\n\\n```\\nhttps://example.com/lib/tiddlywikicore\\n```\\n\\nOmit the version number and the file extension.\\n\\nSimilarly, to change the path to the plugins library (or rename the <$text text=\\\"JavaScript\\\"/> file), edit the $:/config/ExternalJS/Prefix/Plugins tiddler.\\n\\nMake the changes before you convert the wiki, and make sure that the libraries can be found at the specified locations.\"},\"$:/plugins/cdr/external-js/filenames\":{\"title\":\"$:/plugins/cdr/external-js/filenames\",\"text\":\"\\\\define coreURL() [{$:/config/ExternalJS/Prefix/Core}addsuffix[-]addsuffix<version>addsuffix[.js]]\\n\\\\define pluginsURL() [{$:/config/ExternalJS/Prefix/Plugins}addsuffix[-]addsuffix<version>addsuffix[.js]]\"},\"$:/plugins/cdr/external-js/images/file-download\":{\"title\":\"$:/plugins/cdr/external-js/images/file-download\",\"tags\":\"$:/tags/Image\",\"text\":\"<svg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-file-download tc-image-button\\\" viewBox=\\\"0 0 16 16\\\">\\n  <path d=\\\"M8.5 6.5a.5.5 0 0 0-1 0v3.793L6.354 9.146a.5.5 0 1 0-.708.708l2 2a.5.5 0 0 0 .708 0l2-2a.5.5 0 0 0-.708-.708L8.5 10.293V6.5z\\\"/>\\n  <path d=\\\"M14 14V4.5L9.5 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2zM9.5 3A1.5 1.5 0 0 0 11 4.5h2V14a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h5.5v2z\\\"/>\\n</svg>\"},\"$:/plugins/cdr/external-js/readme\":{\"title\":\"$:/plugins/cdr/external-js/readme\",\"text\":\"\\\\import [[$:/plugins/cdr/external-js/filenames]]\\n\\nThis plugin can externalize plugins as well as the <$text text=\\\"TiddlyWiki\\\"/> core code by extending the default \\\"external-js\\\" template. Although such configuration requires additional supporting <$text text=\\\"JavaScript\\\"/>(s) for your wikis to load successfully, it allows you to share libraries and drastically reduce disk usage. This plugin is intended for the advanced users only.\\n\\n! Installation\\n\\nDrag and drop the [[External JS Plugin|$:/plugins/cdr/external-js]] into your wiki, save and reload. Then visit the usage tab of the plugin for further details.\"},\"$:/plugins/cdr/external-js/saver.js\":{\"title\":\"$:/plugins/cdr/external-js/saver.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/cdr/external-js/saver.js\\ntype: application/javascript\\nmodule-type: saver\\n\\nDownload saver for external-js enabled wiki\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar ExternalJSSaver = function(wiki) {\\n};\\n\\nExternalJSSaver.prototype.titleDownloadInstruction = \\\"$:/plugins/cdr/external-js/ui/download-wiki\\\";\\nExternalJSSaver.prototype.titleSaveTemplate = \\\"$:/core/save/offline-external-js\\\";\\n\\nExternalJSSaver.prototype.save = function(text,method,callback,options) {\\n\\tvar template = $tw.wiki.getTiddlerText(\\\"$:/config/SaveWikiButton/Template\\\").trim();\\n\\tif (template !== this.titleSaveTemplate) {\\n\\t\\treturn false;\\n\\t}\\n\\n\\toptions = options || {};\\n\\t// Get the current filename\\n\\tvar filename = options.variables.filename;\\n\\tif(!filename) {\\n\\t\\tvar p = document.location.pathname.lastIndexOf(\\\"/\\\");\\n\\t\\tif(p !== -1) {\\n\\t\\t\\t// We decode the pathname because document.location is URL encoded by the browser\\n\\t\\t\\tfilename = document.location.pathname.substring(p+1);\\n\\t\\t\\ttry {\\n\\t\\t\\t\\tfilename = decodeURIComponent(filename);\\n\\t\\t\\t} catch(e) {}\\n\\t\\t}\\n\\t}\\n\\tif(!filename) {\\n\\t\\tfilename = \\\"tiddlywiki.html\\\";\\n\\t}\\n\\t// Set up the url\\n\\tvar url = undefined;\\n\\tif(Blob !== undefined) {\\n\\t\\tvar blob = new Blob([text], {type: \\\"text/html\\\"});\\n\\t\\turl = URL.createObjectURL(blob);\\n\\t} else {\\n\\t\\turl = \\\"data:text/html,\\\" + encodeURIComponent(text);\\n\\t}\\n\\n\\t$tw.modal.display(this.titleDownloadInstruction,{\\n\\t\\tvariables: {\\n\\t\\t\\tdataURL: url,\\n\\t\\t\\tfilename: filename\\n\\t\\t},\\n\\t\\tevent: {}\\n\\t});\\n\\n\\t// Callback that we succeeded\\n\\tif(callback) {\\n\\t\\tcallback(null);\\n\\t}\\n\\treturn true;\\n};\\n\\n/*\\nInformation about this saver\\n*/\\nExternalJSSaver.prototype.info = {\\n\\tname: \\\"external-js\\\",\\n\\tpriority: 105\\n};\\n\\nObject.defineProperty(ExternalJSSaver.prototype.info, \\\"capabilities\\\", {\\n\\tget: function() {\\n\\t\\tvar capabilities = [\\\"save\\\"];\\n\\t\\tif(($tw.wiki.getTextReference(\\\"$:/config/DownloadSaver/AutoSave\\\") || \\\"\\\").toLowerCase() === \\\"yes\\\") {\\n\\t\\t\\tcapabilities.push(\\\"autosave\\\");\\n\\t\\t}\\n\\t\\treturn capabilities;\\n\\t}\\n});\\n\\n/*\\nStatic method that returns true if this saver is capable of working\\n*/\\nexports.canSave = function(wiki) {\\n\\treturn document.createElement(\\\"a\\\").download !== undefined;\\n};\\n\\n/*\\nCreate an instance of this saver\\n*/\\nexports.create = function(wiki) {\\n\\treturn new ExternalJSSaver(wiki);\\n};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"saver\"},\"$:/plugins/cdr/external-js/startup.js\":{\"title\":\"$:/plugins/cdr/external-js/startup.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/cdr/external-js/startup.js\\ntype: application/javascript\\nmodule-type: startup\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n// Export name and synchronous status\\nexports.name = \\\"external-js\\\";\\nexports.platforms = [\\\"browser\\\"];\\nexports.after = [\\\"rootwidget\\\"];\\nexports.before = [\\\"story\\\"];\\nexports.synchronous = true;\\n\\nfunction downloadExternalJSWiki(saver,filename) {\\n\\tvar text = $tw.wiki.renderTiddler(\\\"text/plain\\\",saver.titleSaveTemplate,null /*options*/);\\n\\n\\tsaver.save(text,\\\"save\\\",null,{variables: { filename: filename }});\\n}\\n\\nexports.startup = function() {\\n\\tfor(var t=$tw.saverHandler.savers.length-1; t>=0; t--) {\\n\\t\\tvar saver = $tw.saverHandler.savers[t];\\n\\t\\tif(saver.info.name === \\\"external-js\\\") {\\n\\t\\t\\t$tw.rootWidget.addEventListener(\\\"tm-download-external-js-wiki\\\",function(event) {\\n\\t\\t\\t\\tdownloadExternalJSWiki(saver, event.param);\\n\\t\\t\\t});\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\n\\tvar plugins = {};\\n\\t$tw.utils.each(\\n\\t\\t$tw.wiki.filterTiddlers(\\\"[enlist{$:/config/ExternalJS/Exports}]\\\"),\\n\\t\\tfunction(title) {\\n\\t\\t\\tplugins[title] = \\\"yes\\\";\\n\\t\\t}\\n\\t);\\n\\n\\tvar fields = {\\n\\t\\toriginal: \\\"yes\\\",\\n\\t\\tlist: $tw.wiki.getTiddlerText(\\\"$:/config/ExternalJS/Exports\\\")\\n\\t}\\n\\t$tw.wiki.setTiddlerData(\\\"$:/temp/external-js/exports\\\",plugins,fields);\\n}\\n})();\",\"type\":\"application/javascript\",\"module-type\":\"startup\"},\"$:/plugins/cdr/external-js/templates/plugins-all.js\":{\"title\":\"$:/plugins/cdr/external-js/templates/plugins-all.js\",\"text\":\"`/* \\nThis file contains all of the plugins and themes to be included in the wiki.\\n*/\\nwindow.$tw = (function ($tw) {\\n    \\\"use strict\\\";\\n    $tw = $tw || Object.create(null);\\n    $tw.preloadTiddlers = $tw.preloadTiddlers || [];\\n    $tw.preloadTiddlers = $tw.preloadTiddlers.concat(`\\n<$text text=<<jsontiddlers \\\"[plugin-type[plugin]] [plugin-type[theme]] -[[$:/core]]\\\" \\\"2\\\">>/>`);\\n    return $tw;\\n})(window.$tw);\\n`\\n\"},\"$:/plugins/cdr/external-js/templates/plugins.js\":{\"title\":\"$:/plugins/cdr/external-js/templates/plugins.js\",\"text\":\"`/* \\nThis file contains a customized selection of TiddlyWiki plugin modules\\nfor external plugin enabled wikis.\\n*/\\nwindow.$tw = (function ($tw) {\\n    \\\"use strict\\\";\\n    $tw = $tw || Object.create(null);\\n    $tw.preloadTiddlers = $tw.preloadTiddlers || [];\\n    $tw.preloadTiddlers = $tw.preloadTiddlers.concat(`\\n<$text text=<<jsontiddlers \\\"[[$:/config/ExternalJS/Exports]] [enlist{$:/config/ExternalJS/Exports}]\\\" \\\"2\\\">>/>`);\\n    return $tw;\\n})(window.$tw);\\n`\\n\"},\"$:/core/save/all-external-js\":{\"title\":\"$:/core/save/all-external-js\",\"text\":\"\\\\import [[$:/core/ui/PageMacros]] [all[shadows+tiddlers]tag[$:/tags/Macro]!has[draft.of]]\\n\\\\define saveTiddlerFilter()\\n[is[tiddler]] -[prefix[$:/state/popup/]] -[prefix[$:/temp/]] -[prefix[$:/HistoryList]] -[status[pending]plugin-type[import]] -[[$:/core]] -[[$:/boot/boot.css]] -[type[application/javascript]library[yes]] -[[$:/boot/boot.js]] -[[$:/boot/bootprefix.js]] -[plugin-type[plugin]] -[plugin-type[theme]] +[sort[title]] $(publishFilter)$\\n\\\\end\\n\\\\define saveOffline() no\\n\\\\define coreURL() [[%24%3A%2Fcore%2Ftemplates%2Ftiddlywiki5.js]]\\n\\\\define pluginsURL() [[%24%3A%2Fplugins%2Fcdr%2Fexternal-js%2Ftemplates%2Fplugins-all.js]]\\n{{$:/core/templates/tiddlywiki5-external-js.html}}\"},\"$:/core/save/offline-external-js\":{\"title\":\"$:/core/save/offline-external-js\",\"text\":\"\\\\import [[$:/core/ui/PageMacros]] [all[shadows+tiddlers]tag[$:/tags/Macro]!has[draft.of]] [[$:/plugins/cdr/external-js/filenames]]\\n\\\\define onlyIfExterned() [{$:/config/ExternalJS/EnableExternalPlugins}match[yes]]\\n\\\\define saveTiddlerFilter()\\n[is[tiddler]] -[prefix[$:/state/popup/]] -[prefix[$:/temp/]] -[prefix[$:/HistoryList]] -[status[pending]plugin-type[import]] -[[$:/core]] -[[$:/plugins/tiddlywiki/filesystem]] -[[$:/plugins/tiddlywiki/tiddlyweb]] -[[$:/status/IsLoggedIn]] -[[$:/boot/boot.css]] -[type[application/javascript]library[yes]] -[[$:/boot/boot.js]] -[[$:/boot/bootprefix.js]] +[sort[title]] -[[$:/config/ExternalJS/Exports]] :except[enlist{$:/config/ExternalJS/Exports}filter<onlyIfExterned>] -[<version>compare:version:lt[5.2.0]then[$:/core/save/all]] $(publishFilter)$\\n\\\\end\\n\\\\define saveOffline() yes\\n{{$:/core/templates/tiddlywiki5-external-js.html}}\"},\"$:/plugins/cdr/external-js/templates/tiddlywiki.js/load-tiddler\":{\"title\":\"$:/plugins/cdr/external-js/templates/tiddlywiki.js/load-tiddler\",\"text\":\"_load(window,<$macrocall $name=\\\"jsontiddler\\\" $output=\\\"text/raw\\\"/>);\"},\"$:/core/templates/tiddlywiki5.js\":{\"title\":\"$:/core/templates/tiddlywiki5.js\",\"text\":\"\\\\rules only filteredtranscludeinline transcludeinline codeinline\\n\\n`/*\\n`{{ $:/core/copyright.txt ||$:/core/templates/plain-text-tiddler}}`\\n*/\\n\\n$tw = $tw || Object.create(null);\\n$tw.preloadTiddlers = $tw.preloadTiddlers || [];\\n\\n_load = function(window,tiddler) {\\n\\t\\\"use strict\\\";\\n\\tvar f;\\n\\t$tw.preloadTiddlers.push(tiddler);\\n\\tif(tiddler.library === \\\"yes\\\") {\\n\\t\\tvar module = { exports:{} };\\n\\t\\tvar moduleName = function moduleName(path) {\\n\\t\\t\\tvar word = path.split(\\\"/\\\").pop();\\n\\t\\t\\tword = word.substring(0,word.indexOf(\\\".\\\")) || word;\\n\\t\\t\\treturn word;\\n\\t\\t}\\n\\t\\tf = new Function(\\\"module\\\",tiddler.text);\\n\\t\\tf(module);\\n\\t\\twindow[moduleName(tiddler.title)] = module.exports;\\n\\t} else {\\n\\t\\tf = new Function(\\\"window\\\",tiddler.text);\\n\\t\\tf(window);\\n\\t}\\n}\\n\\n/* ~~ Library modules ~~ */\\n\\n`{{{ [is[system]type[application/javascript]library[yes]] ||$:/plugins/cdr/external-js/templates/tiddlywiki.js/load-tiddler}}}`\\n\\n/* ~~ Boot kernel prologue ~~ */\\n\\n`{{ $:/boot/bootprefix.js ||$:/plugins/cdr/external-js/templates/tiddlywiki.js/load-tiddler}}`\\n\\n/* ~~ Core tiddlers ~~ */\\n\\n`{{$:/core/templates/tiddlywiki5.js/tiddlers}}`\\n\\n/* ~~ Boot kernel ~~ */\\n\\n`{{ $:/boot/boot.js ||$:/plugins/cdr/external-js/templates/tiddlywiki.js/load-tiddler}}`\\n\"},\"$:/core/templates/tiddlywiki5.js/tiddlers\":{\"title\":\"$:/core/templates/tiddlywiki5.js/tiddlers\",\"text\":\"`$tw.preloadTiddlerArray(`<$text text=<<jsontiddlers \\\"[[$:/core]]\\\">>/>`);\\n$tw.preloadTiddler({\\n\\ttitle: \\\"$:/config/SaveWikiButton/Template\\\",\\n\\ttext: \\\"$:/core/save/offline-external-js\\\"\\n});\\n`<$list filter=\\\"[<version>compare:version:lt[5.2.0]]\\\">`$tw.preloadTiddler({\\n\\ttitle: \\\"$:/core/save/all\\\",\\n\\ttext: \\\"{{$:/core/save/offline-external-js}}\\\"\\n});\\n`</$list>\"},\"$:/core/templates/tiddlywiki5-external-js.html\":{\"title\":\"$:/core/templates/tiddlywiki5-external-js.html\",\"text\":\"\\\\whitespace trim\\n<$set name=\\\"saveTiddlerAndShadowsFilter\\\" filter=\\\"[subfilter<saveTiddlerFilter>] [subfilter<saveTiddlerFilter>plugintiddlers[]]\\\">\\n`<!doctype html>\\n`{{$:/core/templates/MOTW.html}}`<html lang=\\\"`<$text text={{{ [{$:/language}get[name]] }}}/>`\\\">\\n<head>\\n<meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html;charset=utf-8\\\" />\\n<!--~~ Raw markup for the top of the head section ~~-->\\n`{{{ [enlist<saveTiddlerAndShadowsFilter>tag[$:/tags/RawMarkupWikified/TopHead]] ||$:/core/templates/raw-static-tiddler}}}`\\n<meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\"/>\\n<meta name=\\\"application-name\\\" content=\\\"TiddlyWiki\\\" />\\n<meta name=\\\"generator\\\" content=\\\"TiddlyWiki\\\" />\\n<meta name=\\\"tiddlywiki-version\\\" content=\\\"`{{$:/core/templates/version}}`\\\" />\\n<meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\" />\\n<meta name=\\\"apple-mobile-web-app-capable\\\" content=\\\"yes\\\" />\\n<meta name=\\\"apple-mobile-web-app-status-bar-style\\\" content=\\\"black-translucent\\\" />\\n<meta name=\\\"mobile-web-app-capable\\\" content=\\\"yes\\\"/>\\n<meta name=\\\"format-detection\\\" content=\\\"telephone=no\\\" />\\n<meta name=\\\"copyright\\\" content=\\\"`{{$:/core/copyright.txt}}`\\\" />\\n<link id=\\\"faviconLink\\\" rel=\\\"shortcut icon\\\" href=\\\"favicon.ico\\\">\\n<title>`{{$:/core/wiki/title}}`</title>\\n<!--~~ This is a Tiddlywiki file. The points of interest in the file are marked with this pattern ~~-->\\n\\n<!--~~ Raw markup ~~-->\\n`{{{ [enlist<saveTiddlerAndShadowsFilter>tag[$:/core/wiki/rawmarkup]] ||$:/core/templates/plain-text-tiddler}}}`\\n`{{{ [enlist<saveTiddlerAndShadowsFilter>tag[$:/tags/RawMarkup]] ||$:/core/templates/plain-text-tiddler}}}`\\n`{{{ [enlist<saveTiddlerAndShadowsFilter>tag[$:/tags/RawMarkupWikified]] ||$:/core/templates/raw-static-tiddler}}}`\\n</head>\\n<body class=\\\"tc-body\\\">\\n<!--~~ Raw markup for the top of the body section ~~-->\\n`{{{ [enlist<saveTiddlerAndShadowsFilter>tag[$:/tags/RawMarkupWikified/TopBody]] ||$:/core/templates/raw-static-tiddler}}}`\\n<!--~~ Static styles ~~-->\\n<div id=\\\"styleArea\\\">\\n`{{$:/boot/boot.css||$:/core/templates/css-tiddler}}`\\n</div>\\n<!--~~ Static content for Google and browsers without JavaScript ~~-->\\n<noscript>\\n<div id=\\\"splashArea\\\">\\n`{{$:/core/templates/static.area}}`\\n</div>\\n</noscript>\\n<!--~~ Ordinary tiddlers ~~-->\\n`{{$:/core/templates/store.area.template.html}}`\\n<!--~~ Raw markup for the bottom of the body section ~~-->\\n`{{{ [enlist<saveTiddlerAndShadowsFilter>tag[$:/tags/RawMarkupWikified/BottomBody]] ||$:/core/templates/raw-static-tiddler}}}`\\n<!--~~ Load external JavaScripts ~~-->`\\n<$list filter=\\\"[{$:/info/node}match[yes]] ~[{$:/config/ExternalJS/EnableExternalPlugins}match[yes]]\\\">\\n`\\n<script src=\\\"`{{{ [subfilter<pluginsURL>] }}}`\\\" onerror=\\\"alert('Error: Cannot load `{{{ [subfilter<pluginsURL>] }}}`');\\\"></script>\\n`\\n</$list>\\n`<script src=\\\"`{{{ [subfilter<coreURL>] }}}`\\\" onerror=\\\"alert('Error: Cannot load `{{{ [subfilter<coreURL>] }}}`');\\\"></script>\\n</body>\\n</html>`\\n</$set>\"},\"$:/plugins/cdr/external-js/tiddlywiki.info\":{\"title\":\"$:/plugins/cdr/external-js/tiddlywiki.info\",\"text\":\"\\\\import [[$:/plugins/cdr/external-js/filenames]]\\n\\n<$set name=coreFilenamePrefix filter=\\\"[subfilter<coreURL>split[/]last[]splitbefore[-]]\\\">\\n<$set name=pluginsFilenamePrefix filter=\\\"[subfilter<pluginsURL>split[/]last[]splitbefore[-]]\\\">\\nHere is a sample tiddlywiki.inifo that provides external-js related build targets.\\n<pre>{\\n  \\\"description\\\":\\n    \\\"external-js client/server edition\\\",\\n  \\\"plugins\\\": [\\n    \\\"tiddlywiki/tiddlyweb\\\",\\n    \\\"tiddlywiki/filesystem\\\",\\n    \\\"tiddlywiki/highlight\\\",\\n    \\\"cdr/external-js\\\"\\n  ],\\n  \\\"themes\\\": [\\n    \\\"tiddlywiki/vanilla\\\",\\n    \\\"tiddlywiki/snowwhite\\\"\\n  ],\\n  \\\"build\\\": {\\n    \\\"listen\\\": [\\n      \\\"&#45;&#45;listen\\\",\\n      \\\"port=8080\\\",\\n      \\\"root-tiddler=<$text text=\\\"\\\"\\\"$:/core/save/all-external-js\\\"\\\"\\\"/>\\\",\\n      \\\"use-browser-cache=yes\\\"],\\n    \\\"index\\\": [\\n      \\\"&#45;&#45;rendertiddler\\\",\\n      \\\"<$text text=\\\"\\\"\\\"$:/core/save/offline-external-js\\\"\\\"\\\"/>\\\",\\n      \\\"index.html\\\",\\n      \\\"text/plain\\\",\\n      \\\"&#45;&#45;render\\\",\\n      \\\"<$text text=\\\"\\\"\\\"$:/core/templates/tiddlywiki5.js\\\"\\\"\\\"/>\\\",\\n      \\\"&#91;&#91;<<coreFilenamePrefix>>]addsuffix&lt;version>addsuffix[.js]]\\\",\\n      \\\"text/plain\\\",\\n      \\\"&#45;&#45;render\\\",\\n      \\\"<$text text=\\\"\\\"\\\"$:/plugins/cdr/external-js/templates/plugins.js\\\"\\\"\\\"/>\\\",\\n      \\\"&#91;&#91;<<pluginsFilenamePrefix>>]addsuffix&lt;version>addsuffix[.js]]\\\",\\n      \\\"text/plain\\\"],\\n    \\\"core\\\": [\\n      \\\"&#45;&#45;render\\\",\\n      \\\"<$text text=\\\"\\\"\\\"$:/core/templates/tiddlywiki5.js\\\"\\\"\\\"/>\\\",\\n      &#91;&#91;<<coreFilenamePrefix>>]addsuffix&lt;version>addsuffix[.js]]\\\",\\n      \\\"text/plain\\\"],\\n    \\\"myplugins\\\": [\\n      \\\"&#45;&#45;render\\\",\\n      \\\"<$text text=\\\"\\\"\\\"$:/plugins/cdr/external-js/templates/plugins.js\\\"\\\"\\\"/>\\\",\\n      \\\"&#91;&#91;<<pluginsFilenamePrefix>>]addsuffix&lt;version>addsuffix[.js]]\\\",\\n      \\\"text/plain\\\"]\\n  }\\n}\\n</pre>\\n</$set></$set>\\n\\n`--build listen`<br/>\\nStart the server with external-js enabled. The server listens on port 8080. Visit http://localhost:8080 in your browser.\\n\\n`--build index`<br/>\\nBuild snapshot and <$text text=\\\"TiddlyWiki\\\"/> core code. The results are saved in the `output` subdirectory of your wiki folder.\\n\\n`--build core`<br/>\\nBuild <$text text=\\\"TiddlyWiki\\\"/> core code only.\\n\\n`--build myplugins`<br/>\\nExport externalized plugins.\"},\"$:/plugins/tiddlywiki/tiddlyweb/syncer-actions/save-snapshot\":{\"title\":\"$:/plugins/tiddlywiki/tiddlyweb/syncer-actions/save-snapshot\",\"tags\":\"$:/tags/SyncerDropdown\",\"text\":\"<$wikify name=\\\"site-title\\\" text={{$:/config/SaveWikiButton/Filename}}>\\n<$button class=\\\"tc-btn-invisible\\\">\\n<$list filter=\\\"[{$:/config/SaveWikiButton/Template}match[$:/core/save/offline-external-js]]\\\" emptyMessage=\\\"\\\"\\\"<$action-sendmessage $message=\\\"tm-download-file\\\" $param={{$:/config/SaveWikiButton/Template}} filename=<<site-title>>/>\\n\\\"\\\"\\\" >\\n<$action-sendmessage $message=\\\"tm-download-external-js-wiki\\\" param=<<site-title>>/>\\n</$list>\\n{{$:/core/images/download-button}} Save snapshot for offline use <$view tiddler=\\\"$:/plugins/tiddlywiki/tiddlyweb/syncer-actions/save-snapshot\\\" field=\\\"remark\\\" format=\\\"plainwikified\\\" mode=\\\"inline\\\"/>\\n</$button>\\n</$wikify>\\n\"},\"$:/config/PageControlButtons/Visibility/$:/plugins/cdr/external-js/ui/download-full-wiki\":{\"title\":\"$:/config/PageControlButtons/Visibility/$:/plugins/cdr/external-js/ui/download-full-wiki\",\"text\":\"hide\"},\"$:/plugins/cdr/external-js/ui/download-full-wiki\":{\"title\":\"$:/plugins/cdr/external-js/ui/download-full-wiki\",\"tags\":\"$:/tags/PageControls\",\"caption\":\"single-file wiki\",\"description\":\"{{$:/plugins/cdr/external-js/ui/download-full-wiki!!hint}}\",\"hint\":\"Download fully standalone wiki\",\"list-before\":\"$:/core/ui/Buttons/save-wiki\",\"text\":\"\\\\whitespace trim\\n\\n<$wikify name=\\\"site-title\\\" text={{$:/config/SaveWikiButton/Filename}}>\\n<$let publishFilter=\\\"\\\"\\\"-[[$:/config/SaveWikiButton/Template]] -[[$:/plugins/tiddlywiki/filesystem]] -[[$:/plugins/tiddlywiki/tiddlyweb]] -[[$:/config/ExternalJS/EnableExternalPlugins]] -[[$:/config/ExternalJS/Prefix/Core]] -[[$:/config/ExternalJS/Prefix/Plugins]] -[[$:/config/PageControlButtons/Visibility/$:/plugins/cdr/external-js/ui/download-full-wiki]]\\\"\\\"\\\">\\n<$button tooltip={{$:/plugins/cdr/external-js/ui/download-full-wiki!!hint}} aria-label={{$:/plugins/cdr/external-js/ui/download-full-wiki!!caption}} class=<<tv-config-toolbar-class>>>\\n<$action-sendmessage $message=\\\"tm-download-file\\\" $param=\\\"$:/core/save/all\\\" publishFilter=<<publishFilter>> filename=<<site-title>>/>\\n<$list filter=\\\"[<tv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/plugins/cdr/external-js/images/file-download}}\\n</$list>\\n<$list filter=\\\"[<tv-config-toolbar-text>match[yes]]\\\"><span class=\\\"tc-btn-text\\\"><$text text={{$:/plugins/cdr/external-js/ui/download-full-wiki!!caption}}/></span>\\n</$list>\\n</$button>\\n</$let>\\n</$wikify>\"},\"$:/plugins/cdr/external-js/ui/download-wiki\":{\"title\":\"$:/plugins/cdr/external-js/ui/download-wiki\",\"footer\":\"<$button message=\\\"tm-close-tiddler\\\">Close</$button>\",\"subtitle\":\"Download Wiki\",\"text\":\"\\\\import $:/plugins/cdr/external-js/filenames\\n\\nYou are downloading a wiki with its <$text text=\\\"TiddllyWiki\\\"/> core externalized. Make sure you have the following supporting file(s). Save them in the same location as the downloaded wiki.\\n\\n{{$:/plugins/cdr/external-js/ui/get-tiddlywiki-core}}\\n\\n<$reveal type=\\\"match\\\" state=\\\"$:/config/ExternalJS/EnableExternalPlugins\\\" text=\\\"yes\\\">\\n{{$:/plugins/cdr/external-js/ui/get-external-plugins}}\\n</$reveal>\\n\\n<div style=\\\"font-size:1.3em;margin-top:1.5em;\\\">\\nDownload <a class=\\\"tc-tiddlylink\\\" href=<<dataURL>> download=<<filename>>>this wiki</a>.\\n</div>\"},\"$:/plugins/cdr/external-js/ui/get-external-plugins\":{\"title\":\"$:/plugins/cdr/external-js/ui/get-external-plugins\",\"text\":\"<$set name=\\\"filename\\\" value={{{[subfilter<pluginsURL>split[/]last[]]}}}>\\n<$button class=\\\"tc-btn-invisible tc-tiddlylink\\\">\\n<$action-sendmessage $message=\\\"tm-download-file\\\" $param=\\\"$:/plugins/cdr/external-js/templates/plugins.js\\\" filename=<<filename>>/>\\n{{$:/core/images/download-button}} <<filename>>\\n</$button>\\n</$set>\"},\"$:/plugins/cdr/external-js/ui/get-tiddlywiki-core\":{\"title\":\"$:/plugins/cdr/external-js/ui/get-tiddlywiki-core\",\"text\":\"<$set name=\\\"filename\\\" value={{{[subfilter<coreURL>split[/]last[]]}}}>\\n<$list filter=\\\"[[$:/boot/boot.js]!is[missing]]\\\">\\n\\t<$button class=\\\"tc-btn-invisible tc-tiddlylink\\\">\\n\\t<$action-sendmessage $message=\\\"tm-download-file\\\" $param=\\\"$:/core/templates/tiddlywiki5.js\\\" filename=<<filename>>/>\\n\\t{{$:/core/images/download-button}} <<filename>>\\n\\t</$button>\\n</$list>\\n<$list filter=\\\"[[$:/boot/boot.js]is[missing]]\\\">\\n\\t<$list filter=\\\"[[$:/plugins/tiddlywiki/tiddlyweb]!is[missing]]\\\">\\n\\t<button class=\\\"tc-btn-invisible\\\">\\n\\t<a class=\\\"tc-tiddlylink\\\" href=\\\"%24%3A%2Fcore%2Ftemplates%2Ftiddlywiki5.js\\\" download=<<filename>>>{{$:/core/images/download-button}} <<filename>></a>\\n\\t</button>\\n\\t</$list>\\n\\t<$list filter=\\\"[[$:/plugins/tiddlywiki/tiddlyweb]is[missing]]\\\">\\n\\t<button class=\\\"tc-btn-invisible\\\">\\n\\t<a class=\\\"tc-tiddlylink\\\" href=<<filename>> download={{{ [subfilter<coreURL>] }}} target=\\\"_blank\\\">{{$:/core/images/download-button}} <<filename>></a>&nbsp;&nbsp;//You may need to right-click the link and save it that way.//\\n\\t</button>\\n\\t</$list>\\n</$list>\\n</$set>\"},\"$:/plugins/cdr/external-js/ui/select-external-plugins\":{\"title\":\"$:/plugins/cdr/external-js/ui/select-external-plugins\",\"text\":\"\\\\import [[$:/plugins/cdr/external-js/filenames]]\\n\\n\\\\define addToExport()\\n<$action-listops $tiddler=\\\"$:/temp/external-js/exports\\\" $field=\\\"list\\\" $subfilter=\\\"\\\"\\\"[[$(currentTiddler)$]]\\\"\\\"\\\" />\\n<$action-setfield $tiddler=\\\"$:/temp/external-js/exports\\\" $field=\\\"original\\\" $value=\\\"no\\\"/>\\n\\\\end\\n\\n\\\\define removeFromExport()\\n<$action-listops $tiddler=\\\"$:/temp/external-js/exports\\\" $field=\\\"list\\\" $subfilter=\\\"\\\"\\\"-[[$(currentTiddler)$]]\\\"\\\"\\\" />\\n<$action-setfield $tiddler=\\\"$:/temp/external-js/exports\\\" $field=\\\"original\\\" $value=\\\"no\\\"/>\\n\\\\end\\n\\n\\\\define displayPluginName()\\n<$text text={{{ [<currentTiddler>get[name]] ~[<currentTiddler>split[/]last[]] }}}/>\\n\\\\end\\n\\n<div>\\n<p>\\n<$button>\\n<$list filter=\\\"\\\"\\\"[!has[draft.of]plugin-type[plugin]] -[[$:/core]] -[[$:/plugins/tiddlywiki/tiddlyweb]] -[[$:/plugins/tiddlywiki/filesystem]] [!has[draft.of]plugin-type[theme]]\\\"\\\"\\\">\\n<$action-setfield $tiddler=\\\"$:/temp/external-js/exports\\\" $index=<<currentTiddler>> $value=\\\"yes\\\"/>\\n<$action-listops $tiddler=\\\"$:/temp/external-js/exports\\\" $field=\\\"list\\\" $subfilter=\\\"\\\"\\\"[<currentTiddler>]\\\"\\\"\\\" />\\n</$list>\\n<$action-setfield $tiddler=\\\"$:/temp/external-js/exports\\\" $field=\\\"original\\\" $value=\\\"no\\\"/>\\nSelect All\\n</$button>\\n</p>\\n<$list filter=\\\"\\\"\\\"[!has[draft.of]plugin-type[plugin]sort[name]] -[[$:/core]] -[[$:/plugins/tiddlywiki/tiddlyweb]] -[[$:/plugins/tiddlywiki/filesystem]]\\\"\\\"\\\">\\n<$checkbox tiddler=\\\"$:/temp/external-js/exports\\\" index=<<currentTiddler>> checked=\\\"yes\\\" unchecked=\\\"no\\\" default=\\\"no\\\" checkactions=<<addToExport>> uncheckactions=<<removeFromExport>> > <<displayPluginName>></$checkbox><br/>\\n</$list>\\n<$list filter=\\\"\\\"\\\"[!has[draft.of]plugin-type[theme]sort[name]]\\\"\\\"\\\">\\n<$checkbox tiddler=\\\"$:/temp/external-js/exports\\\" index=<<currentTiddler>> checked=\\\"yes\\\" unchecked=\\\"no\\\" default=\\\"no\\\" checkactions=<<addToExport>> uncheckactions=<<removeFromExport>> > <<displayPluginName>> (theme)</$checkbox><br/>\\n</$list>\\n<p>\\n<$button class=\\\"tc-btn-download\\\" disabled={{{[{$:/temp/external-js/exports!!original}match[no]] ~[[yes]]}}}>\\n<$action-listops $tiddler=\\\"$:/config/ExternalJS/Exports\\\" $field=\\\"text\\\" $filter=\\\"\\\"\\\"[enlist{$:/temp/external-js/exports!!list}!is[missing]]\\\"\\\"\\\"/>\\n<$action-setfield $tiddler=\\\"$:/temp/external-js/exports\\\" $field=\\\"original\\\" $value=\\\"yes\\\"/>\\nConfirm Changes\\n</$button>\\n</p>\\n<p>Make sure the following list agrees with your selections above. (Have you forgotten to press \\\"Confirm Changes\\\"?)</p>\\n<p>\\nModules to be removed from your .html file:\\n<ul>\\n<$list filter=\\\"[enlist{$:/config/ExternalJS/Exports}plugin-type[plugin]sort[name]] [enlist{$:/config/ExternalJS/Exports}plugin-type[theme]sort[name]]\\\" emptyMessage=\\\"<li>(none)</li>\\\">\\n<li><<displayPluginName>></li>\\n</$list>\\n</ul>\\n</p>\\n<p>Download your plugins library. You need to re-download whenever the content of the library has changed.</p>\\n<p>\\n{{$:/plugins/cdr/external-js/ui/get-external-plugins}}\\n</p>\\nSave this file in the same location as your wiki.\\n</div>\"},\"$:/plugins/cdr/external-js/ui/setup-external-plugins\":{\"title\":\"$:/plugins/cdr/external-js/ui/setup-external-plugins\",\"text\":\"\\\\define clearExportList()\\n<$action-setfield $tiddler=\\\"$:/config/ExternalJS/Exports\\\" $field=\\\"text\\\" $value=\\\"\\\"/>\\n<$list filter=\\\"[[$:/temp/external-js/exports]indexes[]]\\\">\\n<$action-setfield $tiddler=\\\"$:/temp/external-js/exports\\\" $index=<<currentTiddler>> $value=\\\"no\\\"/>\\n</$list>\\n\\\\end\\n\\n\\\\define restoreExportList()\\n\\n<$checkbox tiddler=\\\"$:/config/ExternalJS/EnableExternalPlugins\\\" field=\\\"text\\\" checked=\\\"yes\\\" unchecked=\\\"no\\\" default=\\\"no\\\" uncheckactions=<<clearExportList>> checkactions=<<restoreExportList>> >\\nExternalize plugins and themes\\n</$checkbox>\\n<p>\\n<$reveal type=\\\"match\\\" state=\\\"$:/config/ExternalJS/EnableExternalPlugins\\\" text=\\\"yes\\\">\\nSelect modules you'd like to load externally:\\n\\n{{$:/plugins/cdr/external-js/ui/select-external-plugins}}\\n</$reveal>\\n</p>\"},\"$:/plugins/cdr/external-js/ui/setup-savewiki\":{\"title\":\"$:/plugins/cdr/external-js/ui/setup-savewiki\",\"text\":\"\\\\whitespace trim\\n\\n<$button>\\n<$action-setfield $tiddler=\\\"$:/config/SaveWikiButton/Template\\\" text=\\\"$:/core/save/offline-external-js\\\"/>\\nexternal-js\\n</$button>\"},\"$:/plugins/cdr/external-js/usage\":{\"title\":\"$:/plugins/cdr/external-js/usage\",\"text\":\"\\\\import [[$:/plugins/cdr/external-js/filenames]]\\n\\n! <a id=\\\"#use-external-js\\\">Using external-js for standalone wikis</a>\\n\\nTo move <$text text=\\\"TiddlyWiki\\\"/> core and any plugins out of your standalone wiki:\\n\\n<ol>\\n<li style=\\\"margin-bottom:0.5em\\\">Make a backup copy of your wiki in case something goes wrong.</li>\\n\\n<li>If you don't have <code><$text text={{{[subfilter<coreURL>split[/]last[]]}}}/></code>, click on the following link to get a copy. Save it in the same location as your .html file. <p>{{$:/plugins/cdr/external-js/ui/get-tiddlywiki-core}}</p></li>\\n\\n<li>{{$:/plugins/cdr/external-js/ui/setup-external-plugins}}</li>\\n\\n<li>\\nPress {{$:/plugins/cdr/external-js/ui/setup-savewiki}} to switch to the external-js saving template.\\n<p>Verify the displayed value of $:/config/SaveWikiButton/Template is<br>`$:/core/save/offline-external-js`:\\n<pre style=\\\"margin-top:0.5px\\\"><$view tiddler=\\\"$:/config/SaveWikiButton/Template\\\" format=\\\"text\\\"/></pre></p>\\n</li>\\n\\n<li>Save your wiki.</li>\\n</ol>\\n\\n! Converting back to full wiki\\n\\nClick the following button to download the fully standalone version of this wiki:\\n<ul style=\\\"list-style:none\\\">\\n<li>\\n<$let tid=\\\"$:/plugins/cdr/external-js/ui/download-full-wiki\\\" tv-config-toolbar-icons=\\\"yes\\\" tv-config-toolbar-text=\\\"yes\\\" tv-config-toolbar-class=\\\"\\\">\\n<div class={{{ [<tid>encodeuricomponent[]addprefix[tc-btn-]] }}}>\\n<$transclude tiddler=<<tid>>/>&nbsp;&nbsp;<i><$transclude tiddler=<<tid>> field=\\\"description\\\"/></i>\\n</div>\\n</$let>\\n</li></ul>\\n\\nYou can also find this button on the ''Tools'' tab in the sidebar.\\n\\n! Upgrading your external-js wiki\\n\\n<ol>\\n<li>Convert your wiki back to the fully standalone version first (see above).</li>\\n<li>Then, proceed with the [[standalone wiki upgrade|https://tiddlywiki.com/#Upgrading]] process.</li>\\n<li>Repeat the <a class=\\\"tc-tiddlylink\\\" href=\\\"##use-external-js\\\"><strong>external-js conversion</strong></a> steps.</li>\\n<li>You can upgrade any remaining wikis that load the same libraries by manually editing all instances of the version string in the HTML files&mdash;provided that these wikis do not internally store any //official// plugins and themes. At the minimum, replace version numbers in the `<meta name=\\\"tiddlywiki-version\\\">` tag and in the `<script>` tags at the end of the file.</li>\\n</ol>\\n\\n! <$text text=\\\"TiddlyWiki\\\"/> on Node.js\\n\\nIf you are running <$text text=\\\"TiddlyWiki\\\"/> on Node.js and the content of the tiddler $:/config/SaveWikiButton/Template is set to `$:/core/save/offline-external-js`, then the snapshots you save for offline use will utilize the external-js template.\"}}}"
  },
  {
    "author": "Maurycy Zarzycki",
    "core-version": ">=5.2.3",
    "dependents": "",
    "description": "Enable easy tiddler name completion in various contexts",
    "list": "readme license history",
    "name": "Auto Complete",
    "plugin-type": "plugin",
    "source": "https://github.com/EvidentlyCube/TW5-AutoComplete",
    "title": "$:/plugins/EvidentlyCube/AutoComplete",
    "version": "1.0.18",
    "type": "application/json",
    "text": "{\"tiddlers\":{\"$:/config/ShortcutInfo/EC-AutoComplete\":{\"title\":\"$:/config/ShortcutInfo/EC-AutoComplete\",\"text\":\"Triggers completion of Auto Complete plugin\\n\"},\"$:/config/shortcuts/EC-AutoComplete\":{\"title\":\"$:/config/shortcuts/EC-AutoComplete\",\"text\":\"ctrl+space\"},\"$:/plugins/EvidentlyCube/AutoComplete/Config\":{\"title\":\"$:/plugins/EvidentlyCube/AutoComplete/Config\",\"rows\":\"8\"},\"$:/plugins/EvidentlyCube/AutoComplete/Settings\":{\"title\":\"$:/plugins/EvidentlyCube/AutoComplete/Settings\",\"caption\":\"Auto Complete\",\"tags\":\"$:/tags/EvidentlyCube/SettingsTab\",\"text\":\"\\\\define action-new-trigger()\\n<$action-createtiddler\\n\\t$basetitle={{{ [all[shadows+tiddlers]tag[$:/tags/EC/AutoComplete/Trigger]!is[draft]count[]add[1]addprefix[$:/EvidentlyCube/Trigger/]] }}}\\n\\ttags=\\\"$:/tags/EC/AutoComplete/Trigger\\\"\\n\\tcaption={{{ [all[shadows+tiddlers]tag[$:/tags/EC/AutoComplete/Trigger]!is[draft]count[]add[1]addprefix[Unnamed trigger ]] }}}\\n\\ttrigger=\\\"[[\\\"\\n\\tfilter=\\\"[all[tiddlers]!is[system]!is[draft]search:title<query>]\\\"\\n\\tdisplay-filter=\\\"[<currentTiddler>]\\\"\\n\\ttemplate=\\\"[[$option$]]$caret$\\\"\\n\\tauto-trigger-textarea=\\\"1\\\"\\n>\\n\\t<$action-navigate $to=<<createTiddler-title>> scroll=\\\"yes\\\"/>\\n</$action-createtiddler>\\n\\\\end\\n\\n\\\\define action-open-keyboard-shortcuts()\\n<$action-setfield $tiddler=\\\"$:/state/tab-1749438307\\\" text=\\\"$:/core/ui/ControlPanel/KeyboardShortcuts\\\" />\\n\\\\end\\n\\n\\\\define comp-open-keyboard-shortcuts()\\n<$button\\n\\ttag=\\\"a\\\"\\n\\tclass=\\\"tc-tiddlylink tc-tiddlylink-resolves ec_ac-pointer\\\"\\n\\tactions=<<action-open-keyboard-shortcuts>>\\n>Keyboard Shortcuts</$button>\\n\\n\\\\end\\n\\nConfiguration for the [[Auto Complete|$:/plugins/EvidentlyCube/AutoComplete]] plugin.\\n\\n! Registered Triggers\\n\\n<ul>\\n\\t<$list filter=\\\"[all[shadows+tiddlers]tag[$:/tags/EC/AutoComplete/Trigger]!is[draft]sortan[title]sortan[caption]]\\\">\\n\\t\\t<li><$link to=<<currentTiddler>>><$view field=\\\"caption\\\"><$view field=\\\"title\\\"/></$view></$link> (Trigger <code>{{!!trigger}}</code>)</li>\\n\\t</$list>\\n\\t<li><$button actions=<<action-new-trigger>>>Create a new trigger</$button></li>\\n</ul>\\n\\n! Config\\n\\n<table>\\n<colgroup>\\n\\t<col width=\\\"60%\\\"/>\\n</colgroup>\\n<tbody>\\n<tr>\\n\\t<td align=\\\"center\\\">\\n\\t\\t''Displayed results''<br/>\\n\\t\\t//Maximum number of results to display in the auto complete window, must be between 1 and 99//\\n\\t</td>\\n\\t<td>\\n\\t\\t<$edit-text tiddler=\\\"$:/plugins/EvidentlyCube/AutoComplete/Config\\\" field=\\\"rows\\\" default=\\\"8\\\"/>\\n\\t\\t<$list filter=\\\"\\\"\\\"\\n\\t\\t\\t[{$:/plugins/EvidentlyCube/AutoComplete/Config!!rows}floor[]compare:number:lt[1]]\\n\\t\\t\\t[{$:/plugins/EvidentlyCube/AutoComplete/Config!!rows}floor[]compare:number:gt[99]]\\n\\t\\t\\t+[count[]!match[0]]\\n\\t\\t\\\"\\\"\\\">\\n\\t\\t\\t<div class=\\\"tc-error\\\">Must be a number between 1 and 99</div>\\n\\t\\t</$list>\\n\\t</td>\\n</tr>\\n<tr>\\n\\t<td align=\\\"center\\\">\\n\\t\\t''Keyboard Shortcut''<br/>\\n\\t\\t//Use this keyboard shortcut right in front of a trigger to manually open the completion window; can be changed in <<comp-open-keyboard-shortcuts>>tab//\\n\\t</td>\\n\\t<td>\\n\\t<$list filter=\\\"$:/config/shortcuts/ $:/config/shortcuts-mac/ $:/config/shortcuts-not-mac/ $:/config/shortcuts-linux/ $:/config/shortcuts-not-linux/ $:/config/shortcuts-windows/ $:/config/shortcuts-not-windows/\\\">\\n\\t\\t<$macrocall $name=\\\"displayshortcuts\\\" $output=\\\"text/html\\\" shortcuts={{{ [<currentTiddler>addsuffix[EC-AutoComplete]get[text]] }}} prefix=\\\"<kbd>\\\" separator=\\\"</kbd> <kbd>\\\" suffix=\\\"</kbd>\\\"/>\\n\\t</$list>\\n\\t</td>\\n</tr>\\n</tbody>\\n</table>\\n\\n\"},\"$:/plugins/EvidentlyCube/AutoComplete/Style\":{\"title\":\"$:/plugins/EvidentlyCube/AutoComplete/Style\",\"tags\":\"$:/tags/Stylesheet\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\".ec_ac-muted {\\n\\tcolor: <<colour foreground>>;\\n\\topacity: 0.75;\\n\\tfont-style: italic;\\n}\\n\\n.ec_ac-completion {\\n\\tposition: absolute;\\n\\tbackground: <<colour modal-background>>;\\n\\tborder: 2px solid <<colour modal-border>>;\\n\\tpadding: 2em 1em;\\n\\tbox-shadow: 2px 2px 10px rgba(0, 0, 0, 0.5);\\n\\tz-index: 100000;\\n\\tmin-width: 250px;\\n}\\n\\n.ec_ac-dots-top {\\n\\tpointer-events: none;\\n\\tuser-select: none;\\n\\tposition: absolute;\\n\\tfont-size: 2em;\\n\\ttext-align: center;\\n\\ttop: 0;\\n\\tleft: 0;\\n\\tright: 0;\\n}\\n.ec_ac-dots-bottom {\\n\\tpointer-events: none;\\n\\tuser-select: none;\\n\\tposition: absolute;\\n\\tfont-size: 2em;\\n\\ttext-align: center;\\n\\tbottom: 0.5em;\\n\\tleft: 0;\\n\\tright: 0;\\n}\\n.ec_ac-completion li {\\n\\tlist-style: none;\\n}\\n.ec_ac-completion .label {\\n\\tcolor: <<colour muted-foreground>>;\\n}\\n.ec_ac-completion .ec_ac-link {\\n\\tcolor: <<colour tiddler-link-foreground>>;\\n\\tcursor: pointer;\\n}\\n.ec_ac-completion .ec_ac-link.selected,\\n.ec_ac-completion .ec_ac-link:hover\\n{\\n\\tbackground-color: <<colour tiddler-link-foreground>>;\\n\\tcolor: <<colour background>>;\\n}\\n\\n.ec_ac-options table {\\n\\twidth: 100%;\\n}\\n\\n.ec_ac-options p {\\n\\tmargin-top: 0;\\n\\tmargin-bottom: 0;\\n}\\n.ec_ac-options input:not([type=\\\"checkbox\\\"]),\\n.ec_ac-options textarea {\\n\\tdisplay: block;\\n\\twidth: 100%;\\n\\tmargin-top: 7px;\\n\\tmargin-bottom: 7px;\\n}\\n\\n.ec_ac-options .tc-error a {\\n\\tcolor: white;\\n\\ttext-decoration: underline;\\n}\\n\\n.ec_ac-pointer {\\n\\tcursor: pointer;\\n}\"},\"$:/plugins/EvidentlyCube/AutoComplete/completion-api.js\":{\"title\":\"$:/plugins/EvidentlyCube/AutoComplete/completion-api.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/EvidentlyCube/AutoComplete/completion-api.js\\ntype: application/javascript\\nmodule-type: library\\n\\nAPI for the modal\\n\\n\\\\*/\\n(function () {\\n\\n\\tconst DATA_TIDDLER_NAME = \\\"$:/temp/AutoComplete/completion-data\\\";\\n\\n\\t/*jslint node: true, browser: true */\\n\\t/*global $tw: false */\\n\\t\\\"use strict\\\";\\n\\n\\tvar OPTIONS_TIDDLERS = [\\n\\t\\t'$:/config/shortcuts/EC-AutoComplete',\\n\\t\\t'$:/config/shortcuts-linux/EC-AutoComplete',\\n\\t\\t'$:/config/shortcuts-not-linux/EC-AutoComplete',\\n\\t\\t'$:/config/shortcuts-mac/EC-AutoComplete',\\n\\t\\t'$:/config/shortcuts-not-mac/EC-AutoComplete',\\n\\t\\t'$:/config/shortcuts-windows/EC-AutoComplete',\\n\\t\\t'$:/config/shortcuts-not-windows/EC-AutoComplete',\\n\\t];\\n\\n\\tfunction EC_AutoComplete() {\\n\\t\\tthis.isActive = false;\\n\\t\\tthis.activeState = {\\n\\t\\t\\ttrigger: null,\\n\\t\\t\\tlastQuery: null,\\n\\t\\t\\tselectedResult: -1,\\n\\t\\t\\tresults: [],\\n\\t\\t\\toptions: {}\\n\\t\\t}\\n\\t\\tthis.options = {\\n\\t\\t\\ttriggers: [],\\n\\t\\t\\ttriggerTiddlers: []\\n\\t\\t}\\n\\n\\t\\tthis._loadOptions();\\n\\t\\tthis._updateTriggerList(this._getTriggerTiddlerList());\\n\\n\\t\\tdocument.addEventListener('keydown', this._handleGlobalKeydownCapture.bind(this), true);\\n\\t\\t$tw.wiki.addEventListener(\\\"change\\\", this._handleChange.bind(this));\\n\\t};\\n\\n\\tEC_AutoComplete.prototype._handleGlobalKeydownCapture = function (event) {\\n\\t\\tif (this.isActive && event.key === \\\"Escape\\\") {\\n\\t\\t\\tthis.finishCompletion();\\n\\t\\t\\tevent.stopImmediatePropagation();\\n\\t\\t\\tevent.preventDefault();\\n\\t\\t}\\n\\t};\\n\\n\\tEC_AutoComplete.prototype.getMatchingTrigger = function (lastCharacter, inputType, getFragmentCallback) {\\n\\t\\tvar ignoreType = lastCharacter === null || lastCharacter === \\\"\\\";\\n\\n\\t\\tfor (let i = 0; i < this.options.triggers.length; i++) {\\n\\t\\t\\tvar triggerData = this.options.triggers[i];\\n\\n\\t\\t\\tif (!ignoreType && !triggerData.autoTriggerInput && inputType === 'INPUT') {\\n\\t\\t\\t\\tcontinue;\\n\\n\\t\\t\\t} else if (!ignoreType && !triggerData.autoTriggerTextArea && inputType === 'TEXTAREA') {\\n\\t\\t\\t\\tcontinue;\\n\\n\\t\\t\\t} else if (lastCharacter && triggerData.triggerLastCharacter !== lastCharacter) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tconst fragment = getFragmentCallback(triggerData.trigger.length);\\n\\t\\t\\tif (fragment !== triggerData.trigger) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn triggerData;\\n\\t\\t}\\n\\n\\t\\treturn null;\\n\\t}\\n\\n\\tEC_AutoComplete.prototype.startCompletion = function (trigger, position, options) {\\n\\t\\tthis.isActive = true;\\n\\t\\tthis.activeState.trigger = trigger;\\n\\t\\tthis.activeState.lastQuery = null;\\n\\t\\tthis.activeState.selectedResult = 0;\\n\\t\\tthis.activeState.results = [];\\n\\t\\tthis.activeState.options = options || {};\\n\\n\\t\\tthis.updateQuery(\\\"\\\");\\n\\n\\t\\tconst newStyle = `left: ${position.left.toFixed(4)}px; top: ${position.top.toFixed(4)}px`;\\n\\n\\t\\t$tw.wiki.setText(DATA_TIDDLER_NAME, 'show', null, \\\"1\\\");\\n\\t\\t$tw.wiki.setText(DATA_TIDDLER_NAME, 'style', null, newStyle);\\n\\t\\t$tw.wiki.setText(DATA_TIDDLER_NAME, 'display-filter', null, trigger.displayFilter);\\n\\t\\t$tw.wiki.setText(DATA_TIDDLER_NAME, 'edited-tiddler', null, options.editedTiddler || '');\\n\\t\\tif (typeof options.windowID !== \\\"undefined\\\") {\\n\\t\\t\\t$tw.wiki.setText(DATA_TIDDLER_NAME, 'show-window', null, options.windowID);\\n\\t\\t} else {\\n\\t\\t\\t$tw.wiki.setText(DATA_TIDDLER_NAME, 'show-window', null, \\\"-1\\\");\\n\\t\\t}\\n\\t};\\n\\n\\tEC_AutoComplete.prototype.finishCompletion = function () {\\n\\t\\tif (this.activeState.options.onFinish) {\\n\\t\\t\\tthis.activeState.options.onFinish();\\n\\t\\t}\\n\\n\\t\\tthis.isActive = false;\\n\\t\\tthis.activeState.trigger = null;\\n\\t\\tthis.activeState.lastQuery = null;\\n\\t\\tthis.activeState.selectedResult = -1;\\n\\t\\tthis.activeState.results = [];\\n\\n\\t\\t$tw.wiki.setText(DATA_TIDDLER_NAME, 'show', null, \\\"0\\\");\\n\\t};\\n\\n\\tEC_AutoComplete.prototype.updateQuery = function (query) {\\n\\t\\tif (query === this.activeState.lastQuery) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tthis.activeState.lastQuery = query;\\n\\t\\tthis.activeState.selectedResult = 0;\\n\\n\\t\\tconst results = $tw.wiki.filterTiddlers(this.activeState.trigger.filter, getVariableFauxWidget({\\n\\t\\t\\teditedTiddler: this.activeState.options.editedTiddler || '',\\n\\t\\t\\tquery\\n\\t\\t}));\\n\\n\\t\\tthis.activeState.results = results;\\n\\t\\t$tw.wiki.setText(DATA_TIDDLER_NAME, 'list', null, this.activeState.results);\\n\\t\\t$tw.wiki.setText(DATA_TIDDLER_NAME, 'index', null, 1);\\n\\t};\\n\\n\\tEC_AutoComplete.prototype.changeSelection = function (delta) {\\n\\t\\tthis.activeState.selectedResult += delta\\n\\n\\t\\tif (this.activeState.selectedResult < 0) {\\n\\t\\t\\tthis.activeState.selectedResult = this.activeState.results.length - 1;\\n\\t\\t} else if (this.activeState.selectedResult >= this.activeState.results.length) {\\n\\t\\t\\tthis.activeState.selectedResult = 0;\\n\\t\\t}\\n\\n\\t\\t$tw.wiki.setText(DATA_TIDDLER_NAME, 'index', null, this.activeState.selectedResult + 1);\\n\\t};\\n\\n\\tEC_AutoComplete.prototype.getCompletedTemplate = function (option) {\\n\\t\\tconst withReplacedOption = this.activeState.trigger.insertTemplate.replace(/\\\\$option\\\\$/g, option);\\n\\t\\tconst caretTokenIndex = withReplacedOption.indexOf(\\\"$caret$\\\");\\n\\t\\tconst withRemovedCaret = withReplacedOption.replace(/\\\\$caret\\\\$/g, '');\\n\\t\\treturn {\\n\\t\\t\\ttext: withRemovedCaret,\\n\\t\\t\\tcaretIndex: caretTokenIndex !== -1\\n\\t\\t\\t\\t? caretTokenIndex\\n\\t\\t\\t\\t: withRemovedCaret.length\\n\\t\\t};\\n\\t}\\n\\n\\tEC_AutoComplete.prototype.getSelected = function () {\\n\\t\\tconst selectedResult = this.activeState.results[this.activeState.selectedResult] || \\\"\\\";\\n\\n\\t\\treturn selectedResult\\n\\t\\t\\t? $tw.wiki.filterTiddlers(this.activeState.trigger.transformFilter,getVariableFauxWidget({ currentTiddler: selectedResult}))\\n\\t\\t\\t: \\\"\\\";\\n\\t};\\n\\n\\tEC_AutoComplete.prototype.setSelectionByValue = function(value) {\\n\\t\\tconst index = this.activeState.results.indexOf(value);\\n\\n\\t\\tif (index !== -1) {\\n\\t\\t\\tthis.activeState.selectedResult = index;\\n\\t\\t}\\n\\t}\\n\\n\\tEC_AutoComplete.prototype.getClicked = function (event) {\\n\\t\\tif (event.target && event.target.classList.contains('ec_ac-link')) {\\n\\t\\t\\treturn event.target.innerText;\\n\\t\\t}\\n\\n\\t\\treturn null;\\n\\t};\\n\\n\\tEC_AutoComplete.prototype.isManualTrigger = function (event) {\\n\\t\\treturn $tw.keyboardManager.checkKeyDescriptors(event, this.options.manualTriggerKeyInfo);\\n\\t}\\n\\n\\tEC_AutoComplete.prototype._handleChange = function (changedTiddlers) {\\n\\t\\tif ($tw.utils.hopArray(changedTiddlers, OPTIONS_TIDDLERS)) {\\n\\t\\t\\tthis._loadOptions();\\n\\t\\t}\\n\\n\\t\\tconst newTriggerTiddlerList = this._getTriggerTiddlerList();\\n\\n\\t\\tif (\\n\\t\\t\\t$tw.utils.hopArray(changedTiddlers, newTriggerTiddlerList)\\n\\t\\t\\t|| $tw.utils.hopArray(changedTiddlers, this.options.triggerTiddlers)\\n\\t\\t) {\\n\\t\\t\\tthis._updateTriggerList(newTriggerTiddlerList);\\n\\t\\t}\\n\\t};\\n\\n\\tEC_AutoComplete.prototype._loadOptions = function () {\\n\\t\\tthis.options.manualTriggerKeyInfo = $tw.keyboardManager.parseKeyDescriptors('((EC-AutoComplete))', { wiki: this.wiki });\\n\\t}\\n\\n\\tEC_AutoComplete.prototype._getTriggerTiddlerList = function () {\\n\\t\\treturn $tw.wiki.getTiddlersWithTag(\\\"$:/tags/EC/AutoComplete/Trigger\\\");\\n\\t};\\n\\n\\tEC_AutoComplete.prototype._updateTriggerList = function (tiddlerList) {\\n\\t\\tthis.options.triggers = [];\\n\\t\\tthis.options.triggerTiddlers = tiddlerList;\\n\\n\\t\\tfor (var i = 0; i < tiddlerList.length; i++) {\\n\\t\\t\\tvar title = tiddlerList[i],\\n\\t\\t\\t\\ttiddlerFields = $tw.wiki.getTiddler(title).fields,\\n\\t\\t\\t\\ttrigger = tiddlerFields.trigger,\\n\\t\\t\\t\\tfilter = tiddlerFields.filter,\\n\\t\\t\\t\\tinsertTemplate = tiddlerFields.template;\\n\\n\\t\\t\\tif (!filter || !insertTemplate || !trigger) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tthis.options.triggers.push({\\n\\t\\t\\t\\tfilter: tiddlerFields.filter,\\n\\t\\t\\t\\tdisplayFilter: tiddlerFields['display-filter'],\\n\\t\\t\\t\\ttransformFilter: tiddlerFields['transform-filter'] || \\\"[<currentTiddler>]\\\",\\n\\t\\t\\t\\ttrigger: trigger,\\n\\t\\t\\t\\ttriggerLastCharacter: trigger.charAt(trigger.length - 1),\\n\\t\\t\\t\\tinsertTemplate: insertTemplate,\\n\\t\\t\\t\\tautoTriggerInput: String(tiddlerFields['auto-trigger-input']) === '1',\\n\\t\\t\\t\\tautoTriggerTextArea: String(tiddlerFields['auto-trigger-textarea']) === '1',\\n\\t\\t\\t});\\n\\t\\t}\\n\\t};\\n\\n\\tfunction getVariableFauxWidget(keyValues) {\\n\\t\\tif ($tw.rootWidget.makeFakeWidgetWithVariables) {\\n\\t\\t\\treturn $tw.rootWidget.makeFakeWidgetWithVariables(keyValues);\\n\\t\\t}\\n\\n\\t\\t// Backwards compatibility for pre 5.3.0 versions\\n\\t\\treturn {\\n\\t\\t\\tgetVariable: function (name) {\\n\\t\\t\\t\\tif (typeof keyValues[name] !== 'undefined') {\\n\\t\\t\\t\\t\\treturn keyValues[name];\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\treturn \\\"\\\";\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\texports.EC_AutoComplete = EC_AutoComplete;\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"library\"},\"$:/plugins/EvidentlyCube/AutoComplete/completion-window.js\":{\"title\":\"$:/plugins/EvidentlyCube/AutoComplete/completion-window.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/EvidentlyCube/AutoComplete/completion-window.js\\ntype: application/javascript\\nmodule-type: startup\\n\\nAdds support for auto complete in tiddlers opened in a new window\\n\\\\*/\\n\\n(function () {\\n\\n\\t/*jslint node: false, browser: true */\\n\\t/*global $tw: false */\\n\\t\\\"use strict\\\";\\n\\n\\t// Export name and synchronous status\\n\\texports.name = \\\"evidentlycube-tiddlercompletion-window\\\";\\n\\texports.platforms = [\\\"browser\\\"];\\n\\texports.after = [\\\"windows\\\"];\\n\\texports.synchronous = true;\\n\\n\\texports.startup = function () {\\n\\t\\tconst innerListener = $tw.rootWidget.eventListeners['tm-open-window'];\\n\\t\\t$tw.rootWidget.addEventListener(\\\"tm-open-window\\\", function (event) {\\n\\t\\t\\tinnerListener(event);\\n\\n\\t\\t\\tvar title = event.param || event.tiddlerTitle;\\n\\t\\t\\tvar paramObject = event.paramObject || {};\\n\\t\\t\\tvar windowID = paramObject.windowID || title;\\n\\n\\t\\t\\tconst window = $tw.windows[windowID];\\n\\t\\t\\tconst parser = $tw.wiki.parseTiddler(\\\"$:/plugins/EvidentlyCube/AutoComplete/window\\\");\\n\\t\\t\\tconst widgetNode = $tw.wiki.makeWidget(parser, {\\n\\t\\t\\t\\tdocument: window.document,\\n\\t\\t\\t\\tparentWidget: $tw.rootWidget,\\n\\t\\t\\t\\tvariables: {\\n\\t\\t\\t\\t\\t'tv-window-id': windowID\\n\\t\\t\\t\\t }\\n\\t\\t\\t});\\n\\t\\t\\tconst refreshHandler = function (changes) {\\n\\t\\t\\t\\twidgetNode.refresh(changes);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Used to prevent auto complete opening in all windows\\n\\t\\t\\twindow.document._ecAcWindowID = windowID;\\n\\t\\t\\t$tw.wiki.addEventListener(\\\"change\\\", refreshHandler);\\n\\t\\t\\twindow.addEventListener(\\\"beforeunload\\\", function (event) {\\n\\t\\t\\t\\t$tw.wiki.removeEventListener(\\\"change\\\", refreshHandler);\\n\\t\\t\\t}, false);\\n\\n\\t\\t\\twidgetNode.render(window.document.body, window.document.body.firstChild);\\n\\t\\t});\\n\\t};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"startup\"},\"$:/plugins/EvidentlyCube/AutoComplete/completion.js\":{\"title\":\"$:/plugins/EvidentlyCube/AutoComplete/completion.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/EvidentlyCube/AutoComplete/completion.js\\ntype: application/javascript\\nmodule-type: startup\\n\\nHooks the module\\n\\\\*/\\n\\n(function () {\\n\\n\\t/*jslint node: false, browser: true */\\n\\t/*global $tw: false */\\n\\t\\\"use strict\\\";\\n\\n\\t// Export name and synchronous status\\n\\texports.name = \\\"evidentlycube-tiddlercompletion\\\";\\n\\texports.platforms = [\\\"browser\\\"];\\n\\texports.after = [\\\"startup\\\"];\\n\\texports.before = [\\\"render\\\"];\\n\\texports.synchronous = true;\\n\\n\\texports.startup = function () {\\n\\t\\tif ($tw.node) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tconst monkeypatch = {\\n\\t\\t\\tsequence: function(originalMethod, newMethod) {\\n\\t\\t\\t\\treturn function() {\\n\\t\\t\\t\\t\\tconst result = originalMethod.apply(this, arguments);\\n\\n\\t\\t\\t\\t\\tnewMethod.apply(this, arguments);\\n\\n\\t\\t\\t\\t\\treturn result;\\n\\t\\t\\t\\t}\\n\\t\\t\\t},\\n\\t\\t\\tpreventable: function(originalMethod, newMethod) {\\n\\t\\t\\t\\treturn function() {\\n\\t\\t\\t\\t\\tif (newMethod.apply(this, arguments) !== false) {\\n\\t\\t\\t\\t\\t\\treturn originalMethod.apply(this, arguments);\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\treturn undefined;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tconst EC_AutoComplete = require('$:/plugins/EvidentlyCube/AutoComplete/completion-api.js').EC_AutoComplete;\\n\\t\\tconst completionApi = new EC_AutoComplete();\\n\\n\\t\\trequire('$:/plugins/EvidentlyCube/AutoComplete/integration-core.js').patch(completionApi, monkeypatch);\\n\\t\\ttry {\\n\\t\\t\\trequire('$:/plugins/EvidentlyCube/AutoComplete/integration-codemirror.js').patch(completionApi, monkeypatch);\\n\\t\\t} catch (e) {\\n\\t\\t\\t// Silently ignore if Code Mirror is not installed\\n\\t\\t}\\n\\n\\t};\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"startup\"},\"$:/plugins/EvidentlyCube/AutoComplete/history\":{\"title\":\"$:/plugins/EvidentlyCube/AutoComplete/history\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"* ''1.0.18'':\\n** Fixed RSOD in TW 5.3.0+ caused by new API not being supported\\n** Fixed RSOD when earlier keyup causes the focus to be changed -- can be triggered by setting `sidebar-search` shortcut to the same key as manually triggering auto complete.\\n* ''1.0.17'' -- Variable `editedTiddler` can now be used in //Suggestion Filter// and //Display Filter//\\n* ''1.0.16'' -- The two `<p>` tags that were wrapping around the auto complete window have been reduced to a single `<p>` tag.\\n* ''1.0.15'':\\n** ''Code Mirror integration:'' No longer throws an exception when triggering completion in non-codemirror input when codemirror editor is opened\\n** ''Code Mirror integration:'' Completion opens at the correct position even when window is scrolled\\n** ''Code Mirror integration:'' No longer throws an exception when selecting an option with mouse in non-codemirror input when codemirror editor is opened\\n* ''1.0.14'':\\n** Fixed a bug where navigating through auto completion would still trigger TW's keyboard widgets eg. navigating auto completion in sidebar search would also change selected search result\\n** The list of suggestion can now be scrolled down using the keyboard.\\n* ''1.0.13'' -- Added caption to triggers to improve how they are displayed in the settings\\n* ''1.0.12'' -- Various small fixes and tweaks to problems introduced between 1.0.9 and 1.0.11.\\n* ''1.0.11'' -- This plugin now takes preference over `codemirror-autocomplete` and will prevent the code mirror Auto Complete from opening at the same time as this\\n* ''1.0.10'' -- No longer crashes when using together with a Twitter plugin or any other plugin which delays the execution of the `startup` module\\n* ''1.0.9'' -- Using mouse for Auto Complete now works in tiddlers opened in a separate window\\n* ''1.0.8'' -- Auto Complete now works gracefully with `codemirror-closebrackets` plugin\\n* ''1.0.7'' -- Auto Complete now only opens in the window in which it was invoked when using Side Editor plugin or just opening a tiddler in a new window\\n* ''1.0.6'':\\n** If you use Auto Complete in a text area that is scrolled, Auto Complete window will now be correctly positioned.\\n** If you use framed editor but the main window was scrolled, Auto Complete window will now be correctly positioned\\n** Fixed incorrect placeholder for description field\\n** Changed the default trigger slightly\\n* ''1.0.5'' -- Auto Complete now also opens in tiddlers opened in a new window\\n* ''1.0.4'' -- Added `Transform Filter` option to triggers which allows transforming the suggestion before it is inserted (eg to insert a field value instead)\\n* ''1.0.3'' -- Added compatibility with Streams - this plugin's Enter takes priority over Streams's Enter\\n* ''1.0.2'' -- Upped version because issue\\n* ''1.0.1'' -- Added `z-index` to CSS so the completion always (tries to) appear at the top\\n* ''1.0.0'' -- Initial release\"},\"$:/plugins/EvidentlyCube/AutoComplete/icon\":{\"title\":\"$:/plugins/EvidentlyCube/AutoComplete/icon\",\"text\":\"iVBORw0KGgoAAAANSUhEUgAAACMAAAAjCAYAAAAe2bNZAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAELklEQVRYhc2X309bZRjHP+/hnNIC2nXt5hYjrJHR8cOR1CiRBBISk6FGE2JK1JtdmEi4IPPKkOwf2D9g8ErTW27UC4WYGJRVL7xAN2DJ4hjMDRI2VmiRdqenPa8Xb1fa0gIt0PhNTs573vd9nvdznve3kFJK/ifSnyeSySRzc3OkUqmaNe5wOAgGg7hcrl2YZDJJf38/fr8fj8dTsVMpJaZp4nQ6K7Lb3NxkeXmZ2dlZBSSllJFIRIZCIWnbtqxGa2trcmxsrGI727ZlKBSSkUhESimlDpBKpfB4PFiWxfXr14nH4wV/cOXKFVZXV1lYWKClpYWOjg6mpqYA0DSNnp4e7ty5U3FEhRB4PJ7c0MiNGSkluq4zNDSEaZoFRn6/n7a2Nrq6unC73fh8Ptxud86hYRgVg+S3+1w6gNfrZXFxEcuy6O3tPZST5ubmXHp7e5uRkZGKQUzTZHFxEa/XC4DIdh83btxgenr6SH9ZqSzLYnBwkPHxcYQQCgZUuJLJJOl0umYwuq7jcrkQQqhvANu2CYfDTE5OYllWzWAMw2B4eJirV6+iaZqCmZ+fJxwOMzExgcPhqBlMKpVidHSUYDBId3e3golGowQCAdrb28nYkCnaIAwNbLk3vxIZGqQlIEHXINszBAIBotEokDe1AVIZ+Pwn2Cqc2XxwER7G4c/16mE+6YQfl+BZGq69Ad0v7a1TAOOogy/fUfT5EiKbdYTICAHvte6mS6kAxpZwL5oNZ5E8TjDTkMhONpeu4GN5URTAhVOqrBzQftoD88sD2C6xcQfPweYzWN5S3y+/AL4GuJXXdboGH3eWhzlIBWa6Bp8FK3Pwtr+6hg+EsSX8/kh1R76EgOIjmBDwqgce70C8aMDn12n1QLO7CpiMDb89LO+8WIYGC0/gUbx0uRBqXFUMs7IFP9yDgPdwhgBPk3C+ST3ltJGA7+6WL1/ZKgHz8wr8+i1cPgvObO5yDLwueLFoUZbA3afQ4laDdX0HHsSpauqnV2C8GCZjQx0w3AHuepU3tQTtPrhQIszh2/D+RTjtgj/W4JvbykfFyrPJwbT7oO8y/B3dLTzToMK8kdjro/MM3N9Sjybg0+4qQICbkRIwfc3w1bvwNAFpG5ocanYlspu4Uwe3Uy1sx6mR70vAgIL4+pZa9PpeUe+/1hVAmxc+6lBr0UmpAMbQ4Iu3Cit8eOnkGt8XJiPh5j9q995Pr52F+5uwU+Icdq5JzcgjwwA8ScC/B1wqL3khmoSN5N6ypiOczQpg6gSE2g9neNhVtWqYjJ09ABWFXwh4/Tz4Tx0/QFkYiRoLxd0kBLSePlmQHIxhGMRiMeqE5Nqbx72S7K9YLJa7qwkppUwkEgwMDFBfX09jY2PNQHZ2djBNk5mZGRoaGnYvcZZlsbS0VNN7k67rtLa2FkamZq0foP8APw/vuJS94F4AAAAASUVORK5CYII=\",\"type\":\"image/png\"},\"$:/plugins/EvidentlyCube/AutoComplete/integration-codemirror.js\":{\"title\":\"$:/plugins/EvidentlyCube/AutoComplete/integration-codemirror.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/EvidentlyCube/AutoComplete/integration-codemirror.js\\ntype: application/javascript\\nmodule-type: library\\n\\nAutocompletion integration for Simple text editor\\n\\n\\\\*/\\n(function () {\\n\\n\\texports.patch = function(completionAPI, monkeypatch) {\\n\\t\\tvar editCodeMirrorWidget = require('$:/plugins/tiddlywiki/codemirror/edit-codemirror.js')['edit-codemirror'];\\n\\n\\t\\tvar selectionStart = -1;\\n\\t\\tvar activeCm = null;\\n\\t\\tvar activeDocument = null;\\n\\t\\tvar triggerLength = -1;\\n\\n\\t\\teditCodeMirrorWidget.prototype.render = monkeypatch.sequence(editCodeMirrorWidget.prototype.render, widgetRender);\\n\\n\\t\\tfunction widgetRender() {\\n\\t\\t\\tthis.engine.cm.on('keydown', handleKeydown.bind(this));\\n\\t\\t\\tthis.engine.cm.on('blur', handleBlur.bind(this));\\n\\t\\t\\tthis.engine.cm.on('change', handleEngineInput.bind(this));\\n\\t\\t\\tthis.engine.cm.on('cursorActivity', handleCursorActivity.bind(this));\\n\\t\\t}\\n\\n\\t\\tfunction handleKeydown(cm, event) {\\n\\t\\t\\tif (completionAPI.isActive) {\\n\\t\\t\\t\\tswitch(event.key) {\\n\\t\\t\\t\\t\\tcase \\\"ArrowUp\\\":\\n\\t\\t\\t\\t\\tcase \\\"ArrowDown\\\":\\n\\t\\t\\t\\t\\t\\tcompletionAPI.changeSelection(event.key === \\\"ArrowUp\\\" ? -1 : 1);\\n\\t\\t\\t\\t\\t\\tevent.stopImmediatePropagation();\\n\\t\\t\\t\\t\\t\\tevent.preventDefault();\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\tcase \\\"Enter\\\":\\n\\t\\t\\t\\t\\t\\tconst option = completionAPI.getSelected();\\n\\n\\t\\t\\t\\t\\t\\tif (option) {\\n\\t\\t\\t\\t\\t\\t\\tinsertSelection(option);\\n\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\tcompletionAPI.finishCompletion();\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\tevent.stopImmediatePropagation();\\n\\t\\t\\t\\t\\t\\tevent.preventDefault();\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\t\\tif (completionAPI.isManualTrigger(event)) {\\n\\t\\t\\t\\t\\t\\t\\t// Prevent codemirror-autocomplete from triggering while this one is visible\\n\\t\\t\\t\\t\\t\\t\\tevent.stopImmediatePropagation();\\n\\t\\t\\t\\t\\t\\t\\tevent.preventDefault();\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t} else if (completionAPI.isManualTrigger(event)) {\\n\\t\\t\\t\\tvar triggerData = completionAPI.getMatchingTrigger(\\\"\\\", \\\"\\\", function (length) {\\n\\t\\t\\t\\t\\tconst caret = cm.getCursor();\\n\\t\\t\\t\\t\\tconst start = {\\n\\t\\t\\t\\t\\t\\tline: caret.line,\\n\\t\\t\\t\\t\\t\\tch: Math.max(0, caret.ch - length)\\n\\t\\t\\t\\t\\t};\\n\\n\\t\\t\\t\\t\\treturn cm.getRange(start, caret);\\n\\t\\t\\t\\t});\\n\\n\\t\\t\\t\\tif (triggerData) {\\n\\t\\t\\t\\t\\tstartCompletion(triggerData, cm, { editedTiddler: this.editTitle });\\n\\t\\t\\t\\t\\t// Prevent codemirror-autocomplete from triggering\\n\\t\\t\\t\\t\\tevent.preventDefault();\\n\\t\\t\\t\\t\\tevent.stopImmediatePropagation();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tfunction startCompletion(triggerData, cm, options) {\\n\\t\\t\\tactiveCm = cm;\\n\\t\\t\\tactiveDocument = cm.getInputField().ownerDocument;\\n\\n\\t\\t\\tactiveDocument.addEventListener('mousedown', handleDocumentMouseDownCapture, true);\\n\\n\\t\\t\\ttriggerLength = triggerData.trigger.length;\\n\\t\\t\\tselectionStart = cm.getCursor();\\n\\t\\t\\tcompletionAPI.startCompletion(triggerData, getCaretCoordinates(cm, selectionStart), {\\n\\t\\t\\t\\tonFinish: handleFinishCompletion,\\n\\t\\t\\t\\twindowID: cm.getInputField().ownerDocument._ecAcWindowID,\\n\\t\\t\\t\\teditedTiddler: options.editedTiddler || ''\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\tfunction handleDocumentMouseDownCapture(event) {\\n\\t\\t\\tconst target = event.target;\\n\\t\\t\\tif (\\n\\t\\t\\t\\t!completionAPI.isActive\\n\\t\\t\\t\\t|| !activeCm\\n\\t\\t\\t\\t|| !target\\n\\t\\t\\t\\t|| !target.classList.contains('ec_ac-link')\\n\\t\\t\\t) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\tconst value = target.getAttribute('data-value');\\n\\n\\t\\t\\tcompletionAPI.setSelectionByValue(value);\\n\\t\\t\\tinsertSelection(completionAPI.getSelected());\\n\\t\\t\\tevent.preventDefault();\\n\\t\\t\\tevent.stopImmediatePropagation();\\n\\t\\t}\\n\\n\\t\\tfunction handleFinishCompletion() {\\n\\t\\t\\tactiveDocument.removeEventListener('keydown', handleDocumentMouseDownCapture, true);\\n\\n\\t\\t\\tactiveCm = null;\\n\\t\\t\\tactiveDocument = null;\\n\\t\\t}\\n\\n\\t\\tfunction handleEngineInput(cm, operation) {\\n\\t\\t\\tconst data = getOperationData(cm, operation);\\n\\n\\t\\t\\tif (!completionAPI.isActive && data !== null && data !== \\\"\\\") {\\n\\t\\t\\t\\tselectionStart = cm.getCursor();\\n\\n\\t\\t\\t\\tvar triggerData = completionAPI.getMatchingTrigger(data, \\\"TEXTAREA\\\", function (length) {\\n\\t\\t\\t\\t\\tconst caret = cm.getCursor();\\n\\t\\t\\t\\t\\tconst start = {\\n\\t\\t\\t\\t\\t\\tline: caret.line,\\n\\t\\t\\t\\t\\t\\tch: Math.max(0, caret.ch - length)\\n\\t\\t\\t\\t\\t};\\n\\n\\t\\t\\t\\t\\treturn cm.getRange(start, caret);\\n\\t\\t\\t\\t});\\n\\n\\t\\t\\t\\tif (triggerData) {\\n\\t\\t\\t\\t\\tactiveCm = cm;\\n\\t\\t\\t\\t\\tstartCompletion(triggerData, cm, { editedTiddler: this.editTitle });\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tfunction getOperationData(cm, operation) {\\n\\t\\t\\tif (!operation || !operation.text || operation.text.length !== 1 || operation.origin !== \\\"+input\\\") {\\n\\t\\t\\t\\treturn \\\"\\\";\\n\\t\\t\\t}\\n\\n\\t\\t\\tconst inputText = operation.text[0];\\n\\n\\t\\t\\tconst autoCloseBracketsConf = cm.getOption('autoCloseBrackets');\\n\\t\\t\\tif (autoCloseBracketsConf) {\\n\\t\\t\\t\\t// Special handling if autoCloseBrackets plugin is enabled\\n\\t\\t\\t\\tconst pairs = autoCloseBracketsConf.pairs || \\\"()[]{}''\\\\\\\"\\\\\\\"\\\";\\n\\t\\t\\t\\tconst index = pairs.indexOf(inputText);\\n\\n\\t\\t\\t\\t// If a configured pair was input then let's act as if only the first character was inserted\\n\\t\\t\\t\\tif (index !== -1 && index % 2 === 0) {\\n\\t\\t\\t\\t\\treturn inputText.substring(0, 1);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn inputText;\\n\\t\\t}\\n\\n\\t\\tfunction handleBlur() {\\n\\t\\t\\tif (completionAPI.isActive) {\\n\\t\\t\\t\\tcompletionAPI.finishCompletion();\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tfunction handleCursorActivity(cm) {\\n\\t\\t\\tif (!completionAPI.isActive || !cm.hasFocus()) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t\\tconst cursor = cm.getCursor();\\n\\n\\t\\t\\tif (cursor.line < selectionStart.line || cursor.ch < selectionStart.ch) {\\n\\t\\t\\t\\tcompletionAPI.finishCompletion();\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tcompletionAPI.updateQuery(cm.getRange(selectionStart, cursor));\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tfunction insertSelection(value) {\\n\\t\\t\\tconst completed = completionAPI.getCompletedTemplate(value);\\n\\t\\t\\tconst sliceStart = {\\n\\t\\t\\t\\tline: selectionStart.line,\\n\\t\\t\\t\\tch: selectionStart.ch - triggerLength\\n\\t\\t\\t};\\n\\t\\t\\tconst sliceEnd = activeCm.getCursor();\\n\\n\\t\\t\\tactiveCm.replaceRange(completed.text, sliceStart, sliceEnd);\\n\\t\\t\\tactiveCm.setCursor({\\n\\t\\t\\t\\tline: selectionStart.line,\\n\\t\\t\\t\\tch: selectionStart.ch - triggerLength + completed.caretIndex\\n\\t\\t\\t});\\n\\t\\t\\tcompletionAPI.finishCompletion();\\n\\t\\t}\\n\\n\\t\\tfunction getCaretCoordinates(cm, caretPos) {\\n\\t\\t\\tconst coords = cm.charCoords(caretPos);\\n\\n\\t\\t\\treturn {\\n\\t\\t\\t\\tleft: coords.left,\\n\\t\\t\\t\\ttop: coords.bottom\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"library\"},\"$:/plugins/EvidentlyCube/AutoComplete/integration-core.js\":{\"title\":\"$:/plugins/EvidentlyCube/AutoComplete/integration-core.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/EvidentlyCube/AutoComplete/integration-core.js\\ntype: application/javascript\\nmodule-type: library\\n\\nAutocompletion integration for Simple text editor\\n\\n\\\\*/\\n(function () {\\n\\n\\texports.patch = function(completionAPI, monkeypatch) {\\n\\t\\tvar editTextWidget = require('$:/core/modules/widgets/edit-text.js')['edit-text'];\\n\\t\\tvar simpleEngine = require('$:/core/modules/editor/engines/simple.js').SimpleEngine;\\n\\t\\tvar framedEngine = require('$:/core/modules/editor/engines/framed.js').FramedEngine;\\n\\t\\tvar getBaseCaretCoordinates = require('$:/plugins/EvidentlyCube/AutoComplete/textarea-caret-position.js').getCaretCoordinates;\\n\\n\\t\\tvar selectionStart = -1;\\n\\t\\tvar activeDom = null;\\n\\t\\tvar activeDocument_keyHook = null;\\n\\t\\tvar activeDocument_mouseHook = null;\\n\\t\\tvar triggerLength = -1;\\n\\n\\t\\t// Needed to be able to detect main TW window in the mechanism that prevents\\n\\t\\t// Auto Complete from opening in multiple windows\\n\\t\\tdocument._ecAcWindowID = \\\"\\\";\\n\\n\\t\\teditTextWidget.prototype.render = monkeypatch.sequence(editTextWidget.prototype.render, widgetRender);\\n\\t\\teditTextWidget.prototype.handleKeydownEvent = monkeypatch.preventable(editTextWidget.prototype.handleKeydownEvent, handleWidgetKeydown);\\n\\t\\tsimpleEngine.prototype.handleInputEvent = monkeypatch.preventable(simpleEngine.prototype.handleInputEvent, handleEngineInput);\\n\\t\\tframedEngine.prototype.handleInputEvent = monkeypatch.preventable(framedEngine.prototype.handleInputEvent, handleEngineInput);\\n\\n\\t\\tfunction widgetRender() {\\n\\t\\t\\tthis.engine.domNode.addEventListener('blur', handleBlur);\\n\\t\\t\\tthis.engine.domNode.addEventListener('keyup', handleKeyup);\\n\\n\\t\\t\\t// We need to be able to detect this even for inputs\\n\\t\\t\\tif (!this.editShowToolbar) {\\n\\t\\t\\t\\t$tw.utils.addEventListeners(this.engine.domNode, [\\n\\t\\t\\t\\t\\t{ name: 'keydown', handlerObject: this, handlerMethod: 'handleKeydownEvent' }\\n\\t\\t\\t\\t]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tfunction handleWidgetKeydown(event) {\\n\\t\\t\\tif (completionAPI.isActive) {\\n\\t\\t\\t\\tswitch(event.key) {\\n\\t\\t\\t\\t\\tcase \\\"ArrowUp\\\":\\n\\t\\t\\t\\t\\tcase \\\"ArrowDown\\\":\\n\\t\\t\\t\\t\\t\\tcompletionAPI.changeSelection(event.key === \\\"ArrowUp\\\" ? -1 : 1);\\n\\t\\t\\t\\t\\t\\tevent.stopImmediatePropagation();\\n\\t\\t\\t\\t\\t\\tevent.preventDefault();\\n\\t\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t} else if (completionAPI.isManualTrigger(event)) {\\n\\t\\t\\t\\tvar triggerData = completionAPI.getMatchingTrigger(\\\"\\\", event.target.tagName, function (length) {\\n\\t\\t\\t\\t\\treturn event.target.value.substr(event.target.selectionStart - length, length);\\n\\t\\t\\t\\t});\\n\\n\\t\\t\\t\\tif (triggerData) {\\n\\t\\t\\t\\t\\tstartCompletion(triggerData, event.target, this.editTitle);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tfunction startCompletion(triggerData, dom, editedTiddler) {\\n\\t\\t\\t// Special handling to avoid confirm to close draft when editing in framed editor\\n\\t\\t\\tactiveDocument_keyHook = dom.ownerDocument;\\n\\t\\t\\tactiveDocument_mouseHook = activeDocument_keyHook.defaultView.top.document;\\n\\n\\t\\t\\t// Iframed editor compatibility: Prevent escape from asking to close the tiddler if completion is active\\n\\t\\t\\t// Streams Plugin compatibility: Handle enter on root to circumvent new stream being created\\n\\t\\t\\tactiveDocument_keyHook.addEventListener('keydown', handleDocumentKeydownCapture, true);\\n\\t\\t\\tactiveDocument_mouseHook.addEventListener('mousedown', handleDocumentMouseDownCapture, true);\\n\\n\\t\\t\\tactiveDom = dom;\\n\\t\\t\\ttriggerLength = triggerData.trigger.length;\\n\\t\\t\\tselectionStart = dom.selectionStart;\\n\\t\\t\\tcompletionAPI.startCompletion(triggerData, getCaretCoordinates(dom, selectionStart), {\\n\\t\\t\\t\\tonFinish: handleFinishCompletion,\\n\\t\\t\\t\\twindowID: dom.ownerDocument.defaultView.top.document._ecAcWindowID,\\n\\t\\t\\t\\teditedTiddler: editedTiddler\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\tfunction handleFinishCompletion() {\\n\\t\\t\\tactiveDocument_keyHook.removeEventListener('keydown', handleDocumentKeydownCapture, true);\\n\\t\\t\\tactiveDocument_mouseHook.removeEventListener('mousedown', handleDocumentMouseDownCapture, true);\\n\\n\\t\\t\\tactiveDom = null;\\n\\t\\t\\tactiveDocument_keyHook = null;\\n\\t\\t\\tactiveDocument_mouseHook = null;\\n\\t\\t}\\n\\n\\t\\tfunction handleDocumentMouseDownCapture(event) {\\n\\t\\t\\tconst target = event.target;\\n\\t\\t\\tif (!completionAPI.isActive || !target || !target.classList.contains('ec_ac-link')) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\tconst value = target.getAttribute('data-value');\\n\\n\\t\\t\\tcompletionAPI.setSelectionByValue(value);\\n\\t\\t\\tinsertSelection(completionAPI.getSelected());\\n\\t\\t\\tevent.preventDefault();\\n\\t\\t\\tevent.stopImmediatePropagation();\\n\\t\\t}\\n\\n\\t\\tfunction handleDocumentKeydownCapture(event) {\\n\\t\\t\\tif (!completionAPI.isActive) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t\\tswitch(event.key) {\\n\\t\\t\\t\\tcase 'Escape':\\n\\t\\t\\t\\t\\tcompletionAPI.finishCompletion();\\n\\t\\t\\t\\t\\tevent.stopImmediatePropagation();\\n\\t\\t\\t\\t\\tevent.preventDefault()\\n\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\tcase 'Enter':\\n\\t\\t\\t\\t\\tif (!event.ctrlKey && !event.shiftKey && !event.altKey) {\\n\\t\\t\\t\\t\\t\\tconst option = completionAPI.getSelected();\\n\\n\\t\\t\\t\\t\\t\\tif (option) {\\n\\t\\t\\t\\t\\t\\t\\tinsertSelection(option);\\n\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\tcompletionAPI.finishCompletion();\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\tevent.stopImmediatePropagation();\\n\\t\\t\\t\\t\\t\\tevent.preventDefault();\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tfunction handleEngineInput(event) {\\n\\t\\t\\tif (!completionAPI.isActive && event.data !== null && event.data !== \\\"\\\") {\\n\\t\\t\\t\\tvar triggerData = completionAPI.getMatchingTrigger(event.data, event.target.tagName, function (length) {\\n\\t\\t\\t\\t\\treturn event.target.value.substr(event.target.selectionStart - length, length);\\n\\t\\t\\t\\t});\\n\\n\\t\\t\\t\\tif (triggerData) {\\n\\t\\t\\t\\t\\tactiveDom = event.target;\\n\\t\\t\\t\\t\\tstartCompletion(triggerData, event.target, this.widget.editTitle);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tfunction handleBlur(event) {\\n\\t\\t\\tif (completionAPI.isActive) {\\n\\t\\t\\t\\tcompletionAPI.finishCompletion();\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tfunction handleKeyup(event) {\\n\\t\\t\\tif (!completionAPI.isActive) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t} else if (!activeDom) {\\n\\t\\t\\t\\tcompletionAPI.finishCompletion();\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (activeDom.selectionStart < selectionStart) {\\n\\t\\t\\t\\tcompletionAPI.finishCompletion();\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tcompletionAPI.updateQuery(activeDom.value.substring(selectionStart, activeDom.selectionStart));\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tfunction insertSelection(value) {\\n\\t\\t\\tconst completed = completionAPI.getCompletedTemplate(value);\\n\\t\\t\\tconst sliceStart = selectionStart - triggerLength;\\n\\t\\t\\tconst sliceEnd = activeDom.selectionStart;\\n\\n\\t\\t\\tif (activeDom.getRootNode().execCommand) {\\n\\t\\t\\t\\tactiveDom.selectionStart = sliceStart;\\n\\t\\t\\t\\tactiveDom.selectionEnd = sliceEnd;\\n\\t\\t\\t\\tactiveDom.getRootNode().execCommand(\\\"insertText\\\", false, completed.text);\\n\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tactiveDom.value = activeDom.value.substr(0, sliceStart)\\n\\t\\t\\t\\t\\t+ completed.text\\n\\t\\t\\t\\t\\t+ activeDom.value.substr(sliceEnd);\\n\\t\\t\\t}\\n\\n\\t\\t\\tactiveDom.selectionStart = activeDom.selectionEnd = selectionStart - triggerLength + completed.caretIndex;\\n\\t\\t\\tcompletionAPI.finishCompletion();\\n\\t\\t}\\n\\n\\t\\tfunction getCaretCoordinates() {\\n\\t\\t\\tconst baseCoords = activeDom.getBoundingClientRect();\\n\\t\\t\\tconst domDocument = activeDom.getRootNode();\\n\\t\\t\\tconst domWindow = domDocument.defaultView;\\n\\t\\t\\tconst caretCoords = getBaseCaretCoordinates(activeDom, selectionStart);\\n\\t\\t\\tconst domScroll = {left: -activeDom.scrollLeft, top: -activeDom.scrollTop};\\n\\t\\t\\tconst containingIframe = getContainingIframe(activeDom);\\n\\t\\t\\tconst iframeCoords = getIframeOffset(containingIframe);\\n\\t\\t\\tconst parentWindowCoords = containingIframe\\n\\t\\t\\t\\t? {left: containingIframe.ownerDocument.defaultView.scrollX, top: containingIframe.ownerDocument.defaultView.scrollY}\\n\\t\\t\\t\\t: {left: 0, top: 0};\\n\\n\\t\\t\\tconst totalCoords = sumCoords([baseCoords, caretCoords, iframeCoords, parentWindowCoords, domScroll]);\\n\\n\\t\\t\\treturn {\\n\\t\\t\\t\\tleft: totalCoords.left + domWindow.scrollX,\\n\\t\\t\\t\\ttop:  totalCoords.top  + domWindow.scrollY + caretCoords.height\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tfunction sumCoords(coords) {\\n\\t\\t\\tconst totalCoords = {left: 0, top: 0};\\n\\t\\t\\tfor(const coord of coords) {\\n\\t\\t\\t\\ttotalCoords.left += coord.left;\\n\\t\\t\\t\\ttotalCoords.top += coord.top;\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn totalCoords;\\n\\t\\t}\\n\\n\\t\\tfunction getContainingIframe(dom) {\\n\\t\\t\\tconst root = dom.getRootNode();\\n\\n\\t\\t\\tif (root !== document) {\\n\\t\\t\\t\\tconst parentDocument = root.defaultView.parent.document;\\n\\t\\t\\t\\tconst iframes = parentDocument.querySelectorAll('iframe');\\n\\t\\t\\t\\tfor (var i = 0; i < iframes.length; i++) {\\n\\t\\t\\t\\t\\tconst iframe = iframes[i];\\n\\n\\t\\t\\t\\t\\tif (iframe.contentDocument !== root) {\\n\\t\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\treturn iframe;;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\n\\t\\tfunction getIframeOffset(containingIframe) {\\n\\t\\t\\treturn containingIframe\\n\\t\\t\\t\\t? containingIframe.getBoundingClientRect()\\n\\t\\t\\t\\t: {top: 0, left: 0};\\n\\t\\t}\\n\\t}\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"library\"},\"$:/plugins/EvidentlyCube/AutoComplete/license\":{\"title\":\"$:/plugins/EvidentlyCube/AutoComplete/license\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"This plugin is licensed under the MIT license.\\n\\nCopyright 2022 Maurycy Zarzycki\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \\\"Software\\\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\"},\"$:/plugins/EvidentlyCube/AutoComplete/readme\":{\"title\":\"$:/plugins/EvidentlyCube/AutoComplete/readme\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"[[Github|https://github.com/EvidentlyCube/TW5-PluginShowcase/tree/main/plugins/EvidentlyCube/TW5-AutoComplete]]\\n\\n----\\n\\n! Features\\n\\nA versatile and easy to use auto completion for TiddlyWiki:\\n\\n* Auto complete anything you want:\\n** Tiddler titles\\n** Field values\\n** Any filter result\\n* Define your own triggers\\n** Customize the filter which retrieves the suggestions\\n** Customize template used for inserting the selected suggestion\\n** Customize how the suggestions are displayed in the completion window\\n** Control auto-triggering separately for inputs and text areas\\n* Clear interface for editing the triggers\\n* Manually open auto complete with customizable keyboard shortcut\\n\\n!! Plugin compatibility\\n\\n * Official [[Code Mirror|https://tiddlywiki.com/plugins/tiddlywiki/codemirror/]] plugin\\n * [[Streams|https://saqimtiaz.github.io/streams/]] by saqimtiaz\\n\\n! How to use\\n\\n* After installing head to the Control Panel and open the tab ''Evidently Cube''\\n* Create a new trigger using the button\\n** It will be filled with sensible defaults\\n** Customize the trigger to your heart's content\\n* At any time press <kbd>Ctrl+Space</kbd> right in front of a defined trigger to open the completion window manually\\n** Or use a different keyboard shortcut you defined\"},\"$:/plugins/EvidentlyCube/AutoComplete/template-cascade\":{\"title\":\"$:/plugins/EvidentlyCube/AutoComplete/template-cascade\",\"list-after\":\"$:/config/ViewTemplateBodyFilters/system\",\"tags\":\"$:/tags/ViewTemplateBodyFilter\",\"text\":\"[tag[$:/tags/EC/AutoComplete/Trigger]then[$:/plugins/EvidentlyCube/AutoComplete/template]]\"},\"$:/plugins/EvidentlyCube/AutoComplete/template\":{\"title\":\"$:/plugins/EvidentlyCube/AutoComplete/template\",\"text\":\"\\\\define must-be-defined(field name)\\n<$list filter=\\\"[{!!$field$}match[]]\\\">\\n\\t<span class=\\\"tc-error\\\">\\n\\t\\t$name$ must be defined\\n\\t</span>\\n</$list>\\n\\\\end\\n\\n\\\\define must-be-valid-filter(field)\\n<$let\\n\\tbase-filter={{!!$field$}}\\n\\tsuffix=\\\" +[limit[1]]\\\"\\n\\tfilter={{{ [<base-filter>addsuffix<suffix>] }}}\\n>\\n<$list filter=<<filter>>>\\n\\t<$list filter={{{ [<currentTiddler>prefix[Filter error]] }}}>\\n\\t\\t<span class=\\\"tc-error\\\">\\n\\t\\t\\t<$text text=<<currentTiddler>>/>\\n\\t\\t</span>\\n\\t</$list>\\n</$list>\\n</$let>\\n\\\\end\\n\\n<div class=\\\"ec_ac-options\\\">\\n<h1>Auto complete trigger</h1>\\n\\n<p>This tiddler defines a trigger for Auto Complete plugin.</p>\\n\\n<table>\\n<colgroup>\\n\\t<col width=\\\"50%\\\"/>\\n</colgroup>\\n<tbody>\\n<tr>\\n\\t<td align=\\\"center\\\">\\n\\t\\t''Caption:''<br/>\\n\\t\\t<p class=\\\"ec_ac-muted\\\">\\n\\t\\t\\tOptional caption displayed in the Control Panel instead of the tiddler name\\n\\t\\t</p>\\n\\t</td>\\n\\t<td><$edit-text class=\\\"ec-tc-disabled\\\" field=\\\"caption\\\" default=\\\"\\\" placeholder=\\\"Caption...\\\"/></td>\\n</tr>\\n<tr>\\n\\t<td align=\\\"center\\\">\\n\\t\\t''Description:''<br/>\\n\\t\\t<p class=\\\"ec_ac-muted\\\">\\n\\t\\t\\tA description of this trigger to make it easier to keep things clean.\\n\\t\\t</p>\\n\\t</td>\\n\\t<td><$edit-text class=\\\"ec-tc-disabled\\\" field=\\\"text\\\" default=\\\"\\\" placeholder=\\\"Description for this trigger...\\\"/></td>\\n</tr>\\n<tr>\\n\\t<td align=\\\"center\\\">\\n\\t\\t''Trigger:''<br/>\\n\\t\\t<p class=\\\"ec_ac-muted\\\">\\n\\t\\t\\tDefines the text which will trigger auto completion.<br/>\\n\\t\\t\\tFor example `[[` will cause the auto completion to appear after you type `[[` in any text field.\\n\\t\\t</p>\\n\\t</td>\\n\\t<td>\\n\\t\\t<$edit-text class=\\\"ec-tc-disabled\\\" field=\\\"trigger\\\" placeholder=\\\"Trigger...\\\"/>\\n\\t\\t<$list filter=\\\"[all[shadows+tiddlers]tag[$:/tags/EC/AutoComplete/Trigger]field:trigger{!!trigger}] -[<currentTiddler>] +[limit[1]]\\\">\\n\\t\\t\\t<span class=\\\"tc-error\\\">\\n\\t\\t\\t\\tTrigger already used in: <<currentTiddler>>\\n\\t\\t\\t</span>\\n\\t\\t</$list>\\n\\t\\t<<must-be-defined \\\"trigger\\\" \\\"Trigger\\\">>\\n\\t</td>\\n</tr>\\n<tr>\\n\\t<td align=\\\"center\\\">\\n\\t\\t''Suggestion Filter:''<br/>\\n\\t\\t<p class=\\\"ec_ac-muted\\\">\\n\\t\\t\\tThis filter generates the list of options that will be displayed in the auto completion.<br/>\\n\\t\\t\\tUse variable `query` to inject the typed text.<br/>\\n\\t\\t\\tVariable `<editedTiddler>` contains the name of the tiddler that is being modified by the widget that triggered auto completion.\\n\\t\\t</p>\\n\\t</td>\\n\\t<td>\\n\\t\\t<$edit-text class=\\\"ec-tc-disabled\\\" tag=\\\"textarea\\\" field=\\\"filter\\\" placeholder=\\\"Filter...\\\"/>\\n\\t\\t<<must-be-valid-filter \\\"filter\\\">>\\n\\t\\t<<must-be-defined \\\"filter\\\" \\\"Filter\\\">>\\n\\t</td>\\n</tr>\\n<tr>\\n\\t<td align=\\\"center\\\">\\n\\t\\t''Display Filter:''<br/>\\n\\t\\t<p class=\\\"ec_ac-muted\\\">\\n\\t\\t\\tAdvanced feature!<br/>\\n\\t\\t\\tTransforms how the suggestion will be displayed in auto complete window.<br/>\\n\\t\\t\\t`<currentTiddler>` contains the suggestion being displayed.<br/>\\n\\t\\t\\tVariable `<editedTiddler>` contains the name of the tiddler that is being modified by the widget that triggered auto completion.\\n\\t\\t</p>\\n\\t</td>\\n\\t<td>\\n\\t\\t<$edit-text class=\\\"ec-tc-disabled\\\" tag=\\\"textarea\\\" field=\\\"display-filter\\\" placeholder=\\\"Display filter...\\\"/>\\n\\t\\t<<must-be-valid-filter \\\"display-filter\\\">>\\n\\t\\t<<must-be-defined \\\"display-filter\\\" \\\"Display filter\\\">>\\n\\t</td>\\n</tr>\\n<tr>\\n\\t<td align=\\\"center\\\">\\n\\t\\t''Transform Filter:''<br/>\\n\\t\\t<p class=\\\"ec_ac-muted\\\">\\n\\t\\t\\tAdvanced feature!<br/>\\n\\t\\t\\tTransform the selected suggestion before it's inserted.<br/>\\n\\t\\t\\tIt's useful when you want to insert tiddler's text or data indexes.<br/>\\n\\t\\t\\t`<currentTiddler>` contains the suggestion selected.\\n\\t\\t</p>\\n\\t</td>\\n\\t<td>\\n\\t\\t<$edit-text class=\\\"ec-tc-disabled\\\" tag=\\\"textarea\\\" field=\\\"transform-filter\\\" placeholder=\\\"[<currentTiddler>]\\\"/>\\n\\t\\t<<must-be-valid-filter \\\"transform-filter\\\">>\\n\\t</td>\\n</tr>\\n<tr>\\n\\t<td align=\\\"center\\\">\\n\\t\\t''Template:''<br/>\\n\\t\\t<p class=\\\"ec_ac-muted\\\">\\n\\t\\t\\tA template that is inserted when you select an option from auto completion.<br/>\\n\\t\\t\\t`$option$` will be replaced by the selected option. <br/>\\n\\t\\t\\t`$caret$` will put the caret on that position after insertion.\\n\\t\\t</p>\\n\\t</td>\\n\\t<td>\\n\\t\\t<$edit-text class=\\\"ec-tc-disabled\\\" field=\\\"template\\\" placeholder=\\\"Template...\\\"/>\\n\\t\\t<<must-be-defined \\\"template\\\" \\\"Template\\\">>\\n\\t</td>\\n</tr>\\n<tr>\\n\\t<td align=\\\"center\\\">\\n\\t\\t''Auto trigger on Inputs:''<br/>\\n\\t\\t<p class=\\\"ec_ac-muted\\\">\\n\\t\\t\\tIf checked auto completion will automatically open as soon as you type the ''trigger'' in a single-line text input.<br/>\\n\\t\\t\\tOtherwise you need to open it manually with a keyboard shortcut.\\n\\t\\t</p>\\n\\t</td>\\n\\t<td>\\n\\t\\t<$checkbox field=\\\"auto-trigger-input\\\" checked=\\\"1\\\">&nbsp;Auto trigger on Inputs</$checkbox>\\n\\t</td>\\n</tr>\\n<tr>\\n\\t<td align=\\\"center\\\">\\n\\t\\t''Auto trigger on Text Areas:''<br/>\\n\\t\\t<p class=\\\"ec_ac-muted\\\">\\n\\t\\t\\tIf checked auto completion will automatically open as soon as you type the ''trigger'' in a multi-line text input.<br/>\\n\\t\\t\\tOtherwise you need to open it manually with a keyboard shortcut.\\n\\t\\t</p>\\n\\t</td>\\n\\t<td>\\n\\t\\t<$checkbox field=\\\"auto-trigger-textarea\\\" checked=\\\"1\\\">&nbsp;Auto trigger on Text Areas</$checkbox>\\n\\t</td>\\n</tr>\\n</tbody>\\n</table>\\n\\n<h1>Test the filter</h1>\\n\\n<$let\\n\\ttemp=<<qualify \\\"$:/temp/completion-test\\\">>\\n\\trows={{{ [{$:/plugins/EvidentlyCube/AutoComplete/Config!!rows}floor[]!match[0]else[8]min[99]max[1]] }}}\\n\\tdefault-transform-filter=\\\"[<currentTiddler>]\\\"\\n\\tfilter-suffix=\\\" +[limit<rows>]\\\"\\n\\tdisplay-filter={{!!display-filter}}\\n\\ttransform-filter={{{ [{!!transform-filter}!match[]else<default-transform-filter>] }}}\\n\\tfilter={{{ [{!!filter}addsuffix<filter-suffix>] }}}\\n>\\n\\t''Query:'' <$edit-text tag=\\\"input\\\" class=\\\"ec-tc-disabled\\\" tiddler=<<temp>> field=\\\"query\\\" default=\\\"\\\" placeholder=\\\"Test...\\\"/>\\n\\n\\t<p class=\\\"ec_ac-muted\\\">Only the first <<rows>> results will be displayed.</p>\\n\\n\\t<table>\\n\\t<thead>\\n\\t<tr>\\n\\t\\t<th>Suggestion</th>\\n\\t\\t<th>Displays as</th>\\n\\t\\t<th>After insertion</th>\\n\\t</tr>\\n\\t</thead>\\n\\t<tbody>\\n\\t<$let\\n\\t\\tquery={{{ [<temp>get[query]] }}}\\n\\t\\teditedTiddler=<<temp>>\\n\\t>\\n\\t\\t<$list filter=<<filter>> emptyMessage=\\\"\\\"\\\"<tr><td colspan=\\\"3\\\" class=\\\"ec_ac-muted\\\">No results</td></tr>\\\"\\\"\\\">\\n\\t\\t\\t<tr>\\n\\t\\t\\t\\t<td><$text text={{{ [<currentTiddler>] }}} /></td>\\n\\t\\t\\t\\t<td><$text text={{{ [<currentTiddler>subfilter<display-filter>] }}} /></td>\\n\\t\\t\\t\\t<td><$text text={{{ [<currentTiddler>subfilter<transform-filter>] }}} /></td>\\n\\t\\t\\t</tr>\\n\\t\\t</$list>\\n\\t</$let>\\n\\t</tbody>\\n\\t</table>\\n</$let>\\n</div>\\n\"},\"$:/plugins/EvidentlyCube/AutoComplete/textarea-caret-position.js\":{\"title\":\"$:/plugins/EvidentlyCube/AutoComplete/textarea-caret-position.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/EvidentlyCube/AutoComplete/textarea-caret-position.js\\ntype: application/javascript\\nmodule-type: library\\n\\nComputes pixel-position of the caret\\n\\nTaken from: https://github.com/koddsson/textarea-caret-position\\nThe MIT License (MIT)\\n\\nCopyright (c) 2015 Jonathan Ong me@jongleberry.com\\n\\\\*/\\n\\n(function(){\\n// We'll copy the properties below into the mirror div.\\n// Note that some browsers, such as Firefox, do not concatenate properties\\n// into their shorthand (e.g. padding-top, padding-bottom etc. -> padding),\\n// so we have to list every single property explicitly.\\nconst properties = [\\n\\t'direction', // RTL support\\n\\t'boxSizing',\\n\\t'width', // on Chrome and IE, exclude the scrollbar, so the mirror div wraps exactly as the textarea does\\n\\t'height',\\n\\t'overflowX',\\n\\t'overflowY', // copy the scrollbar for IE\\n\\n\\t'borderTopWidth',\\n\\t'borderRightWidth',\\n\\t'borderBottomWidth',\\n\\t'borderLeftWidth',\\n\\t'borderStyle',\\n\\n\\t'paddingTop',\\n\\t'paddingRight',\\n\\t'paddingBottom',\\n\\t'paddingLeft',\\n\\n\\t// https://developer.mozilla.org/en-US/docs/Web/CSS/font\\n\\t'fontStyle',\\n\\t'fontVariant',\\n\\t'fontWeight',\\n\\t'fontStretch',\\n\\t'fontSize',\\n\\t'fontSizeAdjust',\\n\\t'lineHeight',\\n\\t'fontFamily',\\n\\n\\t'textAlign',\\n\\t'textTransform',\\n\\t'textIndent',\\n\\t'textDecoration', // might not make a difference, but better be safe\\n\\n\\t'letterSpacing',\\n\\t'wordSpacing',\\n\\n\\t'tabSize',\\n\\t'MozTabSize'\\n]\\n\\nconst isBrowser = typeof window !== 'undefined'\\nconst isFirefox = isBrowser && window.mozInnerScreenX != null\\n\\nexports.getCaretCoordinates = function (element, position, options) {\\n\\tconst debug = (options && options.debug) || false\\n\\tif (debug) {\\n\\t\\tconst el = document.querySelector('#input-textarea-caret-position-mirror-div')\\n\\t\\tif (el) el.parentNode.removeChild(el)\\n\\t}\\n\\n\\t// The mirror div will replicate the textarea's style\\n\\tconst div = document.createElement('div')\\n\\tdiv.id = 'input-textarea-caret-position-mirror-div'\\n\\tdocument.body.appendChild(div)\\n\\n\\tconst style = div.style\\n\\tconst computed = window.getComputedStyle ? window.getComputedStyle(element) : element.currentStyle // currentStyle for IE < 9\\n\\tconst isInput = element.nodeName === 'INPUT'\\n\\n\\t// Default textarea styles\\n\\tstyle.whiteSpace = 'pre-wrap'\\n\\tif (!isInput) style.wordWrap = 'break-word' // only for textarea-s\\n\\n\\t// Position off-screen\\n\\tstyle.position = 'absolute' // required to return coordinates properly\\n\\tif (!debug) style.visibility = 'hidden' // not 'display: none' because we want rendering\\n\\n\\t// Transfer the element's properties to the div\\n\\tfor (const prop of properties) {\\n\\t\\tif (isInput && prop === 'lineHeight') {\\n\\t\\t\\t// Special case for <input>s because text is rendered centered and line height may be != height\\n\\t\\t\\tif (computed.boxSizing === 'border-box') {\\n\\t\\t\\t\\tconst height = parseInt(computed.height)\\n\\t\\t\\t\\tconst outerHeight =\\n\\t\\t\\t\\t\\tparseInt(computed.paddingTop) +\\n\\t\\t\\t\\t\\tparseInt(computed.paddingBottom) +\\n\\t\\t\\t\\t\\tparseInt(computed.borderTopWidth) +\\n\\t\\t\\t\\t\\tparseInt(computed.borderBottomWidth)\\n\\t\\t\\t\\tconst targetHeight = outerHeight + parseInt(computed.lineHeight)\\n\\t\\t\\t\\tif (height > targetHeight) {\\n\\t\\t\\t\\t\\tstyle.lineHeight = `${height - outerHeight}px`\\n\\t\\t\\t\\t} else if (height === targetHeight) {\\n\\t\\t\\t\\t\\tstyle.lineHeight = computed.lineHeight\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tstyle.lineHeight = 0\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tstyle.lineHeight = computed.height\\n\\t\\t\\t}\\n\\t\\t} else if (!isInput && prop === 'width' && computed.boxSizing === 'border-box') {\\n\\t\\t\\t// With box-sizing: border-box we need to offset the size slightly inwards.  This small difference can compound\\n\\t\\t\\t// greatly in long textareas with lots of wrapping, leading to very innacurate results if not accounted for.\\n\\t\\t\\t// Firefox will return computed styles in floats, like `0.9px`, while chromium might return `1px` for the same element.\\n\\t\\t\\t// Either way we use `parseFloat` to turn `0.9px` into `0.9` and `1px` into `1`\\n\\t\\t\\tlet totalBorderWidth = parseFloat(computed.borderLeftWidth) + parseFloat(computed.borderRightWidth)\\n\\t\\t\\t// When a vertical scrollbar is present it shrinks the content. We need to account for this by using clientWidth\\n\\t\\t\\t// instead of width in everything but Firefox. When we do that we also have to account for the border width.\\n\\t\\t\\tlet width = isFirefox ? parseFloat(computed[prop]) - totalBorderWidth : element.clientWidth + totalBorderWidth\\n\\t\\t\\tstyle[prop] = `${width}px`\\n\\t\\t} else {\\n\\t\\t\\tstyle[prop] = computed[prop]\\n\\t\\t}\\n\\t}\\n\\n\\tif (isFirefox) {\\n\\t\\t// Firefox lies about the overflow property for textareas: https://bugzilla.mozilla.org/show_bug.cgi?id=984275\\n\\t\\tif (element.scrollHeight > parseInt(computed.height)) style.overflowY = 'scroll'\\n\\t} else {\\n\\t\\tstyle.overflow = 'hidden' // for Chrome to not render a scrollbar; IE keeps overflowY = 'scroll'\\n\\t}\\n\\n\\tdiv.textContent = element.value.substring(0, position)\\n\\t// The second special handling for input type=\\\"text\\\" vs textarea:\\n\\t// spaces need to be replaced with non-breaking spaces - http://stackoverflow.com/a/13402035/1269037\\n\\tif (isInput) div.textContent = div.textContent.replace(/\\\\s/g, '\\\\u00a0')\\n\\n\\tconst span = document.createElement('span')\\n\\t// Wrapping must be replicated *exactly*, including when a long word gets\\n\\t// onto the next line, with whitespace at the end of the line before (#7).\\n\\t// The  *only* reliable way to do that is to copy the *entire* rest of the\\n\\t// textarea's content into the <span> created at the caret position.\\n\\t// For inputs, just '.' would be enough, but no need to bother.\\n\\tspan.textContent = element.value.substring(position) || '.' // || because a completely empty faux span doesn't render at all\\n\\tdiv.appendChild(span)\\n\\n\\tconst coordinates = {\\n\\t\\ttop: span.offsetTop + parseInt(computed['borderTopWidth']),\\n\\t\\tleft: span.offsetLeft + parseInt(computed['borderLeftWidth']),\\n\\t\\theight: parseInt(computed['lineHeight'])\\n\\t}\\n\\n\\tif (debug) {\\n\\t\\tspan.style.backgroundColor = '#aaa'\\n\\t} else {\\n\\t\\tdocument.body.removeChild(div)\\n\\t}\\n\\n\\treturn coordinates\\n}\\n})();\",\"type\":\"application/javascript\",\"module-type\":\"library\"},\"$:/plugins/EvidentlyCube/AutoComplete/window\":{\"title\":\"$:/plugins/EvidentlyCube/AutoComplete/window\",\"tags\":\"$:/tags/PageTemplate\",\"text\":\"\\\\whitespace trim\\n<$let\\n\\twindow-id={{{ [<tw-window-id>else[]] }}}\\n\\tcount={{{ [list[$:/temp/AutoComplete/completion-data]count[]] }}}\\n\\tbase-limit={{$:/plugins/EvidentlyCube/AutoComplete/Config!!rows}}\\n\\tlimit={{{ [<base-limit>add[1]compare:number:eq<count>else<base-limit>] }}}\\n\\thalf-limit={{{ [<limit>divide[2]ceil[]] }}}\\n\\tmax-offset={{{ [<count>subtract<limit>] }}}\\n\\tselected={{$:/temp/AutoComplete/completion-data!!index}}\\n\\toffset={{{ [<selected>subtract<half-limit>min<max-offset>max[0]] }}}\\n\\teditedTiddler={{$:/temp/AutoComplete/completion-data!!edited-tiddler}}\\n>\\n\\n<$list filter=\\\"\\\"\\\"\\n[{$:/temp/AutoComplete/completion-data!!show}]\\n=[{$:/temp/AutoComplete/completion-data!!show-window}match<tv-window-id>then[1]]\\n=[{$:/temp/AutoComplete/completion-data!!show-window}match[-1]then[1]]\\n+[match[1]count[]match[2]]\\n\\\"\\\"\\\" variable=\\\"ignore\\\">\\n\\n<ul class=\\\"ec_ac-completion\\\" style={{$:/temp/AutoComplete/completion-data!!style}}>\\n\\t<$list filter=\\\"[<offset>compare:number:gt[0]]\\\">\\n\\t\\t<li class=\\\"ec_ac-dots-top\\\">...</li>\\n\\t</$list>\\n\\t<$list\\n\\t\\tfilter=\\\"[list[$:/temp/AutoComplete/completion-data]rest<offset>first<limit>]\\\"\\n\\t\\tcounter=\\\"index\\\"\\n\\t\\temptyMessage=\\\"\\\"\\\"<li class=\\\"label\\\">No results</li>\\\"\\\"\\\"\\n\\t>\\n\\t\\t<$list filter=\\\"[<index>add<offset>match<selected>]\\\" variable=\\\"_\\\" emptyMessage=\\\"\\\"\\\"\\n\\t\\t\\t<li class=\\\"ec_ac-link\\\" data-value=<<currentTiddler>>>\\n\\t\\t\\t\\t<$text text={{{ [<currentTiddler>subfilter{$:/temp/AutoComplete/completion-data!!display-filter}] }}} />\\n\\t\\t\\t</li>\\n\\t\\t\\\"\\\"\\\">\\n\\t\\t\\t<li class=\\\"ec_ac-link selected\\\" data-value=<<currentTiddler>>>\\n\\t\\t\\t\\t<$text text={{{ [<currentTiddler>subfilter{$:/temp/AutoComplete/completion-data!!display-filter}] }}} />\\n\\t\\t\\t</li>\\n\\t\\t</$list>\\n\\t</$list>\\n\\t<$list filter=\\\"[<offset>compare:number:lt<max-offset>]\\\">\\n\\t\\t<li class=\\\"ec_ac-dots-bottom\\\">...</li>\\n\\t</$list>\\n</ul>\\n</$list>\\n</$let>\"},\"$:/plugins/EvidentlyCube/Common/Settings\":{\"title\":\"$:/plugins/EvidentlyCube/Common/Settings\",\"caption\":\"Evidently Cube\",\"tags\":\"$:/tags/ControlPanel\",\"text\":\"\\\\whitespace trim\\n! Evidently Cube plugins Settings\\n\\nBelow are settings for all Evidently Cube plugins.\\n\\n<$macrocall\\n\\t$name=\\\"tabs\\\"\\n\\ttabsList=\\\"[all[shadows+tiddlers]tag[$:/tags/EvidentlyCube/SettingsTab]!is[draft]sort[]]\\\"\\n\\tdefault={{{ [all[shadows+tiddlers]tag[$:/tags/EvidentlyCube/SettingsTab]!is[draft]sort[]limit[1]] }}}/>\\n\\n\"}}}"
  },
  {
    "author": "Flibbles",
    "core-version": ">=5.1.22",
    "created": "20210324223551543",
    "demo": "http://flibbles.github.io/tw5-relink/",
    "dependents": "",
    "description": "Flexibility when relinking renamed tiddlers",
    "list": "readme configuration license",
    "modified": "20210324223551543",
    "name": "Relink",
    "plugin-type": "plugin",
    "source": "https://github.com/flibbles/tw5-relink",
    "title": "$:/plugins/flibbles/relink",
    "version": "2.0.0",
    "type": "application/json",
    "text": "{\"tiddlers\":{\"$:/config/flibbles/relink/PluginLibrary\":{\"title\":\"$:/config/flibbles/relink/PluginLibrary\",\"caption\":\"//Relink// Library\",\"tags\":\"$:/tags/PluginLibrary\",\"url\":\"https://flibbles.github.io/tw5-relink/library/index.html\",\"text\":\"The //Relink// library contains //Relink// as well as its supplemental plugins. It is maintained by Flibbles. See the [[github page|https://github.com/flibbles/tw5-relink]] for more information.\\n\"},\"$:/config/flibbles/relink/attributes/$button/set\":{\"title\":\"$:/config/flibbles/relink/attributes/$button/set\",\"text\":\"reference\"},\"$:/config/flibbles/relink/attributes/$button/setTo\":{\"title\":\"$:/config/flibbles/relink/attributes/$button/setTo\",\"text\":\"title\"},\"$:/config/flibbles/relink/attributes/$button/to\":{\"title\":\"$:/config/flibbles/relink/attributes/$button/to\",\"text\":\"title\"},\"$:/config/flibbles/relink/attributes/$checkbox/tag\":{\"title\":\"$:/config/flibbles/relink/attributes/$checkbox/tag\",\"text\":\"title\"},\"$:/config/flibbles/relink/attributes/$checkbox/tiddler\":{\"title\":\"$:/config/flibbles/relink/attributes/$checkbox/tiddler\",\"text\":\"title\"},\"$:/config/flibbles/relink/attributes/$count/filter\":{\"title\":\"$:/config/flibbles/relink/attributes/$count/filter\",\"text\":\"filter\"},\"$:/config/flibbles/relink/attributes/$draggable/filter\":{\"title\":\"$:/config/flibbles/relink/attributes/$draggable/filter\",\"text\":\"filter\"},\"$:/config/flibbles/relink/attributes/$draggable/tiddler\":{\"title\":\"$:/config/flibbles/relink/attributes/$draggable/tiddler\",\"text\":\"title\"},\"$:/config/flibbles/relink/attributes/$edit-bitmap/tiddler\":{\"title\":\"$:/config/flibbles/relink/attributes/$edit-bitmap/tiddler\",\"text\":\"title\"},\"$:/config/flibbles/relink/attributes/$edit-text/tiddler\":{\"title\":\"$:/config/flibbles/relink/attributes/$edit-text/tiddler\",\"text\":\"title\"},\"$:/config/flibbles/relink/attributes/$edit/tiddler\":{\"title\":\"$:/config/flibbles/relink/attributes/$edit/tiddler\",\"text\":\"title\"},\"$:/config/flibbles/relink/attributes/$encrypt/filter\":{\"title\":\"$:/config/flibbles/relink/attributes/$encrypt/filter\",\"text\":\"filter\"},\"$:/config/flibbles/relink/attributes/$fieldmangler/tiddler\":{\"title\":\"$:/config/flibbles/relink/attributes/$fieldmangler/tiddler\",\"text\":\"title\"},\"$:/config/flibbles/relink/attributes/$fields/tiddler\":{\"title\":\"$:/config/flibbles/relink/attributes/$fields/tiddler\",\"text\":\"title\"},\"$:/config/flibbles/relink/attributes/$image/source\":{\"title\":\"$:/config/flibbles/relink/attributes/$image/source\",\"text\":\"title\"},\"$:/config/flibbles/relink/attributes/$importvariables/filter\":{\"title\":\"$:/config/flibbles/relink/attributes/$importvariables/filter\",\"text\":\"filter\"},\"$:/config/flibbles/relink/attributes/$link/to\":{\"title\":\"$:/config/flibbles/relink/attributes/$link/to\",\"text\":\"title\"},\"$:/config/flibbles/relink/attributes/$linkcatcher/set\":{\"title\":\"$:/config/flibbles/relink/attributes/$linkcatcher/set\",\"text\":\"title\"},\"$:/config/flibbles/relink/attributes/$linkcatcher/to\":{\"title\":\"$:/config/flibbles/relink/attributes/$linkcatcher/to\",\"text\":\"title\"},\"$:/config/flibbles/relink/attributes/$list/editTemplate\":{\"title\":\"$:/config/flibbles/relink/attributes/$list/editTemplate\",\"text\":\"title\"},\"$:/config/flibbles/relink/attributes/$list/emptyMessage\":{\"title\":\"$:/config/flibbles/relink/attributes/$list/emptyMessage\",\"text\":\"wikitext\"},\"$:/config/flibbles/relink/attributes/$list/filter\":{\"title\":\"$:/config/flibbles/relink/attributes/$list/filter\",\"text\":\"filter\"},\"$:/config/flibbles/relink/attributes/$list/history\":{\"title\":\"$:/config/flibbles/relink/attributes/$list/history\",\"text\":\"title\"},\"$:/config/flibbles/relink/attributes/$list/template\":{\"title\":\"$:/config/flibbles/relink/attributes/$list/template\",\"text\":\"title\"},\"$:/config/flibbles/relink/attributes/$navigator/history\":{\"title\":\"$:/config/flibbles/relink/attributes/$navigator/history\",\"text\":\"title\"},\"$:/config/flibbles/relink/attributes/$navigator/story\":{\"title\":\"$:/config/flibbles/relink/attributes/$navigator/story\",\"text\":\"title\"},\"$:/config/flibbles/relink/attributes/$radio/tiddler\":{\"title\":\"$:/config/flibbles/relink/attributes/$radio/tiddler\",\"text\":\"title\"},\"$:/config/flibbles/relink/attributes/$range/tiddler\":{\"title\":\"$:/config/flibbles/relink/attributes/$range/tiddler\",\"text\":\"title\"},\"$:/config/flibbles/relink/attributes/$reveal/stateTitle\":{\"title\":\"$:/config/flibbles/relink/attributes/$reveal/stateTitle\",\"text\":\"title\"},\"$:/config/flibbles/relink/attributes/$select/tiddler\":{\"title\":\"$:/config/flibbles/relink/attributes/$select/tiddler\",\"text\":\"title\"},\"$:/config/flibbles/relink/attributes/$set/filter\":{\"title\":\"$:/config/flibbles/relink/attributes/$set/filter\",\"text\":\"filter\"},\"$:/config/flibbles/relink/attributes/$set/subtiddler\":{\"title\":\"$:/config/flibbles/relink/attributes/$set/subtiddler\",\"text\":\"title\"},\"$:/config/flibbles/relink/attributes/$set/tiddler\":{\"title\":\"$:/config/flibbles/relink/attributes/$set/tiddler\",\"text\":\"title\"},\"$:/config/flibbles/relink/attributes/$setvariable/filter\":{\"title\":\"$:/config/flibbles/relink/attributes/$setvariable/filter\",\"text\":\"filter\"},\"$:/config/flibbles/relink/attributes/$setvariable/subtiddler\":{\"title\":\"$:/config/flibbles/relink/attributes/$setvariable/subtiddler\",\"text\":\"title\"},\"$:/config/flibbles/relink/attributes/$setvariable/tiddler\":{\"title\":\"$:/config/flibbles/relink/attributes/$setvariable/tiddler\",\"text\":\"title\"},\"$:/config/flibbles/relink/attributes/$tiddler/tiddler\":{\"title\":\"$:/config/flibbles/relink/attributes/$tiddler/tiddler\",\"text\":\"title\"},\"$:/config/flibbles/relink/attributes/$transclude/subtiddler\":{\"title\":\"$:/config/flibbles/relink/attributes/$transclude/subtiddler\",\"text\":\"title\"},\"$:/config/flibbles/relink/attributes/$transclude/tiddler\":{\"title\":\"$:/config/flibbles/relink/attributes/$transclude/tiddler\",\"text\":\"title\"},\"$:/config/flibbles/relink/attributes/$view/subtiddler\":{\"title\":\"$:/config/flibbles/relink/attributes/$view/subtiddler\",\"text\":\"title\"},\"$:/config/flibbles/relink/attributes/$view/tiddler\":{\"title\":\"$:/config/flibbles/relink/attributes/$view/tiddler\",\"text\":\"title\"},\"$:/config/flibbles/relink/fields/caption\":{\"title\":\"$:/config/flibbles/relink/fields/caption\",\"text\":\"wikitext\"},\"$:/config/flibbles/relink/fields/filter\":{\"title\":\"$:/config/flibbles/relink/fields/filter\",\"text\":\"filter\"},\"$:/config/flibbles/relink/fields/list-after\":{\"title\":\"$:/config/flibbles/relink/fields/list-after\",\"text\":\"title\"},\"$:/config/flibbles/relink/fields/list-before\":{\"title\":\"$:/config/flibbles/relink/fields/list-before\",\"text\":\"title\"},\"$:/config/flibbles/relink/fields/list\":{\"title\":\"$:/config/flibbles/relink/fields/list\",\"text\":\"list\"},\"$:/config/flibbles/relink/fields/tags\":{\"title\":\"$:/config/flibbles/relink/fields/tags\",\"text\":\"list\"},\"$:/config/flibbles/relink/macros/csvtiddlers/filter\":{\"title\":\"$:/config/flibbles/relink/macros/csvtiddlers/filter\",\"text\":\"filter\"},\"$:/config/flibbles/relink/macros/datauri/title\":{\"title\":\"$:/config/flibbles/relink/macros/datauri/title\",\"text\":\"title\"},\"$:/config/flibbles/relink/macros/jsontiddler/title\":{\"title\":\"$:/config/flibbles/relink/macros/jsontiddler/title\",\"text\":\"title\"},\"$:/config/flibbles/relink/macros/jsontiddlers/filter\":{\"title\":\"$:/config/flibbles/relink/macros/jsontiddlers/filter\",\"text\":\"filter\"},\"$:/config/flibbles/relink/macros/list-links-draggable/itemTemplate\":{\"title\":\"$:/config/flibbles/relink/macros/list-links-draggable/itemTemplate\",\"text\":\"title\"},\"$:/config/flibbles/relink/macros/list-links-draggable/tiddler\":{\"title\":\"$:/config/flibbles/relink/macros/list-links-draggable/tiddler\",\"text\":\"title\"},\"$:/config/flibbles/relink/macros/list-links/filter\":{\"title\":\"$:/config/flibbles/relink/macros/list-links/filter\",\"text\":\"filter\"},\"$:/config/flibbles/relink/macros/list-tagged-draggable/itemTemplate\":{\"title\":\"$:/config/flibbles/relink/macros/list-tagged-draggable/itemTemplate\",\"text\":\"title\"},\"$:/config/flibbles/relink/macros/list-tagged-draggable/tag\":{\"title\":\"$:/config/flibbles/relink/macros/list-tagged-draggable/tag\",\"text\":\"title\"},\"$:/config/flibbles/relink/macros/tabs/buttonTemplate\":{\"title\":\"$:/config/flibbles/relink/macros/tabs/buttonTemplate\",\"text\":\"title\"},\"$:/config/flibbles/relink/macros/tabs/default\":{\"title\":\"$:/config/flibbles/relink/macros/tabs/default\",\"text\":\"title\"},\"$:/config/flibbles/relink/macros/tabs/tabsList\":{\"title\":\"$:/config/flibbles/relink/macros/tabs/tabsList\",\"text\":\"filter\"},\"$:/config/flibbles/relink/macros/tabs/template\":{\"title\":\"$:/config/flibbles/relink/macros/tabs/template\",\"text\":\"title\"},\"$:/config/flibbles/relink/macros/tag-pill/tag\":{\"title\":\"$:/config/flibbles/relink/macros/tag-pill/tag\",\"text\":\"title\"},\"$:/config/flibbles/relink/macros/tag/tag\":{\"title\":\"$:/config/flibbles/relink/macros/tag/tag\",\"text\":\"title\"},\"$:/config/flibbles/relink/macros/timeline/subfilter\":{\"title\":\"$:/config/flibbles/relink/macros/timeline/subfilter\",\"text\":\"filter\"},\"$:/config/flibbles/relink/macros/toc-expandable/exclude\":{\"title\":\"$:/config/flibbles/relink/macros/toc-expandable/exclude\",\"text\":\"list\"},\"$:/config/flibbles/relink/macros/toc-expandable/itemClassFilter\":{\"title\":\"$:/config/flibbles/relink/macros/toc-expandable/itemClassFilter\",\"text\":\"filter\"},\"$:/config/flibbles/relink/macros/toc-expandable/tag\":{\"title\":\"$:/config/flibbles/relink/macros/toc-expandable/tag\",\"text\":\"title\"},\"$:/config/flibbles/relink/macros/toc-selective-expandable/exclude\":{\"title\":\"$:/config/flibbles/relink/macros/toc-selective-expandable/exclude\",\"text\":\"list\"},\"$:/config/flibbles/relink/macros/toc-selective-expandable/itemClassFilter\":{\"title\":\"$:/config/flibbles/relink/macros/toc-selective-expandable/itemClassFilter\",\"text\":\"filter\"},\"$:/config/flibbles/relink/macros/toc-selective-expandable/tag\":{\"title\":\"$:/config/flibbles/relink/macros/toc-selective-expandable/tag\",\"text\":\"title\"},\"$:/config/flibbles/relink/macros/toc-tabbed-external-nav/missingText\":{\"title\":\"$:/config/flibbles/relink/macros/toc-tabbed-external-nav/missingText\",\"text\":\"wikitext\"},\"$:/config/flibbles/relink/macros/toc-tabbed-external-nav/selectedTiddler\":{\"title\":\"$:/config/flibbles/relink/macros/toc-tabbed-external-nav/selectedTiddler\",\"text\":\"title\"},\"$:/config/flibbles/relink/macros/toc-tabbed-external-nav/tag\":{\"title\":\"$:/config/flibbles/relink/macros/toc-tabbed-external-nav/tag\",\"text\":\"title\"},\"$:/config/flibbles/relink/macros/toc-tabbed-external-nav/template\":{\"title\":\"$:/config/flibbles/relink/macros/toc-tabbed-external-nav/template\",\"text\":\"title\"},\"$:/config/flibbles/relink/macros/toc-tabbed-external-nav/unselectedText\":{\"title\":\"$:/config/flibbles/relink/macros/toc-tabbed-external-nav/unselectedText\",\"text\":\"wikitext\"},\"$:/config/flibbles/relink/macros/toc-tabbed-internal-nav/missingText\":{\"title\":\"$:/config/flibbles/relink/macros/toc-tabbed-internal-nav/missingText\",\"text\":\"wikitext\"},\"$:/config/flibbles/relink/macros/toc-tabbed-internal-nav/selectedTiddler\":{\"title\":\"$:/config/flibbles/relink/macros/toc-tabbed-internal-nav/selectedTiddler\",\"text\":\"title\"},\"$:/config/flibbles/relink/macros/toc-tabbed-internal-nav/tag\":{\"title\":\"$:/config/flibbles/relink/macros/toc-tabbed-internal-nav/tag\",\"text\":\"title\"},\"$:/config/flibbles/relink/macros/toc-tabbed-internal-nav/template\":{\"title\":\"$:/config/flibbles/relink/macros/toc-tabbed-internal-nav/template\",\"text\":\"title\"},\"$:/config/flibbles/relink/macros/toc-tabbed-internal-nav/unselectedText\":{\"title\":\"$:/config/flibbles/relink/macros/toc-tabbed-internal-nav/unselectedText\",\"text\":\"wikitext\"},\"$:/config/flibbles/relink/macros/toc/itemClassFilter\":{\"title\":\"$:/config/flibbles/relink/macros/toc/itemClassFilter\",\"text\":\"filter\"},\"$:/config/flibbles/relink/macros/toc/tag\":{\"title\":\"$:/config/flibbles/relink/macros/toc/tag\",\"text\":\"title\"},\"$:/config/flibbles/relink/operators/field:title\":{\"title\":\"$:/config/flibbles/relink/operators/field:title\",\"text\":\"title\"},\"$:/config/flibbles/relink/operators/list\":{\"title\":\"$:/config/flibbles/relink/operators/list\",\"text\":\"reference\"},\"$:/config/flibbles/relink/operators/tag\":{\"title\":\"$:/config/flibbles/relink/operators/tag\",\"text\":\"title\"},\"$:/config/flibbles/relink/operators/title\":{\"title\":\"$:/config/flibbles/relink/operators/title\",\"text\":\"title\"},\"$:/config/flibbles/relink/settings/default-type\":{\"title\":\"$:/config/flibbles/relink/settings/default-type\",\"text\":\"title\"},\"$:/core/ui/EditTemplate/title\":{\"title\":\"$:/core/ui/EditTemplate/title\",\"tags\":\"$:/tags/EditTemplate\",\"text\":\"<$edit-text field=\\\"draft.title\\\" class=\\\"tc-titlebar tc-edit-texteditor\\\" focus=\\\"true\\\" tabindex={{$:/config/EditTabIndex}}/>\\n\\n<$reveal state=\\\"!!draft.title\\\" type=\\\"nomatch\\\" text={{!!draft.of}} tag=\\\"div\\\">\\n\\n<$vars pattern=\\\"\\\"\\\"[\\\\|\\\\[\\\\]{}]\\\"\\\"\\\" bad-chars=\\\"\\\"\\\"`| [ ] { }`\\\"\\\"\\\">\\n\\n<$list filter=\\\"[all[current]regexp:draft.title<pattern>]\\\" variable=\\\"listItem\\\">\\n\\n<div class=\\\"tc-message-box\\\">\\n\\n{{$:/core/images/warning}} {{$:/language/EditTemplate/Title/BadCharacterWarning}}\\n\\n</div>\\n\\n</$list>\\n\\n</$vars>\\n\\n<$list filter=\\\"[{!!draft.title}!is[missing]]\\\" variable=\\\"listItem\\\">\\n\\n<div class=\\\"tc-message-box\\\">\\n\\n{{$:/core/images/warning}} {{$:/language/EditTemplate/Title/Exists/Prompt}}\\n\\n</div>\\n\\n</$list>\\n\\n<$list filter=\\\"[{!!draft.of}!is[missing]]\\\" variable=\\\"listItem\\\">\\n\\n<$vars fromTitle={{!!draft.of}} toTitle={{!!draft.title}}>\\n\\n<$checkbox tiddler=\\\"$:/config/RelinkOnRename\\\" field=\\\"text\\\" checked=\\\"yes\\\" unchecked=\\\"no\\\" default=\\\"no\\\"> {{$:/language/EditTemplate/Title/Relink/Prompt}}</$checkbox>\\n\\n<$tiddler tiddler=<<fromTitle>> >\\n\\n<$list filter=\\\"[relink:wouldchange<toTitle>limit[1]]\\\" variable=\\\"listItem\\\">\\n\\n<$vars stateTiddler=<<qualify \\\"$:/state/edit/references\\\">> >\\n\\n<$set\\n\\tname=\\\"prompt\\\"\\n\\tfilter=\\\"[relink:wouldchange<toTitle>relink:impossible<toTitle>]\\\"\\n\\tvalue=\\\"EditTemplate/Title/Impossibles/Prompt\\\"\\n\\temptyValue=\\\"EditTemplate/Title/References/Prompt\\\" >\\n<$reveal type=\\\"nomatch\\\" state=<<stateTiddler>> text=\\\"show\\\">\\n<$button set=<<stateTiddler>> setTo=\\\"show\\\" class=\\\"tc-btn-invisible\\\">{{$:/core/images/right-arrow}}\\n<$macrocall $name=lingo title=<<prompt>> />\\n</$button>\\n</$reveal>\\n<$reveal type=\\\"match\\\" state=<<stateTiddler>> text=\\\"show\\\">\\n<$button set=<<stateTiddler>> setTo=\\\"hide\\\" class=\\\"tc-btn-invisible\\\">{{$:/core/images/down-arrow}}\\n<$macrocall $name=lingo title=<<prompt>> />\\n</$button>\\n</$reveal>\\n</$set>\\n\\n<$reveal type=\\\"match\\\" state=<<stateTiddler>> text=\\\"show\\\">\\n<$list variable=\\\"listItem\\\" filter=\\\"[relink:wouldchange<toTitle>!title[$:/StoryList]sort[title]]\\\" template=\\\"$:/plugins/flibbles/relink/ui/ListItemTemplate\\\">\\n</$list>\\n</$reveal>\\n\\n</$vars>\\n\\n</$list>\\n\\n</$tiddler>\\n\\n</$vars>\\n\\n</$list>\\n\\n</$reveal>\\n\"},\"$:/language/EditTemplate/Title/Impossibles/Prompt\":{\"title\":\"$:/language/EditTemplate/Title/Impossibles/Prompt\",\"text\":\"''Warning:'' Not all references in the following tiddlers can be updated by //Relink// due to the complexity of the new title:\"},\"$:/language/EditTemplate/Title/References/Prompt\":{\"title\":\"$:/language/EditTemplate/Title/References/Prompt\",\"text\":\"The following tiddlers will be updated if relinking:\"},\"$:/language/EditTemplate/Title/Relink/Prompt\":{\"title\":\"$:/language/EditTemplate/Title/Relink/Prompt\",\"text\":\"Use //Relink// to update ''<$text text=<<fromTitle>>/>'' to ''<$text text=<<toTitle>>/>'' across all other tiddlers\"},\"$:/plugins/flibbles/relink/configuration\":{\"title\":\"$:/plugins/flibbles/relink/configuration\",\"text\":\"<div class=\\\"tc-control-panel\\\">\\n<<tabs \\\"[all[shadows+tiddlers]tag[$:/tags/flibbles/relink/Configuration]!has[draft.of]]\\\" \\\"$:/plugins/flibbles/relink/ui/configuration/Fields\\\">>\\n</div>\\n\"},\"$:/plugins/flibbles/relink/js/bulkops.js\":{\"title\":\"$:/plugins/flibbles/relink/js/bulkops.js\",\"text\":\"/*\\\\\\nmodule-type: startup\\n\\nReplaces the relinkTiddler defined in $:/core/modules/wiki-bulkops.js\\n\\nThis is a startup instead of a wikimethods module-type because it's the only\\nway to ensure this runs after the old relinkTiddler method is applied.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: false, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar language = require('$:/plugins/flibbles/relink/js/language.js');\\nvar utils = require(\\\"$:/plugins/flibbles/relink/js/utils.js\\\");\\n\\nexports.name = \\\"redefine-relinkTiddler\\\";\\nexports.synchronous = true;\\n// load-modules is when wikimethods are applied in\\n// ``$:/core/modules/startup/load-modules.js``\\nexports.after = ['load-modules'];\\n\\nexports.startup = function() {\\n\\t$tw.Wiki.prototype.relinkTiddler = relinkTiddler;\\n};\\n\\n/** Walks through all relinkable tiddlers and relinks them.\\n *  This replaces the existing function in core Tiddlywiki.\\n */\\nfunction relinkTiddler(fromTitle, toTitle, options) {\\n\\toptions = options || {};\\n\\tvar failures = [];\\n\\tvar indexer = utils.getIndexer(this);\\n\\tvar records = indexer.relinkLookup(fromTitle, toTitle, options);\\n\\tfor (var title in records) {\\n\\t\\tvar entries = records[title],\\n\\t\\t\\tchanges = Object.create(null),\\n\\t\\t\\tupdate = false,\\n\\t\\t\\tfails = false;\\n\\t\\tfor (var field in entries) {\\n\\t\\t\\tvar entry = entries[field];\\n\\t\\t\\tfails = fails || entry.impossible;\\n\\t\\t\\tif (entry.output) {\\n\\t\\t\\t\\tchanges[field] = entry.output;\\n\\t\\t\\t\\tupdate = true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (fails) {\\n\\t\\t\\tfailures.push(title);\\n\\t\\t}\\n\\t\\t// If any fields changed, update tiddler\\n\\t\\tif (update) {\\n\\t\\t\\tconsole.log(\\\"Renaming '\\\"+fromTitle+\\\"' to '\\\"+toTitle+\\\"' in '\\\" + title + \\\"'\\\");\\n\\n\\t\\t\\tvar tiddler = this.getTiddler(title);\\n\\t\\t\\tvar newTiddler = new $tw.Tiddler(tiddler,changes,this.getModificationFields())\\n\\t\\t\\tnewTiddler = $tw.hooks.invokeHook(\\\"th-relinking-tiddler\\\",newTiddler,tiddler);\\n\\t\\t\\tthis.addTiddler(newTiddler);\\n\\t\\t\\t// If the title changed, we need to perform a nested rename\\n\\t\\t\\tif (newTiddler.fields.title !== title) {\\n\\t\\t\\t\\tthis.deleteTiddler(title);\\n\\t\\t\\t\\tthis.relinkTiddler(title, newTiddler.fields.title,options);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\tif (failures.length > 0) {\\n\\t\\tvar options = $tw.utils.extend(\\n\\t\\t\\t{ variables: {to: toTitle, from: fromTitle},\\n\\t\\t\\t  wiki: this},\\n\\t\\t\\toptions );\\n\\t\\tlanguage.reportFailures(failures, options);\\n\\t}\\n};\\n\\n})();\\n\",\"module-type\":\"startup\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/contexts/context.js\":{\"title\":\"$:/plugins/flibbles/relink/js/contexts/context.js\",\"text\":\"/*\\\\\\n\\nBase class for relink contexts.\\n\\n\\\\*/\\n\\nfunction Context() {\\n};\\n\\nexports.context = Context;\\n\\n// This class does no special handling of fields, operators, or attributes.\\n// we pass it along to the parent.\\nContext.prototype.getFields = function() {\\n\\treturn this.parent.getFields();\\n};\\n\\nContext.prototype.getOperator = function(name, index) {\\n\\treturn this.parent.getOperator(name, index);\\n};\\n\\nContext.prototype.getOperators = function() {\\n\\treturn this.parent.getOperators();\\n};\\n\\nContext.prototype.getAttribute = function(elementName) {\\n\\treturn this.parent.getAttribute(elementName);\\n};\\n\\nContext.prototype.getAttributes = function() {\\n\\treturn this.parent.getAttributes();\\n};\\n\\nContext.prototype.getMacro = function(macroName) {\\n\\treturn this.parent.getMacro(macroName);\\n};\\n\\nContext.prototype.getMacros = function() {\\n\\treturn this.parent.getMacros();\\n};\\n\\nContext.prototype.allowPrettylinks = function() {\\n\\treturn this.parent.allowPrettylinks();\\n};\\n\\nContext.prototype.allowWidgets = function() {\\n\\treturn this.parent.allowWidgets();\\n};\\n\\nContext.prototype.hasImports = function(value) {\\n\\treturn this.parent.hasImports(value);\\n};\\n\",\"module-type\":\"relinkcontext\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/contexts/import.js\":{\"title\":\"$:/plugins/flibbles/relink/js/contexts/import.js\",\"text\":\"/*\\\\\\n\\nThis handles the fetching and distribution of relink settings.\\n\\n\\\\*/\\n\\nvar WidgetContext = require('./widget').widget;\\n\\nfunction ImportContext(wiki, parent, filter) {\\n\\tthis.parent = parent;\\n\\tthis.wiki = wiki;\\n\\tvar importWidget = createImportWidget(filter, this.wiki, this.parent.widget);\\n\\tthis._compileList(importWidget.tiddlerList);\\n\\t// This only works if only one filter is imported\\n\\tthis.widget = this.getBottom(importWidget);\\n\\t// Trickle this up, so that any containing tiddlercontext knows that this\\n\\t// tiddler does some importing, and must be checked regularly.\\n\\tparent.hasImports(true);\\n};\\n\\nexports.import = ImportContext;\\n\\nImportContext.prototype = new WidgetContext();\\n\\nImportContext.prototype.changed = function(changes) {\\n\\treturn this.widget && this.widget.refresh(changes)\\n};\\n\\nfunction createImportWidget(filter, wiki, parent) {\\n\\tvar widget = wiki.makeWidget( { tree: [{\\n\\t\\ttype: \\\"importvariables\\\",\\n\\t\\tattributes: {\\n\\t\\t\\t\\\"filter\\\": {\\n\\t\\t\\t\\ttype: \\\"string\\\",\\n\\t\\t\\t\\tvalue: filter\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}] }, { parentWidget: parent} );\\n\\tif (parent) {\\n\\t\\tparent.children.push(widget);\\n\\t}\\n\\twidget.execute();\\n\\twidget.renderChildren();\\n\\tvar importWidget = widget.children[0];\\n\\treturn importWidget;\\n};\\n\\nImportContext.prototype._compileList = function(titleList) {\\n\\tfor (var i = 0; i < titleList.length; i++) {\\n\\t\\tvar parser = this.wiki.parseTiddler(titleList[i]);\\n\\t\\tif (parser) {\\n\\t\\t\\tvar parseTreeNode = parser.tree[0];\\n\\t\\t\\twhile (parseTreeNode && parseTreeNode.type === \\\"set\\\") {\\n\\t\\t\\t\\tif (parseTreeNode.relink) {\\n\\t\\t\\t\\t\\tfor (var macroName in parseTreeNode.relink) {\\n\\t\\t\\t\\t\\t\\tvar parameters = parseTreeNode.relink[macroName];\\n\\t\\t\\t\\t\\t\\tfor (paramName in parameters) {\\n\\t\\t\\t\\t\\t\\t\\tthis.addSetting(this.wiki, macroName, paramName, parameters[paramName], titleList[i]);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tparseTreeNode = parseTreeNode.children && parseTreeNode.children[0];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n};\\n\",\"module-type\":\"relinkcontext\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/contexts/tiddler.js\":{\"title\":\"$:/plugins/flibbles/relink/js/contexts/tiddler.js\",\"text\":\"/*\\\\\\n\\nContext for a tiddler. Defines nothing but makes an entry point to test if\\na tiddler must be refreshed.\\n\\n\\\\*/\\n\\nvar WidgetContext = require('./widget.js').widget;\\n\\nfunction TiddlerContext(wiki, parentContext, title) {\\n\\tthis.title = title;\\n\\tthis.parent = parentContext;\\n\\tvar globalWidget = parentContext && parentContext.widget;\\n\\tvar parentWidget = wiki.makeWidget(null, {parentWidget: globalWidget});\\n\\tparentWidget.setVariable('currentTiddler', title);\\n\\tthis.widget = wiki.makeWidget(null, {parentWidget: parentWidget});\\n};\\n\\nexports.tiddler = TiddlerContext;\\n\\nTiddlerContext.prototype = new WidgetContext();\\n\\nTiddlerContext.prototype.changed = function(changes) {\\n\\treturn this.widget && this.widget.refresh(changes);\\n};\\n\\n// By default, a tiddler context does not use imports, unless an import\\n// statement is later discovered somewhere in the fields.\\nTiddlerContext.prototype.hasImports = function(value) {\\n\\treturn this._hasImports || (this._hasImports = value);\\n};\\n\",\"module-type\":\"relinkcontext\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/contexts/variable.js\":{\"title\":\"$:/plugins/flibbles/relink/js/contexts/variable.js\",\"text\":\"/*\\\\\\n\\nThis handles the context for variables. Either from $set, $vars, or \\\\define\\n\\n\\\\*/\\n\\nvar WidgetContext = require('./widget').widget;\\n\\nfunction VariableContext(parent, setParseTreeNode) {\\n\\tthis.parent = parent;\\n\\t// Now create a new widget and attach it.\\n\\tvar attachPoint = parent.widget;\\n\\tvar setWidget = attachPoint.makeChildWidget(setParseTreeNode);\\n\\tattachPoint.children.push(setWidget);\\n\\tsetWidget.computeAttributes();\\n\\tsetWidget.execute();\\n\\t// point our widget to bottom, where any other contexts would attach to\\n\\tthis.widget = this.getBottom(setWidget);\\n};\\n\\nexports.variable = VariableContext;\\n\\nVariableContext.prototype = new WidgetContext();\\n\",\"module-type\":\"relinkcontext\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/contexts/whitelist.js\":{\"title\":\"$:/plugins/flibbles/relink/js/contexts/whitelist.js\",\"text\":\"/*\\\\\\n\\nThis top-level context manages settings inside the whitelist. It never has\\na parent.\\n\\n\\\\*/\\n\\nvar utils = require('../utils');\\nvar Context = require('./context').context;\\n\\nvar prefix = \\\"$:/config/flibbles/relink/\\\";\\n\\nfunction WhitelistContext(wiki) {\\n\\tbuild(this, wiki);\\n};\\n\\nexports.whitelist = WhitelistContext;\\n\\nWhitelistContext.prototype = new Context();\\n\\n/**Hot directories are directories for which if anything changes inside them,\\n * then Relink must completely rebuild its index.\\n * By default, this includes the whitelist settings, but relink-titles also\\n * includes its rules disabling directory.\\n * This is the FIRST solution I came up with to this problem. If you're\\n * looking at this, please make a github issue so I have a chance to understand\\n * your needs. This is currently a HACK solution.\\n */\\nWhitelistContext.hotDirectories = [prefix];\\n\\nWhitelistContext.prototype.getAttribute = function(elementName) {\\n\\treturn this.attributes[elementName];\\n};\\n\\nWhitelistContext.prototype.getAttributes = function() {\\n\\treturn flatten(this.attributes);\\n};\\n\\nWhitelistContext.prototype.getFields = function() {\\n\\treturn this.fields;\\n};\\n\\nWhitelistContext.prototype.getOperator = function(operatorName, operandIndex) {\\n\\tvar op = this.operators[operatorName];\\n\\treturn op && op[operandIndex || 1];\\n};\\n\\nWhitelistContext.prototype.getOperators = function() {\\n\\tvar signatures = Object.create(null);\\n\\tfor (var op in this.operators) {\\n\\t\\tvar operandSet = this.operators[op];\\n\\t\\tfor (var index in operandSet) {\\n\\t\\t\\tvar entry = operandSet[index];\\n\\t\\t\\tsignatures[entry.key] = entry;\\n\\t\\t}\\n\\t}\\n\\treturn signatures;\\n};\\n\\nWhitelistContext.prototype.getMacro = function(macroName) {\\n\\treturn this.macros[macroName];\\n};\\n\\nWhitelistContext.prototype.getMacros = function() {\\n\\treturn flatten(this.macros);\\n};\\n\\nWhitelistContext.prototype.changed = function(changedTiddlers) {\\n\\tfor (var i = 0; i < WhitelistContext.hotDirectories.length; i++) {\\n\\t\\tvar dir = WhitelistContext.hotDirectories[i];\\n\\t\\tfor (var title in changedTiddlers) {\\n\\t\\t\\tif (title.substr(0, dir.length) === dir) {\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n};\\n\\nWhitelistContext.prototype.hasImports = function(value) {\\n\\t// We don't care if imports are used. This is the global level.\\n\\treturn false;\\n};\\n\\n/**Factories define methods that create settings given config tiddlers.\\n * for factory method 'example', it will be called once for each:\\n * \\\"$:/config/flibbles/relink/example/...\\\" tiddler that exists.\\n * the argument \\\"key\\\" will be set to the contents of \\\"...\\\"\\n *\\n * The reason I build relink settings in this convoluted way is to minimize\\n * the number of times tiddlywiki has to run through EVERY tiddler looking\\n * for relink config tiddlers.\\n *\\n * Also, by exporting \\\"factories\\\", anyone who extends relink can patch in\\n * their own factory methods to create settings that are generated exactly\\n * once per rename.\\n */\\nvar factories = {\\n\\tattributes: function(attributes, data, key) {\\n\\t\\tvar elem = root(key);\\n\\t\\tvar attr = key.substr(elem.length+1);\\n\\t\\tattributes[elem] = attributes[elem] || Object.create(null);\\n\\t\\tattributes[elem][attr] = data;\\n\\t},\\n\\tfields: function(fields, data, name) {\\n\\t\\tfields[name] = data;\\n\\t},\\n\\tmacros: function(macros, data, key) {\\n\\t\\t// We take the last index, not the first, because macro\\n\\t\\t// parameters can't have slashes, but macroNames can.\\n\\t\\tvar name = dir(key);\\n\\t\\tvar arg = key.substr(name.length+1);\\n\\t\\tmacros[name] = macros[name] || Object.create(null);\\n\\t\\tmacros[name][arg] = data;\\n\\t},\\n\\toperators: function(operators, data, key) {\\n\\t\\t// We take the last index, not the first, because the operator\\n\\t\\t// may have a slash to indicate parameter number\\n\\t\\tvar pair = key.split('/');\\n\\t\\tvar name = pair[0];\\n\\t\\tdata.key = key;\\n\\t\\toperators[name] = operators[name] || Object.create(null);\\n\\t\\toperators[name][pair[1] || 1] = data;\\n\\t}\\n};\\n\\nfunction build(settings, wiki) {\\n\\tfor (var name in factories) {\\n\\t\\tsettings[name] = Object.create(null);\\n\\t}\\n\\twiki.eachShadowPlusTiddlers(function(tiddler, title) {\\n\\t\\tif (title.substr(0, prefix.length) === prefix) {\\n\\t\\t\\tvar remainder = title.substr(prefix.length);\\n\\t\\t\\tvar category = root(remainder);\\n\\t\\t\\tvar factory = factories[category];\\n\\t\\t\\tif (factory) {\\n\\t\\t\\t\\tvar name = remainder.substr(category.length+1);\\n\\t\\t\\t\\tvar data = utils.getType(tiddler.fields.text.trim());\\n\\t\\t\\t\\tif (data) {\\n\\t\\t\\t\\t\\tdata.source = title;\\n\\t\\t\\t\\t\\t// Secret feature. You can access a config tiddler's\\n\\t\\t\\t\\t\\t// fields from inside the fieldtype handler. Cool\\n\\t\\t\\t\\t\\t// tricks can be done with this.\\n\\t\\t\\t\\t\\tdata.fields = tiddler.fields;\\n\\t\\t\\t\\t\\tfactory(settings[category], data, name);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t});\\n};\\n\\n/* Returns first bit of a path. path/to/tiddler -> path\\n */\\nfunction root(string) {\\n\\tvar index = string.indexOf('/');\\n\\tif (index >= 0) {\\n\\t\\treturn string.substr(0, index);\\n\\t}\\n};\\n\\n/* Returns all but the last bit of a path. path/to/tiddler -> path/to\\n */\\nfunction dir(string) {\\n\\tvar index = string.lastIndexOf('/');\\n\\tif (index >= 0) {\\n\\t\\treturn string.substr(0, index);\\n\\t}\\n}\\n\\n/* Turns {dir: {file1: 'value1', file2: 'value2'}}\\n * into {dir/file1: 'value1', dir/file2: 'value2'}\\n */\\nfunction flatten(set) {\\n\\tvar signatures = Object.create(null);\\n\\tfor (var outerName in set) {\\n\\t\\tvar setItem = set[outerName];\\n\\t\\tfor (var innerName in setItem) {\\n\\t\\t\\tsignatures[outerName + \\\"/\\\" + innerName] = setItem[innerName];\\n\\t\\t}\\n\\t}\\n\\treturn signatures;\\n};\\n\",\"module-type\":\"relinkcontext\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/contexts/widget.js\":{\"title\":\"$:/plugins/flibbles/relink/js/contexts/widget.js\",\"text\":\"/*\\\\\\n\\nThis is a virtual subclass of context for contexts that exist within widgets\\nof a specific tiddler.\\n\\nAll widget contexts must have a widget member.\\n\\n\\\\*/\\n\\nvar Context = require('./context.js').context;\\nvar utils = require('$:/plugins/flibbles/relink/js/utils.js');\\n\\nfunction WidgetContext() {};\\n\\nexports.widget = WidgetContext;\\n\\nWidgetContext.prototype = new Context();\\n\\nWidgetContext.prototype.getMacroDefinition = function(variableName) {\\n\\t// widget.variables is prototyped, so it looks up into all its parents too\\n\\treturn this.widget.variables[variableName] || $tw.macros[variableName];\\n};\\n\\nWidgetContext.prototype.addSetting = function(wiki, macroName, parameter, type, sourceTitle) {\\n\\tthis.macros = this.macros || Object.create(null);\\n\\tvar macro = this.macros[macroName];\\n\\ttype = type || utils.getDefaultType(wiki);\\n\\tif (macro === undefined) {\\n\\t\\tmacro = this.macros[macroName] = Object.create(null);\\n\\t}\\n\\tvar handler = utils.getType(type);\\n\\tif (handler) {\\n\\t\\thandler.source = sourceTitle;\\n\\t\\t// We attach the fields of the defining tiddler for the benefit\\n\\t\\t// of any 3rd party field types that want access to them.\\n\\t\\tvar tiddler = wiki.getTiddler(sourceTitle);\\n\\t\\thandler.fields = tiddler.fields;\\n\\t\\tmacro[parameter] = handler;\\n\\t}\\n};\\n\\nWidgetContext.prototype.getMacros = function() {\\n\\tvar signatures = this.parent.getMacros();\\n\\tif (this.macros) {\\n\\t\\tfor (var macroName in this.macros) {\\n\\t\\t\\tvar macro = this.macros[macroName];\\n\\t\\t\\tfor (var param in macro) {\\n\\t\\t\\t\\tsignatures[macroName + \\\"/\\\" + param] = macro[param];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn signatures;\\n};\\n\\n/**This does strange handling because it's possible for a macro to have\\n * its individual parameters whitelisted in separate places.\\n * Don't know WHY someone would do this, but it can happen.\\n */\\nWidgetContext.prototype.getMacro = function(macroName) {\\n\\tvar theseSettings = this.macros && this.macros[macroName];\\n\\tvar parentSettings;\\n\\tif (this.parent) {\\n\\t\\tparentSettings = this.parent.getMacro(macroName);\\n\\t}\\n\\tif (theseSettings && parentSettings) {\\n\\t\\t// gotta merge them without changing either. This is expensive,\\n\\t\\t// but it'll happen rarely.\\n\\t\\tvar rtnSettings = $tw.utils.extend(Object.create(null), theseSettings, parentSettings);\\n\\t\\treturn rtnSettings;\\n\\t}\\n\\treturn theseSettings || parentSettings;\\n};\\n\\n/**Returns the deepest descendant of the given widget.\\n */\\nWidgetContext.prototype.getBottom = function(widget) {\\n\\twhile (widget.children.length > 0) {\\n\\t\\twidget = widget.children[0];\\n\\t}\\n\\treturn widget;\\n};\\n\",\"module-type\":\"relinkcontext\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/contexts/wikitext.js\":{\"title\":\"$:/plugins/flibbles/relink/js/contexts/wikitext.js\",\"text\":\"/*\\\\\\n\\nContext for wikitext. It can contain rules about what's allowed in this\\ncurrent layer of wikitext.\\n\\n\\\\*/\\n\\nvar WidgetContext = require('./widget.js').widget;\\n\\nfunction WikitextContext(parentContext) {\\n\\tthis.parent = parentContext;\\n\\tthis.widget = parentContext.widget;\\n};\\n\\nexports.wikitext = WikitextContext;\\n\\nWikitextContext.prototype = new WidgetContext();\\n\\n// Unless this specific context has rules about it, widgets and prettyLInks are allowed.\\nWikitextContext.prototype.allowWidgets = enabled;\\nWikitextContext.prototype.allowPrettylinks = enabled;\\n\\nfunction enabled() { return true; };\\n\",\"module-type\":\"relinkcontext\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/fieldtypes/filter.js\":{\"title\":\"$:/plugins/flibbles/relink/js/fieldtypes/filter.js\",\"text\":\"/*\\\\\\nThis specifies logic for updating filters to reflect title changes.\\n\\\\*/\\n\\nvar refHandler = require(\\\"$:/plugins/flibbles/relink/js/fieldtypes/reference\\\");\\nvar Rebuilder = require(\\\"$:/plugins/flibbles/relink/js/utils/rebuilder\\\");\\n\\nexports.name = \\\"filter\\\";\\n\\nexports.report = function(filter, callback, options) {\\n\\t// I cheat here for now. Relink handles reporting too in cases where\\n\\t// fromTitle is undefined. toTitle is the callback in those cases.\\n\\texports.relink(filter, undefined, callback, options);\\n};\\n\\n/**Returns undefined if no change was made.\\n */\\nexports.relink = function(filter, fromTitle, toTitle, options) {\\n\\tvar relinker = new Rebuilder(filter),\\n\\t\\tp = 0, // Current position in the filter string\\n\\t\\tmatch, noPrecedingWordBarrier,\\n\\t\\twordBarrierRequired=false;\\n\\tvar whitespaceRegExp = /\\\\s+/mg,\\n\\t\\toperandRegExp = /((?:\\\\+|\\\\-|~|=|\\\\:\\\\w+)?)(?:(\\\\[)|(?:\\\"([^\\\"]*)\\\")|(?:'([^']*)')|([^\\\\s\\\\[\\\\]]+))/mg,\\n\\t\\tblurbs = [];\\n\\twhile(p < filter.length) {\\n\\t\\t// Skip any whitespace\\n\\t\\twhitespaceRegExp.lastIndex = p;\\n\\t\\tmatch = whitespaceRegExp.exec(filter);\\n\\t\\tnoPrecedingWordBarrier = false;\\n\\t\\tif(match && match.index === p) {\\n\\t\\t\\tp = p + match[0].length;\\n\\t\\t} else if (p != 0) {\\n\\t\\t\\tif (wordBarrierRequired) {\\n\\t\\t\\t\\trelinker.add(' ', p, p);\\n\\t\\t\\t\\twordBarrierRequired = false;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tnoPrecedingWordBarrier = true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// Match the start of the operation\\n\\t\\tif(p < filter.length) {\\n\\t\\t\\tvar val;\\n\\t\\t\\toperandRegExp.lastIndex = p;\\n\\t\\t\\tmatch = operandRegExp.exec(filter);\\n\\t\\t\\tif(!match || match.index !== p) {\\n\\t\\t\\t\\t// It's a bad filter\\n\\t\\t\\t\\treturn undefined;\\n\\t\\t\\t}\\n\\t\\t\\tif(match[1]) { // prefix\\n\\t\\t\\t\\tp += match[1].length;\\n\\t\\t\\t}\\n\\t\\t\\tif(match[2]) { // Opening square bracket\\n\\t\\t\\t\\t// We check if this is a standalone title,\\n\\t\\t\\t\\t// like `[[MyTitle]]`. We treat those like\\n\\t\\t\\t\\t// `\\\"MyTitle\\\"` or `MyTitle`. Not like a run.\\n\\t\\t\\t\\tvar standaloneTitle = /\\\\[\\\\[([^\\\\]]+)\\\\]\\\\]/g;\\n\\t\\t\\t\\tstandaloneTitle.lastIndex = p;\\n\\t\\t\\t\\tvar alone = standaloneTitle.exec(filter);\\n\\t\\t\\t\\tif (!alone || alone.index != p) {\\n\\t\\t\\t\\t\\tif (fromTitle === undefined) {\\n\\t\\t\\t\\t\\t\\t// toTitle is a callback method in this case.\\n\\t\\t\\t\\t\\t\\tp =reportFilterOperation(filter, function(title, blurb){\\n\\t\\t\\t\\t\\t\\t\\tif (match[1]) {\\n\\t\\t\\t\\t\\t\\t\\t\\tblurbs.push([title, match[1] + (blurb || '')]);\\n\\t\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\t\\tblurbs.push([title, blurb]);\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t},p,options.settings,options);\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tp =relinkFilterOperation(relinker,fromTitle,toTitle,filter,p,options.settings,options);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t// It's a legit run\\n\\t\\t\\t\\t\\tif (p === undefined) {\\n\\t\\t\\t\\t\\t\\t// The filter is malformed\\n\\t\\t\\t\\t\\t\\t// We do nothing.\\n\\t\\t\\t\\t\\t\\treturn undefined;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tbracketTitle = alone[1];\\n\\t\\t\\t\\toperandRegExp.lastIndex = standaloneTitle.lastIndex;\\n\\t\\t\\t\\tval = alone[1];\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t// standalone Double quoted string, single\\n\\t\\t\\t\\t// quoted string, or noquote ahead.\\n\\t\\t\\t\\tval = match[3] || match[4] || match[5];\\n\\t\\t\\t}\\n\\t\\t\\t// From here on, we're dealing with a standalone title\\n\\t\\t\\t// expression. like `\\\"MyTitle\\\"` or `[[MyTitle]]`\\n\\t\\t\\t// We're much more flexible about relinking these.\\n\\t\\t\\tvar preference = undefined;\\n\\t\\t\\tif (match[3]) {\\n\\t\\t\\t\\tpreference = '\\\"';\\n\\t\\t\\t} else if (match[4]) {\\n\\t\\t\\t\\tpreference = \\\"'\\\";\\n\\t\\t\\t} else if (match[5]) {\\n\\t\\t\\t\\tpreference = '';\\n\\t\\t\\t}\\n\\t\\t\\tif (fromTitle === undefined) {\\n\\t\\t\\t\\t// Report it\\n\\t\\t\\t\\tblurbs.push([val, match[1]]);\\n\\t\\t\\t} else if (val === fromTitle) {\\n\\t\\t\\t\\t// Relink it\\n\\t\\t\\t\\tvar entry = {name: \\\"title\\\"};\\n\\t\\t\\t\\tvar newVal = wrapTitle(toTitle, preference);\\n\\t\\t\\t\\tif (newVal === undefined || (options.inBraces && newVal.indexOf('}}}') >= 0)) {\\n\\t\\t\\t\\t\\tif (!options.placeholder) {\\n\\t\\t\\t\\t\\t\\trelinker.impossible = true;\\n\\t\\t\\t\\t\\t\\tp = operandRegExp.lastIndex;\\n\\t\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tnewVal = \\\"[<\\\"+options.placeholder.getPlaceholderFor(toTitle)+\\\">]\\\";\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (newVal[0] != '[') {\\n\\t\\t\\t\\t\\t// not bracket enclosed\\n\\t\\t\\t\\t\\t// this requires whitespace\\n\\t\\t\\t\\t\\t// arnound it\\n\\t\\t\\t\\t\\tif (noPrecedingWordBarrier && !match[1]) {\\n\\t\\t\\t\\t\\t\\trelinker.add(' ', p, p);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\twordBarrierRequired = true;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tentry.output = toTitle;\\n\\t\\t\\t\\tentry.operator = {operator: \\\"title\\\"};\\n\\t\\t\\t\\tentry.quotation = preference;\\n\\t\\t\\t\\tif (entry.impossible) {\\n\\t\\t\\t\\t\\trelinker.impossible = true;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\trelinker.add(newVal,p,operandRegExp.lastIndex);\\n\\t\\t\\t}\\n\\t\\t\\tp = operandRegExp.lastIndex;\\n\\t\\t}\\n\\t}\\n\\tif (fromTitle === undefined) {\\n\\t\\t// We delay the blurb calls until now in case it's a malformed\\n\\t\\t// filter string. We don't want to report some, only to find out\\n\\t\\t// it's bad.\\n\\t\\tfor (var i = 0; i < blurbs.length; i++) {\\n\\t\\t\\ttoTitle(blurbs[i][0], blurbs[i][1]);\\n\\t\\t}\\n\\t}\\n\\tif (relinker.changed() || relinker.impossible) {\\n\\t\\treturn {output: relinker.results(), impossible: relinker.impossible };\\n\\t}\\n\\treturn undefined;\\n};\\n\\n/* Same as this.relink, except this has the added constraint that the return\\n * value must be able to be wrapped in curly braces. (i.e. '{{{...}}}')\\n */\\nexports.relinkInBraces = function(filter, fromTitle, toTitle, options) {\\n\\tvar braceOptions = $tw.utils.extend({inBraces: true}, options);\\n\\tvar entry = this.relink(filter, fromTitle, toTitle, braceOptions);\\n\\tif (entry && entry.output && !canBeInBraces(entry.output)) {\\n\\t\\t// It was possible, but it won't fit in braces, so we must give up\\n\\t\\tdelete entry.output;\\n\\t\\tentry.impossible = true;\\n\\t}\\n\\treturn entry;\\n};\\n\\nfunction wrapTitle(value, preference) {\\n\\tvar choices = {\\n\\t\\t\\\"\\\": function(v) {return /^[^\\\\s\\\\[\\\\]]*[^\\\\s\\\\[\\\\]\\\\}]$/.test(v); },\\n\\t\\t\\\"[\\\": canBePrettyOperand,\\n\\t\\t\\\"'\\\": function(v) {return v.indexOf(\\\"'\\\") < 0; },\\n\\t\\t'\\\"': function(v) {return v.indexOf('\\\"') < 0; }\\n\\t};\\n\\tvar wrappers = {\\n\\t\\t\\\"\\\": function(v) {return v; },\\n\\t\\t\\\"[\\\": function(v) {return \\\"[[\\\"+v+\\\"]]\\\"; },\\n\\t\\t\\\"'\\\": function(v) {return \\\"'\\\"+v+\\\"'\\\"; },\\n\\t\\t'\\\"': function(v) {return '\\\"'+v+'\\\"'; }\\n\\t};\\n\\tif (choices[preference]) {\\n\\t\\tif (choices[preference](value)) {\\n\\t\\t\\treturn wrappers[preference](value);\\n\\t\\t}\\n\\t}\\n\\tfor (var quote in choices) {\\n\\t\\tif (choices[quote](value)) {\\n\\t\\t\\treturn wrappers[quote](value);\\n\\t\\t}\\n\\t}\\n\\t// No quotes will work on this\\n\\treturn undefined;\\n}\\n\\nfunction relinkFilterOperation(relinker, fromTitle, toTitle, filterString, p, context, options) {\\n\\tvar nextBracketPos, operator;\\n\\t// Skip the starting square bracket\\n\\tif(filterString.charAt(p++) !== \\\"[\\\") {\\n\\t\\t// Missing [ in filter expression\\n\\t\\treturn undefined;\\n\\t}\\n\\t// Process each operator in turn\\n\\toperator = parseOperator(filterString, p);\\n\\tdo {\\n\\t\\tvar entry = undefined, type;\\n\\t\\tif (operator === undefined) {\\n\\t\\t\\treturn undefined;\\n\\t\\t}\\n\\t\\tp = operator.opStart;\\n\\t\\tswitch (operator.bracket) {\\n\\t\\t\\tcase \\\"{\\\": // Curly brackets\\n\\t\\t\\t\\ttype = \\\"indirect\\\";\\n\\t\\t\\t\\tnextBracketPos = filterString.indexOf(\\\"}\\\",p);\\n\\t\\t\\t\\tvar operand = filterString.substring(p,nextBracketPos);\\n\\t\\t\\t\\t// We've got a live reference. relink or report\\n\\t\\t\\t\\tentry = refHandler.relinkInBraces(operand, fromTitle, toTitle, options);\\n\\t\\t\\t\\tif (entry && entry.output) {\\n\\t\\t\\t\\t\\t// We don't check the context.\\n\\t\\t\\t\\t\\t// All indirect operands convert.\\n\\t\\t\\t\\t\\trelinker.add(entry.output,p,nextBracketPos);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"[\\\": // Square brackets\\n\\t\\t\\t\\ttype = \\\"string\\\";\\n\\t\\t\\t\\tnextBracketPos = filterString.indexOf(\\\"]\\\",p);\\n\\t\\t\\t\\tvar operand = filterString.substring(p,nextBracketPos);\\n\\t\\t\\t\\t// Check if this is a relevant operator\\n\\t\\t\\t\\tvar handler = fieldType(context, operator);\\n\\t\\t\\t\\tif (!handler) {\\n\\t\\t\\t\\t\\t// This operator isn't managed. Bye.\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tentry = handler.relink(operand, fromTitle, toTitle, options);\\n\\t\\t\\t\\tif (!entry || !entry.output) {\\n\\t\\t\\t\\t\\t// The fromTitle wasn't in the operand.\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tvar wrapped;\\n\\t\\t\\t\\tif (!canBePrettyOperand(entry.output) || (options.inBraces && entry.output.indexOf('}}}') >= 0)) {\\n\\t\\t\\t\\t\\tif (!options.placeholder) {\\n\\t\\t\\t\\t\\t\\tdelete entry.output;\\n\\t\\t\\t\\t\\t\\tentry.impossible = true;\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tvar ph = options.placeholder.getPlaceholderFor(entry.output, handler.name);\\n\\t\\t\\t\\t\\twrapped = \\\"<\\\"+ph+\\\">\\\";\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\twrapped = \\\"[\\\"+entry.output+\\\"]\\\";\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\trelinker.add(wrapped, p-1, nextBracketPos+1);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"<\\\": // Angle brackets\\n\\t\\t\\t\\tnextBracketPos = filterString.indexOf(\\\">\\\",p);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"/\\\": // regexp brackets\\n\\t\\t\\t\\tvar rex = /^((?:[^\\\\\\\\\\\\/]*|\\\\\\\\.)*)\\\\/(?:\\\\(([mygi]+)\\\\))?/g,\\n\\t\\t\\t\\t\\trexMatch = rex.exec(filterString.substring(p));\\n\\t\\t\\t\\tif(rexMatch) {\\n\\t\\t\\t\\t\\tnextBracketPos = p + rex.lastIndex - 1;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\t// Unterminated regular expression\\n\\t\\t\\t\\t\\treturn undefined;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\tif (entry) {\\n\\t\\t\\tif (entry.impossible) {\\n\\t\\t\\t\\trelinker.impossible = true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif(nextBracketPos === -1) {\\n\\t\\t\\t// Missing closing bracket in filter expression\\n\\t\\t\\treturn undefined;\\n\\t\\t}\\n\\t\\tp = nextBracketPos + 1;\\n\\t\\t// Check for multiple operands\\n\\t\\tswitch (filterString.charAt(p)) {\\n\\t\\tcase ',':\\n\\t\\t\\tp++;\\n\\t\\t\\tif(/^[\\\\[\\\\{<\\\\/]/.test(filterString.substring(p))) {\\n\\t\\t\\t\\toperator.bracket = filterString.charAt(p);\\n\\t\\t\\t\\toperator.opStart = p + 1;\\n\\t\\t\\t\\toperator.index++;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\treturn undefined;\\n\\t\\t\\t}\\n\\t\\t\\tcontinue;\\n\\t\\tdefault:\\n\\t\\t\\toperator = parseOperator(filterString, p);\\n\\t\\t\\tcontinue;\\n\\t\\tcase ']':\\n\\t\\t}\\n\\t\\tbreak;\\n\\t} while(true);\\n\\t// Skip the ending square bracket\\n\\tif(filterString.charAt(p++) !== \\\"]\\\") {\\n\\t\\t// Missing ] in filter expression\\n\\t\\treturn undefined;\\n\\t}\\n\\t// Return the parsing position\\n\\treturn p;\\n}\\n\\nfunction reportFilterOperation(filterString, callback, p, context, options) {\\n\\tvar nextBracketPos, operator;\\n\\t// Skip the starting square bracket\\n\\tif(filterString.charAt(p++) !== \\\"[\\\") {\\n\\t\\t// Missing [ in filter expression\\n\\t\\treturn undefined;\\n\\t}\\n\\toperator = parseOperator(filterString, p);\\n\\t// Process each operator in turn\\n\\tdo {\\n\\t\\tif (operator === undefined) {\\n\\t\\t\\treturn undefined;\\n\\t\\t}\\n\\t\\tp = operator.opStart;\\n\\t\\tswitch (operator.bracket) {\\n\\t\\t\\tcase \\\"{\\\": // Curly brackets\\n\\t\\t\\t\\tnextBracketPos = filterString.indexOf(\\\"}\\\",p);\\n\\t\\t\\t\\tvar operand = filterString.substring(p,nextBracketPos);\\n\\t\\t\\t\\t// Just report it\\n\\t\\t\\t\\trefHandler.report(operand, function(title, blurb) {\\n\\t\\t\\t\\t\\tcallback(title, operatorBlurb(operator, '{' + (blurb || '') + '}'));\\n\\t\\t\\t\\t}, options);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"[\\\": // Square brackets\\n\\t\\t\\t\\tnextBracketPos = filterString.indexOf(\\\"]\\\",p);\\n\\t\\t\\t\\tvar operand = filterString.substring(p,nextBracketPos);\\n\\t\\t\\t\\t// Check if this is a relevant operator\\n\\t\\t\\t\\tvar handler = fieldType(context, operator);\\n\\t\\t\\t\\tif (!handler) {\\n\\t\\t\\t\\t\\t// This operator isn't managed. Bye.\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// We just have to report it. Nothing more.\\n\\t\\t\\t\\thandler.report(operand, function(title, blurb) {\\n\\t\\t\\t\\t\\tcallback(title, operatorBlurb(operator, '[' + (blurb || '') + ']'));\\n\\t\\t\\t\\t}, options);\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tcase \\\"<\\\": // Angle brackets\\n\\t\\t\\t\\tnextBracketPos = filterString.indexOf(\\\">\\\",p);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"/\\\": // regexp brackets\\n\\t\\t\\t\\tvar rex = /^((?:[^\\\\\\\\\\\\/]*|\\\\\\\\.)*)\\\\/(?:\\\\(([mygi]+)\\\\))?/g,\\n\\t\\t\\t\\t\\trexMatch = rex.exec(filterString.substring(p));\\n\\t\\t\\t\\tif(rexMatch) {\\n\\t\\t\\t\\t\\tnextBracketPos = p + rex.lastIndex - 1;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\t// Unterminated regular expression\\n\\t\\t\\t\\t\\treturn undefined;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\n\\t\\tif(nextBracketPos === -1) {\\n\\t\\t\\t// Missing closing bracket in filter expression\\n\\t\\t\\treturn undefined;\\n\\t\\t}\\n\\t\\tp = nextBracketPos + 1;\\n\\t\\t// Check for multiple operands\\n\\t\\tswitch (filterString.charAt(p)) {\\n\\t\\tcase ',':\\n\\t\\t\\tp++;\\n\\t\\t\\tif(/^[\\\\[\\\\{<\\\\/]/.test(filterString.substring(p))) {\\n\\t\\t\\t\\toperator.bracket = filterString.charAt(p);\\n\\t\\t\\t\\toperator.opStart = p + 1;\\n\\t\\t\\t\\toperator.index++;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\treturn undefined;\\n\\t\\t\\t}\\n\\t\\t\\tcontinue;\\n\\t\\tdefault:\\n\\t\\t\\toperator = parseOperator(filterString, p);\\n\\t\\t\\tcontinue;\\n\\t\\tcase ']':\\n\\t\\t}\\n\\t\\tbreak;\\n\\t} while(true);\\n\\t// Skip the ending square bracket\\n\\tif(filterString.charAt(p++) !== \\\"]\\\") {\\n\\t\\t// Missing ] in filter expression\\n\\t\\treturn undefined;\\n\\t}\\n\\t// Return the parsing position\\n\\treturn p;\\n}\\n\\nfunction parseOperator(filterString, p) {\\n\\tvar nextBracketPos, operator = {index: 1};\\n\\t// Check for an operator prefix\\n\\tif(filterString.charAt(p) === \\\"!\\\") {\\n\\t\\toperator.prefix = \\\"!\\\";\\n\\t\\tp++;\\n\\t}\\n\\t// Get the operator name\\n\\tnextBracketPos = filterString.substring(p).search(/[\\\\[\\\\{<\\\\/]/);\\n\\tif(nextBracketPos === -1) {\\n\\t\\t// Missing [ in filter expression\\n\\t\\treturn undefined;\\n\\t}\\n\\tnextBracketPos += p;\\n\\toperator.bracket = filterString.charAt(nextBracketPos);\\n\\toperator.operator = filterString.substring(p,nextBracketPos);\\n\\n\\t// Any suffix?\\n\\tvar colon = operator.operator.indexOf(':');\\n\\tif(colon > -1) {\\n\\t\\toperator.suffix = operator.operator.substring(colon + 1);\\n\\t\\toperator.operator = operator.operator.substring(0,colon) || \\\"field\\\";\\n\\t}\\n\\t// Empty operator means: title\\n\\telse if(operator.operator === \\\"\\\") {\\n\\t\\toperator.operator = \\\"title\\\";\\n\\t\\toperator.default = true;\\n\\t}\\n\\toperator.opStart = nextBracketPos + 1;\\n\\treturn operator;\\n};\\n\\nfunction operatorBlurb(operator, enquotedOperand) {\\n\\tvar suffix = operator.suffix ? (':' + operator.suffix) : '';\\n\\t// commas to indicate which number operand\\n\\tsuffix += (new Array(operator.index)).join(',');\\n\\tvar op = operator.default ? '' : operator.operator;\\n\\treturn '[' + (operator.prefix || '') + op + suffix + enquotedOperand + ']';\\n};\\n\\n// Returns the relinker needed for a given operator, or returns undefined.\\nfunction fieldType(context, operator) {\\n\\treturn (operator.suffix &&\\n\\t        context.getOperator(operator.operator + ':' + operator.suffix, operator.index)) ||\\n\\t        context.getOperator(operator.operator, operator.index);\\n};\\n\\nfunction canBePrettyOperand(value) {\\n\\treturn value.indexOf(']') < 0;\\n};\\n\\nfunction canBeInBraces(value) {\\n\\treturn value.indexOf(\\\"}}}\\\") < 0 && value.substr(value.length-2) !== '}}';\\n};\\n\",\"module-type\":\"relinkfieldtype\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/fieldtypes/list.js\":{\"title\":\"$:/plugins/flibbles/relink/js/fieldtypes/list.js\",\"text\":\"/*\\\\\\nThis manages replacing titles that occur within stringLists, like,\\n\\nTiddlerA [[Tiddler with spaces]] [[Another Title]]\\n\\\\*/\\n\\nexports.name = \\\"list\\\";\\n\\nexports.report = function(value, callback, options) {\\n\\tvar list = $tw.utils.parseStringArray(value);\\n\\tfor (var i = 0; i < list.length; i++) {\\n\\t\\tcallback(list[i]);\\n\\t}\\n};\\n\\n/**Returns undefined if no change was made.\\n * Parameter: value can literally be a list. This can happen for builtin\\n *            types 'list' and 'tag'. In those cases, we also return list.\\n */\\nexports.relink = function(value, fromTitle, toTitle, options) {\\n\\tvar isModified = false,\\n\\t\\tactualList = false,\\n\\t\\tlist;\\n\\tif (typeof value !== \\\"string\\\") {\\n\\t\\t// Not a string. Must be a list.\\n\\t\\t// clone it, since we may make changes to this possibly\\n\\t\\t// frozen list.\\n\\t\\tlist = (value || []).slice(0);\\n\\t\\tactualList = true;\\n\\t} else {\\n\\t\\tlist = $tw.utils.parseStringArray(value || \\\"\\\");\\n\\t}\\n\\t$tw.utils.each(list,function (title,index) {\\n\\t\\tif(title === fromTitle) {\\n\\t\\t\\tlist[index] = toTitle;\\n\\t\\t\\tisModified = true;\\n\\t\\t}\\n\\t});\\n\\tif (isModified) {\\n\\t\\tvar entry = {name: \\\"list\\\"};\\n\\t\\t// It doesn't parse correctly alone, it won't\\n\\t\\t// parse correctly in any list.\\n\\t\\tif (!canBeListItem(toTitle)) {\\n\\t\\t\\tentry.impossible = true;\\n\\t\\t} else if (actualList) {\\n\\t\\t\\tentry.output = list;\\n\\t\\t} else {\\n\\t\\t\\tentry.output = $tw.utils.stringifyList(list);\\n\\t\\t}\\n\\t\\treturn entry;\\n\\t}\\n\\treturn undefined;\\n};\\n\\nfunction canBeListItem(value) {\\n\\tvar regexp = /\\\\]\\\\][^\\\\S\\\\xA0]/m;\\n\\treturn !regexp.test(value);\\n};\\n\",\"module-type\":\"relinkfieldtype\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/fieldtypes/reference.js\":{\"title\":\"$:/plugins/flibbles/relink/js/fieldtypes/reference.js\",\"text\":\"/*\\\\\\nThis manages replacing titles that occur inside text references,\\n\\ntiddlerTitle\\ntiddlerTitle!!field\\n!!field\\ntiddlerTitle##propertyIndex\\n\\\\*/\\n\\nexports.name = \\\"reference\\\";\\n\\nexports.report = function(value, callback, options) {\\n\\tif (value) {\\n\\t\\tvar reference = $tw.utils.parseTextReference(value),\\n\\t\\t\\ttitle = reference.title,\\n\\t\\t\\tblurb;\\n\\t\\tif (title) {\\n\\t\\t\\tif (reference.field) {\\n\\t\\t\\t\\tblurb = '!!' + reference.field;\\n\\t\\t\\t} else if (reference.index) {\\n\\t\\t\\t\\tblurb = '##' + reference.index;\\n\\t\\t\\t}\\n\\t\\t\\tcallback(title, blurb);\\n\\t\\t}\\n\\t}\\n};\\n\\nexports.relink = function(value, fromTitle, toTitle, options) {\\n\\tvar entry;\\n\\tif (value) {\\n\\t\\tvar reference = $tw.utils.parseTextReference(value);\\n\\t\\tif (reference.title === fromTitle) {\\n\\t\\t\\tif (!exports.canBePretty(toTitle)) {\\n\\t\\t\\t\\tentry = {impossible: true};\\n\\t\\t\\t} else {\\n\\t\\t\\t\\treference.title = toTitle;\\n\\t\\t\\t\\tentry = {output: exports.toString(reference)};\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn entry;\\n};\\n\\n/* Same as this.relink, except this has the added constraint that the return\\n * value must be able to be wrapped in curly braces.\\n */\\nexports.relinkInBraces = function(value, fromTitle, toTitle, options) {\\n\\tvar log = this.relink(value, fromTitle, toTitle, options);\\n\\tif (log && log.output && toTitle.indexOf(\\\"}\\\") >= 0) {\\n\\t\\tdelete log.output;\\n\\t\\tlog.impossible = true;\\n\\t}\\n\\treturn log;\\n};\\n\\nexports.toString = function(textReference) {\\n\\tvar title = textReference.title || '';\\n\\tif (textReference.field) {\\n\\t\\treturn title + \\\"!!\\\" + textReference.field;\\n\\t} else if (textReference.index) {\\n\\t\\treturn title + \\\"##\\\" + textReference.index;\\n\\t}\\n\\treturn title;\\n};\\n\\nexports.canBePretty = function(title)  {\\n\\treturn !title || (title.indexOf(\\\"!!\\\") < 0 && title.indexOf(\\\"##\\\") < 0);\\n};\\n\",\"module-type\":\"relinkfieldtype\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/fieldtypes/title.js\":{\"title\":\"$:/plugins/flibbles/relink/js/fieldtypes/title.js\",\"text\":\"/*\\\\\\nThis specifies logic for replacing a single-tiddler field. This is the\\nsimplest kind of field type. One title swaps out for the other.\\n\\\\*/\\n\\n// NOTE TO MODDERS: If you're making your own field types, the name must be\\n//                  alpha characters only.\\nexports.name = 'title';\\n\\nexports.report = function(value, callback, options) {\\n\\tcallback(value);\\n};\\n\\n/**Returns undefined if no change was made.\\n */\\nexports.relink = function(value, fromTitle, toTitle, options) {\\n\\tif (value === fromTitle) {\\n\\t\\treturn {output: toTitle};\\n\\t}\\n\\treturn undefined;\\n};\\n\\n// This is legacy support for when 'title' was known as 'field'\\nexports.aliases = ['field', 'yes'];\\n\",\"module-type\":\"relinkfieldtype\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/fieldtypes/wikitext.js\":{\"title\":\"$:/plugins/flibbles/relink/js/fieldtypes/wikitext.js\",\"text\":\"/*\\\\\\nThis specifies logic for updating filters to reflect title changes.\\n\\\\*/\\n\\nexports.name = \\\"wikitext\\\";\\n\\nvar type = 'text/vnd.tiddlywiki';\\n\\nvar WikiParser = require(\\\"$:/core/modules/parsers/wikiparser/wikiparser.js\\\")[type];\\nvar Rebuilder = require(\\\"$:/plugins/flibbles/relink/js/utils/rebuilder.js\\\");\\nvar utils = require('$:/plugins/flibbles/relink/js/utils');\\nvar WikitextContext = utils.getContext('wikitext');\\n\\nfunction collectRules() {\\n\\tvar rules = Object.create(null);\\n\\t$tw.modules.forEachModuleOfType(\\\"relinkwikitextrule\\\", function(title, exports) {\\n\\t\\tvar names = exports.name;\\n\\t\\tif (typeof names === \\\"string\\\") {\\n\\t\\t\\tnames = [names];\\n\\t\\t}\\n\\t\\tif (names !== undefined) {\\n\\t\\t\\tfor (var i = 0; i < names.length; i++) {\\n\\t\\t\\t\\trules[names[i]] = exports;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t});\\n\\treturn rules;\\n}\\n\\nfunction WikiWalker(type, text, options) {\\n\\tthis.options = options;\\n\\tif (!this.relinkMethodsInjected) {\\n\\t\\tvar rules = collectRules();\\n\\t\\t$tw.utils.each([this.pragmaRuleClasses, this.blockRuleClasses, this.inlineRuleClasses], function(classList) {\\n\\t\\t\\tfor (var name in classList) {\\n\\t\\t\\t\\tif (rules[name]) {\\n\\t\\t\\t\\t\\tdelete rules[name].name;\\n\\t\\t\\t\\t\\t$tw.utils.extend(classList[name].prototype, rules[name]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\tWikiWalker.prototype.relinkMethodsInjected = true;\\n\\t}\\n\\tthis.context = new WikitextContext(options.settings);\\n\\tWikiParser.call(this, type, text, options);\\n};\\n\\nWikiWalker.prototype = Object.create(WikiParser.prototype);\\n\\nWikiWalker.prototype.parsePragmas = function() {\\n\\tvar entries = this.tree;\\n\\twhile (true) {\\n\\t\\tthis.skipWhitespace();\\n\\t\\tif (this.pos >= this.sourceLength) {\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\tvar nextMatch = this.findNextMatch(this.pragmaRules, this.pos);\\n\\t\\tif (!nextMatch || nextMatch.matchIndex !== this.pos) {\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\tentries.push.apply(entries, this.handleRule(nextMatch));\\n\\t}\\n\\treturn entries;\\n};\\n\\nWikiWalker.prototype.parseInlineRunUnterminated = function(options) {\\n\\tvar entries = [];\\n\\tvar nextMatch = this.findNextMatch(this.inlineRules, this.pos);\\n\\twhile (this.pos < this.sourceLength && nextMatch) {\\n\\t\\tif (nextMatch.matchIndex > this.pos) {\\n\\t\\t\\tthis.pos = nextMatch.matchIndex;\\n\\t\\t}\\n\\t\\tentries.push.apply(entries, this.handleRule(nextMatch));\\n\\t\\tnextMatch = this.findNextMatch(this.inlineRules, this.pos);\\n\\t}\\n\\tthis.pos = this.sourceLength;\\n\\treturn entries;\\n};\\n\\nWikiWalker.prototype.parseInlineRunTerminated = function(terminatorRegExp,options) {\\n\\tvar entries = [];\\n\\toptions = options || {};\\n\\tterminatorRegExp.lastIndex = this.pos;\\n\\tvar terminatorMatch = terminatorRegExp.exec(this.source);\\n\\tvar inlineRuleMatch = this.findNextMatch(this.inlineRules,this.pos);\\n\\twhile(this.pos < this.sourceLength && (terminatorMatch || inlineRuleMatch)) {\\n\\t\\tif (terminatorMatch) {\\n\\t\\t\\tif (!inlineRuleMatch || inlineRuleMatch.matchIndex >= terminatorMatch.index) {\\n\\t\\t\\t\\tthis.pos = terminatorMatch.index;\\n\\t\\t\\t\\tif (options.eatTerminator) {\\n\\t\\t\\t\\t\\tthis.pos += terminatorMatch[0].length;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn entries;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (inlineRuleMatch) {\\n\\t\\t\\tif (inlineRuleMatch.matchIndex > this.pos) {\\n\\t\\t\\t\\tthis.pos = inlineRuleMatch.matchIndex;\\n\\t\\t\\t}\\n\\t\\t\\tentries.push.apply(entries, this.handleRule(inlineRuleMatch));\\n\\t\\t\\tinlineRuleMatch = this.findNextMatch(this.inlineRules, this.pos);\\n\\t\\t\\tterminatorRegExp.lastIndex = this.pos;\\n\\t\\t\\tterminatorMatch = terminatorRegExp.exec(this.source);\\n\\t\\t}\\n\\t}\\n\\tthis.pos = this.sourceLength;\\n\\treturn entries;\\n\\n};\\n\\nWikiWalker.prototype.parseBlock = function(terminatorRegExp) {\\n\\tvar terminatorRegExp = /(\\\\r?\\\\n\\\\r?\\\\n)/mg;\\n\\tthis.skipWhitespace();\\n\\tif (this.pos >= this.sourceLength) {\\n\\t\\treturn [];\\n\\t}\\n\\tvar nextMatch = this.findNextMatch(this.blockRules, this.pos);\\n\\tif(nextMatch && nextMatch.matchIndex === this.pos) {\\n\\t\\treturn this.handleRule(nextMatch);\\n\\t}\\n\\treturn this.parseInlineRun(terminatorRegExp);\\n};\\n\\nWikiWalker.prototype.amendRules = function(type, names) {\\n\\tvar only;\\n\\tWikiParser.prototype.amendRules.call(this, type, names);\\n\\tif (type === \\\"only\\\") {\\n\\t\\tonly = true;\\n\\t} else if (type === \\\"except\\\") {\\n\\t\\tonly = false;\\n\\t} else {\\n\\t\\treturn;\\n\\t}\\n\\tif (only !== (names.indexOf(\\\"macrodef\\\") >= 0) && this.options.macrodefCanBeDisabled) {\\n\\t\\tthis.options.placeholder = undefined\\n\\t}\\n\\tif (only !== (names.indexOf(\\\"html\\\") >= 0)) {\\n\\t\\tthis.context.allowWidgets = disabled;\\n\\t}\\n\\tif (only !== (names.indexOf(\\\"prettylink\\\") >= 0)) {\\n\\t\\tthis.context.allowPrettylinks = disabled;\\n\\t}\\n};\\n\\nfunction disabled() { return false; };\\n\\n/// Reporter\\n\\nfunction WikiReporter(type, text, callback, options) {\\n\\tthis.callback = callback;\\n\\tWikiWalker.call(this, type, text, options);\\n};\\n\\nWikiReporter.prototype = Object.create(WikiWalker.prototype);\\n\\nWikiReporter.prototype.handleRule = function(ruleInfo) {\\n\\tif (ruleInfo.rule.report) {\\n\\t\\truleInfo.rule.report(this.source, this.callback, this.options);\\n\\t} else {\\n\\t\\tif (ruleInfo.rule.matchRegExp !== undefined) {\\n\\t\\t\\tthis.pos = ruleInfo.rule.matchRegExp.lastIndex;\\n\\t\\t} else {\\n\\t\\t\\t// We can't easily determine the end of this\\n\\t\\t\\t// rule match. We'll \\\"parse\\\" it so that\\n\\t\\t\\t// parser.pos gets updated, but we throw away\\n\\t\\t\\t// the results.\\n\\t\\t\\truleInfo.rule.parse();\\n\\t\\t}\\n\\t}\\n};\\n\\nexports.report = function(wikitext, callback, options) {\\n\\t// Unfortunately it's the side-effect of creating this that reports.\\n\\tnew WikiReporter(options.type, wikitext, callback, options);\\n};\\n\\n/// Relinker\\n\\nfunction WikiRelinker(type, text, fromTitle, toTitle, options) {\\n\\tthis.fromTitle = fromTitle;\\n\\tthis.toTitle = toTitle;\\n\\tthis.placeholder = options.placeholder;\\n\\tif (this.placeholder) {\\n\\t\\tthis.placeholder.parser = this;\\n\\t}\\n\\tWikiWalker.call(this, type, text, options);\\n};\\n\\nWikiRelinker.prototype = Object.create(WikiWalker.prototype);\\n\\nWikiRelinker.prototype.handleRule = function(ruleInfo) {\\n\\tif (ruleInfo.rule.relink) {\\n\\t\\tvar start = ruleInfo.matchIndex;\\n\\t\\tvar newEntry = ruleInfo.rule.relink(this.source, this.fromTitle, this.toTitle, this.options);\\n\\t\\tif (newEntry !== undefined) {\\n\\t\\t\\tif (newEntry.output) {\\n\\t\\t\\t\\tnewEntry.start = start;\\n\\t\\t\\t\\tnewEntry.end = this.pos;\\n\\t\\t\\t}\\n\\t\\t\\treturn [newEntry];\\n\\t\\t}\\n\\t} else {\\n\\t\\tif (ruleInfo.rule.matchRegExp !== undefined) {\\n\\t\\t\\tthis.pos = ruleInfo.rule.matchRegExp.lastIndex;\\n\\t\\t} else {\\n\\t\\t\\t// We can't easily determine the end of this\\n\\t\\t\\t// rule match. We'll \\\"parse\\\" it so that\\n\\t\\t\\t// parser.pos gets updated, but we throw away\\n\\t\\t\\t// the results.\\n\\t\\t\\truleInfo.rule.parse();\\n\\t\\t}\\n\\t}\\n\\treturn [];\\n};\\n\\nexports.relink = function(wikitext, fromTitle, toTitle, options) {\\n\\tvar parser = new WikiRelinker(options.type, wikitext, fromTitle, toTitle, options),\\n\\t\\twikiEntry = undefined;\\n\\t// Now that we have an array of entries, let's produce the wikiText entry\\n\\t// containing them all.\\n\\tif (parser.tree.length > 0) {\\n\\t\\tvar builder = new Rebuilder(wikitext);\\n\\t\\twikiEntry = {};\\n\\t\\tfor (var i = 0; i < parser.tree.length; i++) {\\n\\t\\t\\tvar entry = parser.tree[i];\\n\\t\\t\\tif (entry.impossible) {\\n\\t\\t\\t\\twikiEntry.impossible = true;\\n\\t\\t\\t}\\n\\t\\t\\tif (entry.output) {\\n\\t\\t\\t\\tbuilder.add(entry.output, entry.start, entry.end);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\twikiEntry.output = builder.results();\\n\\t}\\n\\treturn wikiEntry;\\n};\\n\",\"module-type\":\"relinkfieldtype\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/filteroperators/all_relinkable.js\":{\"title\":\"$:/plugins/flibbles/relink/js/filteroperators/all_relinkable.js\",\"text\":\"/*\\\\\\nmodule-type: allfilteroperator\\n\\nFilter function for [all[relinkable]].\\nReturns all tiddlers subject to relinking.\\n\\n\\\\*/\\n\\n(function() {\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.relinkable = function(source,prefix,options) {\\n\\treturn options.wiki.getRelinkableTitles();\\n};\\n\\n})();\\n\",\"module-type\":\"allfilteroperator\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/filteroperators/references.js\":{\"title\":\"$:/plugins/flibbles/relink/js/filteroperators/references.js\",\"text\":\"/*\\\\\\nmodule-type: relinkfilteroperator\\n\\nGiven a title as an operand, returns all non-shadow tiddlers that have any\\nsort of updatable reference to it.\\n\\n`relink:backreferences[]]`\\n`relink:references[]]`\\n\\nReturns all tiddlers that reference `fromTiddler` somewhere inside them.\\n\\nInput is ignored. Maybe it shouldn't do this.\\n\\\\*/\\n\\nvar LinkedList = $tw.utils.LinkedList;\\n\\nif (!LinkedList) {\\n\\t/* If the linked list isn't available, make a quick crappy version. */\\n\\tLinkedList = function() {this.array=[];};\\n\\n\\tLinkedList.prototype.pushTop = function(array) {\\n\\t\\t$tw.utils.pushTop(this.array, array);\\n\\t};\\n\\n\\tLinkedList.prototype.toArray = function() {\\n\\t\\treturn this.array;\\n\\t};\\n};\\n\\nexports.backreferences = function(source,operator,options) {\\n\\tvar results = new LinkedList();\\n\\tsource(function(tiddler,title) {\\n\\t\\tresults.pushTop(Object.keys(options.wiki.getTiddlerRelinkBackreferences(title,options)));\\n\\t});\\n\\treturn results.toArray();\\n};\\n\\nexports.references = function(source,operator,options) {\\n\\tvar results = new LinkedList();\\n\\tsource(function(tiddler,title) {\\n\\t\\tvar refs = options.wiki.getTiddlerRelinkReferences(title,options);\\n\\t\\tif (refs) {\\n\\t\\t\\tresults.pushTop(Object.keys(refs));\\n\\t\\t}\\n\\t});\\n\\treturn results.toArray();\\n};\\n\",\"module-type\":\"relinkfilteroperator\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/filteroperators/relink.js\":{\"title\":\"$:/plugins/flibbles/relink/js/filteroperators/relink.js\",\"text\":\"/*\\\\\\nmodule-type: filteroperator\\n\\nThis filter acts as a namespace for several small, simple filters, such as\\n\\n`[relink:impossible[]]`\\n\\n\\\\*/\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar language = require('$:/plugins/flibbles/relink/js/language.js');\\n\\nvar relinkFilterOperators;\\n\\nfunction getRelinkFilterOperators() {\\n\\tif(!relinkFilterOperators) {\\n\\t\\trelinkFilterOperators = {};\\n\\t\\t$tw.modules.applyMethods(\\\"relinkfilteroperator\\\",\\n\\t\\t                         relinkFilterOperators);\\n\\t}\\n\\treturn relinkFilterOperators;\\n}\\n\\nexports.relink = function(source,operator,options) {\\n\\tvar suffixPair = parseSuffix(operator.suffix);\\n\\tvar relinkFilterOperator = getRelinkFilterOperators()[suffixPair[0]];\\n\\tif (relinkFilterOperator) {\\n\\t\\tvar newOperator = $tw.utils.extend({}, operator);\\n\\t\\tnewOperator.suffix = suffixPair[1];\\n\\t\\treturn relinkFilterOperator(source, newOperator, options);\\n\\t} else {\\n\\t\\treturn [language.getString(\\\"Error/RelinkFilterOperator\\\", options)];\\n\\t}\\n};\\n\\nfunction parseSuffix(suffix) {\\n\\tvar index = suffix? suffix.indexOf(\\\":\\\"): -1;\\n\\tif (index >= 0) {\\n\\t\\treturn [suffix.substr(0, index), suffix.substr(index+1)];\\n\\t} else {\\n\\t\\treturn [suffix];\\n\\t}\\n}\\n\",\"module-type\":\"filteroperator\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/filteroperators/report.js\":{\"title\":\"$:/plugins/flibbles/relink/js/filteroperators/report.js\",\"text\":\"/*\\\\\\nmodule-type: relinkfilteroperator\\n\\nGiven a title as an operand, returns a string for each occurrence of that title\\nwithin each input title.\\n\\n[[title]] +[relink:report[fromTiddler]]`\\n\\nReturns string representation of fromTiddler occurrences in title.\\n\\\\*/\\n\\nexports.report = function(source,operator,options) {\\n\\tvar fromTitle = operator.operand,\\n\\t\\tresults = [];\\n\\tif (fromTitle) {\\n\\t\\tvar blurbs = options.wiki.getTiddlerRelinkBackreferences(fromTitle);\\n\\t\\tsource(function(tiddler, title) {\\n\\t\\t\\tif (blurbs[title]) {\\n\\t\\t\\t\\tresults = results.concat(blurbs[title]);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\treturn results;\\n};\\n\",\"module-type\":\"relinkfilteroperator\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/filteroperators/signatures.js\":{\"title\":\"$:/plugins/flibbles/relink/js/filteroperators/signatures.js\",\"text\":\"/*\\\\\\nmodule-type: relinkfilteroperator\\n\\nThis filter returns all input tiddlers which are a source of\\nrelink configuration.\\n\\n`[all[tiddlers+system]relink:source[macros]]`\\n\\n\\\\*/\\n\\nvar utils = require('$:/plugins/flibbles/relink/js/utils.js');\\n\\nexports.signatures = function(source,operator,options) {\\n\\tvar plugin = operator.operand || null;\\n\\tvar set = getSet(options);\\n\\tif (plugin === \\\"$:/core\\\") {\\n\\t\\t// Core doesn't actually have any settings. We mean Relink\\n\\t\\tplugin = \\\"$:/plugins/flibbles/relink\\\";\\n\\t}\\n\\tvar signatures = [];\\n\\tfor (var signature in set) {\\n\\t\\tvar source = set[signature].source;\\n\\t\\tif (options.wiki.getShadowSource(source) === plugin) {\\n\\t\\t\\tsignatures.push(signature);\\n\\t\\t}\\n\\t}\\n\\treturn signatures;\\n};\\n\\nexports.type = function(source,operator,options) {\\n\\tvar results = [];\\n\\tvar set = getSet(options);\\n\\tsource(function(tiddler, signature) {\\n\\t\\tif (set[signature]) {\\n\\t\\t\\tresults.push(set[signature].name);\\n\\t\\t}\\n\\t});\\n\\treturn results;\\n};\\n\\nexports.types = function(source,operator,options) {\\n\\tvar def = utils.getDefaultType(options.wiki);\\n\\tvar types = Object.keys(utils.getTypes());\\n\\ttypes.sort();\\n\\t// move default to front\\n\\ttypes.sort(function(x,y) { return x === def ? -1 : y === def ? 1 : 0; });\\n\\treturn types;\\n};\\n\\nexports.source = function(source,operator,options) {\\n\\tvar results = [];\\n\\tvar category = operator.suffix;\\n\\tvar set = getSet(options);\\n\\tsource(function(tiddler, signature) {\\n\\t\\tif (set[signature]) {\\n\\t\\t\\tresults.push(set[signature].source);\\n\\t\\t}\\n\\t});\\n\\treturn results;\\n};\\n\\nfunction getSet(options) {\\n\\treturn options.wiki.getGlobalCache(\\\"relink-signatures\\\", function() {\\n\\t\\tvar config = utils.getWikiContext(options.wiki);\\n\\t\\tvar set = Object.create(null);\\n\\t\\tvar categories = {\\n\\t\\t\\tattributes: config.getAttributes(),\\n\\t\\t\\tfields: config.getFields(),\\n\\t\\t\\tmacros: config.getMacros(),\\n\\t\\t\\toperators: config.getOperators()};\\n\\t\\t$tw.utils.each(categories, function(list, category) {\\n\\t\\t\\t$tw.utils.each(list, function(item, key) {\\n\\t\\t\\t\\tset[category + \\\"/\\\" + key] = item;\\n\\t\\t\\t});\\n\\t\\t});\\n\\t\\treturn set;\\n\\t});\\n};\\n\",\"module-type\":\"relinkfilteroperator\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/filteroperators/splitafter.js\":{\"title\":\"$:/plugins/flibbles/relink/js/filteroperators/splitafter.js\",\"text\":\"/*\\\\\\ntitle: $:/core/modules/filters/splitbefore.js\\ntype: application/javascript\\nmodule-type: relinkfilteroperator\\n\\nFilter operator that splits each result on the last occurance of the specified separator and returns the last bit.\\n\\nWhat does this have to do with relink? Nothing. I need this so I can render\\nthe configuration menu. I //could// use [splitregexp[]], but then I'd be\\nlimited to Tiddlywiki v5.1.20 or later.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nExport our filter function\\n*/\\nexports.splitafter = function(source,operator,options) {\\n\\tvar results = [];\\n\\tsource(function(tiddler,title) {\\n\\t\\tvar index = title.lastIndexOf(operator.operand);\\n\\t\\tif(index < 0) {\\n\\t\\t\\t$tw.utils.pushTop(results,title);\\n\\t\\t} else {\\n\\t\\t\\t$tw.utils.pushTop(results,title.substr(index+1));\\n\\t\\t}\\n\\t});\\n\\treturn results;\\n};\\n\\n})();\\n\\n\",\"type\":\"application/javascript\",\"module-type\":\"relinkfilteroperator\"},\"$:/plugins/flibbles/relink/js/filteroperators/wouldchange.js\":{\"title\":\"$:/plugins/flibbles/relink/js/filteroperators/wouldchange.js\",\"text\":\"/*\\\\\\nmodule-type: relinkfilteroperator\\n\\nwouldchange: Generator.\\n\\nGiven each input title, it returns all the tiddlers that would be changed if the currentTiddler were to be renamed to the operand.\\n\\nimpossible: filters all source titles for ones that encounter errors on failure.\\n\\nTHESE ARE INTERNAL FILTER OPERATOR AND ARE NOT INTENDED TO BE USED BY USERS.\\n\\n\\\\*/\\n\\nvar language = require(\\\"$:/plugins/flibbles/relink/js/language.js\\\");\\nvar utils = require(\\\"$:/plugins/flibbles/relink/js/utils.js\\\");\\n\\nexports.wouldchange = function(source,operator,options) {\\n\\tvar from = options.widget && options.widget.getVariable(\\\"currentTiddler\\\"),\\n\\t\\tto = operator.operand,\\n\\t\\tindexer = utils.getIndexer(options.wiki),\\n\\t\\trecords = indexer.relinkLookup(from, to, options);\\n\\treturn Object.keys(records);\\n};\\n\\nexports.impossible = function(source,operator,options) {\\n\\tvar from = options.widget && options.widget.getVariable(\\\"currentTiddler\\\"),\\n\\t\\tto = operator.operand,\\n\\t\\tresults = [],\\n\\t\\tindexer = utils.getIndexer(options.wiki),\\n\\t\\trecords = indexer.relinkLookup(from, to, options);\\n\\tsource(function(tiddler, title) {\\n\\t\\tvar fields = records[title];\\n\\t\\tif (fields) {\\n\\t\\t\\tfor (var field in fields) {\\n\\t\\t\\t\\tif (fields[field].impossible) {\\n\\t\\t\\t\\t\\tresults.push(title);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t});\\n\\treturn results;\\n};\\n\",\"module-type\":\"relinkfilteroperator\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/indexer.js\":{\"title\":\"$:/plugins/flibbles/relink/js/indexer.js\",\"text\":\"/*\\\\\\nmodule-type: indexer\\n\\nIndexes results from tiddler reference reports so we don't have to call them\\nso much.\\n\\n\\\\*/\\n\\n\\\"use strict\\\";\\n\\nvar utils = require(\\\"./utils.js\\\");\\nvar TiddlerContext = utils.getContext('tiddler');\\n\\nfunction Indexer(wiki) {\\n\\tthis.wiki = wiki;\\n};\\n\\nIndexer.prototype.init = function() {\\n\\tthis.rebuild();\\n};\\n\\nIndexer.prototype.rebuild = function() {\\n\\tthis.index = null;\\n\\tthis.backIndex = null;\\n\\tthis.contexts = Object.create(null);\\n\\tthis.changedTiddlers = undefined;\\n\\tthis.lastRelinkFrom = undefined;\\n};\\n\\nIndexer.prototype.update = function(updateDescriptor) {\\n\\tif (!this.index) {\\n\\t\\treturn;\\n\\t}\\n\\tvar title;\\n\\tif (!this.changedTiddlers) {\\n\\t\\tthis.changedTiddlers = Object.create(null);\\n\\t}\\n\\tif (updateDescriptor.old.exists) {\\n\\t\\ttitle = updateDescriptor.old.tiddler.fields.title;\\n\\t\\tthis.changedTiddlers[title] = {deleted: true};\\n\\t\\tthis._purge(title);\\n\\t}\\n\\tif (updateDescriptor['new'].exists) {\\n\\t\\t// If its the same tiddler as old, this overrides the 'deleted' entry\\n\\t\\ttitle = updateDescriptor['new'].tiddler.fields.title;\\n\\t\\tthis.changedTiddlers[title] = {modified: true};\\n\\t}\\n};\\n\\nIndexer.prototype.lookup = function(title) {\\n\\tthis._upkeep();\\n\\treturn this.index[title];\\n};\\n\\nIndexer.prototype.reverseLookup = function(title) {\\n\\tthis._upkeep();\\n\\treturn this.backIndex[title] || Object.create(null);\\n};\\n\\nIndexer.prototype.relinkLookup = function(fromTitle, toTitle, options) {\\n\\tthis._upkeep();\\n\\tvar shortlist = undefined;\\n\\tif (this.lastRelinkFrom === fromTitle) {\\n\\t\\tif (this.lastRelinkTo === toTitle) {\\n\\t\\t\\t// We need to reintroduce the relink cache, where temporary info\\n\\t\\t\\t// was stored.\\n\\t\\t\\toptions.cache = this.lastRelinkCache;\\n\\t\\t\\treturn this.lastRelinkResult;\\n\\t\\t}\\n\\t\\tshortlist = Object.keys(this.lastRelinkResult);\\n\\t}\\n\\tthis.lastRelinkResult = utils.getRelinkResults(this.wiki, fromTitle, toTitle, this.context, shortlist, options);\\n\\tthis.lastRelinkTo = toTitle;\\n\\tthis.lastRelinkFrom = fromTitle;\\n\\tthis.lastRelinkCache = options.cache;\\n\\treturn this.lastRelinkResult;\\n};\\n\\nIndexer.prototype._upkeep = function() {\\n\\tvar title;\\n\\tif (this.changedTiddlers && (this.context.changed(this.changedTiddlers) || this.context.parent.changed(this.changedTiddlers))) {\\n\\t\\t// If global macro context or whitelist context changed, wipe all\\n\\t\\tthis.rebuild();\\n\\t}\\n\\tif (!this.index) {\\n\\t\\tthis.index = Object.create(null);\\n\\t\\tthis.backIndex = Object.create(null);\\n\\t\\tthis.context = utils.getWikiContext(this.wiki);\\n\\t\\tvar titles = this.wiki.getRelinkableTitles();\\n\\t\\tfor (var i = 0; i < titles.length; i++) {\\n\\t\\t\\tthis._populate(titles[i]);\\n\\t\\t};\\n\\t} else if (this.changedTiddlers) {\\n\\t\\t// If there are cached changes, we apply them now.\\n\\t\\tfor (title in this.contexts) {\\n\\t\\t\\tvar tiddlerContext = this.contexts[title];\\n\\t\\t\\tif (tiddlerContext.changed(this.changedTiddlers)) {\\n\\t\\t\\t\\tthis._purge(title);\\n\\t\\t\\t\\tthis._populate(title);\\n\\t\\t\\t\\tthis._dropResults(title);\\n\\t\\t\\t\\t// Wipe this change, so we don't risk updating it twice.\\n\\t\\t\\t\\tthis.changedTiddlers[title] = undefined;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tfor (title in this.changedTiddlers) {\\n\\t\\t\\tvar change = this.changedTiddlers[title];\\n\\t\\t\\tif (change && change.modified) {\\n\\t\\t\\t\\tthis._purge(title);\\n\\t\\t\\t\\tthis._populate(title);\\n\\t\\t\\t\\tthis._dropResults(title);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tthis.changedTiddlers = undefined;\\n\\t}\\n};\\n\\nIndexer.prototype._purge = function(title) {\\n\\tfor (var entry in this.index[title]) {\\n\\t\\tdelete this.backIndex[entry][title];\\n\\t}\\n\\tdelete this.contexts[title];\\n\\tdelete this.index[title];\\n};\\n\\n// This drops the cached relink results if unsanctioned tiddlers were changed\\nIndexer.prototype._dropResults = function(title) {\\n\\tvar tiddler = this.wiki.getTiddler(title);\\n\\tif (title !== this.lastRelinkFrom\\n\\t&& title !== this.lastRelinkTo\\n\\t&& (!tiddler\\n\\t\\t|| !$tw.utils.hop(tiddler.fields, 'draft.of') // is a draft\\n\\t\\t|| tiddler.fields['draft.of'] !== this.lastRelinkFrom // draft of target\\n\\t\\t|| references(this.index[title], this.lastRelinkFrom))) { // draft references target\\n\\t\\t// This is not the draft of the last relinked title,\\n\\t\\t// so our cached results should be wiped.\\n\\t\\tthis.lastRelinkFrom = undefined;\\n\\t}\\n};\\n\\nfunction references(list, item) {\\n\\treturn list !== undefined && list[item];\\n};\\n\\nIndexer.prototype._populate = function(title) {\\n\\t// Fetch the report for a title, and populate the indexes with result\\n\\tvar tiddlerContext = new TiddlerContext(this.wiki, this.context, title);\\n\\tvar references = utils.getTiddlerRelinkReferences(this.wiki, title, tiddlerContext);\\n\\tthis.index[title] = references;\\n\\tif (tiddlerContext.hasImports()) {\\n\\t\\tthis.contexts[title] = tiddlerContext;\\n\\t}\\n\\tfor (var ref in references) {\\n\\t\\tthis.backIndex[ref] = this.backIndex[ref] || Object.create(null);\\n\\t\\tthis.backIndex[ref][title] = references[ref];\\n\\t}\\n};\\n\\nexports.RelinkIndexer = Indexer;\\n\",\"module-type\":\"indexer\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/language.js\":{\"title\":\"$:/plugins/flibbles/relink/js/language.js\",\"text\":\"/*\\\\\\nmodule-type: library\\n\\nThis handles all logging and alerts Relink emits.\\n\\n\\\\*/\\n\\nexports.getString = function(title, options) {\\n\\ttitle = \\\"$:/plugins/flibbles/relink/language/\\\" + title;\\n\\treturn options.wiki.renderTiddler(\\\"text/plain\\\", title, options);\\n};\\n\\nvar logger;\\n\\nexports.reportFailures = function(failureList, options) {\\n\\tif (!logger) {\\n\\t\\tlogger = new $tw.utils.Logger(\\\"Relinker\\\");\\n\\t}\\n\\tvar alertString = this.getString(\\\"Error/ReportFailedRelinks\\\", options)\\n\\tvar alreadyReported = Object.create(null);\\n\\tvar reportList = [];\\n\\t$tw.utils.each(failureList, function(f) {\\n\\t\\tif (!alreadyReported[f]) {\\n\\t\\t\\tif ($tw.browser) {\\n\\t\\t\\t\\t// This might not make the link if the title is complicated.\\n\\t\\t\\t\\t// Whatever.\\n\\t\\t\\t\\treportList.push(\\\"\\\\n* [[\\\" + f + \\\"]]\\\");\\n\\t\\t\\t} else {\\n\\t\\t\\t\\treportList.push(\\\"\\\\n* \\\" + f);\\n\\t\\t\\t}\\n\\t\\t\\talreadyReported[f] = true;\\n\\t\\t}\\n\\t});\\n\\tlogger.alert(alertString + \\\"\\\\n\\\" + reportList.join(\\\"\\\"));\\n};\\n\",\"module-type\":\"library\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/mangler.js\":{\"title\":\"$:/plugins/flibbles/relink/js/mangler.js\",\"text\":\"/*\\\\\\nmodule-type: widget\\n\\nCreates a mangler widget for field validation. This isn't meant to be used\\nby the user. It's only used in Relink configuration.\\n\\n\\\\*/\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\nvar language = require('$:/plugins/flibbles/relink/js/language.js');\\nvar utils = require('$:/plugins/flibbles/relink/js/utils.js');\\n\\nvar RelinkManglerWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n\\tthis.addEventListeners([\\n\\t\\t{type: \\\"relink-add-field\\\", handler: \\\"handleAddFieldEvent\\\"},\\n\\t\\t{type: \\\"relink-add-operator\\\", handler: \\\"handleAddOperatorEvent\\\"},\\n\\t\\t{type: \\\"relink-add-parameter\\\", handler: \\\"handleAddParameterEvent\\\"},\\n\\t\\t{type: \\\"relink-add-attribute\\\", handler: \\\"handleAddAttributeEvent\\\"}\\n\\t]);\\n};\\n\\nexports.relinkmangler = RelinkManglerWidget;\\n\\nRelinkManglerWidget.prototype = new Widget();\\n\\n// This wraps alert so it can be monkeypatched during testing.\\nRelinkManglerWidget.prototype.alert = function(message) {\\n\\talert(message);\\n};\\n\\nRelinkManglerWidget.prototype.handleAddFieldEvent = function(event) {\\n\\tvar param = event.paramObject;\\n\\tif (typeof param !== \\\"object\\\" || !param.field) {\\n\\t\\t// Can't handle it.\\n\\t\\treturn true;\\n\\t}\\n\\tvar trimmedName = param.field.toLowerCase().trim();\\n\\tif (!trimmedName) {\\n\\t\\t// Still can't handle it, but don't warn.\\n\\t\\treturn true;\\n\\t}\\n\\tif(!$tw.utils.isValidFieldName(trimmedName)) {\\n\\t\\tthis.alert($tw.language.getString(\\n\\t\\t\\t\\\"InvalidFieldName\\\",\\n\\t\\t\\t{variables:\\n\\t\\t\\t\\t{fieldName: trimmedName}\\n\\t\\t\\t}\\n\\t\\t));\\n\\t} else {\\n\\t\\tadd(this.wiki, \\\"fields\\\", trimmedName);\\n\\t}\\n\\treturn true;\\n};\\n\\n/**Not much validation, even though there are definitely illegal\\n * operator names. If you input on, Relink won't relink it, but it\\n * won't choke on it either. Tiddlywiki will...\\n */\\nRelinkManglerWidget.prototype.handleAddOperatorEvent = function(event) {\\n\\tvar param = event.paramObject;\\n\\tif (param) {\\n\\t\\tadd(this.wiki, \\\"operators\\\", param.operator);\\n\\t}\\n\\treturn true;\\n};\\n\\nRelinkManglerWidget.prototype.handleAddParameterEvent = function(event) {\\n\\tvar param = event.paramObject;\\n\\tif (param && param.macro && param.parameter) {\\n\\t\\tif (/\\\\s/.test(param.macro.trim())) {\\n\\t\\t\\tthis.alert(language.getString(\\n\\t\\t\\t\\t\\\"Error/InvalidMacroName\\\",\\n\\t\\t\\t\\t{ variables: {macroName: param.macro},\\n\\t\\t\\t\\t  wiki: this.wiki\\n\\t\\t\\t\\t}\\n\\t\\t\\t));\\n\\t\\t} else if (/[ \\\\/]/.test(param.parameter.trim())) {\\n\\t\\t\\tthis.alert(language.getString(\\n\\t\\t\\t\\t\\\"Error/InvalidParameterName\\\",\\n\\t\\t\\t\\t{ variables: {parameterName: param.parameter},\\n\\t\\t\\t\\t  wiki: this.wiki\\n\\t\\t\\t\\t}\\n\\t\\t\\t));\\n\\t\\t} else {\\n\\t\\t\\tadd(this.wiki, \\\"macros\\\", param.macro, param.parameter);\\n\\t\\t}\\n\\t}\\n\\treturn true;\\n};\\n\\nRelinkManglerWidget.prototype.handleAddAttributeEvent = function(event) {\\n\\tvar param = event.paramObject;\\n\\tif (param && param.element && param.attribute) {\\n\\t\\tif (/[ \\\\/]/.test(param.element.trim())) {\\n\\t\\t\\tthis.alert(language.getString(\\n\\t\\t\\t\\t\\\"Error/InvalidElementName\\\",\\n\\t\\t\\t\\t{ variables: {elementName: param.element},\\n\\t\\t\\t\\t  wiki: this.wiki\\n\\t\\t\\t\\t}\\n\\t\\t\\t));\\n\\t\\t} else if (/[ \\\\/]/.test(param.attribute.trim())) {\\n\\t\\t\\tthis.alert(language.getString(\\n\\t\\t\\t\\t\\\"Error/InvalidAttributeName\\\",\\n\\t\\t\\t\\t{ variables: {attributeName: param.attribute},\\n\\t\\t\\t\\t  wiki: this.wiki\\n\\t\\t\\t\\t}\\n\\t\\t\\t));\\n\\t\\t} else {\\n\\t\\t\\tadd(this.wiki, \\\"attributes\\\", param.element, param.attribute);\\n\\t\\t}\\n\\t}\\n\\treturn true;\\n};\\n\\nfunction add(wiki, category/*, path parts*/) {\\n\\tvar path = \\\"$:/config/flibbles/relink/\\\" + category;\\n\\tfor (var x = 2; x < arguments.length; x++) {\\n\\t\\tvar part = arguments[x];\\n\\t\\t// Abort if it's falsy, or only whitespace. Also, trim spaces\\n\\t\\tif (!part || !(part = part.trim())) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tpath = path + \\\"/\\\" + part;\\n\\t}\\n\\tvar def = utils.getDefaultType(wiki);\\n\\twiki.addTiddler({title: path, text: def});\\n};\\n\",\"module-type\":\"widget\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/relinkoperations/fields.js\":{\"title\":\"$:/plugins/flibbles/relink/js/relinkoperations/fields.js\",\"text\":\"/*\\\\\\n\\nHandles all fields specified in the plugin configuration. Currently, this\\nonly supports single-value fields.\\n\\n\\\\*/\\n\\n/*jslint node: false, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports.name = 'fields';\\n\\nexports.report = function(tiddler, callback, options) {\\n\\tvar fields = options.settings.getFields();\\n\\t$tw.utils.each(fields, function(handler, field) {\\n\\t\\tvar input = tiddler.fields[field];\\n\\t\\tif (input) {\\n\\t\\t\\thandler.report(input, function(title, blurb) {\\n\\t\\t\\t\\tif (blurb) {\\n\\t\\t\\t\\t\\tcallback(title, field + ': ' + blurb);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tcallback(title, field);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}, options);\\n\\t\\t}\\n\\t});\\n};\\n\\nexports.relink = function(tiddler, fromTitle, toTitle, changes, options) {\\n\\tvar fields = options.settings.getFields();\\n\\t$tw.utils.each(fields, function(handler, field) {\\n\\t\\tvar input = tiddler.fields[field];\\n\\t\\tif (input) {\\n\\t\\t\\tvar entry = handler.relink(input, fromTitle, toTitle, options);\\n\\t\\t\\tif (entry !== undefined) {\\n\\t\\t\\t\\tchanges[field] = entry;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t});\\n};\\n\",\"module-type\":\"relinkoperator\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/relinkoperations/text.js\":{\"title\":\"$:/plugins/flibbles/relink/js/relinkoperations/text.js\",\"text\":\"/*\\\\\\n\\nDepending on the tiddler type, this will apply textOperators which may\\nrelink titles within the body.\\n\\n\\\\*/\\n\\n/*jslint node: false, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar defaultOperator = \\\"text/vnd.tiddlywiki\\\";\\nvar utils = require('$:/plugins/flibbles/relink/js/utils.js');\\n\\nexports.name = 'text';\\n\\nvar textOperators = utils.getModulesByTypeAsHashmap('relinktextoperator', 'type');\\n\\n// $:/DefaultTiddlers is a tiddler which has type \\\"text/vnd.tiddlywiki\\\",\\n// but it lies. It doesn't contain wikitext. It contains a filter, so\\n// we pretend it has a filter type.\\n// If you want to be able to add more exceptions for your plugin, let me know.\\nvar exceptions = {\\n\\t\\\"$:/DefaultTiddlers\\\": \\\"text/x-tiddler-filter\\\"\\n};\\n\\nexports.report = function(tiddler, callback, options) {\\n\\tvar fields = tiddler.fields;\\n\\tif (fields.text) {\\n\\t\\tvar type = exceptions[fields.title] || fields.type || defaultOperator;\\n\\t\\tif (textOperators[type]) {\\n\\t\\t\\tvar entry = textOperators[type].report(tiddler, callback, options);\\n\\t\\t}\\n\\t}\\n};\\n\\nexports.relink = function(tiddler, fromTitle, toTitle, changes, options) {\\n\\tvar fields = tiddler.fields;\\n\\tif (fields.text) {\\n\\t\\tvar type = exceptions[fields.title] || fields.type || defaultOperator;\\n\\t\\tif (textOperators[type]) {\\n\\t\\t\\tvar entry = textOperators[type].relink(tiddler, fromTitle, toTitle, options);\\n\\t\\t\\tif (entry) {\\n\\t\\t\\t\\tchanges.text = entry;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n};\\n\",\"module-type\":\"relinkoperator\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/relinkoperations/text/filtertext.js\":{\"title\":\"$:/plugins/flibbles/relink/js/relinkoperations/text/filtertext.js\",\"text\":\"/*\\\\\\n\\nThis relinks tiddlers which contain filters in their body, as oppose to\\nwikitext.\\n\\n\\\\*/\\n\\n/*jslint node: false, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar filterHandler = require(\\\"$:/plugins/flibbles/relink/js/utils\\\").getType('filter');\\n\\nexports.type = 'text/x-tiddler-filter';\\n\\nexports.report = function(tiddler, callback, options) {\\n\\treturn filterHandler.report(tiddler.fields.text, callback, options);\\n};\\n\\nexports.relink = function(tiddler, fromTitle, toTitle, options) {\\n\\treturn filterHandler.relink(tiddler.fields.text, fromTitle, toTitle, options)\\n};\\n\",\"module-type\":\"relinktextoperator\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext.js\":{\"title\":\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext.js\",\"text\":\"/*\\\\\\n\\nChecks for fromTitle in a tiddler's text. If found, sees if it's relevant,\\nand tries to swap it out if it is.\\n\\n\\\\*/\\n\\n/*jslint node: false, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Placeholder = require(\\\"$:/plugins/flibbles/relink/js/utils/placeholder.js\\\");\\nvar wikitextHandler = require('$:/plugins/flibbles/relink/js/utils.js').getType('wikitext');\\n\\nexports.type = 'text/vnd.tiddlywiki';\\n\\nexports.report = function(tiddler, callback, options) {\\n\\twikitextHandler.report(tiddler.fields.text, callback, options);\\n};\\n\\nexports.relink = function(tiddler, fromTitle, toTitle, options) {\\n\\tvar placeholder = new Placeholder();\\n\\tvar currentOptions = Object.create(options);\\n\\tcurrentOptions.placeholder = placeholder;\\n\\tvar entry = wikitextHandler.relink(tiddler.fields.text, fromTitle, toTitle, currentOptions);\\n\\tif (entry && entry.output) {\\n\\t\\t// If there's output, we've also got to prepend any macros\\n\\t\\t// that the placeholder defined.\\n\\t\\tvar preamble = placeholder.getPreamble();\\n\\t\\tentry.output = preamble + entry.output;\\n\\t}\\n\\treturn entry;\\n};\\n\",\"module-type\":\"relinktextoperator\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext/code.js\":{\"title\":\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext/code.js\",\"text\":\"/*\\\\\\nmodule-type: relinkwikitextrule\\n\\nHandles code blocks. Or rather //doesn't// handle them, since we should\\nignore their contents.\\n\\n\\\"`` [[Renamed Title]] ``\\\" will remain unchanged.\\n\\n\\\\*/\\n\\nexports.name = [\\\"codeinline\\\", \\\"codeblock\\\"];\\n\\nexports.relink = function(text) {\\n\\tvar reEnd;\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\n\\t// I'm lazy. This relink method works for both codeblock and codeinline\\n\\tif (this.match[0].length > 2) {\\n\\t\\t// Must be a codeblock\\n\\t\\treEnd = /\\\\r?\\\\n```$/mg;\\n\\t} else {\\n\\t\\t// Must be a codeinline\\n\\t\\treEnd = new RegExp(this.match[1], \\\"mg\\\");\\n\\t}\\n\\treEnd.lastIndex = this.parser.pos;\\n\\tvar match = reEnd.exec(text);\\n\\tif (match) {\\n\\t\\tthis.parser.pos = match.index + match[0].length;\\n\\t} else {\\n\\t\\tthis.parser.pos = this.parser.sourceLength;\\n\\t}\\n\\treturn undefined;\\n};\\n\\n// Same thing. Just skip the pos ahead.\\nexports.report = exports.relink;\\n\",\"module-type\":\"relinkwikitextrule\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext/comment.js\":{\"title\":\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext/comment.js\",\"text\":\"/*\\\\\\nmodule-type: relinkwikitextrule\\n\\nHandles comment blocks. Or rather //doesn't// handle them, since we should\\nignore their contents.\\n\\n\\\"<!-- [[Renamed Title]] -->\\\" will remain unchanged.\\n\\n\\\\*/\\n\\nexports.name = [\\\"commentinline\\\", \\\"commentblock\\\"];\\n\\nexports.relink = function(text) {\\n\\tthis.parser.pos = this.endMatchRegExp.lastIndex;\\n\\treturn undefined;\\n};\\n\\nexports.report = exports.relink;\\n\",\"module-type\":\"relinkwikitextrule\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext/filteredtransclude.js\":{\"title\":\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext/filteredtransclude.js\",\"text\":\"/*\\\\\\nmodule-type: relinkwikitextrule\\n\\nHandles replacement of filtered transclusions in wiki text like,\\n\\n{{{ [tag[docs]] }}}\\n{{{ [tag[docs]] |tooltip}}}\\n{{{ [tag[docs]] ||TemplateTitle}}}\\n{{{ [tag[docs]] |tooltip||TemplateTitle}}}\\n{{{ [tag[docs]] }}width:40;height:50;}.class.class\\n\\nThis renames both the list and the template field.\\n\\n\\\\*/\\n\\nexports.name = ['filteredtranscludeinline', 'filteredtranscludeblock'];\\n\\nvar filterHandler = require(\\\"$:/plugins/flibbles/relink/js/utils\\\").getType('filter');\\nvar utils = require(\\\"./utils.js\\\");\\n\\nexports.report = function(text, callback, options) {\\n\\tvar m = this.match,\\n\\t\\tfilter = m[1],\\n\\t\\ttemplate = $tw.utils.trim(m[3]),\\n\\t\\tappend = template ? '||' + template + '}}}' : '}}}';\\n\\tfilterHandler.report(filter, function(title, blurb) {\\n\\t\\tcallback(title, '{{{' + blurb + append);\\n\\t}, options);\\n\\tif (template) {\\n\\t\\tcallback(template, '{{{' + $tw.utils.trim(filter).replace(/\\\\r?\\\\n/mg, ' ') + '||}}}');\\n\\t}\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\n};\\n\\nexports.relink = function(text, fromTitle, toTitle, options) {\\n\\tvar m = this.match,\\n\\t\\tfilter = m[1],\\n\\t\\ttooltip = m[2],\\n\\t\\ttemplate = m[3],\\n\\t\\tstyle = m[4],\\n\\t\\tclasses = m[5],\\n\\t\\tparser = this.parser,\\n\\t\\tentry = {};\\n\\tparser.pos = this.matchRegExp.lastIndex;\\n\\tvar modified = false;\\n\\n\\tvar filterEntry = filterHandler.relink(filter, fromTitle, toTitle, options);\\n\\tif (filterEntry !== undefined) {\\n\\t\\tif (filterEntry.output) {\\n\\t\\t\\tfilter = filterEntry.output;\\n\\t\\t\\tmodified = true;\\n\\t\\t}\\n\\t\\tif (filterEntry.impossible) {\\n\\t\\t\\tentry.impossible = true;\\n\\t\\t}\\n\\t}\\n\\n\\tif ($tw.utils.trim(template) === fromTitle) {\\n\\t\\t// preserves user-inputted whitespace\\n\\t\\ttemplate = template.replace(fromTitle, toTitle);\\n\\t\\tmodified = true;\\n\\t}\\n\\tif (!modified) {\\n\\t\\tif (!entry.impossible) {\\n\\t\\t\\treturn undefined;\\n\\t\\t}\\n\\t} else {\\n\\t\\tvar output = this.makeFilteredtransclude(this.parser, filter, tooltip, template, style, classes);\\n\\t\\tif (output === undefined) {\\n\\t\\t\\tentry.impossible = true;\\n\\t\\t} else {\\n\\t\\t\\t// By copying over the ending newline of the original\\n\\t\\t\\t// text if present, thisrelink method thus works for\\n\\t\\t\\t// both the inline and block rule\\n\\t\\t\\tentry.output = output + utils.getEndingNewline(m[0]);\\n\\t\\t}\\n\\t}\\n\\treturn entry;\\n};\\n\\nexports.makeFilteredtransclude = function(parser, filter, tooltip, template, style, classes) {\\n\\tif (canBePretty(filter) && canBePrettyTemplate(template)) {\\n\\t\\treturn prettyList(filter, tooltip, template, style, classes);\\n\\t}\\n\\tif (classes !== undefined) {\\n\\t\\tclasses = classes.split('.').join(' ');\\n\\t}\\n\\treturn utils.makeWidget(parser, '$list', {\\n\\t\\tfilter: filter,\\n\\t\\ttooltip: tooltip,\\n\\t\\ttemplate: template,\\n\\t\\tstyle: style || undefined,\\n\\t\\titemClass: classes});\\n};\\n\\nfunction prettyList(filter, tooltip, template, style, classes) {\\n\\tif (tooltip === undefined) {\\n\\t\\ttooltip = '';\\n\\t} else {\\n\\t\\ttooltip = \\\"|\\\" + tooltip;\\n\\t}\\n\\tif (template === undefined) {\\n\\t\\ttemplate = '';\\n\\t} else {\\n\\t\\ttemplate = \\\"||\\\" + template;\\n\\t}\\n\\tif (classes === undefined) {\\n\\t\\tclasses = '';\\n\\t} else {\\n\\t\\tclasses = \\\".\\\" + classes;\\n\\t}\\n\\tstyle = style || '';\\n\\treturn \\\"{{{\\\"+filter+tooltip+template+\\\"}}\\\"+style+\\\"}\\\"+classes;\\n};\\n\\nfunction canBePretty(filter) {\\n\\treturn filter.indexOf('|') < 0 && filter.indexOf('}}') < 0;\\n};\\n\\nfunction canBePrettyTemplate(template) {\\n\\treturn !template || (\\n\\t\\ttemplate.indexOf('|') < 0\\n\\t\\t&& template.indexOf('{') < 0\\n\\t\\t&& template.indexOf('}') < 0);\\n};\\n\",\"module-type\":\"relinkwikitextrule\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext/html.js\":{\"title\":\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext/html.js\",\"text\":\"/*\\\\\\nmodule-type: relinkwikitextrule\\n\\nHandles replacement in attributes of widgets and html elements\\nThis is configurable to select exactly which attributes of which elements\\nshould be changed.\\n\\n<$link to=\\\"TiddlerTitle\\\" />\\n\\n\\\\*/\\n\\nvar utils = require(\\\"./utils.js\\\");\\nvar Rebuilder = require(\\\"$:/plugins/flibbles/relink/js/utils/rebuilder\\\");\\nvar relinkUtils = require('$:/plugins/flibbles/relink/js/utils.js');\\nvar refHandler = relinkUtils.getType('reference');\\nvar filterHandler = relinkUtils.getType('filter');\\nvar ImportContext = relinkUtils.getContext('import');\\nvar macrocall = require(\\\"./macrocall.js\\\");\\n\\nexports.name = \\\"html\\\";\\n\\nexports.report = function(text, callback, options) {\\n\\tvar managedElement = this.parser.context.getAttribute(this.nextTag.tag);\\n\\tvar importFilterAttr;\\n\\tvar element = this.nextTag.tag;\\n\\tfor (var attributeName in this.nextTag.attributes) {\\n\\t\\tvar attr = this.nextTag.attributes[attributeName];\\n\\t\\tvar nextEql = text.indexOf('=', attr.start);\\n\\t\\t// This is the rare case of changing tiddler\\n\\t\\t// \\\"true\\\" to something else when \\\"true\\\" is\\n\\t\\t// implicit, like <$link to /> We ignore those.\\n\\t\\tif (nextEql < 0 || nextEql > attr.end) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (this.nextTag.tag === \\\"$importvariables\\\" && attributeName === \\\"filter\\\") {\\n\\t\\t\\timportFilterAttr = attr;\\n\\t\\t}\\n\\t\\tvar oldLength, quotedValue = undefined, entry;\\n\\t\\tif (attr.type === \\\"string\\\") {\\n\\t\\t\\tvar handler = getAttributeHandler(this.parser.context, this.nextTag, attributeName, options);\\n\\t\\t\\tif (!handler) {\\n\\t\\t\\t\\t// We don't manage this attribute. Bye.\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\t\\t\\thandler.report(attr.value, function(title, blurb) {\\n\\t\\t\\t\\tif (blurb) {\\n\\t\\t\\t\\t\\tcallback(title, '<' + element + ' ' + attributeName + '=\\\"' + blurb + '\\\" />');\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tcallback(title, '<' + element + ' ' + attributeName + ' />');\\n\\t\\t\\t\\t}\\n\\t\\t\\t}, options);\\n\\t\\t} else if (attr.type === \\\"indirect\\\") {\\n\\t\\t\\tentry = refHandler.report(attr.textReference, function(title, blurb) {\\n\\t\\t\\t\\tcallback(title, '<' + element + ' ' + attributeName + '={{' + (blurb || '') + '}} />');\\n\\t\\t\\t}, options);\\n\\t\\t} else if (attr.type === \\\"filtered\\\") {\\n\\t\\t\\tentry = filterHandler.report(attr.filter, function(title, blurb) {\\n\\t\\t\\t\\tcallback(title, '<' + element + ' ' + attributeName + '={{{' + blurb + '}}} />');\\n\\t\\t\\t}, options);\\n\\t\\t} else if (attr.type === \\\"macro\\\") {\\n\\t\\t\\tvar macro = attr.value;\\n\\t\\t\\tentry = macrocall.reportAttribute(this.parser, macro, function(title, blurb) {\\n\\t\\t\\t\\tcallback(title, '<' + element + ' ' + attributeName + '=' + blurb + ' />');\\n\\t\\t\\t}, options);\\n\\t\\t}\\n\\t\\tif (quotedValue === undefined) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (this.nextTag.tag === \\\"$importvariables\\\" && attributeName === \\\"filter\\\") {\\n\\t\\t\\t// If this is an import variable filter, we gotta\\n\\t\\t\\t// remember this new value when we import lower down.\\n\\t\\t\\timportFilterAttr = quotedValue;\\n\\t\\t}\\n\\t}\\n\\tif (importFilterAttr) {\\n\\t\\tprocessImportFilter(this.parser, importFilterAttr, options);\\n\\t}\\n\\tthis.parse();\\n};\\n\\nexports.relink = function(text, fromTitle, toTitle, options) {\\n\\tvar managedElement = this.parser.context.getAttribute(this.nextTag.tag),\\n\\t\\tbuilder = new Rebuilder(text, this.nextTag.start);\\n\\tvar importFilterAttr;\\n\\tvar widgetEntry = {};\\n\\twidgetEntry.attributes = Object.create(null);\\n\\twidgetEntry.element = this.nextTag.tag;\\n\\tfor (var attributeName in this.nextTag.attributes) {\\n\\t\\tvar attr = this.nextTag.attributes[attributeName];\\n\\t\\tvar nextEql = text.indexOf('=', attr.start);\\n\\t\\t// This is the rare case of changing tiddler\\n\\t\\t// \\\"true\\\" to something else when \\\"true\\\" is\\n\\t\\t// implicit, like <$link to /> We ignore those.\\n\\t\\tif (nextEql < 0 || nextEql > attr.end) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (this.nextTag.tag === \\\"$importvariables\\\" && attributeName === \\\"filter\\\") {\\n\\t\\t\\timportFilterAttr = attr;\\n\\t\\t}\\n\\t\\tvar oldLength, quotedValue = undefined, entry;\\n\\t\\tvar nestedOptions = Object.create(options);\\n\\t\\tnestedOptions.settings = this.parser.context;\\n\\t\\tswitch (attr.type) {\\n\\t\\tcase 'string':\\n\\t\\t\\tvar handler = getAttributeHandler(this.parser.context, this.nextTag, attributeName, options);\\n\\t\\t\\tif (!handler) {\\n\\t\\t\\t\\t// We don't manage this attribute. Bye.\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\t\\t\\tentry = handler.relink(attr.value, fromTitle, toTitle, nestedOptions);\\n\\t\\t\\tif (entry === undefined) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\t\\t\\tif (entry.output) {\\n\\t\\t\\t\\tvar quote = utils.determineQuote(text, attr);\\n\\t\\t\\t\\toldLength = attr.value.length + (quote.length * 2);\\n\\t\\t\\t\\tquotedValue = utils.wrapAttributeValue(entry.output,quote);\\n\\t\\t\\t\\tif (quotedValue === undefined) {\\n\\t\\t\\t\\t\\t// The value was unquotable. We need to make\\n\\t\\t\\t\\t\\t// a macro in order to replace it.\\n\\t\\t\\t\\t\\tif (!options.placeholder) {\\n\\t\\t\\t\\t\\t\\t// but we can't...\\n\\t\\t\\t\\t\\t\\tentry.impossible = true;\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tvar value = options.placeholder.getPlaceholderFor(entry.output,handler.name)\\n\\t\\t\\t\\t\\t\\tquotedValue = \\\"<<\\\"+value+\\\">>\\\";\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t\\tcase 'indirect':\\n\\t\\t\\tentry = refHandler.relinkInBraces(attr.textReference, fromTitle, toTitle, options);\\n\\t\\t\\tif (entry === undefined) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\t\\t\\tif (entry.output) {\\n\\t\\t\\t\\t// +4 for '{{' and '}}'\\n\\t\\t\\t\\toldLength = attr.textReference.length + 4;\\n\\t\\t\\t\\tquotedValue = \\\"{{\\\"+entry.output+\\\"}}\\\";\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t\\tcase 'filtered':\\n\\t\\t\\tentry = filterHandler.relinkInBraces(attr.filter, fromTitle, toTitle, options);\\n\\t\\t\\tif (entry === undefined) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\t\\t\\tif (entry.output) {\\n\\t\\t\\t\\t// +6 for '{{{' and '}}}'\\n\\t\\t\\t\\toldLength = attr.filter.length + 6;\\n\\t\\t\\t\\tquotedValue = \\\"{{{\\\"+ entry.output +\\\"}}}\\\";\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t\\tcase 'macro':\\n\\t\\t\\tvar macro = attr.value;\\n\\t\\t\\tentry = macrocall.relinkAttribute(this.parser, macro, text, fromTitle, toTitle, options);\\n\\t\\t\\tif (entry === undefined) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\t\\t\\tif (entry.output) {\\n\\t\\t\\t\\t// already includes '<<' and '>>'\\n\\t\\t\\t\\toldLength = macro.end-macro.start;\\n\\t\\t\\t\\tquotedValue = entry.output;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (entry.impossible) {\\n\\t\\t\\twidgetEntry.impossible = true;\\n\\t\\t}\\n\\t\\tif (quotedValue === undefined) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (this.nextTag.tag === \\\"$importvariables\\\" && attributeName === \\\"filter\\\") {\\n\\t\\t\\t// If this is an import variable filter, we gotta\\n\\t\\t\\t// remember this new value when we import lower down.\\n\\t\\t\\timportFilterAttr = quotedValue;\\n\\t\\t}\\n\\t\\t// We count backwards from the end to preserve whitespace\\n\\t\\tvar valueStart = attr.end - oldLength;\\n\\t\\tbuilder.add(quotedValue, valueStart, attr.end);\\n\\t}\\n\\tif (importFilterAttr) {\\n\\t\\tprocessImportFilter(this.parser, importFilterAttr, options);\\n\\t}\\n\\tvar tag = this.parse()[0];\\n\\tif (tag.children) {\\n\\t\\tfor (var i = 0; i < tag.children.length; i++) {\\n\\t\\t\\tvar child = tag.children[i];\\n\\t\\t\\tif (child.output) {\\n\\t\\t\\t\\tbuilder.add(child.output, child.start, child.end);\\n\\t\\t\\t}\\n\\t\\t\\tif (child.impossible) {\\n\\t\\t\\t\\twidgetEntry.impossible = true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tif (builder.changed() || widgetEntry.impossible) {\\n\\t\\twidgetEntry.output = builder.results(this.parser.pos);\\n\\t\\treturn widgetEntry;\\n\\t}\\n\\treturn undefined;\\n};\\n\\n/** Returns the field handler for the given attribute of the given widget.\\n *  If this returns undefined, it means we don't handle it. So skip.\\n */\\nfunction getAttributeHandler(context, widget, attributeName, options) {\\n\\tif (widget.tag === \\\"$macrocall\\\") {\\n\\t\\tvar nameAttr = widget.attributes[\\\"$name\\\"];\\n\\t\\tif (nameAttr) {\\n\\t\\t\\tvar macro = context.getMacro(nameAttr.value);\\n\\t\\t\\tif (macro) {\\n\\t\\t\\t\\treturn macro[attributeName];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t} else {\\n\\t\\tvar element = context.getAttribute(widget.tag);\\n\\t\\tif (element) {\\n\\t\\t\\treturn element[attributeName];\\n\\t\\t}\\n\\t}\\n\\treturn undefined;\\n};\\n\\nfunction computeAttribute(context, attribute, options) {\\n\\tvar value;\\n\\tif(attribute.type === \\\"filtered\\\") {\\n\\t\\tvar parentWidget = context.widget;\\n\\t\\tvalue = options.wiki.filterTiddlers(attribute.filter,parentWidget)[0] || \\\"\\\";\\n\\t} else if(attribute.type === \\\"indirect\\\") {\\n\\t\\tvar parentWidget = context.widget;\\n\\t\\tvalue = options.wiki.getTextReference(attribute.textReference,\\\"\\\",parentWidget.variables.currentTiddler.value);\\n\\t} else if(attribute.type === \\\"macro\\\") {\\n\\t\\tvar parentWidget = context.widget;\\n\\t\\tvalue = parentWidget.getVariable(attribute.value.name,{params: attribute.value.params});\\n\\t} else { // String attribute\\n\\t\\tvalue = attribute.value;\\n\\t}\\n\\treturn value;\\n};\\n\\n// This processes a <$importvariables> filter attribute and adds any new\\n// variables to our parser.\\nfunction processImportFilter(parser, importAttribute, options) {\\n\\tif (typeof importAttribute === \\\"string\\\") {\\n\\t\\t// It was changed. Reparse it. It'll be a quoted\\n\\t\\t// attribute value. Add a dummy attribute name.\\n\\t\\timportAttribute = $tw.utils.parseAttribute(\\\"p=\\\"+importAttribute, 0)\\n\\t}\\n\\tvar context = parser.context;\\n\\tvar importFilter = computeAttribute(context, importAttribute, options);\\n\\tparser.context = new ImportContext(options.wiki, context, importFilter);\\n};\\n\",\"module-type\":\"relinkwikitextrule\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext/image.js\":{\"title\":\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext/image.js\",\"text\":\"/*\\\\\\nmodule-type: relinkwikitextrule\\n\\nHandles replacement in wiki text inline rules, like,\\n\\n[img[tiddler.jpg]]\\n\\n[img width=23 height=24 [Description|tiddler.jpg]]\\n\\n\\\\*/\\n\\nvar Rebuilder = require(\\\"$:/plugins/flibbles/relink/js/utils/rebuilder\\\");\\nvar refHandler = require(\\\"$:/plugins/flibbles/relink/js/fieldtypes/reference\\\");\\nvar filterHandler = require(\\\"$:/plugins/flibbles/relink/js/utils\\\").getType('filter');\\nvar macrocall = require(\\\"./macrocall.js\\\");\\nvar utils = require(\\\"./utils.js\\\");\\n\\nexports.name = \\\"image\\\";\\n\\nexports.report = function(text, callback, options) {\\n\\tvar ptr = this.nextImage.start + 4; //[img\\n\\tvar inSource = false;\\n\\tfor (var attributeName in this.nextImage.attributes) {\\n\\t\\tvar attr = this.nextImage.attributes[attributeName];\\n\\t\\tif (attributeName === \\\"source\\\" || attributeName === \\\"tooltip\\\") {\\n\\t\\t\\tif (inSource) {\\n\\t\\t\\t\\tptr = text.indexOf('|', ptr);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tptr = text.indexOf('[', ptr);\\n\\t\\t\\t\\tinSource = true;\\n\\t\\t\\t}\\n\\t\\t\\tptr += 1;\\n\\t\\t}\\n\\t\\tif (attributeName === \\\"source\\\") {\\n\\t\\t\\tvar tooltip = this.nextImage.attributes.tooltip;\\n\\t\\t\\tvar blurb = '[img[' + (tooltip ? tooltip.value : '') + ']]';\\n\\t\\t\\tcallback(attr.value, blurb);\\n\\t\\t\\tptr = text.indexOf(attr.value, ptr);\\n\\t\\t\\tptr = text.indexOf(']]', ptr) + 2;\\n\\t\\t} else if (attributeName !== \\\"tooltip\\\") {\\n\\t\\t\\tptr = reportAttribute(this.parser, attr, callback, options);\\n\\t\\t}\\n\\t}\\n\\tthis.parser.pos = ptr;\\n};\\n\\nexports.relink = function(text, fromTitle, toTitle, options) {\\n\\tvar ptr = this.nextImage.start,\\n\\t\\tbuilder = new Rebuilder(text, ptr),\\n\\t\\tmakeWidget = false,\\n\\t\\tskipSource = false,\\n\\t\\timageEntry;\\n\\tif (this.nextImage.attributes.source.value === fromTitle && !canBePretty(toTitle, this.nextImage.attributes.tooltip)) {\\n\\t\\tif (this.parser.context.allowWidgets() && (utils.wrapAttributeValue(toTitle) || options.placeholder)) {\\n\\t\\t\\tmakeWidget = true;\\n\\t\\t\\tbuilder.add(\\\"<$image\\\", ptr, ptr+4);\\n\\t\\t} else {\\n\\t\\t\\t// We won't be able to make a placeholder to replace\\n\\t\\t\\t// the source attribute. We check now so we don't\\n\\t\\t\\t// prematurely convert into a widget.\\n\\t\\t\\t// Keep going in case other attributes need replacing.\\n\\t\\t\\tskipSource = true;\\n\\t\\t}\\n\\t}\\n\\tptr += 4; //[img\\n\\tvar inSource = false;\\n\\tfor (var attributeName in this.nextImage.attributes) {\\n\\t\\tvar attr = this.nextImage.attributes[attributeName];\\n\\t\\tif (attributeName === \\\"source\\\" || attributeName === \\\"tooltip\\\") {\\n\\t\\t\\tif (inSource) {\\n\\t\\t\\t\\tptr = text.indexOf('|', ptr);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tptr = text.indexOf('[', ptr);\\n\\t\\t\\t\\tinSource = true;\\n\\t\\t\\t}\\n\\t\\t\\tif (makeWidget) {\\n\\t\\t\\t\\tif (\\\" \\\\t\\\\n\\\".indexOf(text[ptr-1]) >= 0) {\\n\\t\\t\\t\\t\\tbuilder.add('', ptr, ptr+1);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tbuilder.add(' ', ptr, ptr+1);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tptr += 1;\\n\\t\\t}\\n\\t\\tif (attributeName === \\\"source\\\") {\\n\\t\\t\\tptr = text.indexOf(attr.value, ptr);\\n\\t\\t\\tif (attr.value === fromTitle) {\\n\\t\\t\\t\\tif (makeWidget) {\\n\\t\\t\\t\\t\\tvar quotedValue = utils.wrapAttributeValue(toTitle);\\n\\t\\t\\t\\t\\tif (quotedValue === undefined) {\\n\\t\\t\\t\\t\\t\\tvar key = options.placeholder.getPlaceholderFor(toTitle);\\n\\t\\t\\t\\t\\t\\tbuilder.add(\\\"source=<<\\\"+key+\\\">>\\\", ptr, ptr+fromTitle.length);\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tbuilder.add(\\\"source=\\\"+quotedValue, ptr, ptr+fromTitle.length);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} else if (!skipSource) {\\n\\t\\t\\t\\t\\tbuilder.add(toTitle, ptr, ptr+fromTitle.length);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tbuilder.impossible = true;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tptr = text.indexOf(']]', ptr);\\n\\t\\t\\tif (makeWidget) {\\n\\t\\t\\t\\tbuilder.add(\\\"/>\\\", ptr, ptr+2);\\n\\t\\t\\t}\\n\\t\\t\\tptr += 2;\\n\\t\\t} else if (attributeName === \\\"tooltip\\\") {\\n\\t\\t\\tif (makeWidget) {\\n\\t\\t\\t\\tptr = text.indexOf(attr.value, ptr);\\n\\t\\t\\t\\tvar quotedValue = utils.wrapAttributeValue(attr.value);\\n\\t\\t\\t\\tbuilder.add(\\\"tooltip=\\\"+quotedValue, ptr, ptr+attr.value.length);\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tptr = relinkAttribute(this.parser, attr, builder, fromTitle, toTitle, options);\\n\\t\\t}\\n\\t}\\n\\tthis.parser.pos = ptr;\\n\\tif (builder.changed() || builder.impossible) {\\n\\t\\timageEntry = {\\n\\t\\t\\toutput: builder.results(ptr),\\n\\t\\t\\timpossible: builder.impossible };\\n\\t}\\n\\treturn imageEntry;\\n};\\n\\nfunction reportAttribute(parser, attribute, callback, options) {\\n\\tvar text = parser.source;\\n\\tvar ptr = text.indexOf(attribute.name, attribute.start);\\n\\tvar end;\\n\\tptr += attribute.name.length;\\n\\tptr = text.indexOf('=', ptr);\\n\\tif (attribute.type === \\\"string\\\") {\\n\\t\\tptr = text.indexOf(attribute.value, ptr)\\n\\t\\tvar quote = utils.determineQuote(text, attribute);\\n\\t\\t// ignore first quote. We already passed it\\n\\t\\tend = ptr + quote.length + attribute.value.length;\\n\\t} else if (attribute.type === \\\"indirect\\\") {\\n\\t\\tptr = text.indexOf('{{', ptr);\\n\\t\\tvar end = ptr + attribute.textReference.length + 4;\\n\\t\\trefHandler.report(attribute.textReference, function(title, blurb) {\\n\\t\\t\\tcallback(title, '[img ' + attribute.name + '={{' + (blurb || '') + '}}]');\\n\\t\\t}, options);\\n\\t} else if (attribute.type === \\\"filtered\\\") {\\n\\t\\tptr = text.indexOf('{{{', ptr);\\n\\t\\tvar end = ptr + attribute.filter.length + 6;\\n\\t\\tfilterHandler.report(attribute.filter, function(title, blurb) {\\n\\t\\t\\tcallback(title, '[img ' + attribute.name + '={{{' + blurb + '}}}]');\\n\\t\\t}, options);\\n\\t} else if (attribute.type === \\\"macro\\\") {\\n\\t\\tptr = text.indexOf(\\\"<<\\\", ptr);\\n\\t\\tvar end = attribute.value.end;\\n\\t\\tvar macro = attribute.value;\\n\\t\\toldValue = attribute.value;\\n\\t\\tmacrocall.reportAttribute(parser, macro, function(title, blurb) {\\n\\t\\t\\tcallback(title, '[img ' + attribute.name + '=' + blurb + ']');\\n\\t\\t}, options);\\n\\t}\\n\\treturn end;\\n};\\n\\nfunction relinkAttribute(parser, attribute, builder, fromTitle, toTitle, options) {\\n\\tvar text = builder.text;\\n\\tvar ptr = text.indexOf(attribute.name, attribute.start);\\n\\tvar end;\\n\\tptr += attribute.name.length;\\n\\tptr = text.indexOf('=', ptr);\\n\\tif (attribute.type === \\\"string\\\") {\\n\\t\\tptr = text.indexOf(attribute.value, ptr)\\n\\t\\tvar quote = utils.determineQuote(text, attribute);\\n\\t\\t// ignore first quote. We already passed it\\n\\t\\tend = ptr + quote.length + attribute.value.length;\\n\\t} else if (attribute.type === \\\"indirect\\\") {\\n\\t\\tptr = text.indexOf('{{', ptr);\\n\\t\\tvar end = ptr + attribute.textReference.length + 4;\\n\\t\\tvar ref = refHandler.relinkInBraces(attribute.textReference, fromTitle, toTitle, options);\\n\\t\\tif (ref) {\\n\\t\\t\\tif (ref.impossible) {\\n\\t\\t\\t\\tbuilder.impossible = true;\\n\\t\\t\\t}\\n\\t\\t\\tif (ref.output) {\\n\\t\\t\\t\\tbuilder.add(\\\"{{\\\"+ref.output+\\\"}}\\\", ptr, end);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t} else if (attribute.type === \\\"filtered\\\") {\\n\\t\\tptr = text.indexOf('{{{', ptr);\\n\\t\\tvar end = ptr + attribute.filter.length + 6;\\n\\t\\tvar filter = filterHandler.relinkInBraces(attribute.filter, fromTitle, toTitle, options);\\n\\t\\tif (filter !== undefined) {\\n\\t\\t\\tif (filter.impossible) {\\n\\t\\t\\t\\tbuilder.impossible = true;\\n\\t\\t\\t}\\n\\t\\t\\tif (filter.output) {\\n\\t\\t\\t\\tvar quoted = \\\"{{{\\\"+filter.output+\\\"}}}\\\";\\n\\t\\t\\t\\tbuilder.add(quoted, ptr, end);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t} else if (attribute.type === \\\"macro\\\") {\\n\\t\\tptr = text.indexOf(\\\"<<\\\", ptr);\\n\\t\\tvar end = attribute.value.end;\\n\\t\\tvar macro = attribute.value;\\n\\t\\toldValue = attribute.value;\\n\\t\\tvar macroEntry = macrocall.relinkAttribute(parser, macro, text, fromTitle, toTitle, options);\\n\\t\\tif (macroEntry !== undefined) {\\n\\t\\t\\tif (macroEntry.impossible) {\\n\\t\\t\\t\\tbuilder.impossible = true;\\n\\t\\t\\t}\\n\\t\\t\\tif (macroEntry.output) {\\n\\t\\t\\t\\tbuilder.add(macroEntry.output, ptr, end);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn end;\\n};\\n\\nfunction canBePretty(title, tooltip) {\\n\\treturn title.indexOf(']') < 0 && (tooltip || title.indexOf('|') < 0);\\n};\\n\",\"module-type\":\"relinkwikitextrule\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext/import.js\":{\"title\":\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext/import.js\",\"text\":\"/*\\\\\\nmodule-type: relinkwikitextrule\\n\\nHandles import pragmas\\n\\n\\\\import [tag[MyTiddler]]\\n\\\\*/\\n\\nvar utils = require(\\\"$:/plugins/flibbles/relink/js/utils.js\\\");\\nvar filterRelinker = utils.getType('filter');\\nvar ImportContext = utils.getContext('import');\\n\\nexports.name = \\\"import\\\";\\n\\nexports.report = function(text, callback, options) {\\n\\t// This moves the pos for us\\n\\tvar parseTree = this.parse();\\n\\tvar filter = parseTree[0].attributes.filter.value || '';\\n\\tfilterRelinker.report(filter, function(title, blurb) {\\n\\t\\tif (blurb) {\\n\\t\\t\\tblurb = '\\\\\\\\import ' + blurb;\\n\\t\\t} else {\\n\\t\\t\\tblurb = '\\\\\\\\import';\\n\\t\\t}\\n\\t\\tcallback(title, blurb);\\n\\t}, options);\\n\\t// Before we go, we need to actually import the variables\\n\\t// it's calling for, and any /relink pragma\\n\\tthis.parser.context = new ImportContext(options.wiki, this.parser.context, filter);\\n};\\n\\nexports.relink = function(text, fromTitle, toTitle, options) {\\n\\t// In this one case, I'll let the parser parse out the filter and move\\n\\t// the ptr.\\n\\tvar start = this.matchRegExp.lastIndex,\\n\\t\\tparseTree = this.parse(),\\n\\t\\tfilter = parseTree[0].attributes.filter.value || '',\\n\\t\\tentry = filterRelinker.relink(filter, fromTitle, toTitle, options);\\n\\tif (entry !== undefined && entry.output) {\\n\\t\\tvar newline = text.substring(start+filter.length, this.parser.pos);\\n\\t\\tfilter = entry.output;\\n\\t\\tentry.output = \\\"\\\\\\\\import \\\" + filter + newline;\\n\\t}\\n\\n\\t// Before we go, we need to actually import the variables\\n\\t// it's calling for, and any /relink pragma\\n\\tthis.parser.context = new ImportContext(options.wiki, this.parser.context, filter);\\n\\n\\treturn entry;\\n};\\n\",\"module-type\":\"relinkwikitextrule\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext/macrocall.js\":{\"title\":\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext/macrocall.js\",\"text\":\"/*\\\\\\nmodule-type: relinkwikitextrule\\n\\nHandles macro calls.\\n\\n<<myMacro '[[MyFilter]]' 'myTitle'>>\\n\\n\\\\*/\\n\\nvar utils = require(\\\"./utils.js\\\");\\nvar Rebuilder = require(\\\"$:/plugins/flibbles/relink/js/utils/rebuilder\\\");\\nvar EntryNode = require('$:/plugins/flibbles/relink/js/utils/entry');\\n\\nexports.name = [\\\"macrocallinline\\\", \\\"macrocallblock\\\"];\\n\\n// Error thrown when a macro's definition is needed, but can't be found.\\nfunction CannotFindMacroDef() {};\\nCannotFindMacroDef.prototype.impossible = true;\\nCannotFindMacroDef.prototype.name = \\\"macroparam\\\";\\n// Failed relinks due to missing definitions aren't reported for now.\\n// I may want to do something special later on.\\nCannotFindMacroDef.prototype.report = function() { return []; };\\n\\nexports.report = function(text, callback, options) {\\n\\tvar macroInfo = getInfoFromRule(this);\\n\\tthis.parser.pos = macroInfo.end;\\n\\tthis.reportAttribute(this.parser, macroInfo, callback, options);\\n};\\n\\nexports.relink = function(text, fromTitle, toTitle, options) {\\n\\tvar macroInfo = getInfoFromRule(this);\\n\\tvar managedMacro = this.parser.context.getMacro(macroInfo.name);\\n\\tthis.parser.pos = macroInfo.end;\\n\\tif (!managedMacro) {\\n\\t\\t// We don't manage this macro. Bye.\\n\\t\\treturn undefined;\\n\\t}\\n\\tvar mayBeWidget = this.parser.context.allowWidgets();\\n\\tvar names = getParamNames(this.parser, macroInfo.name, macroInfo.params, options);\\n\\tif (names === undefined) {\\n\\t\\t// Needed the definition, and couldn't find it. So if a single\\n\\t\\t// parameter needs to placeholder, just fail.\\n\\t\\tmayBeWidget = false;\\n\\t}\\n\\tvar entry = relinkMacroInvocation(this.parser, macroInfo, text, fromTitle, toTitle, mayBeWidget, options);\\n\\tif (entry && entry.output) {\\n\\t\\tentry.output = macroToString(entry.output, text, names, options);\\n\\t}\\n\\treturn entry;\\n};\\n\\n/** Relinks macros that occur as attributes, like <$element attr=<<...>> />\\n *  Processes the same, except it can't downgrade into a widget if the title\\n *  is complicated.\\n */\\nexports.relinkAttribute = function(parser, macro, text, fromTitle, toTitle, options) {\\n\\tvar entry = relinkMacroInvocation(parser, macro, text, fromTitle, toTitle, false, options);\\n\\tif (entry && entry.output) {\\n\\t\\tentry.output = macroToStringMacro(entry.output, text, options);\\n\\t}\\n\\treturn entry;\\n};\\n\\n/** As in, report a macrocall invocation that is an html attribute. */\\nexports.reportAttribute = function(parser, macro, callback, options) {\\n\\tvar managedMacro = parser.context.getMacro(macro.name);\\n\\tif (!managedMacro) {\\n\\t\\t// We don't manage this macro. Bye.\\n\\t\\treturn undefined;\\n\\t}\\n\\tfor (var managedArg in managedMacro) {\\n\\t\\tvar index;\\n\\t\\ttry {\\n\\t\\t\\tindex = getParamIndexWithinMacrocall(parser, macro.name, managedArg, macro.params, options);\\n\\t\\t} catch (e) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tif (index < 0) {\\n\\t\\t\\t// The argument was not supplied. Move on to next.\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tvar param = macro.params[index];\\n\\t\\tvar handler = managedMacro[managedArg];\\n\\t\\tvar nestedOptions = Object.create(options);\\n\\t\\tnestedOptions.settings = parser.context;\\n\\t\\tvar entry = handler.report(param.value, function(title, blurb) {\\n\\t\\t\\tvar rtn = managedArg;\\n\\t\\t\\tif (blurb) {\\n\\t\\t\\t\\trtn += ': \\\"' + blurb + '\\\"';\\n\\t\\t\\t}\\n\\t\\t\\tcallback(title, '<<' + macro.name + ' ' + rtn + '>>');\\n\\t\\t}, nestedOptions);\\n\\t}\\n};\\n\\n/**Processes the given macro,\\n * macro: {name:, params:, start:, end:}\\n * each parameters: {name:, end:, value:}\\n * Macro invocation returned is the same, but relinked, and may have new keys:\\n * parameters: {type: macro, start:, newValue: (quoted replacement value)}\\n * Output of the returned entry isn't a string, but a macro object. It needs\\n * to be converted.\\n */\\nfunction relinkMacroInvocation(parser, macro, text, fromTitle, toTitle, mayBeWidget, options) {\\n\\tvar managedMacro = parser.context.getMacro(macro.name);\\n\\tvar modified = false;\\n\\tif (!managedMacro) {\\n\\t\\t// We don't manage this macro. Bye.\\n\\t\\treturn undefined;\\n\\t}\\n\\tvar outMacro = $tw.utils.extend({}, macro);\\n\\tvar macroEntry = {};\\n\\toutMacro.params = macro.params.slice();\\n\\tfor (var managedArg in managedMacro) {\\n\\t\\tvar index;\\n\\t\\ttry {\\n\\t\\t\\tindex = getParamIndexWithinMacrocall(parser, macro.name, managedArg, macro.params, options);\\n\\t\\t} catch (e) {\\n\\t\\t\\tif (e instanceof CannotFindMacroDef) {\\n\\t\\t\\t\\tmacroEntry.impossible = true;\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (index < 0) {\\n\\t\\t\\t// this arg either was not supplied, or we can't find\\n\\t\\t\\t// the definition, so we can't tie it to an anonymous\\n\\t\\t\\t// argument. Either way, move on to the next.\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tvar param = macro.params[index];\\n\\t\\tvar handler = managedMacro[managedArg];\\n\\t\\tvar nestedOptions = Object.create(options);\\n\\t\\tnestedOptions.settings = parser.context;\\n\\t\\tvar entry = handler.relink(param.value, fromTitle, toTitle, nestedOptions);\\n\\t\\tif (entry === undefined) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\t// Macro parameters can only be string parameters, not\\n\\t\\t// indirect, or macro, or filtered\\n\\t\\tif (entry.impossible) {\\n\\t\\t\\tmacroEntry.impossible = true;\\n\\t\\t}\\n\\t\\tif (!entry.output) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tvar quote = utils.determineQuote(text, param);\\n\\t\\tvar quoted = utils.wrapParameterValue(entry.output, quote);\\n\\t\\tvar newParam = $tw.utils.extend({}, param);\\n\\t\\tif (quoted === undefined) {\\n\\t\\t\\tif (!mayBeWidget || !options.placeholder) {\\n\\t\\t\\t\\tmacroEntry.impossible = true;\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\t\\t\\tvar ph = options.placeholder.getPlaceholderFor(entry.output,handler.name);\\n\\t\\t\\tnewParam.newValue = \\\"<<\\\"+ph+\\\">>\\\";\\n\\t\\t\\tnewParam.type = \\\"macro\\\";\\n\\t\\t} else {\\n\\t\\t\\tnewParam.start = newParam.end - (newParam.value.length + (quote.length*2));\\n\\t\\t\\tnewParam.value = entry.output;\\n\\t\\t\\tnewParam.newValue = quoted;\\n\\t\\t}\\n\\t\\toutMacro.params[index] = newParam;\\n\\t\\tmodified = true;\\n\\t}\\n\\tif (modified || macroEntry.impossible) {\\n\\t\\tif (modified) {\\n\\t\\t\\tmacroEntry.output = outMacro;\\n\\t\\t}\\n\\t\\treturn macroEntry;\\n\\t}\\n\\treturn undefined;\\n};\\n\\nfunction getInfoFromRule(rule) {\\n\\t// Get all the details of the match\\n\\tvar macroInfo = rule.nextCall;\\n\\tif (!macroInfo) {\\n\\t\\t//  rule.match is used <v5.1.24\\n\\t\\tvar match = rule.match,\\n\\t\\t\\toffset = $tw.utils.skipWhiteSpace(match[0], match[1].length+2);\\n\\t\\tmacroInfo = {\\n\\t\\t\\tname: match[1],\\n\\t\\t\\tstart: rule.matchRegExp.lastIndex - match[0].length,\\n\\t\\t\\tend: rule.matchRegExp.lastIndex,\\n\\t\\t};\\n\\t\\tmacroInfo.params = parseParams(match[2], offset+macroInfo.start);\\n\\t}\\n\\treturn macroInfo;\\n};\\n\\nfunction mustBeAWidget(macro) {\\n\\tfor (var i = 0; i < macro.params.length; i++) {\\n\\t\\tif (macro.params[i].type === \\\"macro\\\") {\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\treturn false\\n};\\n\\n/**Given a macro object ({name:, params:, start: end:}), and the text where\\n * it was parsed from, returns a new macro that maintains any syntactic\\n * structuring.\\n */\\nfunction macroToString(macro, text, names, options) {\\n\\tif (mustBeAWidget(macro)) {\\n\\t\\tvar attrs = [];\\n\\t\\tfor (var i = 0; i < macro.params.length; i++) {\\n\\t\\t\\tvar p = macro.params[i];\\n\\t\\t\\tvar val;\\n\\t\\t\\tif (p.newValue) {\\n\\t\\t\\t\\tval = p.newValue;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tval = utils.wrapAttributeValue(p.value);\\n\\t\\t\\t}\\n\\t\\t\\tattrs.push(\\\" \\\"+names[i]+\\\"=\\\"+val);\\n\\t\\t}\\n\\t\\treturn \\\"<$macrocall $name=\\\"+utils.wrapAttributeValue(macro.name)+attrs.join('')+\\\"/>\\\";\\n\\t} else {\\n\\t\\treturn macroToStringMacro(macro, text, options);\\n\\t}\\n};\\n\\nfunction macroToStringMacro(macro, text, options) {\\n\\tvar builder = new Rebuilder(text, macro.start);\\n\\tfor (var i = 0; i < macro.params.length; i++) {\\n\\t\\tvar param = macro.params[i];\\n\\t\\tif (param.newValue) {\\n\\t\\t\\tbuilder.add(param.newValue, param.start, param.end);\\n\\t\\t}\\n\\t}\\n\\treturn builder.results(macro.end);\\n};\\n\\n/** Returns -1 if param definitely isn't in macrocall.\\n */\\nfunction getParamIndexWithinMacrocall(parser, macroName, param, params, options) {\\n\\tvar index, i, anonsExist = false;\\n\\tfor (i = 0; i < params.length; i++) {\\n\\t\\tvar name = params[i].name;\\n\\t\\tif (name === param) {\\n\\t\\t\\treturn i;\\n\\t\\t}\\n\\t\\tif (name === undefined) {\\n\\t\\t\\tanonsExist = true;\\n\\t\\t}\\n\\t}\\n\\tif (!anonsExist) {\\n\\t\\t// If no anonymous parameters are present, and we didn't find\\n\\t\\t// it among the named ones, it must not be there.\\n\\t\\treturn -1;\\n\\t}\\n\\tvar expectedIndex = indexOfParameterDef(parser, macroName, param, options);\\n\\t// We've got to skip over all the named parameter instances.\\n\\tif (expectedIndex >= 0) {\\n\\t\\tvar anonI = 0;\\n\\t\\tfor (i = 0; i < params.length; i++) {\\n\\t\\t\\tif (params[i].name === undefined) {\\n\\t\\t\\t\\tif (anonI === expectedIndex) {\\n\\t\\t\\t\\t\\treturn i;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tanonI++;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tvar indexOfOther = indexOfParameterDef(parser, macroName, params[i].name, options);\\n\\t\\t\\t\\tif (indexOfOther < expectedIndex) {\\n\\t\\t\\t\\t\\tanonI++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn -1;\\n};\\n\\n// Looks up the definition of a macro, and figures out what the expected index\\n// is for the given parameter.\\nfunction indexOfParameterDef(parser, macroName, paramName, options) {\\n\\tvar def = parser.context.getMacroDefinition(macroName);\\n\\tif (def === undefined) {\\n\\t\\tthrow new CannotFindMacroDef();\\n\\t}\\n\\tvar params = def.params || [];\\n\\tfor (var i = 0; i < params.length; i++) {\\n\\t\\tif (params[i].name === paramName) {\\n\\t\\t\\treturn i;\\n\\t\\t}\\n\\t}\\n\\treturn -1;\\n};\\n\\nfunction getParamNames(parser, macroName, params, options) {\\n\\tvar used = Object.create(null);\\n\\tvar rtn = new Array(params.length);\\n\\tvar anonsExist = false;\\n\\tvar i;\\n\\tfor (i = 0; i < params.length; i++) {\\n\\t\\tvar name = params[i].name;\\n\\t\\tif (name) {\\n\\t\\t\\trtn[i] = name;\\n\\t\\t\\tused[name] = true;\\n\\t\\t} else {\\n\\t\\t\\tanonsExist = true;\\n\\t\\t}\\n\\t}\\n\\tif (anonsExist) {\\n\\t\\tvar def = parser.context.getMacroDefinition(macroName);\\n\\t\\tif (def === undefined) {\\n\\t\\t\\t// If there are anonymous parameters, and we can't\\n\\t\\t\\t// find the definition, then we can't hope to create\\n\\t\\t\\t// a widget.\\n\\t\\t\\treturn undefined;\\n\\t\\t}\\n\\t\\tvar defParams = def.params || [];\\n\\t\\tvar defPtr = 0;\\n\\t\\tfor (i = 0; i < params.length; i++) {\\n\\t\\t\\tif (rtn[i] === undefined) {\\n\\t\\t\\t\\twhile(defPtr < defParams.length && used[defParams[defPtr].name]) {\\n\\t\\t\\t\\t\\tdefPtr++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (defPtr >= defParams.length) {\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\trtn[i] = defParams[defPtr].name;\\n\\t\\t\\t\\tused[defParams[defPtr].name] = true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn rtn;\\n};\\n\\nfunction parseParams(paramString, pos) {\\n\\tvar params = [],\\n\\t\\treParam = /\\\\s*(?:([A-Za-z0-9\\\\-_]+)\\\\s*:)?(?:\\\\s*(?:\\\"\\\"\\\"([\\\\s\\\\S]*?)\\\"\\\"\\\"|\\\"([^\\\"]*)\\\"|'([^']*)'|\\\\[\\\\[([^\\\\]]*)\\\\]\\\\]|([^\\\"'\\\\s]+)))/mg,\\n\\t\\tparamMatch = reParam.exec(paramString);\\n\\twhile(paramMatch) {\\n\\t\\t// Process this parameter\\n\\t\\tvar paramInfo = { };\\n\\t\\t// We need to find the group match that isn't undefined.\\n\\t\\tfor (var i = 2; i <= 6; i++) {\\n\\t\\t\\tif (paramMatch[i] !== undefined) {\\n\\t\\t\\t\\tparamInfo.value = paramMatch[i];\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif(paramMatch[1]) {\\n\\t\\t\\tparamInfo.name = paramMatch[1];\\n\\t\\t}\\n\\t\\t//paramInfo.start = pos;\\n\\t\\tparamInfo.end = reParam.lastIndex + pos;\\n\\t\\tparams.push(paramInfo);\\n\\t\\t// Find the next match\\n\\t\\tparamMatch = reParam.exec(paramString);\\n\\t}\\n\\treturn params;\\n};\\n\",\"module-type\":\"relinkwikitextrule\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext/macrodef.js\":{\"title\":\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext/macrodef.js\",\"text\":\"/*\\\\\\nmodule-type: relinkwikitextrule\\n\\nHandles pragma macro definitions. Except we only update placeholder macros\\nthat we may have previously install.\\n\\n\\\\define relink-?() Tough title\\n\\n\\\\*/\\n\\nvar utils = require(\\\"$:/plugins/flibbles/relink/js/utils\\\");\\nvar VariableContext = utils.getContext('variable');\\n\\nexports.name = \\\"macrodef\\\";\\n\\nexports.report = function(text, callback, options) {\\n\\tvar setParseTreeNode = this.parse(),\\n\\t\\tm = this.match,\\n\\t\\tname = m[1];\\n\\tthis.parser.context = new VariableContext(this.parser.context, setParseTreeNode[0]);\\n\\t// Parse set the pos pointer, but we don't want to skip the macro body.\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\n\\tvar endMatch = getBodyMatch(text, this.parser.pos, m[3]);\\n\\tif (endMatch) {\\n\\t\\tvar value = endMatch[2],\\n\\t\\t\\thandler = utils.getType(getActiveType(name, m[2]) || 'wikitext');\\n\\t\\tif (handler) {\\n\\t\\t\\tvar entry = handler.report(value, function(title, blurb) {\\n\\t\\t\\t\\tvar macroStr = '\\\\\\\\define ' + name + '()';\\n\\t\\t\\t\\tif (blurb) {\\n\\t\\t\\t\\t\\tmacroStr += ' ' + blurb;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tcallback(title, macroStr);\\n\\t\\t\\t}, options);\\n\\t\\t}\\n\\t\\tthis.parser.pos = endMatch.index + endMatch[0].length;\\n\\t}\\n};\\n\\nexports.relink = function(text, fromTitle, toTitle, options) {\\n\\tvar setParseTreeNode = this.parse(),\\n\\t\\tentry,\\n\\t\\tm = this.match,\\n\\t\\tname = m[1],\\n\\t\\tparams = m[2],\\n\\t\\tmultiline = m[3];\\n\\tthis.parser.context = new VariableContext(this.parser.context, setParseTreeNode[0]);\\n\\t// Parse set the pos pointer, but we don't want to skip the macro body.\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\n\\tvar endMatch = getBodyMatch(text, this.parser.pos, multiline);\\n\\tif (endMatch) {\\n\\t\\tvar value = endMatch[2],\\n\\t\\t\\ttype = getActiveType(name, params),\\n\\t\\t\\thandler = utils.getType(type || 'wikitext');\\n\\t\\tif (handler) {\\n\\t\\t\\t// If this is an active relink placeholder, then let's remember it\\n\\t\\t\\tif (type && options.placeholder) {\\n\\t\\t\\t\\toptions.placeholder.registerExisting(name, value);\\n\\t\\t\\t}\\n\\t\\t\\t// Relink the contents\\n\\t\\t\\tentry = handler.relink(value, fromTitle, toTitle, options);\\n\\t\\t\\tif (entry && entry.output) {\\n\\t\\t\\t\\tentry.output = m[0] + endMatch[1] + entry.output + endMatch[0];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tthis.parser.pos = endMatch.index + endMatch[0].length;\\n\\t}\\n\\treturn entry;\\n};\\n\\n// Return another match for the body, but tooled uniquely\\n// m[1] = whitespace before body\\n// m[2] = body\\n// m.index + m[0].length -> end of match\\nfunction getBodyMatch(text, pos, isMultiline) {\\n\\tvar whitespace,\\n\\t\\tvalueRegExp;\\n\\tif (isMultiline) {\\n\\t\\tvalueRegExp = /\\\\r?\\\\n\\\\\\\\end[^\\\\S\\\\n\\\\r]*(?:\\\\r?\\\\n|$)/mg;\\n\\t\\twhitespace = '';\\n\\t} else {\\n\\t\\tvalueRegExp = /(?:\\\\r?\\\\n|$)/mg;\\n\\t\\tvar newPos = $tw.utils.skipWhiteSpace(text, pos);\\n\\t\\twhitespace = text.substring(pos, newPos);\\n\\t\\tpos = newPos;\\n\\t}\\n\\tvalueRegExp.lastIndex = pos;\\n\\tvar match = valueRegExp.exec(text);\\n\\tif (match) {\\n\\t\\tmatch[1] = whitespace;\\n\\t\\tmatch[2] = text.substring(pos, match.index);\\n\\t}\\n\\treturn match;\\n};\\n\\nfunction getActiveType(macroName, parameters) {\\n\\tvar placeholder = /^relink-(?:(\\\\w+)-)?\\\\d+$/.exec(macroName);\\n\\t// normal macro or special placeholder?\\n\\tif (placeholder && parameters === '') {\\n\\t\\treturn placeholder[1] || 'title';\\n\\t}\\n\\treturn undefined;\\n};\\n\",\"module-type\":\"relinkwikitextrule\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext/prettylink.js\":{\"title\":\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext/prettylink.js\",\"text\":\"/*\\\\\\nmodule-type: relinkwikitextrule\\n\\nHandles replacement in wiki text inline rules, like,\\n\\n[[Introduction]]\\n\\n[[link description|TiddlerTitle]]\\n\\n\\\\*/\\n\\nvar utils = require(\\\"./utils.js\\\");\\n\\nexports.name = \\\"prettylink\\\";\\n\\nexports.report = function(text, callback, options) {\\n\\tvar text = this.match[1],\\n\\t\\tlink = this.match[2] || text;\\n\\tif (!$tw.utils.isLinkExternal(link)) {\\n\\t\\tcallback(link, '[[' + text + ']]');\\n\\t}\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\n};\\n\\nexports.relink = function(text, fromTitle, toTitle, options) {\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\n\\tvar caption, m = this.match;\\n\\tif (m[2] === fromTitle) {\\n\\t\\t// format is [[caption|MyTiddler]]\\n\\t\\tcaption = m[1];\\n\\t} else if (m[2] !== undefined || m[1] !== fromTitle) {\\n\\t\\t// format is [[MyTiddler]], and it doesn't match\\n\\t\\treturn undefined;\\n\\t}\\n\\tvar entry = { output: utils.makePrettylink(this.parser, toTitle, caption) };\\n\\tif (entry.output === undefined) {\\n\\t\\tentry.impossible = true;\\n\\t}\\n\\treturn entry;\\n};\\n\",\"module-type\":\"relinkwikitextrule\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext/relink.js\":{\"title\":\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext/relink.js\",\"text\":\"/*\\\\\\nmodule-type: wikirule\\n\\nThis defines the \\\\relink inline pragma used to locally declare\\nrelink rules for macros.\\n\\nIt takes care of providing its own relink and report rules.\\n\\n\\\\*/\\n\\nvar utils = require('$:/plugins/flibbles/relink/js/utils.js');\\nvar language = require('$:/plugins/flibbles/relink/js/language.js');\\n\\nexports.name = \\\"relink\\\";\\nexports.types = {pragma: true};\\n\\nexports.init = function(parser) {\\n\\tthis.parser = parser;\\n\\tthis.matchRegExp = /^\\\\\\\\relink[^\\\\S\\\\n]+([^(\\\\s]+)([^\\\\r\\\\n]*)(\\\\r?\\\\n)?/mg;\\n};\\n\\n/**This makes the widget that the macro library will later parse to determine\\n * new macro relink state.\\n *\\n * It's a <$set> widget so it can appear BEFORE \\\\define pragma and not\\n * prevent that pragma from being scooped up by importvariables.\\n * (importvariables stops scooping as soon as it sees something besides $set) */\\nexports.parse = function() {\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\n\\tvar macroName;\\n\\tvar macroParams = Object.create(null);\\n\\tvar error = undefined;\\n\\tvar rtn = [];\\n\\tvar self = this;\\n\\tthis.interpretSettings(function(macro, parameter, type) {\\n\\t\\tmacroName = macro;\\n\\t\\tif (type && !utils.getType(type)) {\\n\\t\\t\\terror = language.getString(\\\"Error/UnrecognizedType\\\",\\n\\t\\t\\t\\t{variables: {type: type}, wiki: self.parser.wiki});\\n\\t\\t}\\n\\t\\tmacroParams[parameter] = type;\\n\\t});\\n\\t// If no macroname. Return nothing, this rule will be ignored by parsers\\n\\tif (macroName) {\\n\\t\\tvar relink = Object.create(null);\\n\\t\\trelink[macroName] = macroParams;\\n\\t\\trtn.push({\\n\\t\\t\\ttype: \\\"set\\\",\\n\\t\\t\\tattributes: {\\n\\t\\t\\t\\tname: {type: \\\"string\\\", value: \\\"\\\"}\\n\\t\\t\\t},\\n\\t\\t\\tchildren: [],\\n\\t\\t\\tisMacroDefinition: true,\\n\\t\\t\\trelink: relink});\\n\\t}\\n\\tif (error) {\\n\\t\\trtn.push({\\n\\t\\t\\ttype: \\\"element\\\", tag: \\\"span\\\", attributes: {\\n\\t\\t\\t\\t\\\"class\\\": {\\n\\t\\t\\t\\t\\ttype: \\\"string\\\",\\n\\t\\t\\t\\t\\tvalue: \\\"tc-error tc-relink-error\\\"\\n\\t\\t\\t\\t}\\n\\t\\t\\t}, children: [\\n\\t\\t\\t\\t{type: \\\"text\\\", text: error}\\n\\t\\t\\t]});\\n\\t}\\n\\treturn rtn;\\n};\\n\\nexports.relink = function(text, fromTitle, toTitle, options) {\\n\\tvar parser = this.parser;\\n\\tvar currentTiddler = parser.context.widget.variables.currentTiddler.value;\\n\\tparser.pos = this.matchRegExp.lastIndex;\\n\\tthis.interpretSettings(function(macro, parameter, type) {\\n\\t\\toptions.settings.addSetting(parser.wiki, macro, parameter, type, currentTiddler);\\n\\t});\\n\\t// Return nothing, because this rule is ignored by the parser\\n\\treturn undefined;\\n};\\n\\nexports.interpretSettings = function(block) {\\n\\tvar paramString = this.match[2];\\n\\tif (paramString !== \\\"\\\") {\\n\\t\\tvar macro = this.match[1];\\n\\t\\tvar reParam = /\\\\s*([A-Za-z0-9\\\\-_]+)(?:\\\\s*:\\\\s*([^\\\\s]+))?/mg;\\n\\t\\tvar paramMatch = reParam.exec(paramString);\\n\\t\\twhile (paramMatch) {\\n\\t\\t\\tvar parameter = paramMatch[1];\\n\\t\\t\\tvar type = paramMatch[2];\\n\\t\\t\\tblock(macro, parameter, type);\\n\\t\\t\\tparamMatch = reParam.exec(paramString);\\n\\t\\t}\\n\\t}\\n};\\n\",\"module-type\":\"wikirule\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext/rules.js\":{\"title\":\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext/rules.js\",\"text\":\"/*\\\\\\nmodule-type: relinkwikitextrule\\n\\nParses and acknowledges any pragma rules a tiddler has.\\n\\n\\\\rules except html wikilink\\n\\n\\\\*/\\n\\nexports.name = \\\"rules\\\";\\n\\n/**This is all we have to do. The rules rule doesn't parse. It just amends\\n * the rules, which is exactly what I want it to do too.\\n * It also takes care of moving the pos pointer forward.\\n */\\nexports.relink = function() {\\n\\tthis.parse();\\n\\treturn undefined;\\n};\\n\\n// Same deal\\nexports.report = exports.relink;\\n\",\"module-type\":\"relinkwikitextrule\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext/syslink.js\":{\"title\":\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext/syslink.js\",\"text\":\"/*\\\\\\nmodule-type: relinkwikitextrule\\n\\nHandles sys links\\n\\n$:/sys/link\\n\\nbut not:\\n\\n~$:/sys/link\\n\\n\\\\*/\\n\\nvar utils = require(\\\"./utils.js\\\");\\n\\nexports.name = \\\"syslink\\\";\\n\\nexports.report = function(text, callback, options) {\\n\\tvar title = this.match[0];\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\n\\tif (title[0] !== \\\"~\\\") {\\n\\t\\tcallback(title, '~' + title);\\n\\t}\\n};\\n\\nexports.relink = function(text, fromTitle, toTitle, options) {\\n\\tvar entry = undefined;\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\n\\tif (this.match[0] === fromTitle && this.match[0][0] !== \\\"~\\\") {\\n\\t\\tentry = {output: this.makeSyslink(toTitle, options)};\\n\\t\\tif (entry.output === undefined) {\\n\\t\\t\\tentry.impossible = true;\\n\\t\\t}\\n\\t}\\n\\treturn entry;\\n};\\n\\nexports.makeSyslink = function(title, options) {\\n\\tvar match = title.match(this.matchRegExp);\\n\\tif (match && match[0] === title && title[0] !== \\\"~\\\") {\\n\\t\\treturn title;\\n\\t} else {\\n\\t\\treturn utils.makePrettylink(this.parser, title);\\n\\t}\\n};\\n\",\"module-type\":\"relinkwikitextrule\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext/transclude.js\":{\"title\":\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext/transclude.js\",\"text\":\"/*\\\\\\nmodule-type: relinkwikitextrule\\n\\nHandles replacement of transclusions in wiki text like,\\n\\n{{RenamedTiddler}}\\n{{RenamedTiddler||TemplateTitle}}\\n\\nThis renames both the tiddler and the template field.\\n\\n\\\\*/\\n\\nvar refHandler = require(\\\"$:/plugins/flibbles/relink/js/fieldtypes/reference\\\");\\nvar utils = require(\\\"./utils.js\\\");\\n\\nexports.name = ['transcludeinline', 'transcludeblock'];\\n\\nexports.report = function(text, callback, options) {\\n\\tvar m = this.match,\\n\\t\\trefString = $tw.utils.trim(m[1]),\\n\\t\\tref = parseTextReference(refString);\\n\\t\\ttemplate = $tw.utils.trim(m[2]);\\n\\tif (ref.title) {\\n\\t\\tvar suffix = '';\\n\\t\\tif (ref.index) {\\n\\t\\t\\tsuffix = '##' + ref.index;\\n\\t\\t} else if (ref.field) {\\n\\t\\t\\tsuffix = '!!' + ref.field;\\n\\t\\t}\\n\\t\\tif (template) {\\n\\t\\t\\tsuffix = suffix + '||' + template;\\n\\t\\t}\\n\\t\\tcallback(ref.title, '{{' + suffix + '}}')\\n\\t}\\n\\tif (template) {\\n\\t\\tcallback(template, '{{' + refString + '||}}');\\n\\t}\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\n};\\n\\nexports.relink = function(text, fromTitle, toTitle, options) {\\n\\tvar m = this.match,\\n\\t\\treference = parseTextReference(m[1]),\\n\\t\\ttemplate = m[2],\\n\\t\\tentry = undefined,\\n\\t\\tmodified = false;\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\n\\tif ($tw.utils.trim(reference.title) === fromTitle) {\\n\\t\\t// preserve user's whitespace\\n\\t\\treference.title = reference.title.replace(fromTitle, toTitle);\\n\\t\\tmodified = true;\\n\\t}\\n\\tif ($tw.utils.trim(template) === fromTitle) {\\n\\t\\ttemplate = template.replace(fromTitle, toTitle);\\n\\t\\tmodified = true;\\n\\t}\\n\\tif (modified) {\\n\\t\\tvar output = this.makeTransclude(this.parser, reference, template);\\n\\t\\tif (output) {\\n\\t\\t\\t// Adding any newline that might have existed is\\n\\t\\t\\t// what allows this relink method to work for both\\n\\t\\t\\t// the block and inline filter wikitext rule.\\n\\t\\t\\tentry = {output: output + utils.getEndingNewline(m[0])};\\n\\t\\t} else {\\n\\t\\t\\tentry = {impossible: true}\\n\\t\\t}\\n\\t}\\n\\treturn entry;\\n};\\n\\n// I have my own because the core one is deficient for my needs.\\nfunction parseTextReference(textRef) {\\n\\t// Separate out the title, field name and/or JSON indices\\n\\tvar reTextRef = /^([\\\\w\\\\W]*?)(?:!!(\\\\S[\\\\w\\\\W]*)|##(\\\\S[\\\\w\\\\W]*))?$/g;\\n\\t\\tmatch = reTextRef.exec(textRef),\\n\\t\\tresult = {};\\n\\tif(match) {\\n\\t\\t// Return the parts\\n\\t\\tresult.title = match[1];\\n\\t\\tresult.field = match[2];\\n\\t\\tresult.index = match[3];\\n\\t} else {\\n\\t\\t// If we couldn't parse it\\n\\t\\tresult.title = textRef\\n\\t}\\n\\treturn result;\\n};\\n\\n/** This converts a reference and a template into a string representation\\n *  of a transclude.\\n */\\nexports.makeTransclude = function(parser, reference, template) {\\n\\tvar rtn;\\n\\tif (!canBePrettyTemplate(template)) {\\n\\t\\tvar widget = utils.makeWidget(parser, '$transclude', {\\n\\t\\t\\ttiddler: $tw.utils.trim(template),\\n\\t\\t\\tfield: reference.field,\\n\\t\\t\\tindex: reference.index});\\n\\t\\tif (reference.title && widget !== undefined) {\\n\\t\\t\\trtn = utils.makeWidget(parser, '$tiddler', {tiddler: $tw.utils.trim(reference.title)}, widget);\\n\\t\\t} else {\\n\\t\\t\\trtn = widget;\\n\\t\\t}\\n\\t} else if (!canBePrettyTitle(reference.title)) {\\n\\t\\t// This block and the next account for the 1%...\\n\\t\\tvar reducedRef = {field: reference.field, index: reference.index};\\n\\t\\trtn = utils.makeWidget(parser, '$tiddler', {tiddler: $tw.utils.trim(reference.title)}, prettyTransclude(reducedRef, template));\\n\\t} else {\\n\\t\\t// This block takes care of 99% of all cases\\n\\t\\trtn = prettyTransclude(reference, template);\\n\\t}\\n\\treturn rtn;\\n};\\n\\nfunction canBePrettyTitle(value) {\\n\\treturn refHandler.canBePretty(value) && canBePrettyTemplate(value);\\n};\\n\\nfunction canBePrettyTemplate(value) {\\n\\treturn !value || (value.indexOf('}') < 0 && value.indexOf('{') < 0 && value.indexOf('|') < 0);\\n};\\n\\nfunction prettyTransclude(textReference, template) {\\n\\tif (typeof textReference !== \\\"string\\\") {\\n\\t\\ttextReference = refHandler.toString(textReference);\\n\\t}\\n\\tif (!textReference) {\\n\\t\\ttextReference = '';\\n\\t}\\n\\tif (template !== undefined) {\\n\\t\\treturn \\\"{{\\\"+textReference+\\\"||\\\"+template+\\\"}}\\\";\\n\\t} else {\\n\\t\\treturn \\\"{{\\\"+textReference+\\\"}}\\\";\\n\\t}\\n};\\n\",\"module-type\":\"relinkwikitextrule\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext/utils.js\":{\"title\":\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext/utils.js\",\"text\":\"/*\\\\\\nmodule-type: library\\n\\nUtility methods for the wikitext relink rules.\\n\\n\\\\*/\\n\\nexports.makeWidget = function(parser, tag, attributes, body) {\\n\\tif (!parser.context.allowWidgets()) {\\n\\t\\treturn undefined;\\n\\t}\\n\\tvar string = '<' + tag;\\n\\tfor (var attr in attributes) {\\n\\t\\tvar value = attributes[attr];\\n\\t\\tif (value !== undefined) {\\n\\t\\t\\tvar quoted = exports.wrapAttributeValue(value);\\n\\t\\t\\tif (!quoted) {\\n\\t\\t\\t\\tif (!parser.options.placeholder) {\\n\\t\\t\\t\\t\\t// It's not possible to make this widget\\n\\t\\t\\t\\t\\treturn undefined;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tvar category = getPlaceholderCategory(parser.context, tag, attr);\\n\\t\\t\\t\\tquoted = '<<' + parser.placeholder.getPlaceholderFor(value, category) + '>>';\\n\\t\\t\\t}\\n\\t\\t\\tstring += ' ' + attr + '=' + quoted;\\n\\t\\t}\\n\\t}\\n\\tif (body !== undefined) {\\n\\t\\tstring += '>' + body + '</' + tag + '>';\\n\\t} else {\\n\\t\\tstring += '/>';\\n\\t}\\n\\treturn string;\\n};\\n\\nfunction getPlaceholderCategory(context, tag, attribute) {\\n\\tvar element = context.getAttribute(tag);\\n\\tvar rule = element && element[attribute];\\n\\t// titles go to relink-\\\\d\\n\\t// plaintext goes to relink-plaintext-\\\\d\\n\\t// because titles are way more common, also legacy\\n\\tif (rule === undefined) {\\n\\t\\treturn 'plaintext';\\n\\t} else {\\n\\t\\trule = rule.fields.text;\\n\\t\\tif (rule === 'title') {\\n\\t\\t\\trule = undefined;\\n\\t\\t}\\n\\t\\treturn rule;\\n\\t}\\n};\\n\\nexports.makePrettylink = function(parser, title, caption) {\\n\\tvar output;\\n\\tif (parser.context.allowPrettylinks() && canBePrettylink(title, caption)) {\\n\\t\\tif (caption !== undefined) {\\n\\t\\t\\toutput = \\\"[[\\\" + caption + \\\"|\\\" + title + \\\"]]\\\";\\n\\t\\t} else {\\n\\t\\t\\toutput = \\\"[[\\\" + title + \\\"]]\\\";\\n\\t\\t}\\n\\t} else if (caption !== undefined) {\\n\\t\\tvar safeCaption = sanitizeCaption(parser, caption);\\n\\t\\tif (safeCaption !== undefined) {\\n\\t\\t\\toutput = exports.makeWidget(parser, '$link', {to: title}, safeCaption);\\n\\t\\t}\\n\\t} else if (exports.shorthandPrettylinksSupported(parser.wiki)) {\\n\\t\\toutput = exports.makeWidget(parser, '$link', {to: title});\\n\\t} else if (parser.context.allowWidgets() && parser.placeholder) {\\n\\t\\t// If we don't have a caption, we must resort to\\n\\t\\t// placeholders anyway to prevent link/caption desync\\n\\t\\t// from later relinks.\\n\\t\\t// It doesn't matter whether the tiddler is quotable.\\n\\t\\tvar ph = parser.placeholder.getPlaceholderFor(title);\\n\\t\\toutput = \\\"<$link to=<<\\\"+ph+\\\">>><$text text=<<\\\"+ph+\\\">>/></$link>\\\";\\n\\t}\\n\\treturn output;\\n};\\n\\n/**In version 5.1.20, Tiddlywiki made it so <$link to\\\"something\\\" /> would\\n * use \\\"something\\\" as a caption. This is preferable. However, Relink works\\n * going back to 5.1.14, so we need to have different handling for both\\n * cases.\\n */\\nvar _supported;\\nexports.shorthandPrettylinksSupported = function(wiki) {\\n\\tif (_supported === undefined) {\\n\\t\\tvar test = wiki.renderText(\\\"text/plain\\\", \\\"text/vnd.tiddlywiki\\\", \\\"<$link to=test/>\\\");\\n\\t\\t_supported = (test === \\\"test\\\");\\n\\t}\\n\\treturn _supported;\\n};\\n\\n/**Return true if value can be used inside a prettylink.\\n */\\nfunction canBePrettylink(value, customCaption) {\\n\\treturn value.indexOf(\\\"]]\\\") < 0 && value[value.length-1] !== ']' && (customCaption !== undefined || value.indexOf('|') < 0);\\n};\\n\\nfunction sanitizeCaption(parser, caption) {\\n\\tvar plaintext = parser.wiki.renderText(\\\"text/plain\\\", \\\"text/vnd.tiddlywiki\\\", caption);\\n\\tif (plaintext === caption && caption.indexOf(\\\"</$link>\\\") <= 0) {\\n\\t\\treturn caption;\\n\\t} else {\\n\\t\\treturn exports.makeWidget(parser, '$text', {text: caption});\\n\\t}\\n};\\n\\n/**Finds an appropriate quote mark for a given value.\\n *\\n *Tiddlywiki doesn't have escape characters for attribute values. Instead,\\n * we just have to find the type of quotes that'll work for the given title.\\n * There exist titles that simply can't be quoted.\\n * If it can stick with the preference, it will.\\n *\\n * return: Returns the wrapped value, or undefined if it's impossible to wrap\\n */\\nexports.wrapAttributeValue = function(value, preference) {\\n\\tvar whitelist = [\\\"\\\", \\\"'\\\", '\\\"', '\\\"\\\"\\\"'];\\n\\tvar choices = {\\n\\t\\t\\\"\\\": function(v) {return !/([\\\\/\\\\s<>\\\"'=])/.test(v) && v.length > 0; },\\n\\t\\t\\\"'\\\": function(v) {return v.indexOf(\\\"'\\\") < 0; },\\n\\t\\t'\\\"': function(v) {return v.indexOf('\\\"') < 0; },\\n\\t\\t'\\\"\\\"\\\"': function(v) {return v.indexOf('\\\"\\\"\\\"') < 0 && v[v.length-1] != '\\\"';}\\n\\t};\\n\\tif (choices[preference] && choices[preference](value)) {\\n\\t\\treturn wrap(value, preference);\\n\\t}\\n\\tfor (var i = 0; i < whitelist.length; i++) {\\n\\t\\tvar quote = whitelist[i];\\n\\t\\tif (choices[quote](value)) {\\n\\t\\t\\treturn wrap(value, quote);\\n\\t\\t}\\n\\t}\\n\\t// No quotes will work on this\\n\\treturn undefined;\\n};\\n\\n/**Like wrapAttribute value, except for macro parameters, not attributes.\\n *\\n * These are more permissive. Allows brackets,\\n * and slashes and '<' in unquoted values.\\n */\\nexports.wrapParameterValue = function(value, preference) {\\n\\tvar whitelist = [\\\"\\\", \\\"'\\\", '\\\"', '[[', '\\\"\\\"\\\"'];\\n\\tvar choices = {\\n\\t\\t\\\"\\\": function(v) {return !/([\\\\s>\\\"'=])/.test(v); },\\n\\t\\t\\\"'\\\": function(v) {return v.indexOf(\\\"'\\\") < 0; },\\n\\t\\t'\\\"': function(v) {return v.indexOf('\\\"') < 0; },\\n\\t\\t\\\"[[\\\": canBePrettyOperand,\\n\\t\\t'\\\"\\\"\\\"': function(v) {return v.indexOf('\\\"\\\"\\\"') < 0 && v[v.length-1] != '\\\"';}\\n\\t};\\n\\tif (choices[preference] && choices[preference](value)) {\\n\\t\\treturn wrap(value, preference);\\n\\t}\\n\\tfor (var i = 0; i < whitelist.length; i++) {\\n\\t\\tvar quote = whitelist[i];\\n\\t\\tif (choices[quote](value)) {\\n\\t\\t\\treturn wrap(value, quote);\\n\\t\\t}\\n\\t}\\n\\t// No quotes will work on this\\n\\treturn undefined;\\n};\\n\\nfunction wrap(value, wrapper) {\\n\\tvar wrappers = {\\n\\t\\t\\\"\\\": function(v) {return v; },\\n\\t\\t\\\"'\\\": function(v) {return \\\"'\\\"+v+\\\"'\\\"; },\\n\\t\\t'\\\"': function(v) {return '\\\"'+v+'\\\"'; },\\n\\t\\t'\\\"\\\"\\\"': function(v) {return '\\\"\\\"\\\"'+v+'\\\"\\\"\\\"'; },\\n\\t\\t\\\"[[\\\": function(v) {return \\\"[[\\\"+v+\\\"]]\\\"; }\\n\\t};\\n\\tvar chosen = wrappers[wrapper];\\n\\tif (chosen) {\\n\\t\\treturn chosen(value);\\n\\t} else {\\n\\t\\treturn undefined;\\n\\t}\\n};\\n\\nfunction canBePrettyOperand(value) {\\n\\treturn value.indexOf(']') < 0;\\n};\\n\\n/**Given some text, and a param or  attribute within that text, this returns\\n * what type of quotation that attribute is using.\\n *\\n * param: An object in the form {end:, ...}\\n */\\nexports.determineQuote = function(text, param) {\\n\\tvar pos = param.end-1;\\n\\tif (text[pos] === \\\"'\\\") {\\n\\t\\treturn \\\"'\\\";\\n\\t}\\n\\tif (text[pos] === '\\\"') {\\n\\t\\tif (text.substr(pos-2, 3) === '\\\"\\\"\\\"') {\\n\\t\\t\\treturn '\\\"\\\"\\\"';\\n\\t\\t} else {\\n\\t\\t\\treturn '\\\"';\\n\\t\\t}\\n\\t}\\n\\tif (text.substr(pos-1,2) === ']]' && text.substr((pos-param.value.length)-3, 2) === '[[') {\\n\\t\\treturn \\\"[[\\\";\\n\\t}\\n\\treturn '';\\n};\\n\\n// Finds the newline at the end of a string and returns it. Empty string if\\n// none exists.\\nexports.getEndingNewline = function(string) {\\n\\tvar l = string.length;\\n\\tif (string[l-1] === '\\\\n') {\\n\\t\\treturn (string[l-2] === '\\\\r') ? \\\"\\\\r\\\\n\\\" : \\\"\\\\n\\\";\\n\\t}\\n\\treturn \\\"\\\";\\n};\\n\",\"module-type\":\"library\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext/wikilink.js\":{\"title\":\"$:/plugins/flibbles/relink/js/relinkoperations/text/wikitext/wikilink.js\",\"text\":\"/*\\\\\\nmodule-type: relinkwikitextrule\\n\\nHandles CamelCase links\\n\\nWikiLink\\n\\nbut not:\\n\\n~WikiLink\\n\\n\\\\*/\\n\\nvar utils = require(\\\"./utils.js\\\");\\n\\nexports.name = \\\"wikilink\\\";\\n\\nexports.report = function(text, callback, options) {\\n\\tvar title = this.match[0],\\n\\t\\tunlink = $tw.config.textPrimitives.unWikiLink;\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\n\\tif (title[0] !== unlink) {\\n\\t\\tcallback(title, unlink + title);\\n\\t}\\n};\\n\\nexports.relink = function(text, fromTitle, toTitle, options) {\\n\\tvar entry = undefined,\\n\\t\\ttitle = this.match[0];\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\n\\tif (title === fromTitle && title[0] !== $tw.config.textPrimitives.unWikiLink) {\\n\\t\\tentry = { output: this.makeWikilink(toTitle, options) };\\n\\t\\tif (entry.output === undefined) {\\n\\t\\t\\tentry.impossible = true;\\n\\t\\t}\\n\\t}\\n\\treturn entry;\\n};\\n\\nexports.makeWikilink = function(title, options) {\\n\\tif (title.match(this.matchRegExp) && title[0] !== $tw.config.textPrimitives.unWikiLink) {\\n\\t\\treturn title;\\n\\t} else {\\n\\t\\treturn utils.makePrettylink(this.parser, title);\\n\\t}\\n};\\n\",\"module-type\":\"relinkwikitextrule\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/settings.js\":{\"title\":\"$:/plugins/flibbles/relink/js/settings.js\",\"text\":\"/*\\\\\\nmodule-type: library\\n\\nThis handles the fetching and distribution of relink settings.\\n\\n\\\\*/\\n\\nvar utils = require('./utils');\\n\\n///// Legacy. You used to be able to access the type from utils.\\nexports.getType = utils.getType;\\n/////\\n\",\"module-type\":\"library\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/utils.js\":{\"title\":\"$:/plugins/flibbles/relink/js/utils.js\",\"text\":\"/*\\\\\\nmodule-type: library\\n\\nUtility methods for relink.\\n\\n\\\\*/\\n\\nvar macroFilter =  \\\"[[$:/core/ui/PageMacros]] [all[shadows+tiddlers]tag[$:/tags/Macro]!has[draft.of]]\\\";\\n\\n/**This works nearly identically to $tw.modules.getModulesByTypeAsHashmap\\n * except that this also takes care of migrating V1 relink modules.\\n */\\nexports.getModulesByTypeAsHashmap = function(moduleType, nameField) {\\n\\tvar results = Object.create(null);\\n\\t$tw.modules.forEachModuleOfType(moduleType, function(title, module) {\\n\\t\\tvar key = module[nameField];\\n\\t\\tif (key !== undefined) {\\n\\t\\t\\tresults[key] = module;\\n\\t\\t} else {\\n\\t\\t\\tfor (var entry in module) {\\n\\t\\t\\t\\tresults[entry] = {\\n\\t\\t\\t\\t\\trelink: module[entry],\\n\\t\\t\\t\\t\\treport: function() {}};\\n\\t\\t\\t}\\n\\t\\t}\\n\\t});\\n\\treturn results;\\n};\\n\\nexports.getTiddlerRelinkReferences = function(wiki, title, context) {\\n\\tvar tiddler = wiki.getTiddler(title),\\n\\t\\treferences = Object.create(null),\\n\\t\\toptions = {settings: context, wiki: wiki};\\n\\tif (tiddler) {\\n\\t\\ttry {\\n\\t\\t\\tfor (var relinker in getRelinkOperators()) {\\n\\t\\t\\t\\tgetRelinkOperators()[relinker].report(tiddler, function(title, blurb) {\\n\\t\\t\\t\\t\\treferences[title] = references[title] || [];\\n\\t\\t\\t\\t\\treferences[title].push(blurb);\\n\\t\\t\\t\\t}, options);\\n\\t\\t\\t}\\n\\t\\t} catch (e) {\\n\\t\\t\\tif (e.message) {\\n\\t\\t\\t\\te.message = e.message + \\\"\\\\nWhen reporting '\\\" + title + \\\"' Relink references\\\";\\n\\t\\t\\t}\\n\\t\\t\\tthrow e;\\n\\t\\t}\\n\\t}\\n\\treturn references;\\n};\\n\\n/** Returns a pair like this,\\n *  { title: {field: entry, ... }, ... }\\n */\\nexports.getRelinkResults = function(wiki, fromTitle, toTitle, context, tiddlerList, options) {\\n\\toptions = options || {};\\n\\toptions.wiki = options.wiki || wiki;\\n\\tfromTitle = (fromTitle || \\\"\\\").trim();\\n\\ttoTitle = (toTitle || \\\"\\\").trim();\\n\\tvar changeList = Object.create(null);\\n\\tif(fromTitle && toTitle) {\\n\\t\\tif (tiddlerList === undefined) {\\n\\t\\t\\ttiddlerList = wiki.getRelinkableTitles();\\n\\t\\t}\\n\\t\\tfor (var i = 0; i < tiddlerList.length; i++) {\\n\\t\\t\\tvar title = tiddlerList[i];\\n\\t\\t\\tvar tiddler = wiki.getTiddler(title);\\n\\t\\t\\tif(tiddler && !tiddler.fields[\\\"plugin-type\\\"]) {\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tvar entries = Object.create(null),\\n\\t\\t\\t\\t\\t\\toperators = getRelinkOperators();\\n\\t\\t\\t\\t\\toptions.settings = new Contexts.tiddler(wiki, context, title);\\n\\t\\t\\t\\t\\tfor (var operation in operators) {\\n\\t\\t\\t\\t\\t\\toperators[operation].relink(tiddler, fromTitle, toTitle, entries, options);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tfor (var field in entries) {\\n\\t\\t\\t\\t\\t\\t// So long as there is one key,\\n\\t\\t\\t\\t\\t\\t// add it to the change list.\\n\\t\\t\\t\\t\\t\\tchangeList[title] = entries;\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} catch (e) {\\n\\t\\t\\t\\t\\t// Should we test for instanceof Error instead?: yes\\n\\t\\t\\t\\t\\t// Does that work in the testing environment?: no\\n\\t\\t\\t\\t\\tif (e.message) {\\n\\t\\t\\t\\t\\t\\te.message = e.message + \\\"\\\\nWhen relinking '\\\" + title + \\\"'\\\";\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tthrow e;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn changeList;\\n};\\n\\nvar Contexts = $tw.modules.applyMethods('relinkcontext');\\n\\nexports.getContext = function(name) {\\n\\treturn Contexts[name];\\n};\\n\\nexports.getWikiContext = function(wiki) {\\n\\t// This gives a fresh context every time. It is up to the indexer or\\n\\t// the cache to preserve those contexts for as long as needed.\\n\\tvar whitelist = new Contexts.whitelist(wiki);\\n\\treturn new Contexts.import(wiki, whitelist, macroFilter);\\n};\\n\\n/** Returns the Relink indexer, or a dummy object which pretends to be one.\\n */\\nexports.getIndexer = function(wiki) {\\n\\tif (!wiki._relink_indexer) {\\n\\t\\twiki._relink_indexer = (wiki.getIndexer && wiki.getIndexer(\\\"RelinkIndexer\\\")) || new (require('$:/plugins/flibbles/relink/js/utils/backupIndexer.js'))(wiki);\\n\\t}\\n\\treturn wiki._relink_indexer;\\n};\\n\\n/**Relinking supports a cache that persists throughout a whole relink op.\\n * This is because the Tiddlywiki caches may get wiped multiple times\\n * throughout the course of a relink.\\n */\\nexports.getCacheForRun = function(options, cacheName, initializer) {\\n\\toptions.cache = options.cache || Object.create(null);\\n\\tif (!$tw.utils.hop(options.cache, cacheName)) {\\n\\t\\toptions.cache[cacheName] = initializer();\\n\\t}\\n\\treturn options.cache[cacheName];\\n};\\n\\n/**Returns a specific relinker.\\n * This is useful for wikitext rules which need to parse a filter or a list\\n */\\nexports.getType = function(name) {\\n\\tvar Handler = getFieldTypes()[name];\\n\\treturn Handler ? new Handler() : undefined;\\n};\\n\\nexports.getTypes = function() {\\n\\t// We don't return fieldTypes, because we don't want it modified,\\n\\t// and we need to filter out legacy names.\\n\\tvar rtn = Object.create(null);\\n\\tfor (var type in getFieldTypes()) {\\n\\t\\tvar typeObject = getFieldTypes()[type];\\n\\t\\trtn[typeObject.typeName] = typeObject;\\n\\t}\\n\\treturn rtn;\\n};\\n\\nexports.getDefaultType = function(wiki) {\\n\\tvar tiddler = wiki.getTiddler(\\\"$:/config/flibbles/relink/settings/default-type\\\");\\n\\tvar defaultType = tiddler && tiddler.fields.text;\\n\\t// make sure the default actually exists, otherwise default\\n\\treturn fieldTypes[defaultType] ? defaultType : \\\"title\\\";\\n};\\n\\nvar fieldTypes;\\n\\nfunction getFieldTypes() {\\n\\tif (!fieldTypes) {\\n\\t\\tfieldTypes = Object.create(null);\\n\\t\\t$tw.modules.forEachModuleOfType(\\\"relinkfieldtype\\\", function(title, exports) {\\n\\t\\t\\tfunction NewType() {};\\n\\t\\t\\tNewType.prototype = exports;\\n\\t\\t\\tNewType.typeName = exports.name;\\n\\t\\t\\tfieldTypes[exports.name] = NewType;\\n\\t\\t\\t// For legacy, if the NewType doesn't have a report method, we add one\\n\\t\\t\\tif (!exports.report) {\\n\\t\\t\\t\\texports.report = function() {};\\n\\t\\t\\t}\\n\\t\\t\\t// Also for legacy, some of the field types can go by other names\\n\\t\\t\\tif (exports.aliases) {\\n\\t\\t\\t\\t$tw.utils.each(exports.aliases, function(alias) {\\n\\t\\t\\t\\t\\tfieldTypes[alias] = NewType;\\n\\t\\t\\t\\t});\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\treturn fieldTypes;\\n}\\n\\nvar relinkOperators;\\n\\nfunction getRelinkOperators() {\\n\\tif (!relinkOperators) {\\n\\t\\trelinkOperators = exports.getModulesByTypeAsHashmap('relinkoperator', 'name');\\n\\t}\\n\\treturn relinkOperators;\\n};\\n\",\"module-type\":\"library\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/utils/backupIndexer.js\":{\"title\":\"$:/plugins/flibbles/relink/js/utils/backupIndexer.js\",\"text\":\"/*\\\\\\nmodule-type: library\\n\\nThis is a backup indexer Relink uses if the real one is disabled, or we're\\n<V5.1.23. It's not nearly as good, but it caches some.\\n\\n\\\\*/\\n\\n\\\"use strict\\\";\\n\\nvar utils = require(\\\"$:/plugins/flibbles/relink/js/utils.js\\\");\\nvar TiddlerContext = utils.getContext('tiddler');\\n\\n// This is the indexer we use if the current wiki doesn't support indexers.\\nfunction BackupIndexer(wiki) {\\n\\tthis.wiki = wiki;\\n};\\n\\nmodule.exports = BackupIndexer;\\n\\nBackupIndexer.prototype.lookup = function(title) {\\n\\treturn getCache(this.wiki).lookup[title];\\n};\\n\\nBackupIndexer.prototype.reverseLookup = function(title) {\\n\\tvar index = getCache(this.wiki);\\n\\tif (!index.reverse[title]) {\\n\\t\\tvar record = Object.create(null);\\n\\t\\tfor (var other in index.lookup) {\\n\\t\\t\\tif (index.lookup[other][title]) {\\n\\t\\t\\t\\trecord[other] = index.lookup[other][title];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tindex.reverse[title] = record;\\n\\t}\\n\\treturn index.reverse[title];\\n};\\n\\n/* The backup indexer doesn't bother caching relink reports. It would always\\n * be called after a draft tiddler had changed, which would defeat the point.\\n */\\nBackupIndexer.prototype.relinkLookup = function(fromTitle, toTitle, options) {\\n\\tvar cache = getCache(this.wiki);\\n\\tif (cache.lastRelinkFrom === fromTitle && cache.lastRelinkTo === toTitle) {\\n\\t\\toptions.cache = cache.lastRelinkCache;\\n\\t\\treturn cache.lastRelink;\\n\\t}\\n\\tcache.lastRelink = utils.getRelinkResults(this.wiki, fromTitle, toTitle, cache.context, undefined, options);\\n\\tcache.lastRelinkFrom = fromTitle;\\n\\tcache.lastRelinkTo = toTitle;\\n\\tcache.lastRelinkCache = options.cache;\\n\\treturn cache.lastRelink;\\n};\\n\\nfunction getCache(wiki) {\\n\\treturn wiki.getGlobalCache('relink', function() {\\n\\t\\tvar tiddlerList = wiki.getRelinkableTitles();\\n\\t\\tvar index = Object.create(null);\\n\\t\\tvar wikiContext = utils.getWikiContext(wiki);\\n\\t\\tfor (var i = 0; i < tiddlerList.length; i++) {\\n\\t\\t\\tvar title = tiddlerList[i];\\n\\t\\t\\tvar tiddler = wiki.getTiddler(title);\\n\\t\\t\\tif (tiddler && !tiddler.fields[\\\"plugin-type\\\"]) {\\n\\t\\t\\t\\tvar context = new TiddlerContext(wiki, wikiContext, title);\\n\\t\\t\\t\\tindex[title] = utils.getTiddlerRelinkReferences(wiki, title, context);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn {\\n\\t\\t\\tlookup: index,\\n\\t\\t\\treverse: Object.create(null),\\n\\t\\t\\tcontext: wikiContext};\\n\\t});\\n};\\n\",\"module-type\":\"library\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/utils/entry.js\":{\"title\":\"$:/plugins/flibbles/relink/js/utils/entry.js\",\"text\":\"/*\\\\\\n\\nEntries are deprecated. Don't use them. These classes are here just so that\\nany 3rd party modules built for Relink V1 don't break.\\n\\nJust return an object like, {output: \\\"string\\\", impossible: true|undefined}\\n\\n\\\\*/\\n\\nfunction EntryNode() {\\n\\tthis.children = [];\\n};\\n\\nmodule.exports = EntryNode;\\n\\n/**  PURE VIRTUAL\\n * EntryNode.prototype.report = function() -> [\\\"string\\\", ...]\\n */\\n\\nEntryNode.newType = function() {\\n\\treturn EntryNode;\\n};\\n\\nEntryNode.prototype.add = function(entry) {\\n\\tthis.children.push(entry);\\n};\\n\\nfunction EntryCollection() {\\n\\tthis.children = Object.create(null);\\n\\tthis.types = Object.create(null);\\n};\\n\\nEntryNode.newCollection = function(name) {\\n\\treturn EntryCollection;\\n};\\n\\n// Again. I reiterate. Don't use this. All this is just legacy support.\\nObject.defineProperty(EntryCollection, 'impossible', {\\n\\tget: function() {\\n\\t\\tvar imp = this._impossible;\\n\\t\\tthis.eachChild(function(child) { imp = imp || child.impossible; });\\n\\t\\treturn imp;\\n\\t},\\n\\tset: function(impossible) {\\n\\t\\tthis._impossible = true;\\n\\t}\\n});\\n\\nEntryCollection.prototype.eachChild = function(method) {\\n\\tfor (var child in this.children) {\\n\\t\\tmethod(this.children[child]);\\n\\t}\\n};\\n\\nEntryCollection.prototype.addChild = function(child, name, type) {\\n\\tthis.children[name] = child;\\n\\tthis.types[name] = type;\\n};\\n\\nEntryCollection.prototype.hasChildren = function() {\\n\\treturn Object.keys(this.children).length > 0;\\n};\\n\",\"module-type\":\"library\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/utils/placeholder.js\":{\"title\":\"$:/plugins/flibbles/relink/js/utils/placeholder.js\",\"text\":\"/*\\\\\\n\\nA method which doles out placeholders when requested, and constructs\\nthe necessary supporting pragma when requested.\\n\\n\\\\*/\\n\\nvar utils = require('../utils');\\n\\nfunction Placeholder() {\\n\\tthis.placeholders = Object.create(null);\\n\\tthis.reverseMap = {};\\n\\tthis.used = Object.create(null);\\n};\\n\\nmodule.exports = Placeholder;\\n\\nPlaceholder.prototype.getPlaceholderFor = function(value, category) {\\n\\tthis.reverseMap[category] = this.reverseMap[category] || Object.create(null);\\n\\tvar placeholder = this.reverseMap[category][value];\\n\\tif (placeholder) {\\n\\t\\treturn placeholder;\\n\\t}\\n\\tvar config = (this.parser && this.parser.context) || utils.getWikiContext(this.parser.wiki);\\n\\tvar number = 0;\\n\\tvar prefix = \\\"relink-\\\"\\n\\tif (category && category !== \\\"title\\\") {\\n\\t\\t// I don't like \\\"relink-title-1\\\". \\\"relink-1\\\" should be for\\n\\t\\t// titles. lists, and filters can have descriptors though.\\n\\t\\tprefix += category + \\\"-\\\";\\n\\t}\\n\\tdo {\\n\\t\\tnumber += 1;\\n\\t\\tplaceholder = prefix + number;\\n\\t} while (config.getMacroDefinition(placeholder) || this.used[placeholder]);\\n\\tthis.placeholders[placeholder] = value;\\n\\tthis.reverseMap[category][value] = placeholder;\\n\\tthis.used[placeholder] = true;\\n\\treturn placeholder;\\n};\\n\\n// For registering placeholders that already existed\\nPlaceholder.prototype.registerExisting = function(key, value) {\\n\\tthis.reverseMap[value] = key;\\n\\tthis.used[key] = true;\\n};\\n\\nPlaceholder.prototype.getPreamble = function() {\\n\\tvar results = [];\\n\\tvar keys = Object.keys(this.placeholders);\\n\\tif (keys.length > 0) {\\n\\t\\tkeys.sort();\\n\\t\\tfor (var i = 0; i < keys.length; i++) {\\n\\t\\t\\tvar name = keys[i];\\n\\t\\t\\tvar val = this.placeholders[name];\\n\\t\\t\\tresults.push(\\\"\\\\\\\\define \\\"+name+\\\"() \\\"+val+\\\"\\\\n\\\");\\n\\t\\t}\\n\\t}\\n\\treturn results.join('');\\n};\\n\\n\",\"module-type\":\"library\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/utils/rebuilder.js\":{\"title\":\"$:/plugins/flibbles/relink/js/utils/rebuilder.js\",\"text\":\"/*\\\\\\n\\nThis helper class aids in reconstructing an existing string with new parts.\\n\\n\\\\*/\\n\\nfunction Rebuilder(text, start) {\\n\\tthis.text = text;\\n\\tthis.index = start || 0;\\n\\tthis.pieces = [];\\n};\\n\\nmodule.exports = Rebuilder;\\n\\n/**Pieces must be added consecutively.\\n * Start and end are the indices in the old string specifying where to graft\\n * in the new piece.\\n */\\nRebuilder.prototype.add = function(value, start, end) {\\n\\tthis.pieces.push(this.text.substring(this.index, start), value);\\n\\tthis.index = end;\\n};\\n\\nRebuilder.prototype.changed = function() {\\n\\treturn this.pieces.length > 0;\\n};\\n\\nRebuilder.prototype.results = function(end) {\\n\\tif (this.changed()) {\\n\\t\\tthis.pieces.push(this.text.substring(this.index, end));\\n\\t\\treturn this.pieces.join('');\\n\\t}\\n\\treturn undefined;\\n};\\n\",\"module-type\":\"library\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/js/wikimethods.js\":{\"title\":\"$:/plugins/flibbles/relink/js/wikimethods.js\",\"text\":\"/*\\\\\\nmodule-type: wikimethod\\n\\nIntroduces some utility methods used by Relink.\\n\\n\\\\*/\\n\\nvar utils = require(\\\"./utils.js\\\");\\n\\nexports.getTiddlerRelinkReferences = function(title) {\\n\\treturn utils.getIndexer(this).lookup(title);\\n};\\n\\nexports.getTiddlerRelinkBackreferences = function(title) {\\n\\treturn utils.getIndexer(this).reverseLookup(title);\\n};\\n\\nexports.getRelinkableTitles = function() {\\n\\tvar toUpdate = \\\"$:/config/flibbles/relink/to-update\\\";\\n\\tvar wiki = this;\\n\\treturn this.getCacheForTiddler(toUpdate, \\\"relink-toUpdate\\\", function() {\\n\\t\\tvar tiddler = wiki.getTiddler(toUpdate);\\n\\t\\tif (tiddler) {\\n\\t\\t\\treturn wiki.compileFilter(tiddler.fields.text);\\n\\t\\t} else {\\n\\t\\t\\treturn wiki.allTitles;\\n\\t\\t}\\n\\t})();\\n};\\n\",\"module-type\":\"wikimethod\",\"type\":\"application/javascript\"},\"$:/plugins/flibbles/relink/language/Buttons/Delete/Hint\":{\"title\":\"$:/plugins/flibbles/relink/language/Buttons/Delete/Hint\",\"text\":\"delete\"},\"$:/plugins/flibbles/relink/language/Buttons/LinkToInline/Hint\":{\"title\":\"$:/plugins/flibbles/relink/language/Buttons/LinkToInline/Hint\",\"text\":\"go to defining tiddler\"},\"$:/plugins/flibbles/relink/language/Buttons/NewAttribute/Caption\":{\"title\":\"$:/plugins/flibbles/relink/language/Buttons/NewAttribute/Caption\",\"text\":\"add\"},\"$:/plugins/flibbles/relink/language/Buttons/NewAttribute/Hint\":{\"title\":\"$:/plugins/flibbles/relink/language/Buttons/NewAttribute/Hint\",\"text\":\"Specify a new widget/element attribute to be updated whenever a tiddler is renamed\"},\"$:/plugins/flibbles/relink/language/Buttons/NewField/Caption\":{\"title\":\"$:/plugins/flibbles/relink/language/Buttons/NewField/Caption\",\"text\":\"add\"},\"$:/plugins/flibbles/relink/language/Buttons/NewField/Hint\":{\"title\":\"$:/plugins/flibbles/relink/language/Buttons/NewField/Hint\",\"text\":\"Specify a new field to be updated whenever a tiddler is renamed\"},\"$:/plugins/flibbles/relink/language/Buttons/NewOperator/Caption\":{\"title\":\"$:/plugins/flibbles/relink/language/Buttons/NewOperator/Caption\",\"text\":\"add\"},\"$:/plugins/flibbles/relink/language/Buttons/NewOperator/Hint\":{\"title\":\"$:/plugins/flibbles/relink/language/Buttons/NewOperator/Hint\",\"text\":\"Specify a new filter operator to be considered whenever a tiddler is renamed\"},\"$:/plugins/flibbles/relink/language/Buttons/NewParameter/Caption\":{\"title\":\"$:/plugins/flibbles/relink/language/Buttons/NewParameter/Caption\",\"text\":\"add\"},\"$:/plugins/flibbles/relink/language/Buttons/NewParameter/Hint\":{\"title\":\"$:/plugins/flibbles/relink/language/Buttons/NewParameter/Hint\",\"text\":\"Specify a new macro parameter to be updated whenever a tiddler is renamed\"},\"$:/plugins/flibbles/relink/language/Error/InvalidAttributeName\":{\"title\":\"$:/plugins/flibbles/relink/language/Error/InvalidAttributeName\",\"text\":\"Illegal characters in attribute name \\\"<$text text=<<attributeName>>/>\\\". Attributes cannot contain slashes ('/'), closing angle or square brackets ('>' or ']'), quotes or apostrophes ('\\\"' or \\\"'\\\"), equals ('='), or whitespace\"},\"$:/plugins/flibbles/relink/language/Error/InvalidElementName\":{\"title\":\"$:/plugins/flibbles/relink/language/Error/InvalidElementName\",\"text\":\"Illegal characters in element/widget name \\\"<$text text=<<elementName>>/>\\\". Element tags can only contain letters and the characters hyphen (`-`) and dollar sign (`$`)\"},\"$:/plugins/flibbles/relink/language/Error/InvalidMacroName\":{\"title\":\"$:/plugins/flibbles/relink/language/Error/InvalidMacroName\",\"text\":\"Illegal characters in macro name \\\"<$text text=<<macroName>>/>\\\". Macros cannot contain whitespace\"},\"$:/plugins/flibbles/relink/language/Error/InvalidParameterName\":{\"title\":\"$:/plugins/flibbles/relink/language/Error/InvalidParameterName\",\"text\":\"Illegal characters in parameter name \\\"<$text text=<<parameterName>>/>\\\". Parameters can only contain letters, digits, and the characters underscore (`_`) and hyphen (`-`)\"},\"$:/plugins/flibbles/relink/language/Error/RelinkFilterOperator\":{\"title\":\"$:/plugins/flibbles/relink/language/Error/RelinkFilterOperator\",\"text\":\"Filter Error: Unknown suffix for the 'relink' filter operator\"},\"$:/plugins/flibbles/relink/language/Error/ReportFailedRelinks\":{\"title\":\"$:/plugins/flibbles/relink/language/Error/ReportFailedRelinks\",\"text\":\"Relink could not update '<<from>>' to '<<to>>' inside the following tiddlers:\"},\"$:/plugins/flibbles/relink/language/Error/UnrecognizedType\":{\"title\":\"$:/plugins/flibbles/relink/language/Error/UnrecognizedType\",\"text\":\"Relink parse error: Unrecognized field type '<<type>>'\"},\"$:/plugins/flibbles/relink/language/Help/Attributes\":{\"title\":\"$:/plugins/flibbles/relink/language/Help/Attributes\",\"text\":\"See the <a href={{{[{$:/plugins/flibbles/relink!!demo}addsuffix[#Attributes]]}}}>Attributes documentation page</a> for details.\"},\"$:/plugins/flibbles/relink/language/Help/Fields\":{\"title\":\"$:/plugins/flibbles/relink/language/Help/Fields\",\"text\":\"See the <a href={{{[{$:/plugins/flibbles/relink!!demo}addsuffix[#Fields]]}}}>Fields documentation page</a> for details.\"},\"$:/plugins/flibbles/relink/language/Help/Macros\":{\"title\":\"$:/plugins/flibbles/relink/language/Help/Macros\",\"text\":\"See the <a href={{{[{$:/plugins/flibbles/relink!!demo}addsuffix[#Macros]]}}}>Macros documentation page</a> for details.\"},\"$:/plugins/flibbles/relink/language/Help/Operators\":{\"title\":\"$:/plugins/flibbles/relink/language/Help/Operators\",\"text\":\"See the <a href={{{[{$:/plugins/flibbles/relink!!demo}addsuffix[#Operators]]}}}>Operators documentation page</a> for details.\"},\"$:/plugins/flibbles/relink/language/TiddlerInfo/References/Caption\":{\"title\":\"$:/plugins/flibbles/relink/language/TiddlerInfo/References/Caption\",\"text\":\"//Relink// References\"},\"$:/plugins/flibbles/relink/language/TiddlerInfo/References/Description\":{\"title\":\"$:/plugins/flibbles/relink/language/TiddlerInfo/References/Description\",\"text\":\"The following tiddlers contain fields, links, macros, transclusions, or widgets referencing this one:\"},\"$:/plugins/flibbles/relink/language/TiddlerInfo/References/Empty\":{\"title\":\"$:/plugins/flibbles/relink/language/TiddlerInfo/References/Empty\",\"text\":\"No tiddlers contain any fields, links, macros, transclusions, or widgets referencing this one\"},\"$:/plugins/flibbles/relink/language/ui/Attributes/Caption\":{\"title\":\"$:/plugins/flibbles/relink/language/ui/Attributes/Caption\",\"text\":\"Attributes\"},\"$:/plugins/flibbles/relink/language/ui/Fields/Caption\":{\"title\":\"$:/plugins/flibbles/relink/language/ui/Fields/Caption\",\"text\":\"Fields\"},\"$:/plugins/flibbles/relink/language/ui/Macros/Caption\":{\"title\":\"$:/plugins/flibbles/relink/language/ui/Macros/Caption\",\"text\":\"Macros\"},\"$:/plugins/flibbles/relink/language/ui/Operators/Caption\":{\"title\":\"$:/plugins/flibbles/relink/language/ui/Operators/Caption\",\"text\":\"Operators\"},\"$:/plugins/flibbles/relink/license\":{\"title\":\"$:/plugins/flibbles/relink/license\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<a href={{$:/plugins/flibbles/relink!!demo}}>Relink Plugin</a> Copyright (c) 2019-<<now YYYY>> Cameron Fischer\\n\\n[[BSD 3-Clause License|https://raw.githubusercontent.com/flibbles/tw5-relink/master/LICENSE]]\\n\"},\"$:/plugins/flibbles/relink/readme\":{\"title\":\"$:/plugins/flibbles/relink/readme\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"When renaming a tiddler, Relink can update the fields, filters, and widgets\\nof all other tiddlers. However, it works through whitelisting.\\n\\nIt's already configured to update tiddler titles for all core widgets, filters,\\nand fields, but the whitelists can be customized for each of this in the\\nconfiguration panel.\\n\\nSee <a href={{$:/plugins/flibbles/relink!!source}}>the tw5-relink website</a> for more details and examples.\\n\"},\"$:/plugins/flibbles/relink/ui/ListItemTemplate\":{\"title\":\"$:/plugins/flibbles/relink/ui/ListItemTemplate\",\"text\":\"<$set\\n\\tname=\\\"classes\\\"\\n\\tfilter=\\\"[<listItem>relink:impossible<toTitle>]\\\"\\n\\tvalue=\\\"tc-menu-list-item tc-relink-impossible\\\"\\n\\temptyValue=\\\"tc-menu-list-item\\\">\\n<div class=<<classes>>>\\n<$link to=<<listItem>>><$text text=<<listItem>> /></$link>\\n</div>\\n</$set>\\n\"},\"$:/plugins/flibbles/relink/ui/TiddlerInfo/References\":{\"title\":\"$:/plugins/flibbles/relink/ui/TiddlerInfo/References\",\"caption\":\"{{$:/plugins/flibbles/relink/language/TiddlerInfo/References/Caption}}\",\"tags\":\"$:/tags/TiddlerInfo\",\"text\":\"\\\\define lingo-base() $:/plugins/flibbles/relink/language/TiddlerInfo/\\n\\\\define filter() [all[current]relink:backreferences[]!title[$:/StoryList]!prefix[$:/temp/]sort[title]]\\n<$list filter=\\\"[subfilter<filter>first[]]\\\">\\n\\n<<lingo References/Description>>\\n</$list>\\n\\n<table class=\\\"tc-relink-references-table\\\">\\n<tbody>\\n<$list filter=<<filter>> emptyMessage=<<lingo References/Empty>> variable=\\\"listItem\\\" template=\\\"$:/plugins/flibbles/relink/ui/TiddlerInfo/ReferencesTemplate\\\" />\\n</tbody>\\n</table>\\n\"},\"$:/plugins/flibbles/relink/ui/TiddlerInfo/ReferencesTemplate\":{\"title\":\"$:/plugins/flibbles/relink/ui/TiddlerInfo/ReferencesTemplate\",\"text\":\"<tr class=\\\"tc-relink-references\\\">\\n<td class=\\\"tc-relink-references-title\\\">\\n<$link to=<<listItem>>/>\\n</td>\\n<td class=\\\"tc-relink-references-report\\\">\\n<$list filter=\\\"[<listItem>relink:report<currentTiddler>]\\\">\\n\\n<$text text=<<currentTiddler>> />\\n</$list>\\n\\n</td>\\n</tr>\\n\"},\"$:/plugins/flibbles/relink/ui/components/button-delete\":{\"title\":\"$:/plugins/flibbles/relink/ui/components/button-delete\",\"text\":\"\\\\define lingo-base() $:/plugins/flibbles/relink/language/Buttons/\\n\\\\define prefix() $:/config/flibbles/relink/\\n\\n<$list filter=\\\"[all[current]prefix<prefix>]\\\" >\\n<$button class=\\\"tc-btn-invisible\\\" tooltip={{$:/plugins/flibbles/relink/language/Buttons/Delete/Hint}}><$list filter=\\\"[all[current]is[tiddler]]\\\">\\n<$action-deletetiddler $tiddler=<<currentTiddler>> />\\n</$list><$list filter=\\\"[all[current]is[shadow]]\\\">\\n<$action-setfield $tiddler=<<tiddlerName>> text=\\\"\\\" />\\n</$list>\\n{{$:/core/images/delete-button}}\\n</$button>\\n</$list><$list filter=\\\"[all[current]!prefix<prefix>]\\\">\\n<$link><$button class=\\\"tc-btn-invisible\\\" tooltip={{$:/plugins/flibbles/relink/language/Buttons/LinkToInline/Hint}}>{{$:/core/images/link}}</$button></$link>\\n</$list>\\n\"},\"$:/plugins/flibbles/relink/ui/components/select-fieldtype\":{\"title\":\"$:/plugins/flibbles/relink/ui/components/select-fieldtype\",\"text\":\"\\\\define prefix() $:/config/flibbles/relink/\\n\\n<$vars type={{{ [<signature>relink:type[]] }}} >\\n<$list filter=\\\"[all[current]prefix<prefix>]\\\" >\\n<$select tiddler=<<currentTiddler>> >\\n<$list variable=\\\"option\\\" filter=\\\"[relink:types[]]\\\">\\n<option><$text text=<<option>> /></option>\\n</$list>\\n</$select>\\n</$list><$list filter=\\\"[all[current]!prefix<prefix>]\\\">\\n<$text text=<<type>> />\\n</$list>\\n</$vars>\\n\"},\"$:/plugins/flibbles/relink/ui/components/tables\":{\"title\":\"$:/plugins/flibbles/relink/ui/components/tables\",\"text\":\"\\\\define .make-table(title, plugin, default-table-state:yes)\\n\\n<$list variable=\\\"render\\\" filter=\\\"[relink:signatures<__plugin__>prefix<__category__>first[]]\\\">\\n<$set name=\\\"table-state\\\" value=<<qualify \\\"\\\"\\\"$:/state/flibbles/relink/tables/$title$\\\"\\\"\\\">>>\\n<tr><th class=\\\"tc-relink-header-plugin\\\" colspan=<<column-count>> >\\n<$reveal type=\\\"nomatch\\\" state=<<table-state>> text=\\\"yes\\\" default=\\\"\\\"\\\"$default-table-state$\\\"\\\"\\\">\\n<$button class=\\\"tc-btn-invisible tc-btn-dropdown\\\" set=<<table-state>> setTo=\\\"yes\\\">\\n{{$:/core/images/right-arrow}} ''$title$''\\n</$button>\\n</$reveal>\\n<$reveal type=\\\"match\\\" state=<<table-state>> text=\\\"yes\\\" default=\\\"\\\"\\\"$default-table-state$\\\"\\\"\\\">\\n<$button class=\\\"tc-btn-invisible tc-btn-dropdown\\\" set=<<table-state>> setTo=\\\"no\\\">\\n{{$:/core/images/down-arrow}} ''$title$''\\n</$button>\\n</$reveal>\\n</th></tr>\\n<$list\\n\\tvariable=\\\"signature\\\"\\n\\tfilter=\\\"[relink:signatures<__plugin__>prefix<__category__>sort[]]\\\">\\n<$vars key={{{ [<signature>removeprefix<__category__>removeprefix[/]] }}} >\\n<$tiddler tiddler={{{[<signature>relink:source[]]}}} >\\n<$reveal tag=\\\"tr\\\" type=\\\"match\\\" state=<<table-state>> text=\\\"yes\\\" default=\\\"\\\"\\\"$default-table-state$\\\"\\\"\\\">\\n<$macrocall $name=<<__list-row-macro__>> signature=<<signature>> />\\n<td class=\\\"tc-relink-column-type\\\">{{||$:/plugins/flibbles/relink/ui/components/select-fieldtype}}</td>\\n<td class=\\\"tc-relink-column-delete\\\">{{||$:/plugins/flibbles/relink/ui/components/button-delete}}</td>\\n</$reveal>\\n</$tiddler>\\n</$vars>\\n</$list>\\n</$set>\\n</$list>\\n\\\\end\\n\\n\\\\define tables(category, list-row-macro, header-list)\\n<$vars\\n\\tcolumn-count={{{[enlist<__header-list__>] [[DeleteColumn]] +[count[]]}}}>\\n\\n<table class=\\\"tc-relink-whitelist\\\"><tbody>\\n<tr>\\n<$list variable=\\\"header\\\" filter=\\\"[enlist<__header-list__>butlast[]]\\\"><th><<header>></th></$list>\\n<!-- We have the last column extend into the delete/link column, which is unlabeled. -->\\n<th colspan=2><$text text={{{ [enlist<__header-list__>last[]] }}} /></th>\\n</tr>\\n\\n<<.make-table Custom \\\"\\\" yes>>\\n\\n<$list\\n\\tfilter=\\\"[plugin-type[plugin]![$:/core]![$:/plugins/flibbles/relink]]\\\">\\n<$set name=\\\"subtitle\\\" value={{!!description}} emptyValue={{!!title}} >\\n<$macrocall $name=\\\".make-table\\\" title=<<subtitle>> plugin=<<currentTiddler>> />\\n</$set>\\n</$list>\\n\\n<<.make-table Core \\\"$:/plugins/flibbles/relink\\\">>\\n\\n</tbody></table>\\n</$vars>\\n\\\\end\\n\"},\"$:/plugins/flibbles/relink/ui/configuration/Attributes\":{\"title\":\"$:/plugins/flibbles/relink/ui/configuration/Attributes\",\"caption\":\"{{$:/plugins/flibbles/relink/language/ui/Attributes/Caption}}\",\"tags\":\"$:/tags/flibbles/relink/Configuration\",\"text\":\"\\\\import $:/plugins/flibbles/relink/ui/components/tables\\n\\\\define prefix-attr() $:/config/flibbles/relink/attributes/\\n\\\\define lingo-base() $:/plugins/flibbles/relink/language/Buttons/\\n\\\\define element-name-tiddler() $:/state/flibbles/relink/element-name\\n\\\\define attribute-name-tiddler() $:/state/flibbles/relink/attribute-name\\n\\n\\\\define row()\\n<$set name=\\\"element\\\"\\n      filter=\\\"[<key>splitbefore[/]removesuffix[/]]\\\">\\n<$set name=\\\"attribute\\\"\\n      filter=\\\"[<key>removeprefix<element>removeprefix[/]]\\\">\\n<td><$text text=<<element>> /></td>\\n<td><$text text=<<attribute>> /></td>\\n</$set></$set>\\n\\\\end\\n\\\\define body()\\n\\n{{$:/plugins/flibbles/relink/language/Help/Attributes}}\\n\\n<em class=\\\"tc-edit\\\">Add a new attribute:</em>\\n<$edit-text\\n\\ttiddler=<<element-name-tiddler>>\\n\\ttag=\\\"input\\\"\\n\\tdefault=\\\"\\\"\\n\\tplaceholder=\\\"widget/element\\\" />\\n<$edit-text\\n\\ttiddler=<<attribute-name-tiddler>>\\n\\ttag=\\\"input\\\"\\n\\tdefault=\\\"\\\"\\n\\tplaceholder=\\\"attribute\\\" />\\n<$reveal type=\\\"nomatch\\\" text=\\\"\\\" state=<<element-name-tiddler>> >\\n<$reveal type=\\\"nomatch\\\" text=\\\"\\\" state=<<attribute-name-tiddler>> >\\n<$relinkmangler>\\n<$button\\n\\ttooltip={{$(lingo-base)$NewAttribute/Hint}}\\n\\taria-label={{$(lingo-base)$NewAttribute/Caption}}>\\n<$action-sendmessage\\n\\t$message=\\\"relink-add-attribute\\\"\\n\\telement={{$(element-name-tiddler)$}}\\n\\tattribute={{$(attribute-name-tiddler)$}} />\\n<$action-deletetiddler $tiddler=<<attribute-name-tiddler>> />\\n<$action-deletetiddler $tiddler=<<element-name-tiddler>> />\\n<$text text={{$(lingo-base)$NewAttribute/Caption}}/>\\n</$button>\\n</$relinkmangler>\\n</$reveal>\\n<$reveal type=\\\"match\\\" text=\\\"\\\" state=<<attribute-name-tiddler>> >\\n<$button>\\n<$text text={{$(lingo-base)$NewAttribute/Caption}}/>\\n</$button>\\n</$reveal>\\n</$reveal>\\n<$reveal type=\\\"match\\\" text=\\\"\\\" state=<<element-name-tiddler>> >\\n<$button>\\n<$text text={{$(lingo-base)$NewAttribute/Caption}}/>\\n</$button>\\n</$reveal>\\n\\n<$macrocall\\n\\t$name=tables\\n\\tcategory=\\\"attributes\\\"\\n\\theader-list=\\\"[[Widget/HTML Element]] Attribute Type\\\"\\n\\tlist-row-macro=\\\"row\\\" />\\n\\\\end\\n\\n<<body>>\\n\"},\"$:/plugins/flibbles/relink/ui/configuration/Fields\":{\"title\":\"$:/plugins/flibbles/relink/ui/configuration/Fields\",\"caption\":\"{{$:/plugins/flibbles/relink/language/ui/Fields/Caption}}\",\"tags\":\"$:/tags/flibbles/relink/Configuration\",\"text\":\"\\\\import $:/plugins/flibbles/relink/ui/components/tables\\n\\\\define lingo-base() $:/plugins/flibbles/relink/language/Buttons/\\n\\\\define field-name-tiddler() $:/state/flibbles/relink/field-name\\n\\n\\\\define row()\\n<td><$text text=<<key>> /></td>\\n\\\\end\\n\\\\define body()\\n\\n{{$:/plugins/flibbles/relink/language/Help/Fields}}\\n\\n<em class=\\\"tc-edit\\\">Add a new field:</em>\\n<$edit-text\\n\\ttiddler=<<field-name-tiddler>>\\n\\ttag=\\\"input\\\"\\n\\tdefault=\\\"\\\"\\n\\tplaceholder=\\\"field name\\\" />\\n<$reveal type=\\\"nomatch\\\" text=\\\"\\\" state=<<field-name-tiddler>> >\\n<$relinkmangler>\\n<$button\\n\\ttooltip={{$(lingo-base)$NewField/Hint}}\\n\\taria-label={{$(lingo-base)$NewField/Caption}}>\\n<$action-sendmessage\\n\\t$message=\\\"relink-add-field\\\"\\n\\tfield={{$(field-name-tiddler)$}} />\\n<$action-deletetiddler $tiddler=<<field-name-tiddler>> />\\n<$text text={{$(lingo-base)$NewField/Caption}}/>\\n</$button>\\n</$relinkmangler>\\n</$reveal>\\n<$reveal type=\\\"match\\\" text=\\\"\\\" state=<<field-name-tiddler>> >\\n<$button>\\n<$text text={{$(lingo-base)$NewField/Caption}}/>\\n</$button>\\n</$reveal>\\n\\n\\n<$macrocall\\n\\t$name=tables\\n\\tcategory=\\\"fields\\\"\\n\\theader-list=\\\"[[Field Name]] [[Field Type]]\\\"\\n\\tlist-row-macro=\\\"row\\\" />\\n\\\\end\\n\\n<<body>>\\n\"},\"$:/plugins/flibbles/relink/ui/configuration/Macros\":{\"title\":\"$:/plugins/flibbles/relink/ui/configuration/Macros\",\"caption\":\"{{$:/plugins/flibbles/relink/language/ui/Macros/Caption}}\",\"tags\":\"$:/tags/flibbles/relink/Configuration\",\"text\":\"\\\\import $:/plugins/flibbles/relink/ui/components/tables\\n\\\\define prefix-macro() $:/config/flibbles/relink/macros/\\n\\\\define lingo-base() $:/plugins/flibbles/relink/language/Buttons/\\n\\\\define macro-name-tiddler() $:/state/flibbles/relink/macro-name\\n\\\\define parameter-name-tiddler() $:/state/flibbles/relink/parameter-name\\n\\n\\\\define row()\\n<$set name=\\\"parameter\\\"\\n      filter=\\\"[<key>relink:splitafter[/]]\\\">\\n<$set name=\\\"macro\\\"\\n      filter=\\\"[<key>removesuffix<parameter>removesuffix[/]]\\\">\\n<td><$text text=<<macro>> /></td>\\n<td><$text text=<<parameter>> /></td>\\n</$set></$set>\\n\\\\end\\n\\\\define body()\\n\\n{{$:/plugins/flibbles/relink/language/Help/Macros}}\\n\\n<em class=\\\"tc-edit\\\">Add a new macro parameter:</em>\\n<$edit-text\\n\\ttiddler=<<macro-name-tiddler>>\\n\\ttag=\\\"input\\\"\\n\\tdefault=\\\"\\\"\\n\\tplaceholder=\\\"macro\\\" />\\n<$edit-text\\n\\ttiddler=<<parameter-name-tiddler>>\\n\\ttag=\\\"input\\\"\\n\\tdefault=\\\"\\\"\\n\\tplaceholder=\\\"parameter\\\" />\\n<$reveal type=\\\"nomatch\\\" text=\\\"\\\" state=<<macro-name-tiddler>> >\\n<$reveal type=\\\"nomatch\\\" text=\\\"\\\" state=<<parameter-name-tiddler>> >\\n<$relinkmangler>\\n<$button\\n\\ttooltip={{$(lingo-base)$NewParameter/Hint}}\\n\\taria-label={{$(lingo-base)$NewParameter/Caption}}>\\n<$action-sendmessage\\n\\t$message=\\\"relink-add-parameter\\\"\\n\\tmacro={{$(macro-name-tiddler)$}}\\n\\tparameter={{$(parameter-name-tiddler)$}} />\\n<$action-deletetiddler $tiddler=<<parameter-name-tiddler>> />\\n<$action-deletetiddler $tiddler=<<macro-name-tiddler>> />\\n<$text text={{$(lingo-base)$NewParameter/Caption}}/>\\n</$button>\\n</$relinkmangler>\\n</$reveal>\\n<$reveal type=\\\"match\\\" text=\\\"\\\" state=<<parameter-name-tiddler>> >\\n<$button>\\n<$text text={{$(lingo-base)$NewParameter/Caption}}/>\\n</$button>\\n</$reveal>\\n</$reveal>\\n<$reveal type=\\\"match\\\" text=\\\"\\\" state=<<macro-name-tiddler>> >\\n<$button>\\n<$text text={{$(lingo-base)$NewParameter/Caption}}/>\\n</$button>\\n</$reveal>\\n\\n\\n<$macrocall\\n\\t$name=tables\\n\\tcategory=\\\"macros\\\"\\n\\theader-list=\\\"Macro Parameter Type\\\"\\n\\tlist-row-macro=\\\"row\\\" />\\n\\\\end\\n\\n<<body>>\\n\"},\"$:/plugins/flibbles/relink/ui/configuration/Operators\":{\"title\":\"$:/plugins/flibbles/relink/ui/configuration/Operators\",\"caption\":\"{{$:/plugins/flibbles/relink/language/ui/Operators/Caption}}\",\"tags\":\"$:/tags/flibbles/relink/Configuration\",\"text\":\"\\\\import $:/plugins/flibbles/relink/ui/components/tables\\n\\\\define lingo-base() $:/plugins/flibbles/relink/language/Buttons/\\n\\\\define operator-name-tiddler() $:/state/flibbles/relink/operator-name\\n\\n\\\\define row()\\n<td><$text text=<<key>> /></td>\\n\\\\end\\n\\\\define body()\\n\\n{{$:/plugins/flibbles/relink/language/Help/Operators}}\\n\\n<em class=\\\"tc-edit\\\">Add a new filter operator:</em>\\n<$edit-text\\n\\ttiddler=<<operator-name-tiddler>>\\n\\ttag=\\\"input\\\"\\n\\tdefault=\\\"\\\"\\n\\tplaceholder=\\\"operator name\\\" />\\n<$reveal type=\\\"nomatch\\\" text=\\\"\\\" state=<<operator-name-tiddler>>>\\n<$relinkmangler>\\n<$button\\n\\ttooltip={{$(lingo-base)$NewOperator/Hint}}\\n\\taria-label={{$(lingo-base)$NewOperator/Caption}}>\\n<$action-sendmessage\\n\\t$message=\\\"relink-add-operator\\\"\\n\\toperator={{$(operator-name-tiddler)$}} />\\n<$action-deletetiddler $tiddler=<<operator-name-tiddler>> />\\n<$text text={{$(lingo-base)$NewOperator/Caption}}/>\\n</$button>\\n</$relinkmangler>\\n</$reveal>\\n<$reveal type=\\\"match\\\" text=\\\"\\\" state=<<operator-name-tiddler>>>\\n<$button>\\n<$text text={{$(lingo-base)$NewOperator/Caption}}/>\\n</$button>\\n</$reveal>\\n\\n<$macrocall\\n\\t$name=tables\\n\\tcategory=\\\"operators\\\"\\n\\theader-list=\\\"[[Filter Operator]] [[Operand Type]]\\\"\\n\\tlist-row-macro=\\\"row\\\" />\\n\\\\end\\n\\n<<body>>\\n\"},\"$:/plugins/flibbles/relink/ui/stylesheet.css\":{\"title\":\"$:/plugins/flibbles/relink/ui/stylesheet.css\",\"text\":\".tc-relink-references {\\n}\\n\\n.tc-relink-references-table {\\n\\twidth: 100%;\\n\\tborder: none;\\n}\\n\\n.tc-relink-references-table td {\\n\\tborder-left: none;\\n}\\n\\n.tc-relink-references-table tr:first-child td {\\n\\tborder-top: none;\\n}\\n\\n.tc-relink-references-title {\\n\\ttext-align: left;\\n\\tvertical-align: top;\\n}\\n\\n.tc-relink-references-occurrence {\\n\\tfont-style: italic;\\n\\ttext-align: left;\\n\\tfont-weight: 200;\\n\\tpadding-left: 25px;\\n\\tvertical-align: top;\\n}\\n\\n.tc-relink-header-plugin {\\n\\ttext-align: left;\\n}\\n\\n.tc-relink-header-plugin button {\\n\\twidth: 100%\\n}\\n\\n.tc-relink-column-type {\\n\\twidth: 8em;\\n}\\n\\n.tc-relink-column-type select {\\n\\twidth: 100%;\\n}\\n\\n.tc-relink-column-delete {\\n\\tborder-left: none;\\n\\ttext-align: left;\\n}\\n\\n.tc-relink-column-delete button {\\n\\tpadding-left: 1em;\\n}\\n\\n.tc-relink-impossible a.tc-tiddlylink {\\n\\tcolor: red;\\n}\\n\",\"tags\":\"$:/tags/Stylesheet\",\"type\":\"text/css\"}}}"
  },
  {
    "author": "Matthew Lauber",
    "core-version": ">=5.0.0",
    "created": "20210105134918257",
    "dependents": "",
    "description": "A Shuffle filter operator",
    "list": "readme",
    "modified": "20210105134918257",
    "plugin-type": "plugin",
    "source": "https://github.com/mklauber/tiddly-shuffle",
    "title": "$:/plugins/mklauber/shuffle",
    "version": "1.0.2",
    "type": "application/json",
    "text": "{\"tiddlers\":{\"$:/plugins/mklauber/shuffle/readme\":{\"title\":\"$:/plugins/mklauber/shuffle/readme\",\"caption\":\"Shuffle Operator\",\"text\":\"|!purpose|Randomize the order of the input list|\\n|!input|a selection of titles|\\n|!parameter|a random string to be used to create consistent random ordering|\\n|!output|The input titles, rearranged in a random order|\\n\\nThis plugin implements a new filter operator called Shuffle.  This operator takes the input list and randomizes the order of the list.  If no parameter is provided, the list order is random every time.\\n\\n!!!Example:\\n```\\n<$list filter=\\\"1 2 3 4 5 +[shuffle[]]\\\">\\n\\n</$list>\\n```\\n\\n<$button popup=\\\"$:/state/shuffle/reveal1\\\">Run Demo</$button>\\n\\n<$reveal type=\\\"popup\\\" state=\\\"$:/state/shuffle/reveal1\\\">\\n<div class=\\\"tc-drop-down\\\">\\n<$list filter=\\\"1 2 3 4 5 +[shuffle[]]\\\">\\n\\n</$list>\\n</div>\\n</$reveal>\\n\\nCombining this operator with the first operator allows you to choose 1 or more titles randomly from a list.\\n\\n!!!Example:\\n```\\n<$list filter=\\\"1 2 3 4 5 +[shuffle[]first[2]]\\\">\\n\\n</$list>\\n```\\n\\n<$button popup=\\\"$:/state/shuffle/reveal2\\\">Run Demo</$button>\\n\\n<$reveal type=\\\"popup\\\" state=\\\"$:/state/shuffle/reveal2\\\">\\n<div class=\\\"tc-drop-down\\\">\\n<$list filter=\\\"1 2 3 4 5 +[shuffle[]first[2]]\\\">\\n\\n</$list>\\n</div>\\n</$reveal>\\n\\nIf a parameter is provided the list will be ordered identically every time it is rendered.  This can be useful in conjunction a button that updates a state tiddler.  Set the parameter of this operator to reference that state tiddler, and create a button that updates that tiddler, and now the ordering of the random operators only changes when the button is pressed.\\n\\n!!!Example:\\n```\\n<$button>\\n<$action-setfield $tiddler=\\\"$:/temp/shuffle/example\\\" $field=\\\"state\\\" $value=<<now \\\"0hh:0mm:0ss\\\">>/>\\nChange Order\\n</$button>\\n\\n<$list filter=\\\"1 2 3 4 5 +[shuffle{$:/temp/shuffle/example!!state}]\\\">\\n\\n</$list>\\n```\\n\\n<$button>\\n<$action-setfield $tiddler=\\\"$:/temp/shuffle/example\\\" $field=\\\"state\\\" $value=<<now \\\"0hh:0mm:0ss\\\">>/>\\nUpdate\\n</$button>\\n\\n<$list filter=\\\"1 2 3 4 5 +[shuffle{$:/temp/shuffle/example!!state}]\\\">\\n\\n</$list>\\n\"},\"$:/plugins/mklauber/shuffle/seedrandom.js\":{\"title\":\"$:/plugins/mklauber/shuffle/seedrandom.js\",\"text\":\"!function(a,b){function c(c,j,k){var n=[];j=1==j?{entropy:!0}:j||{};var s=g(f(j.entropy?[c,i(a)]:null==c?h():c,3),n),t=new d(n),u=function(){for(var a=t.g(m),b=p,c=0;a<q;)a=(a+c)*l,b*=l,c=t.g(1);for(;a>=r;)a/=2,b/=2,c>>>=1;return(a+c)/b};return u.int32=function(){return 0|t.g(4)},u.quick=function(){return t.g(4)/4294967296},u.double=u,g(i(t.S),a),(j.pass||k||function(a,c,d,f){return f&&(f.S&&e(f,t),a.state=function(){return e(t,{})}),d?(b[o]=a,c):a})(u,s,\\\"global\\\"in j?j.global:this==b,j.state)}function d(a){var b,c=a.length,d=this,e=0,f=d.i=d.j=0,g=d.S=[];for(c||(a=[c++]);e<l;)g[e]=e++;for(e=0;e<l;e++)g[e]=g[f=s&f+a[e%c]+(b=g[e])],g[f]=b;(d.g=function(a){for(var b,c=0,e=d.i,f=d.j,g=d.S;a--;)b=g[e=s&e+1],c=c*l+g[s&(g[e]=g[f=s&f+b])+(g[f]=b)];return d.i=e,d.j=f,c})(l)}function e(a,b){return b.i=a.i,b.j=a.j,b.S=a.S.slice(),b}function f(a,b){var c,d=[],e=typeof a;if(b&&\\\"object\\\"==e)for(c in a)try{d.push(f(a[c],b-1))}catch(a){}return d.length?d:\\\"string\\\"==e?a:a+\\\"\\\\0\\\"}function g(a,b){for(var c,d=a+\\\"\\\",e=0;e<d.length;)b[s&e]=s&(c^=19*b[s&e])+d.charCodeAt(e++);return i(b)}function h(){try{var b;return j&&(b=j.randomBytes)?b=b(l):(b=new Uint8Array(l),(k.crypto||k.msCrypto).getRandomValues(b)),i(b)}catch(b){var c=k.navigator,d=c&&c.plugins;return[+new Date,k,d,k.screen,i(a)]}}function i(a){return String.fromCharCode.apply(0,a)}var j,k=this,l=256,m=6,n=52,o=\\\"random\\\",p=b.pow(l,m),q=b.pow(2,n),r=2*q,s=l-1;if(b[\\\"seed\\\"+o]=c,g(b.random(),a),\\\"object\\\"==typeof module&&module.exports){module.exports=c;try{j=require(\\\"crypto\\\")}catch(a){}}else\\\"function\\\"==typeof define&&define.amd&&define(function(){return c})}([],Math);\",\"created\":\"20180220123939614\",\"modified\":\"20180220125617309\",\"module-type\":\"library\",\"tags\":\"\",\"type\":\"application/javascript\"},\"$:/plugins/mklauber/shuffle/shuffle.js\":{\"title\":\"$:/plugins/mklauber/shuffle/shuffle.js\",\"text\":\"(function(){\\n\\n    \\\"use strict\\\";\\n\\n    var hash = function(str) {\\n      var hash = 0, i, chr, len;\\n      if (str.length === 0) return hash;\\n      for (i = 0, len = str.length; i < len; i++) {\\n        chr   = str.charCodeAt(i);\\n        hash  = ((hash << 5) - hash) + chr;\\n        hash |= 0; // Convert to 32bit integer\\n      }\\n      return hash;\\n    }\\n\\n    var shuffle = function(array, seed) {\\n      var currentIndex = array.length, temporaryValue, randomIndex ;\\n     Math.seedrandom(seed)\\n\\n      // While there remain elements to shuffle...\\n      while (0 !== currentIndex) {\\n\\n        // Pick a remaining element...\\n        randomIndex = Math.floor(Math.random() * currentIndex);\\n        currentIndex -= 1;\\n\\n        // And swap it with the current element.\\n        temporaryValue = array[currentIndex];\\n        array[currentIndex] = array[randomIndex];\\n        array[randomIndex] = temporaryValue;\\n      }\\n\\n      return array;\\n    }\\n\\n    var prepare_results = function (source) {\\n\\t    var results = [];\\n\\t    source(function(tiddler,title) {\\n\\t\\t    results.push(title);\\n\\t    });\\n\\t    return results;\\n    };\\n\\n    exports.shuffle = function(source, operator, options) {\\n       var results = prepare_results(source);\\n       if (operator['operand'] == \\\"\\\") {\\n           shuffle(results);\\n       } else {\\n           shuffle(results, hash(operator['operand']));\\n       }\\n       return results;\\n    }\\n})();\\n\",\"caption\":\"A filter Operator to randomize the order of the list passed to it.\",\"created\":\"20150811171933696\",\"modified\":\"20180220125039203\",\"module-type\":\"filteroperator\",\"type\":\"application/javascript\"},\"$:/plugins/mklauber/shuffle/startup.js\":{\"title\":\"$:/plugins/mklauber/shuffle/startup.js\",\"text\":\"exports.name = \\\"shuffle\\\"\\nexports.before = [\\\"render\\\"]\\nexports.startup = function() {\\n  $tw.modules.execute('$:/plugins/mklauber/shuffle/seedrandom.js');\\n}\\n\",\"created\":\"20180220133753576\",\"modified\":\"20180220133920300\",\"module-type\":\"startup\",\"tags\":\"\",\"type\":\"application/javascript\"}}}"
  },
  {
    "title": "$:/plugins/sobjornstad/GrokTiddlyWiki",
    "description": "Extensible content for Grok TiddlyWiki",
    "author": "Soren Bjornstad",
    "version": "2.0.0",
    "core-version": ">=5.3.5",
    "source": "https://groktiddlywiki.com",
    "list": "readme copyright",
    "dependents": "",
    "plugin-type": "plugin",
    "type": "application/json",
    "text": "{\"tiddlers\":{\"$:/GrokTiddlyWikiUpgrader\":{\"title\":\"$:/GrokTiddlyWikiUpgrader\",\"created\":\"20210820145716584\",\"list-after\":\"$:/sib/TooManyTiddlersBanner\",\"modified\":\"20241019225248696\",\"tags\":\"$:/tags/SideBarSegment\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\function gtw.upgrade.needed-deletes() [enlist{$:/config/sobjornstad/GrokTiddlyWiki/Upgrades/deletes}is[tiddler]]\\n\\n<!-- Was section/chapter modified prior to N date?\\n     Set the modified date to the release date of an update which makes major changes and might invalidate some old sections.\\n     Don't include content that was deleted in the new version in \\\"modified content\\\", as that needs to be treated separately anyway. -->\\n\\\\function gtw.upgrade.modified-content() [tag[Section]] [tag[Chapter]] :filter[get[modified]compare:date:lt{$:/config/sobjornstad/GrokTiddlyWiki/Upgrades/flag-modified-as-upgrade-before}] -[gtw.upgrade.needed-deletes[]]\\n\\n\\\\procedure gtw.upgrade.modified-content-delete-actions()\\n  <$list filter=\\\"[gtw.upgrade.modified-content[]]\\\">\\n    <$action-deletetiddler $tiddler=<<currentTiddler>>/>\\n  </$list>\\n\\\\end\\n\\n\\\\procedure gtw.upgrade.deleted-content-delete-actions()\\n  <$list filter=\\\"[gtw.upgrade.needed-deletes[]]\\\">\\n    <$action-deletetiddler $tiddler=<<currentTiddler>>/>\\n  </$list>\\n\\\\end\\n\\n\\n<% if [<storyTiddler>!is[blank]] %>\\n  <!----- RENDERING THE UPGRADER ITSELF ---->\\n  <% if [gtw.upgrade.modified-content[]] %>\\n\\n    The following chapters and sections ''have been manually modified'' in your copy:\\n\\n    <<list-links \\\"[gtw.upgrade.modified-content[]]\\\">>\\n\\n    If you would like to keep any of the changes in these tiddlers,\\n    please rename the tiddlers to something else so that they disappear from the list.\\n    Then click the button below to complete the upgrade.\\n\\n    <$button actions=<<gtw.upgrade.modified-content-delete-actions>>>\\n      Overwrite your tiddlers with the tiddlers in the new edition\\n    </$button>\\n\\n  <% endif %>\\n\\n  <% if [gtw.upgrade.needed-deletes[]] %>\\n\\n    The following content tiddlers that you have modified\\n    (either manually or through a tool such as the TakeAway reviewer)\\n    ''have been removed'' in the version of //Grok TiddlyWiki// you've upgraded to,\\n    most likely because they are no longer relevant in a new version of TiddlyWiki,\\n    or they have been superseded by other content:\\n\\n    <<list-links \\\"[gtw.upgrade.needed-deletes[]]\\\" emptyMessage:\\\"(none)\\\">>\\n\\n    If you would like to keep any of these tiddlers,\\n    please rename them to something else so that they disappear from the list.\\n    Then click the button below to complete the upgrade.\\n\\n    <$button actions=<<gtw.upgrade.deleted-content-delete-actions>>>\\n      Delete tiddlers and complete upgrade\\n    </$button>\\n\\n  <% endif %>\\n\\n  <% if [gtw.upgrade.modified-content[]] [gtw.upgrade.needed-deletes[]] %>\\n  <% else %>\\n\\n    You're all up to date, nothing to see here!\\n\\n  <% endif %>\\n\\n<% else %> <!-- <storyTiddler> is blank -->\\n  <!----- RENDERING THE BANNER SHOWING YOU NEED TO OPEN THE UPGRADER IN THE SIDEBAR ---->\\n\\n  <!----------- GTW tiddler upgrade ---------->\\n  <% if [gtw.upgrade.modified-content[]] [gtw.upgrade.needed-deletes[]] %>\\n    <div class=\\\"gtw-upgrade-banner\\\">\\n      <div style=\\\"display: inline-block; vertical-align: center; margin-top: 6px; margin-left: 1em;\\\">\\n        <span style=\\\"height: 44px;\\\">{{$:/core/images/info-button}}</span>\\n      </div>\\n      <div style=\\\"display: inline-block; margin-left: 1em;\\\">\\n        An upgrade to //Grok TiddlyWiki// is in progress.<br>\\n        [[Open the upgrader|$:/GrokTiddlyWikiUpgrader]] to finish the upgrade.\\n      </div>\\n    </div>\\n  <% endif %>\\n\\n  <!---------- Version upgrade ---------->\\n  <!-- <version> is set to the current TW version somewhere (I can't actually find where) -->\\n  <$list filter=\\\"[<version>compare:version:lt{Metadata##tw-version}]\\\" variable=_>\\n    <div class=\\\"gtw-upgrade-banner\\\">\\n      <div style=\\\"text-align: center;\\\">\\n        <span style=\\\"height: 44px;\\\">{{$:/core/images/info-button}}</span>\\n      </div>\\n      <div style=\\\"display: inline-block; margin-left: 1em;\\\">\\n        This version of //Grok TiddlyWiki// was written for TiddlyWiki {{Metadata##tw-version}}, but it's ''running on an older version'', TiddlyWiki <<version>>. Some features may not work correctly. Please update it to the latest version using the [[TiddlyWiki Upgrader|https://tiddlywiki.com/upgrade]].\\n      </div>\\n    </div>\\n  </$list>\\n\\n<% endif %>\\n\\n<!---------- Common ---------->\\n<style>\\n.gtw-upgrade-banner {\\n  background-color: <<color tiddler-background>>;\\n  display: inline-block;\\n  margin-right: 2em;\\n  padding-right: 1em;\\n}\\n</style>\"},\"$:/config/SecretPasswordExample\":{\"title\":\"$:/config/SecretPasswordExample\",\"created\":\"20210207222644521\",\"modified\":\"20210207222552483\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"TiddlyWikiIsFun\"},\"$:/config/sobjornstad/GrokTiddlyWiki/Bookmarks\":{\"title\":\"$:/config/sobjornstad/GrokTiddlyWiki/Bookmarks\",\"created\":\"20210320201232026\",\"modified\":\"20240727213229800\",\"type\":\"text/vnd.tiddlywiki\"},\"$:/config/sobjornstad/GrokTiddlyWiki/ExerciseBrowserState\":{\"title\":\"$:/config/sobjornstad/GrokTiddlyWiki/ExerciseBrowserState\",\"complete\":\".*\",\"created\":\"20210408142624562\",\"modified\":\"20241017013715164\",\"type\":\"text/vnd.tiddlywiki\"},\"$:/config/sobjornstad/GrokTiddlyWiki/TakeawayBrowserState\":{\"title\":\"$:/config/sobjornstad/GrokTiddlyWiki/TakeawayBrowserState\",\"answer\":\"no\",\"created\":\"20210408142451078\",\"invertsort\":\"\",\"modified\":\"20241017013659694\",\"seen\":\"^$|initial\",\"sort\":\"question\",\"type\":\"text/vnd.tiddlywiki\",\"viewer\":\"table\"},\"$:/config/sobjornstad/GrokTiddlyWiki/TiddlyHostSiteName\":{\"title\":\"$:/config/sobjornstad/GrokTiddlyWiki/TiddlyHostSiteName\",\"created\":\"20240829122807522\",\"modified\":\"20241009130307852\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"grok-tiddlywiki-official\"},\"$:/config/sobjornstad/GrokTiddlyWiki/Upgrades/deletes\":{\"title\":\"$:/config/sobjornstad/GrokTiddlyWiki/Upgrades/deletes\",\"created\":\"20210820151851893\",\"modified\":\"20241019221201748\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Ta:20201229035809240 Ta:20201229035832053 Ta:20201229035903899 Ta:20210107232156811 Ta:20210107232231028 Sn:NestedVarsScope Ltc:VarsNesting Ta:20210206231220671 $:/plugins/sobjornstad/TiddlyRemember/stylesheets/remember Ta:20201231202738960 [[Common Misunderstandings]] [[Constant strings cannot be combined with transclusions.png]] [[Constant strings cannot be combined with transclusions]] [[Global Macros]] [[Macros are not functions]] [[Summary of Macro and Transclusion Syntax]] [[Templates vs. Macros]] [[Text Substitution]] [[The Finer Points of Macros]] [[Transclusions]] [[Using Variables in Macros]] [[Variables, Macros, and Transclusions]] [[Ex:EmptyMacroCall]] [[Ex:LiteralMatters]] [[Ex:MacroAdjacency]] [[Ex:MacroAdjacency/answer]] [[Ex:MacroCallAsParameter]] [[Ex:MacroCallAsParameter/answer]] [[Ex:MacroPosition]] [[Ex:MacroPosition/answer]] [[Ex:MailMerge/answer]] [[Ex:MakeGlobalMacros]] [[Ex:MeetingOrderingByMacro]] [[Ex:QuotedMacroCall]] [[Ex:QuotedMacroCall/answer]] [[Ex:ReadingDefaultMacros]] [[Ex:ReadingDefaultMacros/answer]] [[Ex:SetVarsReplacement]] [[Ex:SubstitutionBackporting]] [[Ex:SubstitutionBackporting/answer]] [[Ex:TranscludedMacroScope]] [[Ex:TranscludedMacroScope/answer]] [[Ex:UnclosedMacroCall]] [[Ex:UnclosedMacroCall/answer]] [[Ex:WikipediaLinkWithoutMacro]] [[Ex:WikipediaLinkWithoutMacro/answer]] [[Ltc:VarsNesting]] [[Sn:DefaultMacroParameterValues]] [[Sn:GoodImageTransclusionMacro]] [[Sn:GoodImageTransclusionMacroWikitext]] [[Sn:MacroCallTransclusion]] [[Sn:MacroFunctionCallBad]] [[Sn:MacroFunctionCallDirect]] [[Sn:MacroFunctionCallOk]] [[Sn:MacroFunctionCallWikify]] [[Sn:MacroInTemplate]] [[Sn:MacroParameterNames]] [[Sn:MultipleParameterMacro]] [[Sn:QuoteWithinQuotesMacro]] [[Sn:QuotedMacroExpansion]] [[Sn:SimpleMacrocallWidget]] [[Sn:SingleLineMacro]] [[Sn:TextBeforeMacro]] [[Sn:TicketLinkMacro]] [[Sn:TranscludeWidget]] [[Sn:TranscludedMacrocallWidget]] [[Sn:TripleDoublesMacro]] [[Ta:20200822212437920]] [[Ta:20201231005510236]] [[Ta:20201231202738960]] [[Ta:20210101175137457]] [[Ta:20210107015159769]] [[Ta:20210107015331021]] [[Ta:20210130004746710]] [[Ta:20210130004804392]] [[Ta:20210130004950978]] [[Ta:20210131205851625]] [[Ta:20210206230505613]] [[Ta:20210206230535658]] [[Ta:20210206231054909]] [[Ta:20210207032442467]] [[Ta:20210207032652177]] [[Ta:20210207032737605]] [[Ta:20210207032823367]] [[Ta:20210207032905690]] [[Ta:20210207032937700]] [[Ta:20210207033639282]]\"},\"$:/config/sobjornstad/GrokTiddlyWiki/Upgrades/flag-modified-as-upgrade-before\":{\"title\":\"$:/config/sobjornstad/GrokTiddlyWiki/Upgrades/flag-modified-as-upgrade-before\",\"created\":\"20241019224801479\",\"modified\":\"20241019225007991\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"20241020120000000\"},\"$:/favicon.ico\":{\"title\":\"$:/favicon.ico\",\"text\":\"iVBORw0KGgoAAAANSUhEUgAAAIAAAACACAYAAADDPmHLAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAAGXRFWHRTb2Z0d2FyZQB3d3cuaW5rc2NhcGUub3Jnm+48GgAADiVJREFUeNrtnWmQVNUVx3+ne2ZAhBkEd0uJEh2VgIq4oSaMzG5AlghBS8BIVFyrXDHEBRcsyxhc0QqiEU1CDQTQIEz3gEhUQtyiiAsorrg7yqICw3SffOhmc6bffa+7X3fP9P1XzZe5p++7757/u8u555wrqopF/iJgu8ASwMISwMISwMISwMISwMISwMISwMISwMISwMISwMISwMISwMISwMISwMISwMISwMISwMISwKK9oKDNtHSEBPmWngQ5Ejg8/nco0BnoCuwLFAGgbEX4AvgO+B5hNfAOyioivEU31lCnEat+kJx2Cq2QQwhQjlCOUg7skaaavweWIyxCWUSYV8lT79jcI0Ct9CTCWGA0cFBGnql8RIAZBHiMBbrGEiAbw/s6RiH8HjgVkCy1RIHnUKbRlX/kwzSRfQKMkCLWEUIYkGN9s4QSqqnTppzVXpUcDpwGHAv0AQ6Or+ueIcIEFunq3CdApVyPcHOOdvEfCeltOdOaSRJgGacgjEAZAhzgIN2IchJhfTe3CVAlb8dX9LkH5SPC+rOst6NcuhPgPITxgJf2zCakZ+b6NvDg3J0g2SvLit+HAq4hyIVAp2RqyH07gPAWyjEupSPA/4AVKKuAdxCeNNQ/hCilCKUovRGO8fDeK7PSJ4OlE01MIMiVaFKKd43sE0CZDMxykPgEmIewmAjP0qDrfzKFONdfr0/+xLZQQpABKAOBIcCBDjuC27MwJQ5CuQ+hRxpqW9Q2toHVci7KXeww9GwG5qE8ysks4kaNOnSY8wuEVBwXVS9QToCxKEOBjvGSjcBVhPQvGbR/FBPhTuD8NNY6kJA+k/sE2NEBJ6AIBSxngW5w+cUkT4DWnx9lN17kSd2YsXevkGMIMMfjAs+EFYT0qLYxAqQ2ZKaHANlr/9nANGC3NNd8HiF9JPNrgDLpTAcOQ/mR/qx2HL7zHZVyOcIU0m/5/J4m6twIpu84WESolD9QxBcorwBvs4yVVMkJVtOt9tV9CHd7VP4mhD8DHxp2PjNZot9nlgCV3IBwG7D7Tv89AghTJQdbre/SV/cgXOLhFxFgKkJPhPvAsEMQHnFbcXoIUCmDgRsSlBYjXGm1vn3Ovx241MMv3iTKKYT0Yur1c6IMdRw1lI+oZ3nmCFAjpQgzHOtyb+hp73P+OGCCawuJcgcl9KVBl+/0dQ8z/G62F9+G1BaBI6SIKHVAiUFyXd4rv0YGIEx1Kb0RZQxhnbvLf0+XfVH6G4b/WV6alRoB1jERoY8Lybq8Vn6t7EWUvwOFLqQ/JEotDfp2i5KtnIE4jtofE+bFzBCgUo5GuM684iXESTye4/PygcAUoDL+n8UEmMBCXZWeFT9/BfZzIf0eUQbSoB8nmLBrUcdJY4FX17bk1gCTJIDwsAtGrwHOymlbQEz5rwHDgS7xvyFE+U+8LMX6GQvUupBcRTMDEiq/TApQo9NM2GvzkiPAMkYR80Jxwg9EGUq9fpvjA/QUoFsr/98D4a4UybU3yp9cSH4F1LBYP00oUcTxQLFDHc0oz/hPgBFSBC48eJRradA32sSuPPE7VKVY9+QE5NoZm4GhhPQDg1yZYapd3uKk1BcCbOAi4BCD1FJO5sE2skTr4lBWnHStFXIEMNbFGukiQrrMxQd1kqE8lEwzvREgNg9dYZDagjAu788AAtwCBA1ST1Kvj7paSAonGoj0gv8EKGI4iR0otjXkAer1vTw3+BwKDDX00zdEuMBVfdUcBnR3kIgS4BX/CQCXGS0DzUzOe6NPgMuNfatcyyL90lV9alxwr3LtP5G0HaBCehMwWKHgHhZpo4t6xgED2eEA8WE8TOthQrqyTSu/SnYHxhik3qaExzzUanLseCnZ5hZ4YPVIg0QTBTyUsLRWOhBhCgEuaOXr6IXSC7iEanmIYq7I6YAM56H9DJTOhi96oseoo6MM9b2Y/GDlHsMN5TN5Wr9wUP5CYLzhmUGUi1nPwvh2s+0hylnG4bqBeZ7qVHobSPeyvwSokT6YgjdilsFEJoq7jfvYXXEa61I0wmRvBPilofxRT+baM6QLsL+jTCGr/SWAUmOQ+IyTEmxDKqQ3koSnqzCeaunVBimw1aGsGZjhqbYmY+DMd8zX7/wmwCkGidkJ9/2xBV8yJucgynltkAD1DmX/ol4/9zilmIxu76e2YXFjhMBghYL5DuQpT6F9FW2QABOI2fZ/ii9RrvVcmxoIIH4ToIYjDEaICB0dXJAkpSQPPdqc+kP6CRFORZlDLMCkEXiCIP1MkboJNHSAYYRIiQDmbWDE6PDxmiGIIpXAg7YZtBCLyx+elrqUvbM7AkBPQwNfMpR/kkL7PsZiT0P/rvV5DcDPDRLvGp7QkMKWKpz36hf2MRDgW38JoIYRIMAaw+8fJubX7hURAkzPewKoITNaAd/5SwAMSRIihjkopCsRBxNxYjzAAn3LzgDbI5YTLQJ9J0BnQw1ml+9irkBY7GUZRSNXWd27IECQzdklQCHmGLQ6baKYWpT7DdNBBLiXRmp5Wbda3QPQwbF0Eykdmrk5DexkKP3B1ZNip3uXUi0PxS18Fex6HBwmwHQ77LeA86HYAP8J4OzatZ5C8NCIen0TjG5lFm7xZmqh5W6mgE2Opc10tVrwFc4f11qKskuAQksAn7HFsXR3/wmwwTBBWAL4i80GDXbwmwAmU2N3q6OsEmAPfwlgsuULvayOfEWjobybvwQQPjJI9LU68hVfGz5Q3wlgctO22T/8hBoJcIC/doAArxmOcg6hQkqSCUzcDj/j87OBCjmCAJMh7iCqPIswkZC+k8Qn+rUhJ8Ah/o4AC3kfWO84RgQ8efy2pnz/4vMzjRopJcBzxPIQdwO6xfP6PE+5HJbECLDWoEGfCaCqKM8bpFLxfvEvPj8biHBzgp1R93jAqDeYPH58HwFiUqas04OolWT3o37G52cWZbIn4hAUKgyjUvb3SABT3oCe/hMAo1dPCdGkvX/9ic/PBgoZjnPanAICnOPRCmDy+evKr2UPfwkQO8AxhXyPId8hxvhJUM6Nu9q7Qyzl62eOMlso9XsEAJhpeLFh8bj4/ESt9AR+5UKylGpD7oCWeN2xNEi/TBDgb4byIMLVeUuACBe67s8okykT95HZygpD+XH+EyC2hzXlshnteZHTHjBYOiEu8gHtPAoUMdqDllYYJI7LxAgAwj0GiQ4IN+YdAZo4HzX477fsyzsol31cyr5iJFStFPtPgC3MAWOgxzgq5eQ8mvs7oEk4sCp7EmSau0U4qxG+cdRjJLl1gDcCLNFmlDuMdQrTU7ALtC00czEkbY8fRLWcayaLKlH+ayDUyf4TILbrnAZG40QpzVyTB1//XgjXp1SHMpUq6e9CcplBk5WZIUCdNiHc5GLeup4aGdDOV/63gdEjyhTg2hGYa7xVJcgSw1NOpEJK/CcAQIjHwZiYsJAo/4zvj9sfqqUaGGeQ+gplpAsS7A0sZKAknko28xLOh3IFCKdlhgCxHDcX4pwOBaAbEebEU6e1H5RLd5TpmC98mkRYZwH3u9oaFrCU06VHwvUXPGsYdasyQ4CYXWAlwp0uJPsAdZRJx3ah/DIpIMhMTImbYBWN8VX+Rq5FcRPw0pOtLKVWjkwwzC80rUo8mZlJ9c6gLdwIri4oqqWIesqkc5snQCFTMN/KrcBF28PblukmgowiljHEtHbqQYTl1EjLu4GizMM5UOdAyjkhcwRYos0I57h6MfgVRcxv0ySolhtcXvf2SIs7exfqCoQRxDKFmdCFKLOpktt3yZcYSy37gmGxeGbmCADEE0OPxhRCtoMESxLOc7mufGWSC8lPKUxwJlKv9fG1kxsIMIH1vEqF7JwpfK5h7PmNl2kgPfcGhnQe6no/3I9mXm91iMtF9JNCKuVBl8pvRhjlmLcvpNPRhHcstoZeBHiBKplKtexHgLmGXcVBVBqzuqWZAAAN3A6uM3qUbB/ich3dCSEuv1plIvX6nFEurLegXIn7JFgBYDzKGiJcgunqWPid29dL7+3hkyTAMmYAZ6etTtPt36neHm76vXvMJMxZntLAVskY4GHSf4n3RprY3839wYG0PvZGjdLEWGA2+QRhMSWM8XplGyF9jNjFEum+WLMLRS68k9JOgG07gxJ+iyaVF6gt4hUCDEs6vX1I5wN9jen2vOOy7BAAoE4jhHV83DdA27Hy/02Ugcne1rETCT5gK/3jJ63p6q8+VMrA7BBgx7bnZmAw7fHuYOEpNlKdUkTUT0fOsE5AKQPeSFMbL8wuAbYNccrxxKJ/2gMUuJVihrFMN6W99rAupYm+wOVp+HDKs0+A2Eu9SyPHI9yCO0vYNmTi6jkvz/gWYRAhvd7jlS/eR4OQ3ksThwKTDN5AKSGQse/mZd1Kvd6AcALuzg9SzTPsFmtdtqUO4RfU69MZ67Ml+g0hvYkiegAXIR5vBlFzqt3MEWDHuuBVwvRHOcfY+ZKRW8dNz3gPqCWsIz1f9pAuPKU/EtIHqddSovRFmAysMvTdNwSYaFwmpNUQ5BVl0pFCzgOuRlrcDdBAkEEs0C0pGXJMhqAy6UgRT9Hycoo1KLeylSfiZ/G5hxopRTkepR9wLEIpigJLEa5zc4FndgmwDf2kkO4MBwYABSghujLH1TxbJRtIHF+4npCak1jFLJjD4iRoRljKFubkrOLTuZnJCQKkgiqZSywWv/V5O6wjscihNUD632ACtJoxu5ECrrQqbu8EiKWROQphFrGchhtQ6ghyNAt0rVVxe58CLPJ8BLCwBLCwBLCwBLCwBLCwBLCwBLCwBLCwBLCwBLCwBLCwBLCwBLCwBLCwBLCwBLCwBLCwBLCwBLCI4//hfUPfOMbv6AAAAABJRU5ErkJggg==\",\"type\":\"image/png\"},\"$:/plugins/sobjornstad/GrokTiddlyWiki/Changes/1.0.1\":{\"title\":\"$:/plugins/sobjornstad/GrokTiddlyWiki/Changes/1.0.1\",\"commit\":\"4fc99def0b99c60bbf7ac682968ce83756209c3b\",\"created\":\"20210818142754702\",\"date\":\"202105211200\",\"modified\":\"20210818142920230\",\"tag\":\"v1.0.1\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"version\":\"1.0.1\",\"text\":\"* The //Takeaways// tab of the sidebar search box was mistakenly finding only collected takeaways; this has been fixed.\\n* Corrected the filter on several live examples in [[Wr:Transclusions]] so that they show output as intended.\\n* Evened out the spacing at the bottom of the in-text takeaway reviewer once all cards have been collected.\\n* Fixed several typos and confusingly worded sentences.\\n\"},\"$:/plugins/sobjornstad/GrokTiddlyWiki/Changes/1.0.2\":{\"title\":\"$:/plugins/sobjornstad/GrokTiddlyWiki/Changes/1.0.2\",\"commit\":\"154024773664662ac0bb4cbdbdc932a7dd3371e5\",\"created\":\"20210818142336453\",\"date\":\"202106061200\",\"modified\":\"20210818142913718\",\"tag\":\"v1.0.2\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"version\":\"1.0.2\",\"text\":\"* Deleting any bookmark was causing all bookmarks to be deleted. This has been fixed and you can now safely delete bookmarks.\\n* Fixed instructions for embedding a font in TW (if you're poking around in the system tiddlers wondering how I did it, you can now find the correct forum thread for reference).\\n* Expanded the prompt for [[Ex:AlphabeticallyLastDescription]] to incorporate user feedback.\\n* Fixed several more incorrect filters on live examples in [[Sn:RubberDucking]].\\n* Fixed several more typos and confusingly worded sentences.\"},\"$:/plugins/sobjornstad/GrokTiddlyWiki/Changes/1.1.0\":{\"title\":\"$:/plugins/sobjornstad/GrokTiddlyWiki/Changes/1.1.0\",\"commit\":\"782898cbc64a523a4f70b696fd1371645cc295a8\",\"created\":\"20210820154424759\",\"date\":\"202109181200\",\"modified\":\"20210918142517836\",\"tag\":\"v1.1.0\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"version\":\"1.1.0\",\"text\":\"I have bumped the minor version number because the interface has improved significantly in several places. Changes to the content are mostly incremental. I've made updates for TiddlyWiki 5.2.0, but they aren't included in this edition since 5.2.0 is still in prerelease at this time.\\n\\n!!! Text\\n\\n* Added a back-matter section on Common Misunderstandings and started it with several items. I'll add more as I encounter them in the forums and elsewhere.\\n* Broke out the instructions for installing TiddlyWiki by operating system, and give sample instructions for a Linux install.\\n* Added an appendix on ways to support //Grok TiddlyWiki// and TiddlyWiki itself.\\n* Added an explanation of why `all[tiddlers+shadows]` appears in so many live examples.\\n* Improved accuracy and completeness of the description of what makes a title CamelCase.\\n* Applied various minor wording and formatting tweaks; thanks to everyone who has pointed out typographical errors and made suggestions!\\n\\n\\n!!! Interface\\n\\n* If you study takeaways in-text on the web, you'll now receive a warning when you finish the section that you should create your own copy of GTW if you want to preserve your progress.\\n* Improved the interface for adding your own takeaways. The interface for Q&A and cloze is now clearly separated, usage guidance is attached to each, and it's no longer possible to accidentally create a blank takeaway by pressing the button without typing anything.\\n* Added contextual help throughout the interface, where a small //Tip// box appears the first time you use a new feature.\\n* Improved the Changes appendix so it shows the date and commit hash of each release.\\n* Changed the arrow symbols used to enter the first/last section of a chapter in the navigation bar, as the symbols we were using weren't in the embedded font and could be missing on some devices.\\n\\n\\n!!! Miscellaneous\\n\\n* Added an upgrader tool that guides you through the process of deleting any takeaways or other tiddlers that have become out of date in the new version.\\n* Created a [[static version|https://groktiddlywiki.com/static/]] of the book for search engines and people on low-bandwidth connections; most of the interactive features are missing, but it's enough for a quick check of a page. A large banner explains this and provides a permalink to the tiddler within the wiki version. The `<noscript>` element in the wiki version also points to the static version.\"},\"$:/plugins/sobjornstad/GrokTiddlyWiki/Changes/1.2.0\":{\"title\":\"$:/plugins/sobjornstad/GrokTiddlyWiki/Changes/1.2.0\",\"commit\":\"f5652b203c27e6a8ff7d29a3718a1eabcd7d715f\",\"created\":\"20211005133750459\",\"date\":\"202110051200\",\"modified\":\"20241017013222485\",\"tag\":\"v1.2.0\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"version\":\"1.2.0\",\"text\":\"This version of //Grok TiddlyWiki// contains content updates to align the text with the following improvements in TiddlyWiki 5.2.0:\\n\\n* Field names [[no longer have character restrictions|Contact Tiddlers]].\\n* Images can now be [[directly inserted|Images and Attachments]] into tiddlers.\\n* HTML [[comments|Comments]] can now [[appear before and between pragmas|Ex:ProcedurePosition/answer]].\\n* The `$edit-text` widget can now [[edit the tiddler it's contained in|Ex:EditCurrentTiddler/answer]].\\n* `:map` and `:sort` [[filter run prefixes|Multi-Run Filters]] were added.\\n* Macro calls with parameters can now be [[transcluded into a filter|Filters and Transclusions]].\"},\"$:/plugins/sobjornstad/GrokTiddlyWiki/Changes/1.2.1\":{\"title\":\"$:/plugins/sobjornstad/GrokTiddlyWiki/Changes/1.2.1\",\"commit\":\"ed11ebdec45668fe3750eb011aa777369ef2a67a\",\"created\":\"20211129232645958\",\"date\":\"202111291200\",\"modified\":\"20211129232842857\",\"tag\":\"v1.2.1\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"version\":\"1.2.1\",\"text\":\"* Fixed the Takeaway Export List showing an ID of “Preview” for all takeaways under certain circumstances, resulting in broken syncing to Anki.\\n* Fixed several typos and minor wording mistakes.\\n\"},\"$:/plugins/sobjornstad/GrokTiddlyWiki/Changes/1.2.2\":{\"title\":\"$:/plugins/sobjornstad/GrokTiddlyWiki/Changes/1.2.2\",\"commit\":\"ebce4ae167ce5563d2bc3f45ac578842f83ecad1\",\"created\":\"20220103163256891\",\"date\":\"202201031200\",\"modified\":\"20220103171824110\",\"tag\":\"v1.2.2\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"version\":\"1.2.2\",\"text\":\"* The TiddlyRemember plugin has been updated to version 1.3.2.\\n* TiddlyWiki has been updated to version 5.2.1.\\n* Scheduling information maintained by TakeAway will now be exported to Anki when you [[start studying with Anki|TakeAway Help/Studying with Anki]].\\n* The `$let` widget is now used instead of the `$vars` widget, now that it's available in 5.2.1 and pretty much strictly superior.\\n* Fixed several typos, wording mistakes, and other minor errors.\\n\"},\"$:/plugins/sobjornstad/GrokTiddlyWiki/Changes/2.0.0\":{\"title\":\"$:/plugins/sobjornstad/GrokTiddlyWiki/Changes/2.0.0\",\"commit\":\"564bd1c8e6e6d25028cb46273643823bea830e3c\",\"created\":\"20241008030506682\",\"date\":\"20241019120000000\",\"modified\":\"20241019235515016\",\"tag\":\"v2.0.0\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"version\":\"2.0.0\",\"text\":\"!!! Changes in approach\\n\\n* The largest change in TiddlyWiki recently has been the replacement of macros with procedures for general use. Version 2.0 moves [[Macros]], along with several more advanced topics in wikitext rendering, to a new chapter 6, and changes chapter 4 to focus on variables, procedures, and field transclusions of all kinds. Exercises, takeaways, and other content have been updated throughout the book to align with this new approach.\\n* We now treat the idea of “transclusion” as fully including procedures, variables, functions, etc., as first-class elements, rather than tending to call only field transclusions transclusions and using different names for the other objects. Given how much more unified the two things have become (field transclusions can be parameterized, and you now use the `$transclude` widget for all of them), this seems like a better way to think about it.\\n* The “Common Misunderstandings” chapter has been removed, since the items in it are all no longer easily misunderstood with the advent of new features.\\n\\n!!! New sections\\n\\nEach of these except for “Much More Than You Wanted to Know About Scopes” is aligned with a new feature since the last release of TiddlyWiki covered by a //Grok TiddlyWiki// edition:\\n\\n* [[Using Variables as Attributes]]\\n* [[Procedures]]\\n* [[Parameterizing Field Transclusions]]\\n* [[Conditional Expressions]]\\n* [[Functions]]\\n* [[Much More Than You Wanted to Know About Scopes]]\\n* [[Custom Widgets]]\\n* [[Overriding Built-In Widgets]]\\n\\nThe [[Macros]] section is also new – while there was a section called “Macros” before, the “Procedures” section is much more closely related to the old “Macros” section than the new “Macros” section is. The new “Macros” section is rewritten from scratch, assuming that you already grok procedures and explaining the differences between macros and procedures (mostly text substitution).\\n\\n\\n!!! General\\n\\n* All of the internal code of //Grok TiddlyWiki// has been refactored to use the new features to the greatest extent possible, so if you poke around there you will be shown modern good practices.\\n* The whole book has gotten a polish pass with minor revisions for improved clarity.\\n* We now recommend starting with TiddlyHost as a saving and hosting solution, rather than TiddlyDesktop.\\n* I've read through the entire book and corrected a number of things that had gotten slightly out of date over the years or could be explained better.\\n\\n\\n!!! Fixes\\n\\n* The “mentions of” display in the related tiddlers drop-down at the bottom of many sections was broken and displaying the same two tiddlers.\\n* Normalize indentation in code examples to two spaces per level (no tabs) across the wiki.\\n* Address a wide variety of miscellaneous items of feedback and errors spotted by readers over the past year or so.\\n\\n\\n!!! Upgrading\\n\\nIf you'd like, you can [[upgrade|Upgrade]] a current edition of //Grok TiddlyWiki// to 2.0 just like you can with any other edition. You should keep in mind, however, that when you have worked through or edited exercises and takeaways in older versions, you've made copies of their shadow tiddlers, so the upgraded version won't show any updates to those exercises and takeaways. This is a minor to nonexistent issue in most releases of GTW, but in a major release like this one where //many// of these have changed considerably, it may be more confusing or problematic than normal.\\n\\nTherefore, we recommend that if you don't have significant exercise or takeaway review history you'd like to keep, you start out working on //Grok TiddlyWiki// 2.0 by making a fresh copy. If you do have such history, upgrading may make more sense for you -- just be on the lookout as you proceed and delete any exercises or takeaways that look like they aren't up to date to grab the latest versions.\\n\\n(If there are any //sections or chapters// you've modified directly, you'll be asked to merge the changes and delete them during the upgrade process, so all of your actual text will be fully up to date after completing an upgrade. This is impractical for exercises or takeaways given that there are so many of them and it's normal to modify them.)\"},\"$:/plugins/sobjornstad/GrokTiddlyWiki/copyright\":{\"title\":\"$:/plugins/sobjornstad/GrokTiddlyWiki/copyright\",\"created\":\"20210131153434996\",\"modified\":\"20210131153336667\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"{{Copyright}}\\n\"},\"$:/plugins/sobjornstad/GrokTiddlyWiki/readme\":{\"title\":\"$:/plugins/sobjornstad/GrokTiddlyWiki/readme\",\"created\":\"20210131153434996\",\"modified\":\"20210131153336667\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"This plugin contains most of the content of //Grok TiddlyWiki//. This mechanism allows you to edit the wiki freely, whether by deliberately making changes to the text of the book or system tiddlers or by using the embedded features (marking exercises complete, reviewing takeaways, etc.), and retain the ability to update the book to a newer version. Because of the [[shadowing|Shadow Tiddlers]] mechanism of TiddlyWiki, you can update the book by dragging the plugin into an old wiki from a newer version of the book.\\n\\nThe latest plugin version may be found at https://groktiddlywiki.com/#Upgrade.\\n\"},\"$:/sib/Buttons/excise-exercise\":{\"title\":\"$:/sib/Buttons/excise-exercise\",\"caption\":\"Excise exercise\",\"condition\":\"[<targetTiddler>type[]] [<targetTiddler>type[text/vnd.tiddlywiki]] +[first[]]\",\"created\":\"20210522034413324\",\"creator\":\"soren\",\"description\":\"Create an exercise from the selected text.\",\"icon\":\"$:/core/images/paint\",\"modified\":\"20240901220414882\",\"modifier\":\"soren\",\"shortcuts\":\"((excise-exercise))\",\"tags\":\"$:/tags/EditorToolbar\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$action-sendmessage\\n  $message=\\\"tm-edit-text-operation\\\"\\n  $param=\\\"exciseExercise\\\"\\n/>\"},\"$:/sib/DebugRenderTiddler\":{\"title\":\"$:/sib/DebugRenderTiddler\",\"created\":\"20210103000849963\",\"modified\":\"20240727201939451\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<% if [{$:/temp/FeedbackCollector}get[debug]match[yes]] %>\\n<$list filter=\\\"[all[current]fields[]sort[title]]\\\" variable=\\\"fieldName\\\">\\n  <<fieldName>>: {{{ [all[current]get<fieldName>] }}}<br>\\n</$list>\\n<% endif %>\"},\"$:/sib/DonationLink\":{\"title\":\"$:/sib/DonationLink\",\"created\":\"20210502224659290\",\"modified\":\"20210503015514478\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"https://groktiddlywiki.com/donate\"},\"$:/sib/Exercise/AnswerLink\":{\"title\":\"$:/sib/Exercise/AnswerLink\",\"created\":\"20200718200300480\",\"modified\":\"20240727204801180\",\"tags\":\"$:/tags/EditTemplate $:/tags/ViewTemplate\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<% if [all[current]tag[Exercise]] %>\\n\\n  Go to answer: {{{ [all[current]has[draft.of]get[draft.of]addsuffix[/answer]] ~[all[current]addsuffix[/answer]] }}}\\n  {{||$:/sib/Exercise/CompletionCheckbox}}\\n<div>\\n<<sendFeedbackLink icon:\\\"{{$:/core/images/mail}}\\\" tooltip:\\\"Suggest an improvement to this section.\\\">>\\n</div>\\n\\n<% endif %>\\n\\n<% if [all[current]tag[Answer]] %>\\n  Go to question: {{{ [all[current]has[draft.of]get[draft.of]removesuffix[/answer]] ~[all[current]removesuffix[/answer]] }}}\\n<% endif %>\"},\"$:/sib/Exercise/CompletionCheckbox\":{\"title\":\"$:/sib/Exercise/CompletionCheckbox\",\"complete\":\"\",\"created\":\"20210116164747131\",\"modified\":\"20240727204812812\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<div class=\\\"twx-completion\\\">\\n  <$checkbox field=\\\"complete\\\" checked=\\\"yes\\\" unchecked=\\\"\\\" default=\\\"\\\" tooltip=\\\"Mark this exercise as complete in the exercise list.\\\">&nbsp;Complete</$checkbox>\\n</div>\"},\"$:/sib/Exercise/Stylesheet\":{\"title\":\"$:/sib/Exercise/Stylesheet\",\"created\":\"20210116164850056\",\"modified\":\"20210321002250427\",\"tags\":\"$:/tags/Stylesheet\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"div.twx-completion {\\n  float: right;\\n}\\n\\ntable.gtw-exercise-browser {\\n    font-size: 12px;\\n    table-layout: fixed;\\n    width: 100%;\\n}\\n\\ntable.gtw-exercise-browser td {\\n  vertical-align: top;\\n}\"},\"$:/sib/Fonts/Inconsolata\":{\"title\":\"$:/sib/Fonts/Inconsolata\",\"text\":\"/*! Generated by Font Squirrel (https://www.fontsquirrel.com) on March 20, 2021.\\nThese fonts are licensed under the Open Font License.\\n\\nYou can use them freely in your products & projects - print or digital, commercial or otherwise. However, you can't sell the fonts on their own.\\n\\nThis isn't legal advice, please consider consulting a lawyer and see the full license for all details.\\n*/\\n\\n\\n@font-face {\\n    font-family: 'Inconsolata';\\n    src: url(data:application/font-woff2;charset=utf-8;base64,) format('woff2'),\\n         url(data:application/font-woff;charset=utf-8;base64,) format('woff');\\n    font-weight: normal;\\n    font-style: normal;\\n\\n}\",\"type\":\"text/plain\",\"created\":\"20210320223948686\",\"modified\":\"20210320225403527\",\"tags\":\"$:/tags/Stylesheet\"},\"$:/sib/Fonts/SourceSansPro\":{\"title\":\"$:/sib/Fonts/SourceSansPro\",\"text\":\"/*! Generated by Font Squirrel (https://www.fontsquirrel.com) on March 20, 2021.\\n\\n+------------+--------------------------+-------------+------------+\\n|to get:     | font-family              | font-weight | font-style |\\n+------------+--------------------------+-------------+------------+\\n|regular     | Source Sans Pro          | normal      | normal     |\\n|italic      | Source Sans Pro          | normal      | italic     |\\n|bold        | Source Sans Pro          | bold        | normal     |\\n|bold italic | Source Sans Pro          | bold        | italic     |\\n|semibold    | Source Sans Pro Semibold | normal      | normal     |\\n+------------+--------------------------+-------------+------------+\\n\\nTW font embed instructions: https://groups.google.com/g/tiddlywiki/c/utsLmgHZAhM\\n\\nCopyright 2010, 2012 Adobe Systems Incorporated (http://www.adobe.com/), with Reserved Font Name 'Source'. All Rights Reserved. Source is a trademark of Adobe Systems Incorporated in the United States and/or other countries.\\n\\nThis Font Software is licensed under the SIL Open Font License, Version 1.1.\\nThis license is copied below, and is also available with a FAQ at: http://scripts.sil.org/OFL\\n\\n-----------------------------------------------------------\\nSIL OPEN FONT LICENSE Version 1.1 - 26 February 2007\\n-----------------------------------------------------------\\n\\nPREAMBLE\\nThe goals of the Open Font License (OFL) are to stimulate worldwide development of collaborative font projects, to support the font creation efforts of academic and linguistic communities, and to provide a free and open framework in which fonts may be shared and improved in partnership with others.\\n\\nThe OFL allows the licensed fonts to be used, studied, modified and redistributed freely as long as they are not sold by themselves. The fonts, including any derivative works, can be bundled, embedded, redistributed and/or sold with any software provided that any reserved names are not used by derivative works. The fonts and derivatives, however, cannot be released under any other type of license. The requirement for fonts to remain under this license does not apply to any document created using the fonts or their derivatives.\\n\\nDEFINITIONS\\n\\\"Font Software\\\" refers to the set of files released by the Copyright Holder(s) under this license and clearly marked as such. This may include source files, build scripts and documentation.\\n\\n\\\"Reserved Font Name\\\" refers to any names specified as such after the copyright statement(s).\\n\\n\\\"Original Version\\\" refers to the collection of Font Software components as distributed by the Copyright Holder(s).\\n\\n\\\"Modified Version\\\" refers to any derivative made by adding to, deleting, or substituting -- in part or in whole -- any of the components of the Original Version, by changing formats or by porting the Font Software to a new environment.\\n\\n\\\"Author\\\" refers to any designer, engineer, programmer, technical writer or other person who contributed to the Font Software.\\n\\nPERMISSION & CONDITIONS\\nPermission is hereby granted, free of charge, to any person obtaining a copy of the Font Software, to use, study, copy, merge, embed, modify, redistribute, and sell modified and unmodified copies of the Font Software, subject to the following conditions:\\n\\n1) Neither the Font Software nor any of its individual components, in Original or Modified Versions, may be sold by itself.\\n\\n2) Original or Modified Versions of the Font Software may be bundled, redistributed and/or sold with any software, provided that each copy contains the above copyright notice and this license. These can be included either as stand-alone text files, human-readable headers or in the appropriate machine-readable metadata fields within text or binary files as long as those fields can be easily viewed by the user.\\n\\n3) No Modified Version of the Font Software may use the Reserved Font Name(s) unless explicit written permission is granted by the corresponding Copyright Holder. This restriction only applies to the primary font name as presented to the users.\\n\\n4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font Software shall not be used to promote, endorse or advertise any Modified Version, except to acknowledge the contribution(s) of the Copyright Holder(s) and the Author(s) or with their explicit written permission.\\n\\n5) The Font Software, modified or unmodified, in part or in whole, must be distributed entirely under this license, and must not be distributed under any other license. The requirement for fonts to remain under this license does not apply to any document created using the Font Software.\\n\\nTERMINATION\\nThis license becomes null and void if any of the above conditions are not met.\\n\\nDISCLAIMER\\nTHE FONT SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM OTHER DEALINGS IN THE FONT SOFTWARE.\\n*/\\n\\n\\n@font-face {\\n    font-family: 'Source Sans Pro';\\n    src: url(data:application/font-woff2;charset=utf-8;base64,) format('woff2'),\\n         url(data:application/font-woff;charset=utf-8;base64,) format('woff');\\n    font-weight: bold;\\n    font-style: normal;\\n\\n}\\n\\n\\n\\n\\n@font-face {\\n    font-family: 'Source Sans Pro';\\n    src: url(data:application/font-woff2;charset=utf-8;base64,) format('woff2'),\\n         url(data:application/font-woff;charset=utf-8;base64,) format('woff');\\n    font-weight: bold;\\n    font-style: italic;\\n\\n}\\n\\n\\n\\n\\n@font-face {\\n    font-family: 'Source Sans Pro';\\n    src: url(data:application/font-woff2;charset=utf-8;base64,) format('woff2'),\\n         url(data:application/font-woff;charset=utf-8;base64,) format('woff');\\n    font-weight: normal;\\n    font-style: normal;\\n\\n}\\n\\n\\n\\n\\n@font-face {\\n    font-family: 'Source Sans Pro Semibold';\\n    src: url(data:application/font-woff2;charset=utf-8;base64,) format('woff2'),\\n         url(data:application/font-woff;charset=utf-8;base64,) format('woff');\\n    font-weight: normal;\\n    font-style: normal;\\n\\n}\\n\\n\\n@font-face {\\n    font-family: 'Source Sans Pro';\\n    src: url(data:application/font-woff2;charset=utf-8;base64,) format('woff2'),\\n         url(data:application/font-woff;charset=utf-8;base64,) format('woff');\\n    font-weight: normal;\\n    font-style: italic;\\n\\n}\\n\",\"type\":\"text/plain\",\"created\":\"20210320220143398\",\"font-family\":\"source_sans_pro\",\"modified\":\"20210523182710809\",\"tags\":\"$:/tags/Stylesheet\"},\"$:/sib/GeneralMacros\":{\"title\":\"$:/sib/GeneralMacros\",\"created\":\"20210320143048952\",\"modified\":\"20241017021637675\",\"tags\":\"$:/tags/Macro\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\whitespace trim\\n\\n\\\\function gtw.is-not-static-edition() [<renderingStatic>!match[yes]]\\n\\n\\\\procedure textual-button(imageName)\\n  <span class=\\\"gtw-textual-button\\\">\\n    <$transclude $tiddler=`$:/core/images/$(imageName)$`/>\\n  </span>\\n\\\\end textual-button\\n\\n\\\\procedure tiddlyhost-clone-link(site-name, text)\\n  <a\\n    class=\\\"tc-tiddlylink-external\\\"\\n    href=`https://tiddlyhost.com/sites/new?clone=$(site-name)$`>\\n      <$text text=<<text>>/>\\n  </a>\\n\\\\end tiddlyhost-clone-link\\n\\n\\\\procedure gtw-tiddlyhost-clone-link(text)\\n  <$macrocall\\n    $name=\\\"tiddlyhost-clone-link\\\"\\n    site-name={{$:/config/sobjornstad/GrokTiddlyWiki/TiddlyHostSiteName}}\\n    text=<<text>>\\n  />\\n\\\\end gtw-tiddlyhost-clone-link\"},\"$:/sib/Navigator/AnchorFromStaticPage\":{\"title\":\"$:/sib/Navigator/AnchorFromStaticPage\",\"created\":\"20210819150338912\",\"modified\":\"20210819205654231\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<a href={{{ [all[current]encodeuri[]search-replace[/],[%2F]search-replace[:],[%3A]addprefix[https://groktiddlywiki.com/read/#]] }}}>the wiki version of this page</a>\"},\"$:/sib/Navigator/BookmarkMacros\":{\"title\":\"$:/sib/Navigator/BookmarkMacros\",\"created\":\"20210320202428418\",\"modified\":\"20240727205906037\",\"tags\":\"$:/tags/Macro\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\procedure bookmark-tiddler()\\n  <$action-listops \\n    $tiddler=\\\"$:/config/sobjornstad/GrokTiddlyWiki/Bookmarks\\\"\\n    $field=\\\"text\\\"\\n    $subfilter=\\\"[[]addsuffix<currentTiddler>]\\\"/>\\n\\\\end\\n\\n\\\\procedure unbookmark-tiddler()\\n  <$action-listops\\n    $tiddler=\\\"$:/config/sobjornstad/GrokTiddlyWiki/Bookmarks\\\"\\n    $field=\\\"text\\\"\\n    $filter=\\\"[enlist{$:/config/sobjornstad/GrokTiddlyWiki/Bookmarks}] -[all[current]]\\\"/>\\n\\\\end\"},\"$:/sib/Navigator/BookmarkRowTemplate\":{\"title\":\"$:/sib/Navigator/BookmarkRowTemplate\",\"created\":\"20210320200248115\",\"modified\":\"20240727210226435\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$button\\n  actions=<<unbookmark-tiddler>>\\n  class=\\\"tc-btn-invisible gtw-bookmark-row-template\\\"\\n>\\n  {{$:/core/images/delete-button}}\\n</$button>&nbsp;<$link/>\\n\\n<style>\\n.gtw-bookmark-row-template svg {\\n  vertical-align: bottom;\\n}\\n</style>\"},\"$:/sib/Navigator/BookmarksList\":{\"title\":\"$:/sib/Navigator/BookmarksList\",\"caption\":\"Bookmarks\",\"created\":\"20210320195840485\",\"list-after\":\"$:/core/ui/SideBar/Open\",\"modified\":\"20240727210143474\",\"tags\":\"$:/tags/SideBar\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<% if [{$:/config/sobjornstad/GrokTiddlyWiki/Bookmarks}is[blank]] %>\\n  <div style=\\\"max-width: 300px;\\\">\\n    You have no bookmarks at the moment. To bookmark a section, click the star icon <<textual-button \\\"star-filled\\\">> in the upper-right of that section's tiddler.\\n  </div>\\n<% else %>\\n  <<list-links-draggable\\n    \\\"$:/config/sobjornstad/GrokTiddlyWiki/Bookmarks\\\"\\n    field:\\\"text\\\"\\n    itemTemplate:\\\"$:/sib/Navigator/BookmarkRowTemplate\\\"\\n    class:\\\"gtw-bookmarks-list\\\"\\n  >>\\n<% endif %>\"},\"$:/sib/Navigator/ContentsSidebar\":{\"title\":\"$:/sib/Navigator/ContentsSidebar\",\"caption\":\"Contents\",\"created\":\"20210313135753386\",\"list-after\":\"$:/sib/Navigator/BookmarksList\",\"modified\":\"20240727212222310\",\"tags\":\"$:/tags/SideBar\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\function gtw.contents.sectionsMatchingFilter()\\n  [enlist{!!list}search:title,caption{$:/temp/OutlineFilter}]\\n\\\\end\\n\\n<!-- Some chapters (e.g., 'Supplemental Exercises') have no sections. We want to show these if we haven't started filtering (since we filter only section names and include only the chapters that have matching sections, they'll have to disappear at that point, and this seems mostly fine). -->\\n\\\\function gtw.contents.chaptersWithNoSectionsIfNoFilter()\\n  [{$:/temp/OutlineFilter}is[blank]] :then[list[Outline]!has[list]]\\n\\\\end\\n\\n<div class=\\\"gtw-sidebar-outline\\\">\\n  <div style=\\\"text-align: center;\\\">\\n    [[Go to full outline|Outline]]\\n  </div>\\n\\n  <table>\\n    <tr>\\n      <th>Filter by section name:</th>\\n      <td>\\n        <$edit-text tiddler=\\\"$:/temp/OutlineFilter\\\" tag=\\\"input\\\" default=\\\"\\\" type=\\\"text\\\"/>\\n      </td>\\n    </tr>\\n  </table>\\n\\n  <ul>\\n    <$list filter=\\\"[list[Outline]]\\\">\\n      <!-- for each chapter -->\\n      <% if [gtw.contents.chaptersWithNoSectionsIfNoFilter[]] [gtw.contents.sectionsMatchingFilter[]]  %>\\n        <li>\\n          <h3>\\n            <$link to={{!!title}}>\\n              <$view field=\\\"caption\\\">\\n                {{!!title}}\\n              </$view>\\n            </$link>\\n          </h3>\\n          <ul>\\n            <$list filter=\\\"[gtw.contents.sectionsMatchingFilter[]]\\\">\\n              <!-- for each section -->\\n              <li><$link to={{!!title}}/></li>\\n            </$list>\\n          </ul>\\n        </li>\\n          <br>\\n      <% endif %>\\n    </$list>\\n  </ul>\\n</div>\\n\\n<style>\\ndiv.gtw-sidebar-outline ul ul {\\n  margin-left: 0;\\n  padding-left: 0;\\n}\\n\\ndiv.gtw-sidebar-outline ul {\\n  margin-left: 0;\\n  padding-left: 0;\\n  list-style-type: none;\\n}\\n\\ndiv.gtw-sidebar-outline h3 {\\n  margin-top: 1ex;\\n  border-bottom: 0.05px solid <<color foreground>>;\\n  padding-bottom: 2px;\\n  margin-bottom: 10px;\\n  max-width: 300px;\\n}\\n\\ndiv.gtw-sidebar-outline svg {\\n  height: 16px;\\n}\\n\\ndiv.gtw-sidebar-outline table {\\n  width: 90%;\\n  max-width: 400px;\\n  margin-bottom: 0.3in;\\n}\\ndiv.gtw-sidebar-outline table input[type=\\\"text\\\"] {\\n  width: 100%;\\n}\\n</style>\"},\"$:/sib/Navigator/LinksBar\":{\"title\":\"$:/sib/Navigator/LinksBar\",\"created\":\"20210120005004574\",\"list-after\":\"$:/core/ui/SideBarSegments/site-subtitle\",\"modified\":\"20240727212258109\",\"tags\":\"$:/tags/SideBarSegment\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<div class=\\\"gtw-sidebar-links\\\">\\n[[home|Welcome to Grok TiddlyWiki]]&nbsp;·\\n[[outline|Outline]]&nbsp;·\\n[[exercises|Exercise Browser]]&nbsp;·\\n[[takeaways|Takeaway Browser]]&nbsp;·\\n<a href={{$:/sib/DonationLink}} class=\\\"tc-tiddlylink tc-tiddlylink-resolves\\\">donate</a>\\n</div>\\n\\n<style>\\n.gtw-sidebar-links a, .gtw-sidebar-links button {\\n  color: <<color sidebar-foreground>>;\\n  text-decoration: underline;\\n}\\n</style>\"},\"$:/sib/Navigator/NewBookmarkButton\":{\"title\":\"$:/sib/Navigator/NewBookmarkButton\",\"caption\":\"Toggle bookmark\",\"created\":\"20210320195437123\",\"description\":\"Add or remove the current tiddler to/from the //Bookmarks// sidebar tab\",\"list-after\":\"$:/core/ui/Buttons/more-tiddler-actions\",\"modified\":\"20240727213225589\",\"tags\":\"$:/tags/ViewToolbar\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\whitespace trim\\n\\n\\\\procedure common-button(actionWidget, iconClass, buttonAndTooltipText)\\n  <$button\\n    actions=<<actionWidget>>\\n    class=<<tv-config-toolbar-class>>\\n    selectedClass=\\\"tc-selected\\\"\\n    tooltip=<<buttonAndTooltipText>>\\n  >\\n    <% if [<tv-config-toolbar-icons>match[yes]] %>\\n      <span class=<<iconClass>>>{{$:/core/images/star-filled}}</span>\\n    <% endif %>\\n    <% if [<tv-config-toolbar-text>match[yes]] %>\\n      <span class=\\\"tc-btn-text\\\"><$text text=<<buttonAndTooltipText>>/></span>\\n    <% endif %>\\n  </$button>\\n\\\\end common-button\\n\\n\\\\procedure selected-state()\\n  <$macrocall\\n    $name=\\\"common-button\\\"\\n    actionWidget=<<unbookmark-tiddler>>\\n    iconClass=\\\"gtw-yellow-me\\\"\\n    buttonAndTooltipText=\\\"Remove bookmark\\\"\\n  />\\n\\\\end selected-state\\n\\n\\\\procedure unselected-state()\\n  <$macrocall\\n    $name=\\\"common-button\\\"\\n    actionWidget=<<bookmark-tiddler>>\\n    iconClass=\\\"\\\"\\n    buttonAndTooltipText=\\\"Bookmark tiddler\\\"\\n  />\\n\\\\end unselected-state\\n\\n<% if [[$:/config/sobjornstad/GrokTiddlyWiki/Bookmarks]contains:text<currentTiddler>!is[blank]] %>\\n  <<selected-state>>\\n<% else %>\\n  <<unselected-state>>\\n<% endif %>\\n\\n<style>\\n.gtw-yellow-me svg {\\n  fill: yellow !important;\\n  stroke: black !important;\\n}\\n</style>\"},\"$:/sib/Navigator/Related\":{\"title\":\"$:/sib/Navigator/Related\",\"created\":\"20210206184132111\",\"modified\":\"20240929023327572\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\whitespace trim\\n\\n\\\\procedure render-link(title, filter, cssClass)\\n  <div class=<<cssClass>>>\\n    <div style=\\\"text-align: center;\\\"><<title>>:</div>\\n      <ul>\\n      <$list filter=<<filter>> emptyMessage=\\\"<div style='text-align: center;'>//(none)//</div>\\\">\\n        <li>\\n          <$link/>&ensp;\\n          <span style=\\\"font-size: 80%;\\\">\\n            <$list filter=\\\"[enlist{!!tags}sort[]]\\\">\\n              <$macrocall $name=\\\"tag-pill\\\" tag=<<currentTiddler>>/>\\n            </$list>\\n          </span>\\n          <div class=\\\"sib-excerpt\\\">{{!!description}}</div>\\n        </li>\\n      </$list>\\n    </ul>\\n  </div>\\n\\\\end render-link\\n\\n\\n<% if [[$:/temp/ReferenceState]getindex<currentTiddler>else[hide]match[hide]] %>\\n  <div style=\\\"text-align: center;\\\">\\n    <$button\\n      setTitle=\\\"$:/temp/ReferenceState\\\"\\n      setIndex=<<currentTiddler>>\\n      setTo=\\\"show\\\"\\n      class=\\\"tc-btn-invisible tc-tiddlylink\\\"\\n    >\\n      {{$:/core/images/unfold-button}}&nbsp;show related topics\\n    </$button>\\n  </div>\\n<% else %>\\n  <div style=\\\"text-align: center;\\\">\\n    <$button\\n      setTitle=\\\"$:/temp/ReferenceState\\\"\\n      setIndex=<<currentTiddler>>\\n      setTo=\\\"hide\\\"\\n      class=\\\"tc-btn-invisible tc-tiddlylink\\\"\\n    >\\n      {{$:/core/images/fold-button}} hide related topics\\n    </$button>\\n  </div>\\n  <div class=\\\"gtw-bordered-element sib-link-display\\\">\\n    <$let xrefName=`Mentioned by //$(currentTiddler)$//`>\\n      <$macrocall\\n        $name=\\\"render-link\\\"\\n        title=<<xrefName>>\\n        filter=\\\"[all[current]links[]sort[]]\\\"\\n        cssClass=\\\"sib-links\\\"\\n      />\\n    </$let>\\n    <$let xrefName=`Mentions of //$(currentTiddler)$//`>\\n      <$macrocall\\n        $name=\\\"render-link\\\"\\n        title=<<xrefName>>\\n        filter=\\\"[[$:/plugins/sobjornstad/GrokTiddlyWiki]plugintiddlers[]] :filter[links[]match<..currentTiddler>] [all[current]backlinks[]]\\\"\\n        cssClass=\\\"sib-backlinks\\\"\\n      />\\n    </$let>\\n  </div>\\n<% endif %>\\n\\n\\n<style>\\ndiv.sib-link-display {\\n  margin-top: 0.5em;\\n  overflow: auto;\\n}\\ndiv.sib-link-display ul {\\n  list-style-type: none;\\n  padding-left: 0;\\n}\\ndiv.sib-link-display ul li {\\n  padding-bottom: 2ex;\\n}\\ndiv.sib-link-display ul div.sib-excerpt {\\n  padding-left: 1em;\\n  color: <<colour muted-foreground>>;\\n}\\n\\ndiv.sib-links {\\n  width: 50%;\\n  float: left;\\n  padding-right: 0.5em;\\n}\\ndiv.sib-backlinks {\\n  width: 50%;\\n  float: right;\\n  padding-left: 0.5em;\\n}\\n</style>\\n\"},\"$:/sib/Navigator/SectionNavigation\":{\"title\":\"$:/sib/Navigator/SectionNavigation\",\"created\":\"20210124164801589\",\"list-before\":\"$:/sib/Navigator/Related\",\"modified\":\"20241017021652514\",\"tags\":\"$:/tags/ViewTemplate\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\whitespace trim\\n\\n<% if [all[current]tag[Chapter]] [all[current]tag[Section]] %>\\n\\n<$let\\n  prevSection={{{ [list{!!parent}before{!!title}] }}}\\n  nextSection={{{ [list{!!parent}after{!!title}] }}}\\n  upChapter={{!!parent}}\\n>\\n\\n<div class=\\\"gtw-section-manager\\\">\\n  <div style=\\\"text-align: left; float: left;\\\">\\n\\n    <!-- if this is a section and it's the first section in the chapter -->\\n    <% if [<prevSection>is[blank]] %>\\n      <$set\\n        name=\\\"endMessage\\\"\\n        filter=\\\"[all[current]tag[Chapter]]\\\"\\n        value=\\\"//at beginning of book//\\\"\\n        emptyValue=\\\"//at first section//\\\"\\n      >\\n        <% if [list[Outline]before<upChapter>] %>\\n          &#10232;&nbsp;\\n          <$link to=<<upChapter>>>\\n            Up to chapter:&nbsp;\\n            <$text text=<<upChapter>>/>\\n          </$link>\\n        <% else %>\\n          <<endMessage>>\\n        <% endif %>\\n      </$set>\\n    <% endif %>\\n\\n    <!-- if this is a section and there's a previous section in the chapter -->\\n    <% if [<prevSection>!is[blank]tag[Section]] %>\\n      ←&nbsp;\\n      <$link to=<<prevSection>>>\\n        Previous:&nbsp;\\n        <$text text=<<prevSection>>/>\\n      </$link>\\n    <% endif %>\\n\\n    <!-- if this is a chapter and there's a previous chapter -->\\n    <% if [<prevSection>!is[blank]tag[Chapter]] %>\\n      <$list filter=\\\"[list<prevSection>last[]]\\\" variable=\\\"lastSectionInPreviousChapter\\\">\\n        &larr;&nbsp;\\n        <$link to=<<lastSectionInPreviousChapter>>>\\n          Last section in previous chapter:&nbsp;\\n          <$text text=<<lastSectionInPreviousChapter>>/>\\n        </$link>\\n        <br>\\n      </$list>\\n      &#10232;&nbsp;\\n      <$link to=<<prevSection>>>\\n        Previous chapter:&nbsp;\\n        <$text text=<<prevSection>>/>\\n      </$link>\\n    <% endif %>\\n\\n  </div> <!-- left column -->\\n\\n  <div style=\\\"text-align: right; float: right;\\\">\\n\\n    <!-- if this is a section and there's a later section in the chapter -->\\n    <% if [<nextSection>!is[blank]tag[Section]] %>\\n      <$link to=<<nextSection>>>Next:&nbsp;<<nextSection>></$link>&nbsp;→\\n    <% endif %>\\n\\n    <!-- if this is a section and it's the last section in the chapter -->\\n    <% if [<nextSection>is[blank]] %>\\n      <$list filter=\\\"[list[Outline]after<upChapter>]\\\">\\n        <$link to=<<currentTiddler>>>\\n          Next chapter:&nbsp;\\n          <<currentTiddler>>\\n        </$link>\\n        &nbsp;&#10233;\\n      </$list>\\n      <% if [list[Outline]after<upChapter>then[]else[x]!is[blank]] %>\\n        <% if [all[current]tag[Chapter]] %>\\n          <!-- The final chapter lets you dive into its first section,\\n               but does not let you go to the next chapter (because there isn't one). -->\\n          <$list filter=\\\"[list<currentTiddler>first[]]\\\" variable=\\\"firstSectionInThisChapter\\\" >\\n            <$link to=<<firstSectionInThisChapter>>>\\n              First section in this chapter:&nbsp;\\n              <$text text=<<firstSectionInThisChapter>>/>\\n            </$link>\\n            &nbsp;&rarr;\\n            <br>\\n          </$list>\\n          //at last chapter//\\n        <% else %>\\n          <!-- The final non-chapter (aka section) shows \\\"at end of book\\\". -->\\n          //at end of book//\\n        <% endif %>\\n      <% endif %>\\n    <% endif %>\\n\\n    <!-- if this is a chapter and there's a later chapter -->\\n    <% if [<nextSection>!is[blank]tag[Chapter]] %>\\n      <$list variable=\\\"firstSectionInThisChapter\\\" filter=\\\"[list<currentTiddler>first[]]\\\">\\n        <$link to=<<firstSectionInThisChapter>>>First section in this chapter:&nbsp;<$text text=<<firstSectionInThisChapter>>>/</$text></$link>&nbsp;&rarr;\\n        <br>\\n      </$list>\\n      <$link to=<<nextSection>>>Next chapter:&nbsp;<<nextSection>></$link>&nbsp;&#10233;\\n    <% endif %>\\n\\n  </div> <!-- right column -->\\n</div>\\n\\n<div style=\\\"text-align: center; clear: both; padding-top: 1em;\\\">\\n  <% if [all[current]tag[Section]] %>\\n    &uarr;&nbsp;\\n    <$link to=<<upChapter>>>\\n      <$text text={{{ [<upChapter>get[caption]] }}}/>\\n    </$link>\\n  <% elseif [all[current]tag[Chapter]] %>\\n    &uarr;&nbsp;\\n    [[Outline]]\\n  <% endif %>\\n</div>\\n<% if [gtw.is-not-static-edition[]] %>\\n<div style=\\\"text-align: center; padding-top: 0.2em;\\\">\\n  <<sendFeedbackLink\\n    icon:\\\"{{$:/core/images/mail}}\\\"\\n    tooltip:\\\"Suggest an improvement to this section.\\\">>\\n</div>\\n<div style=\\\"padding-top: 0.2em;\\\">\\n  {{||$:/sib/Navigator/Related}}\\n</div>\\n<% endif %>\\n\\n</$let>\\n\\n<style>\\ndiv.gtw-section-manager div {\\n  border-top: 1px solid <<color table-border>>;\\n  padding-top: 10px;\\n  margin-top: 6ex;\\n  width: 50%;\\n}\\n</style>\\n\\n<% endif %>\"},\"$:/sib/Navigator/SectionSelector\":{\"title\":\"$:/sib/Navigator/SectionSelector\",\"created\":\"20210131192658407\",\"modified\":\"20210209021626335\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$select tiddler=\\\"$:/temp/SelectedSection\\\" default=\\\"\\\">\\n  <option value=\\\"\\\">(any section)</option>\\n  <$list filter=<<selectorFilter>>>\\n    <option value=<<currentTiddler>>><<currentTiddler>></option>\\n  </$list>\\n</$select>\"},\"$:/sib/PaletteSwitchButton\":{\"title\":\"$:/sib/PaletteSwitchButton\",\"created\":\"20210322234549335\",\"list-before\":\"$:/core/ui/Buttons/save-wiki\",\"modified\":\"20240727203808516\",\"tags\":\"$:/tags/PageControls\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\procedure light-palette() $:/palettes/SpartanDay\\n\\\\procedure dark-palette() $:/palettes/Twilight\\n\\n\\\\procedure button-content(modeName)\\n  <% if [<tv-config-toolbar-icons>match[yes]] %>\\n     {{$:/core/images/palette}}\\n  <% endif %>\\n  <% if [<tv-config-toolbar-text>match[yes]] %>\\n    <span class=\\\"tc-btn-text\\\"><$text text=<<modeName>>/></span>\\n  <% endif %>\\n\\\\end button-content\\n\\n\\\\procedure change-palette-button(actionWidget, buttonName, buttonTooltip)\\n  <$button\\n    actions=<<actionWidget>>\\n    class=<<tv-config-toolbar-class>>\\n    selectedClass=\\\"tc-selected\\\"\\n    tooltip=<<buttonTooltip>>\\n  >\\n    <$macrocall $name=\\\"button-content\\\" modeName=<<buttonName>>>>\\n  </$button>\\n\\\\end\\n\\n\\\\procedure darken-button()\\n  <$macrocall\\n    $name=\\\"change-palette-button\\\"\\n    actionWidget=`<$action-setfield $tiddler=\\\"$:/palette\\\" $value=\\\"$(dark-palette)$\\\"/>`\\n    buttonName=\\\"Dark mode\\\"\\n    buttonTooltip=\\\"Switch to dark mode\\\"\\n  />\\n\\\\end\\n\\n\\\\procedure lighten-button()\\n  <$macrocall\\n    $name=\\\"change-palette-button\\\"\\n    actionWidget=`<$action-setfield $tiddler=\\\"$:/palette\\\" $value=\\\"$(light-palette)$\\\"/>`\\n    buttonName=\\\"Light mode\\\"\\n    buttonTooltip=\\\"Switch to light mode\\\"\\n  />\\n\\\\end\\n\\n<% if [[$:/palette]text<light-palette>] %>\\n  <<darken-button>>\\n<% else %>\\n  <<lighten-button>>\\n<% endif %>\"},\"$:/sib/ReferenceMacros\":{\"title\":\"$:/sib/ReferenceMacros\",\"created\":\"20240925024949563\",\"modified\":\"20241015032025750\",\"tags\":\"$:/tags/Global\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\whitespace trim\\n\\n\\\\procedure gtw.link-chapter-name(chapterName, text:\\\"\\\")\\n  <$link to=<<chapterName>>>\\n    <% if [<text>!is[blank]] %>\\n      <<text>>\\n    <% else %>\\n      <<chapterName>>\\n    <% endif %>\\n  </$link>\\n\\\\end gtw.link-chapter-name\\n\\n\\\\procedure gtw.link-chapter-number(chapterName, chapterPrefix:\\\"chapter\\\")\\n  \\\\function .number-from-chapter(chapterName) [get[caption]split[: ]first[]]\\n\\n  <$transclude\\n    $variable=\\\"gtw.link-chapter-name\\\"\\n    chapterName=<<chapterName>>\\n    text={{{ [<chapterName>.number-from-chapter[]addprefix[&nbsp;]addprefix<chapterPrefix>] }}}\\n  />\\n\\\\end gtw.link-chapter-number\"},\"$:/sib/SendFeedbackWidget\":{\"title\":\"$:/sib/SendFeedbackWidget\",\"text\":\"/*\\\\\\ntitle: action-sendfeedback\\ntype: application/javascript\\nmodule-type: widget\\nAction widget to call an API.\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nlet ENDPOINT = \\\"https://zaoi8ogjy4.execute-api.us-east-1.amazonaws.com/default/ReceiveGrokTiddlyWikiFeedback\\\";\\n\\nfunction sendRequest(url, params, callback) {\\n\\t\\tlet xhr = new XMLHttpRequest();\\n\\t\\txhr.open('POST', url, true);\\n\\t\\txhr.responseType = 'json';\\n\\t\\txhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\\n\\n\\t\\txhr.onload = () => {\\n\\t\\t\\t\\tlet status = xhr.status;\\n\\t\\t\\t\\tif (status == 200) {\\n\\t\\t\\t\\t\\t\\tconsole.log(xhr.response);\\n\\t\\t\\t\\t\\t\\tif (xhr.response[\\\"status\\\"] == \\\"success\\\") {\\n\\t\\t\\t\\t\\t\\t\\t\\tcallback(null, xhr.response);\\n\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\t\\tcallback(status, xhr.response);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tcallback(status, xhr.response);\\n\\t\\t\\t\\t}\\n\\t\\t};\\n\\n\\t\\t// Turn the data object into an array of URL-encoded key/value pairs.\\n\\t\\t// https://stackoverflow.com/questions/9713058/send-post-data-using-xmlhttprequest\\n\\t\\tlet urlEncodedDataPairs = [], name;\\n\\t\\tfor (name in params) {\\n\\t\\t\\t\\turlEncodedDataPairs.push(encodeURIComponent(name) + '=' + encodeURIComponent(params[name]));\\n\\t\\t}\\n\\t\\txhr.send(urlEncodedDataPairs.join('&'))\\n};\\n\\nfunction submitFeedback(tiddler, email, comment, debug) {\\n\\t\\tvar params = new Object();\\n\\t\\tparams.tiddler = tiddler\\n\\t\\tparams.email = email\\n\\t\\tparams.comment = comment\\n\\t\\tparams.debug = debug\\n\\n\\t\\tsendRequest(ENDPOINT, params, (err, data) => {\\n\\t\\t\\t\\tif (err != null) {\\n\\t\\t\\t\\t\\t\\talert(\\\"Error submitting feedback: \\\" + data.reason);\\n\\t\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\talert(\\\"Thank you! Your feedback was successfully submitted.\\\");\\n\\t\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t}\\n\\t\\t});\\n}\\n\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar FeedbackWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nFeedbackWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nFeedbackWidget.prototype.render = function(parent,nextSibling) {\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nFeedbackWidget.prototype.execute = function() {\\n\\tthis.tiddlerName = this.getAttribute(\\\"tiddler\\\");\\n\\tthis.email = this.getAttribute(\\\"email\\\");\\n\\tthis.comment = this.getAttribute(\\\"comment\\\");\\n\\tthis.debuginfo = this.getAttribute(\\\"debuginfo\\\");\\n};\\n\\n/*\\nRefresh the widget by ensuring our attributes are up to date\\n*/\\nFeedbackWidget.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes();\\n\\tif(changedAttributes[\\\"name\\\"]) {\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t}\\n\\treturn this.refreshChildren(changedTiddlers);\\n};\\n\\n/*\\nInvoke the action associated with this widget\\n*/\\nFeedbackWidget.prototype.invokeAction = function(triggeringWidget,event) {\\n\\treturn submitFeedback(this.tiddlerName, this.email, this.comment, this.debuginfo);\\n};\\n\\nexports[\\\"action-sendfeedback\\\"] = FeedbackWidget;\\n\\n})();\",\"type\":\"application/javascript\",\"module-type\":\"widget\",\"created\":\"20210102234204312\",\"modified\":\"20240727203831943\",\"tags\":\"\"},\"$:/sib/SimpleAnalytics\":{\"title\":\"$:/sib/SimpleAnalytics\",\"text\":\"<!--\\nThis snippet sends pageviews to Simple Analytics, a privacy-friendly analytics service.\\nIt records only aggregate statistics and cannot identify you.\\n-->\\n<script>window.sa_event=window.sa_event||function(){a=[].slice.call(arguments);sa_event.q?sa_event.q.push(a):sa_event.q=[a]};</script>\\n<script async defer src=\\\"https://scripts.simpleanalyticscdn.com/latest.js\\\"></script>\\n<noscript><img src=\\\"https://queue.simpleanalyticscdn.com/noscript.gif\\\" alt=\\\"\\\"\\n/></noscript>\",\"type\":\"text/html\",\"created\":\"20200913152403709\",\"modified\":\"20210507013622338\",\"tags\":\"$:/tags/RawMarkup\"},\"$:/sib/Snippet/MagicEditor\":{\"title\":\"$:/sib/Snippet/MagicEditor\",\"caption\":\"{{$:/core/images/edit-button}} Edit\",\"created\":\"20210117004717893\",\"modified\":\"20210321011733040\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<div class=\\\"msbs-snippet\\\" style=\\\"padding-top: 3ex;\\\">\\n\\n<$edit\\n  field=\\\"text\\\"\\n  class=\\\"tc-edit-texteditor tc-edit-texteditor-body\\\"\\n  placeholder={{$:/language/EditTemplate/Body/Placeholder}}\\n  tabindex={{$:/config/EditTabIndex}}\\n  focus={{{ [{$:/config/AutoFocus}match[text]then[true]] ~[[false]] }}}\\n  cancelPopups=\\\"yes\\\"\\n/>\\n\\n</div>\\n<div class=\\\"msbs-snippet\\\">\\n\\n{{||$:/sib/Snippet/TiddlerAsRendered}}\\n\\n</div>\\n\"},\"$:/sib/Snippet/MagicSideBySide\":{\"title\":\"$:/sib/Snippet/MagicSideBySide\",\"caption\":\"{{$:/core/images/full-screen-button}} Side-by-side\",\"created\":\"20210116173017782\",\"modified\":\"20210320140908903\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<div class=\\\"msbs-snippet\\\">\\n\\n{{||$:/sib/Snippet/TiddlerAsWikitext}}\\n\\n</div>\\n<div class=\\\"msbs-snippet\\\">\\n\\n{{||$:/sib/Snippet/TiddlerAsRendered}}\\n\\n</div>\"},\"$:/sib/Snippet/TiddlerAsRendered\":{\"title\":\"$:/sib/Snippet/TiddlerAsRendered\",\"caption\":\"{{$:/core/images/preview-open}} Output\",\"created\":\"20201231195658011\",\"modified\":\"20210320140633946\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"{{!!text}}\"},\"$:/sib/Snippet/TiddlerAsWikitext\":{\"title\":\"$:/sib/Snippet/TiddlerAsWikitext\",\"caption\":\"{{$:/core/images/file}} Wikitext\",\"created\":\"20201231193531505\",\"modified\":\"20210320140852289\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$codeblock code={{!!text}} language=\\\"html\\\"/>\"},\"$:/sib/SplashScreen\":{\"title\":\"$:/sib/SplashScreen\",\"created\":\"20210213212106138\",\"modified\":\"20210213212120444\",\"tags\":\"$:/tags/RawMarkupWikified/TopBody\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\import [[$:/core/ui/PageMacros]] [all[shadows+tiddlers]tag[$:/tags/Macro]!has[draft.of]]\\n\\\\rules only filteredtranscludeinline transcludeinline macrocallinline\\n\\n<!-- Spinner mechanism shamelessly stolen from https://tiddlywiki.org. -->\\n\\n<div class=\\\"tc-remove-when-wiki-loaded\\\">\\n<style scoped>\\n\\n.tc-splash-text {\\n    font-family: -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Helvetica, Arial, sans-serif, \\\"Apple Color Emoji\\\", \\\"Segoe UI Emoji\\\", \\\"Segoe UI Symbol\\\";\\n    font-size: 16px;\\n    text-rendering: optimizeLegibility;\\n    -webkit-font-smoothing: antialiased;\\n  margin: 20px auto 0;\\n  width: 200px;\\n  text-align: center;\\n  color: <<colour foreground>>;\\n  fill: <<colour foreground>>;\\n}\\n\\n.tc-splash-text img {\\n  width: 150px;\\n  <<box-shadow \\\"2px 2px 10px rgba(0, 0, 0, 0.5)\\\">>\\n}\\n\\nhtml body.tc-body {\\n  background: <<colour page-background>>;\\n}\\n\\n/*\\nSpinner from https://github.com/tobiasahlin/SpinKit/ by Tobias Ahlin\\n\\nThe MIT License (MIT)\\n\\nCopyright (c) 2015 Tobias Ahlin\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy of\\nthis software and associated documentation files (the \\\"Software\\\"), to deal in\\nthe Software without restriction, including without limitation the rights to\\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\\nthe Software, and to permit persons to whom the Software is furnished to do so,\\nsubject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n*/\\n\\n.tc-splash-spinner {\\n  margin: 20px auto 0;\\n  width: 70px;\\n  text-align: center;\\n}\\n\\n.tc-splash-spinner > div {\\n  width: 18px;\\n  height: 18px;\\n  border-radius: 100%;\\n  display: inline-block;\\n  -webkit-animation: sk-bouncedelay 1.4s infinite ease-in-out both;\\n  animation: sk-bouncedelay 1.4s infinite ease-in-out both;\\n  background-color: #f88;\\n}\\n\\n.tc-splash-spinner .tc-splash-bounce-1 {\\n  -webkit-animation-delay: -0.32s;\\n  animation-delay: -0.32s;\\n  background-color: #8f8;\\n}\\n\\n.tc-splash-spinner .tc-splash-bounce-2 {\\n  -webkit-animation-delay: -0.16s;\\n  animation-delay: -0.16s;\\n  background-color: #88f;\\n}\\n\\n@-webkit-keyframes sk-bouncedelay {\\n  0%, 80%, 100% { -webkit-transform: scale(0) }\\n  40% { -webkit-transform: scale(1.0) }\\n}\\n\\n@keyframes sk-bouncedelay {\\n  0%, 80%, 100% { \\n  -webkit-transform: scale(0);\\n  transform: scale(0);\\n  } 40% { \\n  -webkit-transform: scale(1.0);\\n  transform: scale(1.0);\\n  }\\n}\\n</style>\\n\\n<div class=\\\"tc-splash-spinner\\\">\\n  <div class=\\\"tc-splash-bounce-1\\\"></div>\\n  <div class=\\\"tc-splash-bounce-2\\\"></div>\\n  <div class=\\\"tc-splash-bounce-3\\\"></div>\\n</div>\\n\\n<div class=\\\"tc-splash-text\\\">\\n  Loading <em>Grok TiddlyWiki</em>…\\n</div>\\n</div>\\n\"},\"$:/sib/Stylesheet\":{\"title\":\"$:/sib/Stylesheet\",\"created\":\"20210116181556596\",\"modified\":\"20241007124209898\",\"tags\":\"$:/tags/Stylesheet\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"div.msbs-snippet {\\n  width: 48%;\\n  display: inline-block;\\n  vertical-align: top;\\n  margin: 0;\\n  padding-left: 5px;\\n  padding-right: 5px;\\n}\\n\\ndiv.msbs-snippet pre {\\n  margin-top: 0;\\n  margin-bottom: 0;\\n}\\n\\n.sib-magic-bottom-border .tc-tab-content {\\n  margin: 0;\\n  border-bottom: 1px solid <<color tab-border>>;\\n}\\n\\n.ltc-link {\\n  border-bottom: 1px dashed <<color \\\"tiddler-link-foreground\\\">>;\\n  display: inline;\\n}\\n\\ntable.gtw-form {\\n  width: 100%;\\n  font-size: 14px;\\n}\\ntable.gtw-form th {\\n  text-align: left;\\n}\\ntable.gtw-form td input[type=text], table.gtw-form td select {\\n  width: 100%;\\n}\\ntable.gtw-form td {\\n  vertical-align: top;\\n}\\n\\n.gtw-bordered-element {\\n  border: 2px solid <<color button-border>>;\\n  padding: 5px;\\n}\\n\\n.gtw-textual-button svg {\\n  font-size: 0.6em;\\n  padding: 0.2em;\\n  margin: 1px;\\n  background: none;\\n  border: 1px solid <<colour tiddler-controls-foreground>>;\\n  border-radius: 0.25em;\\n  height: 18px;\\n  width: 18px;\\n  margin-bottom: -2px;\\n}\\n\\n.gtw-textual-icon svg {\\n  font-size: 0.6em;\\n  padding: 0.2em;\\n  margin: 1px;\\n  background: none;\\n  height: 16px;\\n  width: 16px;\\n  margin-bottom: -3px;\\n}\\n\\n.gtw-bookmarks-list {\\n  list-style-type: none;\\n  margin-left: 0;\\n  padding-left: 0;\\n}\\n\\n/* Fix checkboxes appearing too low relative to their associated text in TW 5.3.3. */\\ninput[type=\\\"checkbox\\\"] {\\n  vertical-align: unset;\\n}\\n\\n/* Add more horizontal space and a border for headings, except the title. */\\nh2:not(.tc-title) {\\n  /*margin-top: 6ex; -- for some bizarre reason Firefox and Chrome are calculating ex-height differently, so eyeballed an appropriate number of inches*/\\n  margin-top: 0.4in;\\n  padding-bottom: 5px;\\n  border-bottom: 0.05px solid <<color foreground>>;\\n}\\n\\n/* Limit line length to a traditionally-longish but readable value. */\\ndiv.tc-tiddler-body {\\n  max-width: 35em;\\n  margin: auto;\\n}\\n\\ndiv[data-tiddler-title*=\\\"Outline\\\"] div.tc-tiddler-body,\\ndiv[data-tiddler-title*=\\\"Exercise Browser\\\"] div.tc-tiddler-body,\\ndiv[data-tiddler-title*=\\\"Takeaway Browser\\\"] div.tc-tiddler-body,\\ndiv[data-tiddler-title*=\\\"interface.png\\\"] div.tc-tiddler-body,\\ndiv[data-tiddler-title*=\\\"Send Feedback\\\"] div.tc-tiddler-body,\\ndiv[data-tiddler-title*=\\\"Wikitext Reference\\\"] div.tc-tiddler-body\\n{\\n  max-width: 100%;\\n}\\n\\n/* Allow the story river to get a good bit wider than the text since this gives useful space to the navbars and balances out any empty space more nicely, but not so long that it looks ridiculous. */\\ndiv.tc-tiddler-frame {\\n  max-width: 60em;\\n  margin-left: auto;\\n  margin-right: auto;\\n}\\n\\n.tc-page-container.tc-page-view-zoomin .tc-tiddler-frame {\\n  /* for some reason this is position: absolute in zoomin mode (only), which prevents the tiddlers from centering. unsetting it doesn't appear to cause any issues */\\n  position: unset;\\n}\\n\\ndiv.tc-tiddler-edit-frame { max-width: 90em; margin-left: auto; margin-right: auto; }\\n\\n.tc-tiddler-frame .tc-tiddler-editor.tc-tiddler-preview {\\n  grid-template-columns: 69% 29%;\\n}\\n\\n.tc-tiddler-preview-preview {\\n  z-index: 1;\\n}\\n\\n.tc-storyview-zoomin-tiddler {\\n  position: unset;\\n}\\n\\n/* Because most of our content is shadow tiddlers, it doesn't make sense to bold the links. */\\na.tc-tiddlylink-shadow {\\n  font-weight: normal;\\n}\\n\\n/* The close link color is nearly invisible on the dark palette. */\\n.tc-sidebar-lists button.gtw-close-link {\\n  color: <<color muted-foreground>>;\\n}\\n\"},\"$:/sib/TooManyTiddlersBanner\":{\"title\":\"$:/sib/TooManyTiddlersBanner\",\"created\":\"20210407162959692\",\"list-after\":\"$:/plugins/sobjornstad/TakeAway/ReviewNotificationBanner\",\"modified\":\"20240727204736957\",\"tags\":\"$:/tags/SideBarSegment\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\procedure maxNumOpen() 20\\n\\n<% if [{$:/config/sobjornstad/GrokTiddlyWiki/HideOpenTiddlersWarning}!text[yes]is[blank]] %>\\n<$list filter=\\\"[enlist{$:/StoryList!!list}count[]compare:number:gt<maxNumOpen>]\\\" variable=\\\"numOpen\\\">\\n  <div class=\\\"gtw-tiddler-excess-banner\\\">\\n    <div style=\\\"display: inline-block; vertical-align: center; margin-left: 1em;\\\">\\n      <span style=\\\"height: 44px\\\">{{$:/core/images/info-button}}</span>\\n    </div>\\n    <div style=\\\"display: inline-block; margin-left: 1em;\\\">\\n      You have <<numOpen>> tiddlers open. Having too many<br>\\n      open tiddlers may cause poor performance.<br>\\n    </div>\\n\\n    <div style=\\\"margin-left: calc(44px + 1em); margin-right: 4em;\\\">\\n\\n      Close tiddlers from the //Open// tab of the sidebar, or use the <<textual-button \\\"close-others-button\\\">> //close others// button on a tiddler or the <<textual-button \\\"close-all-button\\\">> //close all// button in the sidebar to close tiddlers in bulk.\\n\\n      <div style=\\\"text-align: center;\\\">\\n        <$button set=\\\"$:/config/sobjornstad/GrokTiddlyWiki/HideOpenTiddlersWarning\\\" setTo=\\\"yes\\\" class=\\\"tc-tiddlylink tc-btn-invisible\\\">\\n          don't show this message again\\n        </$button>\\n      </div>\\n    </div>\\n  </div>\\n</$list>\\n<% endif %>\\n\\n<style>\\n.gtw-tiddler-excess-banner {\\n  background-color: <<color tiddler-background>>;\\n  display: inline-block;\\n  margin-right: 2em;\\n  padding-top: 1em;\\n  padding-bottom: 1px;\\n}\\n</style>\"},\"$:/sib/js/excise-exercise.js\":{\"title\":\"$:/sib/js/excise-exercise.js\",\"text\":\"/*\\\\\\ntitle: $:/sib/js/excise-exercise.js\\ntype: application/javascript\\nmodule-type: texteditoroperation\\n\\nText editor operation to excise the selection to a new private-chunk tiddler.\\n\\nSIB 2021-05-21: Copied from the standard excise operation and modified as needed.\\nSIB 2024-09-01: Borrowed from M2, modifying again.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports[\\\"exciseExercise\\\"] = function(event, operation) {\\n\\tvar editTiddler = this.wiki.getTiddler(this.editTitle),\\n\\t\\teditTiddlerTitle = this.editTitle;\\n\\tif(editTiddler && editTiddler.fields[\\\"draft.of\\\"]) {\\n\\t\\teditTiddlerTitle = editTiddler.fields[\\\"draft.of\\\"];\\n\\t}\\n\\tvar excisionTitle = this.wiki.generateNewTitle(\\\"Ex:\\\" + editTiddlerTitle);\\n\\tthis.wiki.addTiddler(new $tw.Tiddler(\\n\\t\\tthis.wiki.getCreationFields(),\\n\\t\\tthis.wiki.getModificationFields(),\\n\\t\\t{\\n\\t\\t\\ttitle: excisionTitle,\\n\\t\\t\\ttext: operation.selection,\\n\\t\\t\\ttags: \\\"Exercise\\\"\\n\\t\\t}\\n\\t));\\n\\toperation.replacement = \\\"{{\\\" + excisionTitle + \\\"||ExerciseTemplate}}\\\";\\n\\toperation.cutStart = operation.selStart;\\n\\toperation.cutEnd = operation.selEnd;\\n\\toperation.newSelStart = operation.selStart;\\n\\toperation.newSelEnd = operation.selStart + operation.replacement.length;\\n};\\n\\n})();\",\"type\":\"application/javascript\",\"module-type\":\"texteditoroperation\",\"created\":\"20210522033305614\",\"modified\":\"20240901220832295\",\"tags\":\"\"},\"Acknowledgments\":{\"title\":\"Acknowledgments\",\"created\":\"20210206214220001\",\"description\":\"//Grok TiddlyWiki// exists only because of the efforts of many people.\",\"modified\":\"20241019225839732\",\"parent\":\"Appendices\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Thanks to\\nDiego M.,\\nDon Gore,\\nMateusz Wilczek,\\nMohammad Rahmani,\\nJennifer Bjornstad,\\nOdin Jorna,\\nSinisa Obradovic,\\nStan Dunn,\\nStéphane L.,\\nand\\nWalt Ludwick\\nfor reviewing pre-release copies of the first and/or second major edition of //Grok TiddlyWiki// and offering feedback,\\nand to many folks around the web too numerous to list for suggesting further improvements in minor releases.\\n\\n//Grok TiddlyWiki// would have no reason to exist without [[TiddlyWiki|https://tiddlywiki.com]] itself; thanks to Jeremy Ruston for spending twenty years working on it, and to all the community members who have helped to make this open-source project what it is.\\n\\nIn particular, thanks to all the members of the TiddlyWiki forums, [[new|https://talk.tiddlywiki.org]] and [[old|https://groups.google.com/g/tiddlywiki]], for helping me learn to use TiddlyWiki, and for not just putting up with but reliably and cheerfully answering a wide variety of impractical questions I posed while trying to understand TiddlyWiki deeply enough to write a book about it. All users of TiddlyWiki are lucky to have such a friendly and helpful resource!\\n\\nThanks to Andy Matuschak and Michael Nielsen for doing pioneering work on the [[mnemonic medium|https://numinous.productions/ttft/]] and [[Orbit|https://withorbit.com]], which was the inspiration for [[TakeAway|TakeAway Help]] and is worth a look for anyone who likes TakeAway. Thanks also to Damien Elmes and the [[Anki|https://apps.ankiweb.net]] community for developing the fantastic spaced-repetition tool that got me interested in spaced-repetition study back in 2010. I hope that TakeAway serves to advance the cause of spaced-repetition use at least a little bit.\\n\\nThe primary text font in //Grok TiddlyWiki// is Paul Hunt's Source Sans Pro, and the monospaced font used for code examples is Raph Levien's Inconsolata. Thanks to the designers of these excellent fonts for making them available for free.\\n\\n<div style=\\\"text-align: center; margin-top: 0.3in;\\\">\\n<div>//five hundred sixty-two press//</div>\\n<div style=\\\"font-variant: small-caps; font-size: 125%; letter-spacing: 0.5px;\\\">mmxxiv</div>\\n<div style=\\\"font-variant: small-caps;\\\">q.e.f.</div>\\n</div>\"},\"Adding to the Sidebar\":{\"title\":\"Adding to the Sidebar\",\"created\":\"20200718041838565\",\"description\":\"Arbitrary tiddlers can be added to the sidebar to expose custom navigation options or any other content you like.\",\"modified\":\"20240926004728586\",\"parent\":\"Looking Under the Hood\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"It's frequently useful to add content or navigational functions to the sidebar. In particular, there are several types of custom navigation that would be immediately helpful for our office-notes wiki:\\n\\n* There is currently no easy way to order and ''look at journal tiddlers by date'', something which will likely be a common task.\\n* Similarly, ''listing our meetings by date'' would be helpful. We already have a `MeetingList`, but right now we have to remember that it exists and search for it.\\n* We might like a ''hierarchical view of our projects'', or at least a list of them, in the sidebar so we can quickly navigate through them.\\n\\nLet's create a new tab in the sidebar called `Views` to store custom ways of looking at some of our tiddlers. Within the `Views` tab, we'll add some vertical tabs, just like the default `More` tab does, for `Journal`, `Meetings`, and `Projects`.\\n\\nThe first step is to ''create a tiddler for each inner tab''. As noted earlier, we already have a tiddler that can serve as the meeting list, `MeetingList`; you may, however, want to clean out some extra crud that we have added to it in previous exercises, so that it just shows a simple list of meetings. For the journal list, clone the meeting list and tweak the filter so that it selects tiddlers with the `Journal` tag instead of the `Meeting` tag. \\n\\nFor the project list, let's look at a slightly different method. All of our tiddlers are tagged `Project`, so why not just make `Project` -- the tag tiddler -- into the list? This fits perfectly with the standard dual function of tags in TiddlyWiki as both tiddlers (units of content) and a mechanism for building structure. Go ahead and edit this tiddler, or create it if it doesn't exist in your wiki, and add an appropriate TOC macro to it. (Have a look at [[Creating Hierarchies with a Table of Contents]] if you've forgotten how.)\\n\\nThe next step is to create a tiddler that ''combines those inner tabs into a single tiddler''. Let's call this tiddler `$:/yourname/Views`. We'll set things up so that we can add new tabs by simply tagging the tab tiddler `$:/yourname/Views`:\\n\\n```html\\n<<tabs\\n  tabsList:\\\"[tag[$:/yourname/Views]]\\\"\\n  default:\\\"JournalList\\\"\\n  class:\\\"tc-vertical\\\">>\\n```\\n\\nGo back and tag each of the inner-tab tiddlers with `$:/yourname/Views`. You should immediately see tabs appear for them within the `$:/yourname/Views` tiddler.\\n\\nThe last step is to make the Views tiddler itself show up as a new tab on the sidebar. This is left as an exercise.\\n\\n\\n!! Exercises\\n\\n{{Ex:ViewsOnSidebar||ExerciseTemplate}}\\n{{Ex:FriendlyViewsNames||ExerciseTemplate}}\\n{{Ex:SidebarCurrentTiddler||ExerciseTemplate}}\\n\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\"},\"Advantages of WYSIWYM\":{\"title\":\"Advantages of WYSIWYM\",\"created\":\"20210115210638130\",\"description\":\"Some of the reasons that TiddlyWiki and many other systems choose to use markup languages instead of visual editors.\",\"modified\":\"20241017012830267\",\"parent\":\"Appendices\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"TiddlyWiki's [[Wikitext]] is an example of a WYSIWYM (“What You See is What You Mean”) formatting language, meaning that you see only plain text, and you include special characters or phrases along with the text to explain how it should be formatted. These kinds of languages are extremely popular among software developers and other technical types, but relatively rare elsewhere. You might wonder why they're preferred; here are a few reasons.\\n\\n* WYSIWYG editors use the same kinds of formatting codes that markup languages do, but they're hidden, so the document can suddenly start doing weird stuff (e.g., text mysteriously appearing in the wrong font, or lists indenting the wrong amount) and it's difficult to figure out why. With markup languages, finding issues is much easier because you can see all of the formatting instructions.\\n\\n* Markup languages can easily ''integrate other languages'' for finer control over display, content, and formatting. TiddlyWiki's markup language, for instance, also allows you to use [[HTML]], [[CSS|Stylesheets]], [[widgets|Widgets]], [[filters|Filters]], and more -- all without leaving the single editor text box. In a WYSIWYG editor, you'd have to go into separate dialog boxes and click a bunch of extra times to use each of these features.\\n\\n* In the context of TiddlyWiki in particular, things like [[procedures|Procedures]] and [[templates|Templates and the Current Tiddler]] ''would be much more challenging to write'' with a WYSIWYG editor, since you wouldn't be able to see exactly what text and formatting you were replacing. These are some of the most powerful features of TiddlyWiki, and they're challenging enough to learn as they are!\\n\\n* You can ''separate presentation and content'' in most markup languages. Suppose you have a document where you want all software code snippets to appear in red text. Instead of manually setting every code snippet to appear in red, you merely have to ensure that you mark every code snippet as a code snippet, and then elsewhere you can indicate that all code snippets should appear in red. Your markup indicates the //function// of the text, rather than the nitty-gritty details of how it should be formatted. With this setup, if you later decide that code snippets should be blue, you only have to go to the spot where you decided code snippets were red and change it to blue, and all the code snippets will update to blue at once.\\n\\n* WYSIWYG editors tend to use ''proprietary formats''. Most markup languages are open and can be read by multiple tools.\\n\\n* ''Keeping backups and previous versions'' of marked-up text is easier.\"},\"Anatomy of Filter Steps\":{\"title\":\"Anatomy of Filter Steps\",\"created\":\"20201230190557655\",\"description\":\"Filter steps have operators, suffixes, parameters, inputs, and outputs.\",\"modified\":\"20240925030205055\",\"parent\":\"Filtering and Formatting\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"We saw a few examples of filter steps in the [[previous section|Using Filter Expressions]]. Let's take a closer look at the syntax.\\n\\n!! Operators, suffixes, and parameters\\n\\nFilter steps are composed of three parts, which take this basic form:\\n\\n```html\\noperator:suffix[parameter]\\n```\\n\\n* An ''operator'' describes the task the filter performs. TiddlyWiki supports a large number of operators, and some [[plugins|Plugins]] add additional operators.\\n* A ''suffix'' further refines the meaning of the operator, often by listing a specific [[field|Fields]] that it applies to. Only some operators accept a suffix at all, and it is usually optional even when it is accepted.\\n* A ''parameter'' describes what the operator should try to find or do. For instance, with the `tag` operator, the parameter indicates which tag you want to match.\\n\\nThe exact meaning of the suffix and parameter depends on which operator is being used.\\n\\nAs briefly mentioned in the previous section, you can place a `!` (pronounced //not// or //bang//) before the operator. Typically, this negates its meaning, so that whatever tiddlers it would have allowed to pass it now filters out, and vice versa. With a few operators, it does something different and operator-specific.\\n\\nPutting this together, a simple filter step we saw in the [[previous section|Using Filter Expressions]] was `tag[Contact]`. In this step, `tag` is the operator and `Contact` is the parameter. Most commonly, the parameter goes in square brackets, but we'll learn in <<gtw.link-chapter-number \\\"Transclusion\\\">> that these can be replaced with `<angle brackets>` or `{curly braces}` for different effects.\\n\\nThe `tag` operator has an optional suffix `strict` (don't worry about what it does for now). If we used it, our filter step would look like `tag:strict[Contact]`.\\n\\n!! Inputs and outputs\\n\\nWe can also talk about the ''inputs'' or ''input tiddlers'' and ''outputs'' or ''output tiddlers'' of a filter step. Unlike operators, suffixes, or parameters, these do not correspond to text in the filter expression; rather, they are the data that moves through the pipeline from left to right when TiddlyWiki evaluates the filter.\\n\\n''Input tiddlers'' are the tiddlers that come down the pipeline from the left side of the operator.\\n\\n* If the filter run is `[tag[Person]]`, all tiddlers in the wiki are input tiddlers to `tag[Person]`. Unless you use one of a special set of filter operators called ''constructors'' as the first step in a run, {{Ltc:AllTiddlersInTheLeft||LieToChildrenTemplate}} are the inputs to the leftmost step. Constructors ignore any input they receive and generate an entirely new set of output tiddlers based only on their suffix and parameters (i.e., they construct a list), so if TiddlyWiki sees one as the first step of a run, it saves itself some effort by not passing the constructor any input at all.\\n* If the filter run is `[title[JaneDoe]tag[Person]]`, the sole input tiddler to `tag[Person]` is `JaneDoe`. (`title` is a constructor.)\\n* If the filter run is `[tag[Application]tag[Person]]`, the input tiddlers to `tag[Person]` are all the tiddlers in the wiki tagged with `Application`.\\n\\n''Output tiddlers'', similarly, are the tiddlers that get passed off to the next step in the run (or become the result of the entire filter run, if this is the last step). In the `[tag[Application]tag[Person]]` example above, the outputs of `tag[Application]` are all the tiddlers in the wiki tagged with `Application`. Or to put it another way, the outputs of `tag[Application]` are the inputs to `tag[Person]`.\\n\\n\\n!! Multiple suffixes and parameters\\n\\nMost filter steps that you'll use early in your TiddlyWiki career will have one parameter, and sometimes one suffix. However, certain filter operators accept more than one suffix and/or more than one parameter:\\n\\n* ''Multiple suffixes'' are separated by additional colons, like `search:myfield:literal[parameter]`.\\n* ''Multiple parameters'' are separated by commas between additional pairs of brackets, like `pad[5],[-]`.\\n\\n\\n!! Exercises\\n\\n{{Ex:ConstructorAfterFilterStep||ExerciseTemplate}}\\n{{Ex:NonexistentTiddlerFilter||ExerciseTemplate}}\\n{{Ex:MeaninglessSuffix||ExerciseTemplate}}\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\"},\"Appendices\":{\"title\":\"Appendices\",\"caption\":\"Appendices\",\"created\":\"20200822214752880\",\"description\":\"In which you can find reference material, lists, acknowledgments, and extended digressions that didn't fit in the main flow of the book, if you're having a particularly boring afternoon.\",\"list\":\"[[Wikitext Reference]] [[Advantages of WYSIWYM]] CamelCase [[Options for Saving and Hosting Your Wiki]] [[Useful Plugins]] Changes [[Support Us]] Acknowledgments Copyright\",\"modified\":\"20210818144657804\",\"parent\":\"Outline\",\"tags\":\"Chapter\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"{{||ChapterOutlineTemplate}}\"},\"BasicSnippet\":{\"title\":\"BasicSnippet\",\"created\":\"20210130005356555\",\"modified\":\"20210206150314943\",\"tags\":\"Template\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<!--\\n<div style=\\\"float: right; margin-top:10px; font-size:14px;\\\">\\n  <$button message=\\\"tm-copy-to-clipboard\\\" param={{!!text}} class=\\\"tc-btn-invisible tc-tiddlylink\\\">copy wikitext to clipboard</$button>\\n</div>\\n<div style=\\\"clear: both;\\\"/>\\n-->\\n\\n<$transclude tiddler=\\\"$:/sib/Snippet/TiddlerAsWikitext\\\"/>\"},\"Block Mode and Inline Mode\":{\"title\":\"Block Mode and Inline Mode\",\"created\":\"20210116171851507\",\"description\":\"TiddlyWiki reads wikitext in two modes, one where elements stack horizontally and one where they stack vertically, and you occasionally have to consider which mode you should use.\",\"modified\":\"20241017002555205\",\"parent\":\"Macros, Wikification, and Widgets\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"In [[HTML]], {{Ltc:BlockAndInlineMode||LieToChildrenTemplate}}. The distinction is, on its face, quite simple:\\n\\n* In ''block mode'', elements are stacked vertically, with the bottom edge of one item up against the top edge of the next.\\n* In ''inline mode'', elements are stacked horizontally, with the right edge of one item up against the left edge of the next (or vice versa if the page is in a language where text is written right-to-left). If there is not enough horizontal space to render all the consecutive inline-mode elements, the browser will insert a line break at an appropriate location, such as the end of an element or the end of a word within an element, and continue rendering on the next line.\\n\\nImportantly, in inline mode, insertion of vertical space is not allowed (except by the automatic line-breaker, or by the `<br>` tag, which forces the line-breaker to break there). For instance, you cannot start a new paragraph in inline mode -- instead, you have to leave inline mode, returning to block mode, and create a new block.\\n\\nAs an example, `div` elements are ordinarily rendered in block mode, while `span` elements {{Ltc:SpanInlineMode||LieToChildrenTemplate}}. Here's how they look:\\n\\n{{Sn:BlockInlineComparison||MagicSnippet}}\\n\\nIt's possible to alter this behavior using [[CSS|Stylesheets]], but since our focus in this book is not HTML and CSS, we will leave it there. For more technical details on the HTML side of things, check out the [[Mozilla developer docs|https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flow_Layout/Block_and_Inline_Layout_in_Normal_Flow]].\\n\\n\\n!! Block and inline mode in TiddlyWiki\\n\\n[[Wikitext rendering|Wikification]] in TiddlyWiki adds an additional layer of complexity. As TiddlyWiki reads [[wikitext|Wikitext]], it is either reading in inline mode or block mode. In ''inline mode'', it recognizes only the elements of wikitext that make sense in an inline context, such as links or bold formatting. In ''block mode'', it recognizes elements that are blocks of their own, such as lists, blockquotes, or code snippets. ''Within block elements, TiddlyWiki enters inline mode''; you re-enter block mode by leaving a blank line in your wikitext. (Note, however, that you cannot re-enter block mode with a blank line at all if you are inside certain elements that are inherently restricted to inline mode, like links or italic text -- in this case you must close that element before adding a blank line.)\\n\\nThis is why you need a blank line on either side of, e.g., lists, for them to display correctly (see the following snippet for an example). If you don't put a blank line before the list, TiddlyWiki reads the first `*` as part of a paragraph -- `*` is a perfectly valid character to have within a paragraph, after all -- and the remainder of the list is read in inline mode, which usually won't look very good. Similarly, if you don't put a blank line after the list, TiddlyWiki stays in inline mode at the end of the final list item, and it will not start a new paragraph until it leaves inline mode.\\n\\n{{Sn:CorrectAndIncorrectLists||MagicSnippet}}\\n\\n!! Transclusion\\n\\nMatters are complicated further by [[transclusion|Transclusion]], which can make sense in either a block or an inline context, but usually not both at once. For instance, if you want to transclude a field that contains a phone number into the text of a paragraph, you probably want to do that in inline mode so you don't interrupt the paragraph and put the phone number on a separate line. On the other hand, if you transclude the `text` field of a long tiddler, you probably want to do that in block mode so all its paragraphs don't get squashed into one. (I'm discussing field transclusions here, but this generally applies to variable transclusions as well.)\\n\\nIn many cases, TiddlyWiki will do the right thing on its own: it chooses a mode based on ''whether you put blank lines around the reference or not''. This can become unintuitive, however, when you transclude something within a widget. For instance, let's suppose we want to show the text of all meetings at which fudge was mentioned, with a horizontal line in between each:\\n\\n```html\\n<$list filter=\\\"[tag[Meeting]search[fudge]]\\\">\\n  {{!!text}}\\n\\n  ------\\n</$list>\\n```\\n\\nThis doesn't work right -- can you spot the problem? There isn't a blank line before `{{!!text}}`, so the transclusion happens in inline mode! You can fix this either by putting a blank line just before `{{!!text}}`, or by forcing the transclusion to take place in block mode using the `mode` attribute of the `$transclude` widget:\\n\\n```html\\n<$list filter=\\\"[tag[Meeting]search[fudge]]\\\">\\n  <$transclude $mode=\\\"block\\\" $tiddler=<<currentTiddler>>/>\\n\\n  ------\\n</$list>\\n```\\n\\nYou can read more about the `$transclude` widget and block/inline-mode transclusion [[in the TiddlyWiki documentation|https://tiddlywiki.com/#TranscludeWidget]].\\n\\n!! Inline-mode markup errors\\n\\nA common cause of a tiddler displaying funny, which you're now prepared to understand and fix more easily, is an ''unclosed inline-mode element''. For instance, suppose we have two paragraphs in a tiddler, and we open some italics and forget to close them in the first paragraph.\\n\\n{{Sn:UnclosedItalics||MagicSnippet}}\\n\\nYou'll notice that the two paragraphs got smashed into a single paragraph -- what's going on there?\\n\\nIf you inspect the content of the output tab in your browser's developer tools, as we learned how to do in [[When Things Go Wrong]], you'll see this is the HTML TiddlyWiki generated for those paragraphs:\\n\\n```html\\n<div class=\\\"msbs-snippet\\\">\\nHere is my <em>first paragraph.\\n\\nHere is my second paragraph.</em>\\n</div>\\n```\\n\\nThe surrounding `div` is part of the snippet tooling used in this wiki, so you can focus in on its content, which is the result of rendering a complete tiddler (the snippet is stored in its own tiddler). The HTML equivalent to `////` is an `em` element, short for //emphasis//.\\n\\nSince we didn't ever close the italics, TiddlyWiki automatically inserted a matching closing tag at the end of the tiddler. Herein lies our problem: because `em` is an inline element, TiddlyWiki doesn't treat two consecutive newlines as a paragraph break within that element, so it doesn't generate a `<p>` tag and you don't get a new paragraph. An entire tiddler can get smashed together this way.\\n\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\"},\"Browsing Your Tiddlers\":{\"title\":\"Browsing Your Tiddlers\",\"created\":\"20200603023508396\",\"description\":\"TiddlyWiki provides a variety of options for getting an overview of many tiddlers at once.\",\"modified\":\"20210504022432324\",\"parent\":\"Filing and Organizing\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"When you don't know what you're looking for precisely enough to formulate a [[full-text search|Searching]], you can browse through lists of tiddlers. Let's take a look at the available options. All of these are found under the ''More'' tab of the sidebar.\\n\\n; All\\n: As the name suggest, this tab lists {{Ltc:AllListsAllTiddlers||LieToChildrenTemplate}} in alphabetical order.\\n\\n; Recent\\n: This tab lists {{Ltc:MostRecentHundred||LieToChildrenTemplate}} in reverse chronological order. This is exactly the same view that's on the //Recent// tab.\\n\\n; Tags\\n: This tab shows tag pills for all of the tiddlers in your wiki that are used to tag at least one other tiddler. Clicking on a tag pill pops open the tag menu, allowing you to navigate to the tag tiddler itself or any of the tiddlers it is tagging.\\n\\n; Missing\\n: This tab lists all tiddlers in your wiki that have been linked to by at least one other tiddler, but don't yet exist. You can click on a missing tiddler to see a menu much like that for a tag, with the missing tiddler listed at the top and all the tiddlers that link to it underneath. (We discussed this view previously in the [[Knowledge Tiddlers]] section.)\\n\\n; Drafts\\n: When you edit a tiddler in TiddlyWiki, the original tiddler is preserved as-is, while a new “draft” tiddler is created to house your changes. When you accept the changes with the confirm changes button <<textual-button \\\"done-button\\\">>, the draft replaces the original tiddler.\\n: <br>The drafts tab shows any drafts that currently exist. Typically, all draft tiddlers will be open already (since you're editing them), so you'll have little reason to come in here, but occasionally a crash or network issue could cause drafts to be left in the wiki but not saved, in which case you can look for them here so you can finish your edits.\\n\\n; Orphans\\n: This tab shows tiddlers that have not been linked to within the `text` field of any other tiddler. If your wiki relies heavily on linking for relating ideas, looking for orphans periodically can help you identify which tiddlers are at risk of getting lost.\\n\\n; Types\\n: This tab lists tiddlers that aren't of a standard text type, such as images or PDFs. We'll talk more about those in [[Images and Attachments]].\\n\\n; Plugins\\n: This tab lists all [[plugin|Plugins]] tiddlers that you've installed in the wiki, split into three categories, //Languages//, //Plugins//, and //Themes//. If you are ever unsure how to use a plugin, you can likely find its documentation or a link to it by opening its tiddler here.\\n\\nIf you're following along in your own wiki, you'll notice that we skipped ''System'', ''Shadows'', and ''Explorer''. Understanding what these do requires knowing about some internals of TiddlyWiki we haven't covered yet, so we'll come back to these tabs later (in the [[System Tiddlers]] and [[Shadow Tiddlers]] sections).\\n\\n!! Managing Open Tiddlers\\n\\nThere's one more piece to cover here -- the ''Open'' tab of the sidebar. As the name suggests, it shows you at a glance all the tiddlers that are currently open in the story river. You can close or jump to an open tiddler by clicking on the <<textual-button \\\"close-button\\\">> button or the link, respectively.\\n\\nThe ''Open'' tab has another trick that's difficult to replicate any other way, and unfortunately it's the least discoverable: you can ''drag and drop the tiddlers'' in the list to change the order they appear in the story river.\\n\\nWhy is that important? Imagine you're working on a tiddler and you have eight more open above it, and you realize you need to pull up another tiddler as a reference. When you open a tiddler by searching or clicking in the sidebar, it'll open at the top of the story river. If you didn't have the option to reorder, you would now have to repeatedly scroll through eight unrelated tiddlers, or close them all even though you weren't ready to, just to move back and forth between them!\\n\\nAnother way to see several related tiddlers at once is to choose the //Open in new window// option under the more menu <<textual-button \\\"down-arrow\\\">> of a tiddler in view mode (you can't edit a tiddler in a new window, unfortunately).\\n\\nIf you find yourself doing this often, there's a nifty plugin available as part of [[Stroll|https://giffmex.org/stroll/stroll.html]] that adds a second column to the story river so you can move tiddlers side by side. But if you only need this occasionally, the additional complexity might not be worth it.\\n\\n!! Exercises\\n\\n{{Ex:LookAtBrowseOptions||ExerciseTemplate}}\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\"},\"Buttons and Input Widgets\":{\"title\":\"Buttons and Input Widgets\",\"created\":\"20200718211403194\",\"creator\":\"soren\",\"description\":\"Buttons and input widgets allow you to create custom user interfaces that edit fields and take actions in the wiki.\",\"modified\":\"20241017004104099\",\"modifier\":\"soren\",\"parent\":\"Looking Under the Hood\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"So far, all we've done to customize TiddlyWiki is make new, more or less static content of various kinds show up in various places in the wiki: tiddler content, sidebar tabs, snippets. This is all well and good, but sometimes we want to ''add interface elements the user can actively interact with'' as well. In other words, we want to be able to build the //machine// tiddlers we discussed in [[Slicing Up Content]].\\n\\nThe most basic tools for active interaction are ''buttons'' and ''text boxes'' that the user can click on and type into to perform simple tasks. Let's look at how these work.\\n\\n\\n!! Setting a value\\n\\nPerhaps the most common thing to do with a button is ''set the value of some field'' of a tiddler. Buttons are created, perhaps unsurprisingly, using the `$button` widget. Within a `$button` widget, we can use the `set` and `setTo` attributes of the widget to set a field to a value. `set` refers to a field using the same syntax as a [[field transclusion|Field Transclusions]], but without the curly braces (the formal name for this is a //text reference//). `setTo` is the value the specified field will be set to.\\n\\nFor example, we can set the current tiddler's `userwhoclicked` field to `Soren` with this button:\\n\\n{{Sn:UserWhoClicked||MagicSnippet}}\\n\\nWhen I click on this button, the tiddler now contains a field recording that I clicked the button.\\n\\nOf course, this won't be right if //you// click the button (unless by chance your name is also Soren). The `$:/status/UserName` tiddler contains the username TiddlyWiki uses to sign any tiddlers you edit, if you have this function on, so we could make it use that value instead:\\n\\n```html\\n<$button set=\\\"!!userwhoclicked\\\" setTo={{$:/status/UserName}}>\\n  Big Red Button, Version 2\\n</$button>\\n```\\n\\n!! Getting the value from user input\\n\\nWhat if we want to allow the user to ''enter their own name''? We can do this by pairing the button with an `$edit-text` widget.\\n\\n{{Sn:EditableUserWhoClicked||MagicSnippet}}\\n\\nYou'll notice that the `$edit-text` widget is associated with a field of a specific tiddler (here, since we haven't explicitly named the field, it's the `text` field of the `$:/temp/EditingUserName` tiddler). In fact, as the user changes the contents of the text box, that field is being directly edited, and if the contents of the field change for some other reason, the text box will immediately update to match. We say that the text box is ''bound'' to the field.\\n\\nThe tiddler holds the text the user has entered until the user clicks the button, at which point the button will retrieve the contents and do something with them. This is a common pattern in TiddlyWiki -- even core UI elements like the search box store their current contents in a tiddler. Because of the ubiquity of tiddlers used to store the state of the user interface and configuration values, buttons can do more than they would appear to at first glance by setting values!\\n\\nThe tiddler we've bound the text box to in this case is a system tiddler whose name begins with `$:/temp/`, often called a ''temporary tiddler''. Tiddlers in `$:/temp/` {{Ltc:TempNotSaved||LieToChildrenTemplate}} -- when you close the page or hit the refresh button, they are all gone. For a situation like this one, that's usually what you want, but if you want the value to persist across a reload, you should keep that tiddler somewhere else.\\n\\nThe attribute `tag=\\\"input\\\"` used above is usually going to be what you want. If you leave it off, you get a multiple-line text area, which could be helpful for entering text into the `text` field of some tiddler, but not much else.\\n\\n\\n!! Styling\\n\\nSometimes you might want a button to ''look like a link'' rather than a button. Buttons can be styled using CSS, just like anything else in the wiki, and TiddlyWiki provides some special CSS classes for exactly this use case. To create such a “button,” add the attribute `class=\\\"tc-btn-invisible tc-tiddlylink\\\"` to your `$button` widget.\\n\\n\\n!! Exercises\\n\\nAs we continue to move forward learning about more widgets like these, the definitive reference source is always https://tiddlywiki.com. A quick search there will get you details about widgets, field operators, terms, and so on. Looking at the documentation frequently is normal, even for experts who use spaced repetition to study TiddlyWiki. There are just too many options to remember them all!\\n\\nYou now know enough about TiddlyWiki to use the official documentation effectively and should start doing it whenever it would be helpful. From here on out, we will no longer link to the pages as they come up or include details about how to look in the documentation for information you need to know for an exercise.\\n\\n\\n{{Ex:MainSearchBoxBinding||ExerciseTemplate}}\\n{{Ex:EditCurrentTiddler||ExerciseTemplate}}\\n{{Ex:JumpToTiddler||ExerciseTemplate}}\\n{{Ex:InputExistsText||ExerciseTemplate}}\\n{{Ex:CaptionsByTag||ExerciseTemplate}}\\n\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\"},\"CamelCase\":{\"title\":\"CamelCase\",\"created\":\"20200822214806325\",\"description\":\"Whether you should use CamelCase titles, what makes something CamelCase, and how you can get rid of CamelCase linking.\",\"modified\":\"20241017012944580\",\"parent\":\"Appendices\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"TiddlyWiki has an option to make CamelCase text (where the words are run together without spaces and capitalized) turn automatically into links. This is discussed extensively in [[the answer to the camel-case knowledge tiddlers exercise|Ex:CamelCaseKnowledgeTiddlers/answer]].\\n\\n!! Should you use CamelCase?\\n\\nCamelCase makes it easier to link to things, but some people think it's ugly. The only general advice I can give is figure out what you like, and don't feel like you have to fall solidly on one side of the fence for every wiki. For my personal notes, I love CamelCase; for the wiki I wrote this book in, it's more irritating than helpful, since I want my page titles to be friendlier and I don't want the CamelCase titles I quote to become links.\\n\\nYou can learn more about my decision to use CamelCase for my Mosaic Muse notes system at the [[WikiCamelCase|https://mosmu.se/#WikiCamelCase]] page there.\\n\\n\\n!! Escaping CamelCase words\\n\\nIf you have a word that is in CamelCase, but you don't want it to be a link, you can //escape// it by placing a tilde in front of it, like `~CamelCase`. As of TiddlyWiki 5.3.0, the tilde won't be rendered whether CamelCase linking is on or not, so you can always do this if you think some CamelCase text might be incorporated in a wiki that has CamelCase linking on.\\n\\n!! Is it CamelCase?\\n\\nThe rules for determining whether a given word is in CamelCase are not always obvious, particularly when numbers or symbols are involved. Here are several things that //aren't// CamelCase that you might think would be:\\n\\n* `CAmelcase`\\n* `Camel2Camel`\\n* `3Camels`\\n* `camelCaseWord`\\n* `Camel-Case`\\n\\nTo be considered CamelCase, the word must:\\n\\n* Begin with an uppercase letter.\\n* Contain at least one uppercase letter that immediately follows a lowercase letter.\\n* Contain only letters and numbers -- no spaces or punctuation.\\n\\nThe above cases all fail that test.\\n\\n(Folks who have been around for long enough may remember that in TiddlyWiki Classic, [[the rules were different, even going so far as to allow punctuation in some places|https://talk.tiddlywiki.org/t/the-using-of-camelcases-and-what-the-tilde-is-doing/287/16?u=sobjornstad]]. They were made quite a bit stricter in TiddlyWiki 5.)\\n\\n\\n\\n!! Temporarily turning off CamelCase linking\\n\\nEven if you normally like CamelCase in your wiki, you might occasionally find you'd like to turn it off for a particular tiddler. For instance, maybe you've copied and pasted some text that contains a bunch of CamelCase words from some other source, and you don't want to have to go through and manually escape all of them.\\n\\nFortunately, there's an easy fix in this situation. Just insert the following pragma at the top of the tiddler:\\n\\n```html\\n\\\\rules except wikilink\\n```\\n\\nAs with any other pragma, this must go at the beginning of your tiddler. If other lines come before it, they must be empty lines, [[comments|Comments]], or other pragmas (e.g., `\\\\procedure` or `\\\\import`). Otherwise, the text `\\\\rules except wikilink` will appear literally.\\n\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\"},\"Changes\":{\"title\":\"Changes\",\"created\":\"20210521203810921\",\"description\":\"What's new in recently released versions of //Grok TiddlyWiki//.\",\"modified\":\"20240924122110414\",\"parent\":\"Appendices\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"This section lists all changes made to //Grok TiddlyWiki// since the previous released version.\\n\\nThe full source and all changes for //Grok TiddlyWiki// is publicly available [[on GitHub|https://github.com/sobjornstad/grok-tiddlywiki/]].\\n\\n<$list filter=\\\"[all[tiddlers+shadows]prefix[$:/plugins/sobjornstad/GrokTiddlyWiki/Changes/]!sort[date]]\\\">\\n\\n!! //Grok TiddlyWiki// {{!!version}}\\n\\n|!Release date |<$view format=\\\"date\\\" field=\\\"date\\\" template=\\\"DD MMM YYYY\\\"/>|\\n|!Git commit |<code>{{!!commit}}</code>|\\n\\n<$transclude mode=\\\"block\\\"/>\\n\\n</$list>\"},\"ChapterOutlineTemplate\":{\"title\":\"ChapterOutlineTemplate\",\"created\":\"20210110042913461\",\"modified\":\"20210110045004066\",\"tags\":\"Template\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<ul>\\n<$list filter={{!!list}}>\\n  <li><$link to={{!!title}}/> -- {{!!description}}</li>\\n</$list>\\n</ul>\\n\"},\"Choosing a Type of Transclusion\":{\"title\":\"Choosing a Type of Transclusion\",\"created\":\"20200605153728555\",\"description\":\"All types of transclusion are fundamentally similar, and their roles overlap, but a few guidelines may help you decide when to use one over the other.\",\"modified\":\"20241017003011635\",\"parent\":\"Macros, Wikification, and Widgets\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"As we've seen, TiddlyWiki offers a wide variety of ways to reuse wikitext, among them:\\n\\n* [[Variables]]\\n* [[Procedures]]\\n* [[Field Transclusions]], optionally with [[templates|Templates and the Current Tiddler]] and/or [[parameters|Parameterizing Field Transclusions]]\\n* [[Functions]]\\n* [[Macros]]\\n* [[Custom Widgets]]\\n\\nIt's usually obvious when to use a function – when the thing you're trying to reuse is a filter expression, or can be easily retrieved by a filter expression. The other options are less clear, so let's briefly talk about those.\\n\\nWe should start out by noting that there aren't many wrong answers, and to a large extent the choice is personal preference. All of the options work just fine in most cases, and they usually have similar performance as well.\\n\\n!! Field transclusions vs. something else\\n\\nThe main question here is ''what makes the most sense semantically''. That is, even though the two methods have the same effect, one might feel easier for a person to read and understand. For instance, the [[Summary of Transclusion Syntax]] and [[Updated Summary of Transclusion Syntax]] in //Grok TiddlyWiki// are both made almost entirely of a parameterized transclusion of another tiddler called `CommonTransclusionSyntax`, the parameter indicating how many of the features we've talked about so far. I could have implemented `CommonTransclusionSyntax` as a procedure, but that would feel less natural, since it feels more like we're including another document/section than that we're getting a snippet of text. On the other hand, implementing our `wikipediaLink` procedure as a transclusion of a tiddler would feel unnatural; there isn't really any //content// in a link to a Wikipedia page, so a transclusion that makes it look like you're getting legitimate content from your wiki is confusing.\\n\\nAnother case where procedures are often more convenient than parameterized field transclusions or templates is when you want to ''create several closely related snippets'', especially snippets that refer to each other. For instance, there are two related global procedures used internally by //Grok TiddlyWiki//, `gtw.link-chapter-name` and `gtw.link-chapter-number`. These can be used separately in wikitext, and `link-chapter-number` calls `link-chapter-name` to achieve its goal. It's handy to be able to keep these in the same tiddler ($:/sib/ReferenceMacros) and be able to see their definitions right next to each other, rather than having them spread over several tiddlers.\\n\\nOf course, you can put a procedure, function, macro, etc., inside a tiddler that you transclude, if that proves the easiest way to achieve something.\\n\\nThere is one thing that variables (and their brethren, procedures, functions, and macros) can achieve that field transclusions cannot, which is to ''have the same name refer to different things depending on context''. Since variables have scopes, you could, for instance, define the procedure `toc` to create one kind of table of contents in some places, and an entirely different kind in others, and use, say, the `\\\\import` pragma to select the appropriate one for each tiddler. This is not possible with field transclusions, since a tiddler field always has the same contents in a given wiki until you edit it. This is not something you're likely to want to do frequently, but once in a long while it could come in handy when digging deep into customizations of TiddlyWiki, so it seems worth mentioning.\\n\\n\\n!! Procedures vs. variables\\n\\nIt's perfectly fine to use a procedure (or a macro definition with `\\\\define` -- there's no difference if there are no parameters) to ''define a variable that you want to scope to the entire tiddler''. Sometimes this feels neater than having the whole tiddler wrapped in a `$let` widget.\\n\\nOf course, variables don't allow you to include parts that change in their wikitext, so they won't work at all in some cases.\\n\\n!! Procedures vs. custom widgets\\n\\nA custom widget actually //is// a procedure internally -- the only difference is the syntax you see in your wikitext. Typically, we prefer using a custom widget when some parameter we need to pass into the procedure is ''multiple lines long or contains quotes'', making it awkward to pass using normal procedure-call syntax.\\n\\nIf you want to [[override a built-in widget|Overriding Built-In Widgets]], as we'll learn about in the next chapter, you need to use the custom widget syntax to do that; a procedure won't do.\\n\\n!! Procedures vs. Macros\\n\\nIn new wikitext, it's usually recommended that macros only be used when text substitution makes life much easier, because procedures are safer and clearer.\\n\"},\"Classifying Tags\":{\"title\":\"Classifying Tags\",\"created\":\"20200607151655161\",\"description\":\"The colors and icons of tags can be customized to make it easier to tell tags with different functions apart.\",\"modified\":\"20241015001811625\",\"parent\":\"More Organizational Tools\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"When we use lots of tags in a wiki, it can become difficult to find the ones we want. In particular, we often end up using tags for multiple purposes, which can be somewhat confusing. Already in our example wiki, we're using tags to ''pick out types of tiddlers'' (e.g., meeting, contact, knowledge), to ''create hierarchies'', and to ''add miscellaneous bits of metadata'' to things (e.g., whether something is a software application).\\n\\nOne great way to tell apart tags used for different purposes is to add colors and icons to them. TiddlyWiki makes this easy to do using the <<textual-button \\\"tag-button\\\">> ''tag manager'', which you can find under the //Tools// tab in the sidebar.\\n\\nOne tricky point can be getting the same color across multiple tags, since the color picker does not save recently used colors. The easiest way is to pick a tag that already has the color you want, click the info button (//not// the color picker), and copy the hex code from the bottom (that's the bit that looks like `#000000`). Then you can paste that in for the new tag.\\n\\n\\n!! Exercises\\n\\n{{Ex:TagColoring||ExerciseTemplate}}\\n{{Ex:TagMetadataStorage||ExerciseTemplate}}\\n{{Ex:RedTagsFilter||ExerciseTemplate}}\\n\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\"},\"Comments\":{\"title\":\"Comments\",\"created\":\"20210117011508196\",\"description\":\"You can leave notes to yourself in your wikitext that don't appear in the output.\",\"modified\":\"20240614052821002\",\"parent\":\"Filtering and Formatting\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"As you start trying to build more complicated functionality in wikitext, you may sometimes want to keep some information in your wikitext that doesn't appear in the rendered output. For instance, you might want to remind yourself why you chose to use a certain filter or HTML tag, or keep a copy of an old filter around while tinkering on a new filter so that you can return to the old one if you mess something up.\\n\\nThis can be accomplished via ''comments''. TiddlyWiki piggybacks on HTML's comment syntax, which begins a comment section with `<!--` and ends it with `-->`. Comments can be used almost anywhere:\\n\\n{{Sn:HtmlComments||MagicSnippet}}\\n\\nNote, however, that comments cannot be placed inside other comments:\\n\\n{{Sn:NestedComments||MagicSnippet}}\\n\\nTurning what would otherwise be functional wikitext into a comment temporarily, preventing it from appearing in the output, is often called ''commenting out'' that wikitext.\\n\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\"},\"Common Filter Operators\":{\"title\":\"Common Filter Operators\",\"created\":\"20200603023508430\",\"description\":\"A small number of basic filter operators will handle many of your common needs.\",\"modified\":\"20240614051832482\",\"parent\":\"Filtering and Formatting\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"There are a lot of different filter operators available in TiddlyWiki -- as of this writing, 172 of them. Many if not most of them are very specific and rarely needed. So there's no need to learn them all; instead, anytime you can't remember the details of or don't know of an appropriate operator, you should review the comprehensive [[documentation|https://tiddlywiki.com/#Filter%20Operators]]. You might want to bookmark that page right now.\\n\\nThat said, the list can be overwhelming at first, and you probably don't want to have to review it every time you want to write a simple filter, so let's learn some of the most common operators.\\n\\n\\n!! Links\\n\\n* `backlinks[]`: Get all of the tiddlers that link to the input tiddler.\\n** //Example//: `[[JaneDoe]backlinks[]]` gets all tiddlers that link to Jane.\\n* `links[]`: Get all of the tiddlers that the input tiddler links to.\\n** //Example//: `[tag[Meeting]links[]]` finds all tiddlers that were mentioned in any meeting.\\n\\n!! Tags\\n\\n* `tag[X]`: Keep all of the input tiddlers that have the tag `X`.\\n** //Example//: `[tag[Application]]` finds all tiddlers tagged `Application`.\\n* `tagging[]`: Get all tiddlers in the wiki that are tagged with the input tiddler.\\n** //Example//: `[[Application]tagging[]]` is the same thing as `[tag[Application]]`.\\n** You need to use `tagging[]` instead of `tag[]` when you don't know what tag(s) you want to look for ahead of time. For instance, let's say we wanted to find all tiddlers that are part of any project. In our wiki, we decided to tag our projects `Project`, then tag the tiddlers that are part of that project with the project tiddler (e.g., the parts of the `OnboardingProject` are tagged `OnboardingProject`). So we could use the filter `[tag[Project]tagging[]]` -- the first filter step returns all project tiddlers, and the second step finds all the tiddlers that any of //those// tiddlers is tagging.\\n\\n!! Fields\\n\\n* `field:fieldname[value]`: Keep all of the input tiddlers that have a field called `fieldname` with a value of `value`.\\n** //Example//: `[field:phone[888-555-1234]]` returns `JaneDoe` because that's Jane's phone number.\\n** This usage is common enough that you can shorten it to `fieldname[value]`, provided that your field name doesn't conflict with another filter operator (for instance, if you had a field called `backlinks`, you would have to use `field:backlinks` to refer to that field, since there is a `backlinks` filter operator already).\\n* `contains:fieldname[value]`: Like `field:`, but treats the field as a [[list|Ordering Tiddlers]] containing multiple values, and only requires `value` to be one of the items in the list.\\n** //Example//: `[contains:family[JohnDoe]]` returns `JaneDoe` and `EmilyDoe` because both of them have John as a family member.\\n* `has[fieldname]`: Keep all of the input tiddlers that have a non-empty field called `fieldname`.\\n** //Example//: `[tag[Contact]!has[phone]]` finds any contact tiddlers we forgot to add phone numbers to.\\n** For filtering purposes, TiddlyWiki treats empty fields and nonexistent fields the same.\\n* `search:field1,field2[mysearch]`: Keep all of the input tiddlers whose `field1` or `field2` field matches the search query `mysearch`.\\n** Any number of fields can be listed in the suffix, separated by commas. The single suffix `*` searches all fields. If no suffix is provided, the `tags`, `title`, and `text` fields are searched.\\n** Multiple words in the search query are searched separately with all words required to be somewhere in the text, and case is ignored, so that `my search` will find the phrase “Search my wiki”, but not “Search here”. You can change this behavior by adding an additional suffix; see the [[documentation|https://tiddlywiki.com/#search%20Operator]] for details.\\n\\n!! Miscellaneous\\n\\n* `count[]`: Output a single value describing how many input tiddlers were passed to the operator.\\n** //Example//: `[tag[Meeting]count[]]` returns `3` if we have 3 tiddlers tagged `Meeting`.\\n* `sort[field]`: Sort the input tiddlers by `field`.\\n** //Example//: `[tag[Meeting]sort[at]]` shows all meetings from earliest to latest.\\n** The sort is not case-sensitive; uppercase and lowercase letters sort identically.\\n** Adding a `!` in front of `sort` reverses the order, showing all meetings from latest to earliest.\\n** Leaving out the field, writing just `sort[]`, sorts by the title.\\n* `get[field]`: Take all of the input tiddlers and output the //values// of the field `field` on those tiddlers.\\n** //Example//: `[[JaneDoe]get[email]]` yields Jane's email address.\\n\\n\\n!! Exercises\\n\\n{{Ex:CreatingMoreFilters||ExerciseTemplate}}\\n{{Ex:JohnDoeInAnyField||ExerciseTemplate}}\\n{{Ex:AlphabeticallyLastDescription||ExerciseTemplate}}\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\"},\"CommonTransclusionSyntax\":{\"title\":\"CommonTransclusionSyntax\",\"created\":\"20240928014613139\",\"modified\":\"20241016123030107\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<!-- Set version to 'first' for the initial version of the syntax, and 'second' for the later one with more info -->\\n\\\\parameters(version)\\n\\\\function .later() [<version>match[second]]\\n\\n<% if [<version>is[blank]] %>\\n  ''[WARNING: This tiddler is intended to be read transcluded with a `version` parameter in different places in the wiki depending on how much of this syntax you have learned by the section it appears in. Currently you are viewing this tiddler without any such parameter, and you may not be seeing all of the content in it.]''\\n<% endif %>\\n\\n!! Available in wikitext, attribute values, and filter expressions\\n\\nThe following types of references work within [[wikitext|Wikitext]], as the values of HTML or widget attributes, and within [[filter expressions|Filters and Transclusions]]. In filter expressions, you use only ''one of each type of bracket''. In wikitext and attribute values, you use two.\\n\\n; `[[square brackets]]`\\n: To link or refer to the title of a tiddler.\\n\\n; `<<angle brackets>>`\\n: To get the value of a [[variable|Variables]] or call a [[procedure|Procedures]]<% if [.later[]] %>, [[function|Functions]], or [[macro|Macros]]<% endif %>.\\n\\n; `{{curly braces}}`\\n: To [[transclude the value of|Field Transclusions]] a field of a tiddler.\\n\\n<ul>\\n  <li>`{{tiddler}}` to transclude the `text` field of a tiddler</li>\\n  <li>`{{tiddler!!field}}` to transclude a different field of a tiddler</li>\\n  <% if [.later[]] %><li>`{{tiddler##index}}` to transclude a property of a [[data tiddler|Data Tiddlers]]</li><% endif %>\\n  <li>`{{!!field}}` to transclude a field of the [[current tiddler|Templates and the Current Tiddler]]</li>\\n  <li>`{{tiddler||Template}}` to transclude a tiddler [[through a template|Templates and the Current Tiddler]]</li>\\n  <li>`{{||Template}}` to transclude the current tiddler through a template</li>\\n  <li>`{{tiddler|param1|param2|...}}` to transclude a tiddler with parameters (optionally with either `!!` or `||` syntax before the first `|` to transclude an arbitrary field or perform a template transclusion, respectively)</li>\\n</ul>\\n\\n!! Available only within wikitext and attribute values\\n\\n; `{{{ triple curly braces }}}`\\n: To select one or more tiddlers using a filter, [[then transclude them|Filters and Transclusions]]. You can think of this as the “super” or “extra powerful” version of normal double-brace transclusion, since it has one extra brace.\\n\\nThis form is not available inside another filter expression; if you need to nest filter expressions this way, store the results of the inner filter expression [[in a variable|Variables]] and then transclude the value of that variable into the outer filter expression.\\n\\n\\n!! Available only within attribute values\\n\\nBackticks can be used to combine constant text and variables and/or the results of filter expressions into a single attribute of a widget or HTML element.\\n\\n<dl>\\n  <dt><code>`<$widget attribute=`&#96;text with a $(variable)$ in it&#96;/></code></dt>\\n  <dd>To [[combine|Using Variables as Attributes]] constant text and one or more variables (in `$(these thingies)$`) into the value of an attribute</dd>\\n    <dt><code>`<$widget attribute=`&#96;text with a `${ [[filter expression]] } in it`&#96;/></code></dt>\\n    <dd>To combine constant text and the result of one or more filter expressions (in `${ these thingies }$` into the value of an attribute</dd>\\n</dl>\\n\\n<% if [.later[]] %>\\n\\n\\n!! Available only within macros\\n\\n[[Macros]] have special syntax to perform direct text substitution.\\n\\n* `<<angle brackets>>` refer to a variable without text substitution. (This is the same standard syntax available outside a macro and is included here for comparison with the following three items.)\\n* `<<__angle brackets with underscores__>>` refer to a parameter of the macro without text substitution. (In a procedure, you would just use normal `<<angle brackets>>`.) Inside a filter expression, use `<__single angle brackets but double underscores__>`.\\n* `$(parenthesized dollar signs)$` refer to a variable using text substitution.\\n* `$dollar signs$` refer to a parameter of the macro using text substitution.\\n\\nNeither the `<<variable>>` nor the `<<__parameter__>>` syntax works if the contents of your macro [[will not be wikified|Wikification]] where you intend to call it -- just as it doesn't work in a procedure.\\n\\n<% endif %>\"},\"Concept\":{\"title\":\"Concept\",\"created\":\"20200605171005334\",\"list\":\"Tiddlers Fields Wikitext Links Tags Filters Widgets Variables Procedures [[Field Transclusions]] Functions Macros [[Custom Widgets]] [[System Tiddlers]] Plugins [[Shadow Tiddlers]]\",\"modified\":\"20240928214252839\",\"tags\":\"Index\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Here is a concise listing of the sections introducing the most important concepts in TiddlyWiki. To see all chapters and sections in the book, visit the [[Outline]].\\n\\n<dl>\\n<$list filter=\\\"[all[tiddlers+shadows]tag[Concept]]\\\">\\n<dt><$link to={{!!title}}/></dt>\\n<dd>{{!!description}}</dd>\\n</$list>\\n</dl>\"},\"Conditional Expressions\":{\"title\":\"Conditional Expressions\",\"created\":\"20240829215208267\",\"description\":\"Conditional expressions make it easy to show part of a tiddler's wikitext only under certain conditions.\",\"modified\":\"20241016122737991\",\"parent\":\"Transclusion\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Often, we don't want to show all of the wikitext in a template on all tiddlers to which it's applied. Rather, we want to show parts of the wikitext ''only if some condition is true''.\\n\\nWe can achieve this using ''conditional expressions'' (or ''conditionals'' for short). Conditional expressions are based on [[filters|Filters]]. If the filter ''returns at least one result'', the contents of the conditional are rendered. Otherwise, nothing at all is rendered. The syntax looks like this:\\n\\n{{Sn:ConditionalExpressionsExample||MagicSnippet}}\\n\\nThe `match` [[filter operator|Anatomy of Filter Steps]] passes through any tiddler whose title exactly matches the `match` step's parameter, and filters out all other tiddlers. It's indispensable in many conditional filters. The `<storyTiddler>` variable retrieves the name of the tiddler which is currently being shown in the [[story river|The TiddlyWiki Interface]]. We have to use that in this snippet to get the expected result, rather than `<currentTiddler>`, because [[Grok TiddlyWiki snippets are their own tiddlers|Slicing Up Content]].\\n\\nYou can see that the filter in the first conditional returns a result, since the title of this tiddler is `Conditional Expressions`, so the contents of the conditional are rendered. The second returns no results, since the title is not `When Pigs Fly`, so nothing is rendered.\\n\\nNotice that a conditional expression looks much like an [[HTML]] element, except there are percent signs `%` right inside the angle brackets, and where you might expect to see `<% /if %>`, you instead see `<% endif %>`. The spaces inside the percent signs are optional, but as with the spaces inside `{{{ triple braces }}}`, your wikitext will quickly become very hard to read if you omit them!\\n\\nThe TiddlyWiki documentation calls this the “[[conditional shortcut syntax|https://tiddlywiki.com/#Conditional%20Shortcut%20Syntax]],” which is a big mouthful and hard to remember. In this book, we will call a use of this pattern //a conditional expression// or occasionally even just //a conditional//.\\n\\n\\n!! A real example\\n\\nIn [[Templates and the Current Tiddler]], we created a `ContactInformationTemplate`:\\n\\n```html\\n!! Information about {{!!title}}\\n\\n* ''Email'': {{!!email}}\\n* ''Phone'': {{!!phone}}\\n* ''Family'': {{!!family}}\\n* ''Manager'': {{!!manager}}\\n```\\n\\nThis template is nice as far as it goes, but it looks rather ugly when applied to a tiddler which is missing some of the fields, such as `ChrisSmith`:\\n\\n[img[chris-smith-empty.png]]\\n\\nIt would be cleaner to ''show each bullet point only if the field actually has a value''. To achieve this, we can add a conditional expression around each one:\\n\\n```html\\n!! Information about {{!!title}}\\n\\n<ul>\\n  <% if [all[current]has[email]] %>\\n    <li>''Email'': {{!!email}}</li>\\n  <% endif %>\\n  <% if [all[current]has[phone]] %>\\n    <li>''Phone'': {{!!phone}}</li>\\n  <% endif %>\\n  <% if [all[current]has[family]] %>\\n    <li>''Family'': {{!!family}}</li>\\n  <% endif %>\\n  <% if [all[current]has[manager]] %>\\n    <li>''Manager'': {{!!manager}}</li>\\n  <% endif %>\\n</ul>\\n```\\n\\nThe bodies of conditionals can be on one line or multiple lines, and they can contain arbitrary wikitext. Nevertheless, in this example, we needed to switch to using HTML for our list instead of wikitext syntax. The intervening conditionals would split up the bullet points into multiple lists if we used wikitext syntax, preventing them from displaying correctly (see also [[Block Mode and Inline Mode]], in an upcoming chapter).\\n\\n\\n!! Nesting and `else` clauses\\n\\nWhat if //none// of the contact fields are populated? In this case, we might want to provide a message saying that there is no contact information available, so we won't think something is wrong when we look at the template. To achieve this, we'll need to display something both if a condition is true //and// if it's false. We can do that by adding an ''`<% else %>` clause'' to the conditional, accompanied by an appropriate filter:\\n\\n```html\\n<% if [all[current]!has[email]!has[phone]!has[family]!has[manager]] %>\\n\\n  There is no contact information available for {{!!title}}.\\n\\n<% else %>\\n\\n  !! Information about {{!!title}}\\n\\n  <ul>\\n    <% if [all[current]has[email]] %>\\n      <li>''Email'': {{!!email}}</li>\\n    <% endif %>\\n    <% if [all[current]has[phone]] %>\\n      <li>''Phone'': {{!!phone}}</li>\\n    <% endif %>\\n    <% if [all[current]has[family]] %>\\n      <li>''Family'': {{!!family}}</li>\\n    <% endif %>\\n    <% if [all[current]has[manager]] %>\\n      <li>''Manager'': {{!!manager}}</li>\\n    <% endif %>\\n  </ul>\\n\\n<% endif %>\\n```\\n\\nNotice that we've nested the conditionals -- put more conditionals inside the `<% else %>` clause of the outer conditional. As with HTML tags, this is perfectly valid, and even common.\\n\\n\\n!! One gotcha to be aware of\\n\\nIn many places in TiddlyWiki, when you want to use a filter, you put it in `\\\"quotation marks\\\"`. No quotation marks are involved in a conditional expression, and if you inadvertently include them, the condition will //always// be true, no matter what the filter is:\\n\\n{{Sn:WhenPigsFlyQuotation||MagicSnippet}}\\n\\nThis can be quite perplexing if you've never seen it before! What's happening is that you're turning the entire filter expression into a single literal tiddler name -- namely, a tiddler called `[<storyTiddler>match[When Pigs Fly]]`. A single tiddler name is a valid filter expression which outputs itself when evaluated, so we get a result, and the contents of the conditional are rendered.\\n\\n!! Exercises\\n\\n{{Ex:LocalCalls||ExerciseTemplate}}\\n{{Ex:ConditionalProcedure||ExerciseTemplate}}\\n{{Ex:ConditionalProcedureContinued||ExerciseTemplate}}\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\"},\"Contact Tiddlers\":{\"title\":\"Contact Tiddlers\",\"created\":\"20200530203548943\",\"description\":\"How to track the people we meet at work, linking to the ideas they're involved in and modeling their attributes as discrete fields of information.\",\"modified\":\"20241015000547177\",\"parent\":\"The Shape of TiddlyWiki\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"The second tiddler type to consider is the ''contact''. Let's create a contact and explore how we can organize contact information.\\n\\n!! Creating a contact tiddler\\n\\nStart by adding a [[link|Links]] to a contact to your [[journal tiddler|Journal Tiddlers]]. As a reminder, to edit an existing tiddler, click the pencil icon in the upper-right corner of the tiddler.\\n\\nRecall that to create a link, you surround the name of the tiddler you want to link to with `[[double square brackets]]`, or, if you've turned on the appropriate option, write the text in [[CamelCase]]. Since we [[turned on this option|Tweaking Your Settings]] and I like CamelCase for personal notes for its simplicity of use, we'll try that. (Note that `JaneDoe` doesn't appear as a link in the following live example, because this book's wiki has CamelCase linking turned off -- but it will when you paste it into your own wiki, because we turned it on there.)\\n\\n{{Sn:JaneDoeJournalStart||MagicSnippet}}\\n\\nWhen you type or paste this into your journal tiddler, if you have the live preview open you'll see the text `JaneDoe` immediately change color to indicate a link. It will be in italics, which indicates the tiddler doesn't yet exist. Let's click the link to open the nonexistent tiddler, then click the edit button to create it.\\n\\nWe'll want to tag our contacts `Contact`, so go ahead and click in the //Tag name// box under the title, type `Contact`, and press Enter. A <<tag-pill Contact>> tag pill will appear. Notice the drop-down menu that allows you to select an existing tag; you can continue typing to filter the list of tags, and use the up and down arrow keys and the Enter key to pick a tag from the list.\\n\\nWe don't necessarily even have to add any content to Jane's tiddler. Maybe to start with, we just want to let TiddlyWiki know that ''Jane is a contact''. So let's save the tiddler; either use the check icon <<textual-button \\\"done-button\\\">> again, or press Control+Enter (if you don't learn any other keyboard shortcuts, this is a really helpful one). If you look back up at the journal tiddler, you'll see that `JaneDoe` is no longer in italics, meaning that tiddler now exists.\\n\\n(There is a bug in TiddlyWiki 5.3.5 that can cause italics to not be immediately removed from newly created tiddlers. If this happens, closing and reopening the tiddler should resolve the issue. Hopefully this will be fixed soon!)\\n\\n\\n!! Finding what Jane is involved in\\n\\nLet's imagine that, a week into your new job, you remember that you did something important with Jane in your action-packed first couple of days, but you can't for the life of you remember what or on which day. How do you figure out where that information went?\\n\\nSince TiddlyWiki keeps track of ''backlinks'', as long as we remembered to link to `JaneDoe` rather than just saying plain old “Jane Doe,” we can easily find everywhere we mentioned Jane. Click on the info button <<textual-button \\\"info-button\\\">> on the `JaneDoe` tiddler, then the //Backlinks// tab, and voilà, you'll see the journal tiddler show up, with a link directly to it. (If you don't see the info button, look in the menu under the more button <<textual-button \\\"down-arrow\\\">>; we made the info button show directly on the view toolbar in [[Tweaking Your Settings]].)\\n\\nBecause of this linking functionality, it's a smart idea to //always// link to people's names in your notes when you mention them, unless you explicitly don't want to find that mention of them when looking them up. The same goes for meetings, software applications, or any other concepts you might plausibly want to find mentions of. You don't need to actually create a tiddler for the concept for this to work -- you can get the backlinks even of a nonexistent tiddler.\\n\\nYou might be wondering why you wouldn't just search for the name of the person, application, or concept to find mentions of it. You certainly could, but unless the name of the concept is extremely unusual and there's only one form of the name, search is subject to both false positives (places where you used the word “Jane” but weren't talking about Jane Doe) and false negatives (places where you called Jane by a nickname, so they don't show up in the search). Explicitly created links never get missed, and they're only spurious if you were mistaken when you added them, so if you create the links yourself, you can ''be assured your lists are exactly correct'', making later searches much more efficient.\\n\\n\\n!! Adding some information about Jane\\n\\nWe said back in our requirements that we wanted to keep track of some information about Jane, not just be able to look up places we talked about her. Here's what I wrote:\\n\\n> Keep track of people we meet, their contact information, their managers, anyone else at the company they're related to, what they do, and what projects they're involved in.\\n\\nWe've already satisfied “keep track of people we meet” by mentioning Jane in our journal and creating a tiddler for her, and we'll satisfy “what projects they're involved in” by linking to Jane's tiddler from the relevant projects, once we create them. For “what they do,” let's put a brief description of Jane and her role in the company in the text of the tiddler:\\n\\n```html\\nJane works in the HR department managing the employee information system and onboarding new hires.\\n```\\n\\nEasy enough, but hold up just a second -- are there other things we might want to link to? TiddlyWiki's power is directly proportional to the amount of care you put into linking together and otherwise relating ideas, so it's worth being thoughtful here.\\n\\nI see at least two distinct concepts here that we might want to keep notes on, the HR department and the employee information system. You could argue that the onboarding process for this company is a concept as well. It's up to you whether these are ideas you'll want to keep track of, but if they are, you'll want to link to them. (This is one case where it's not so effective to create structure retroactively once you decide you need it: if you've created fifteen tiddlers that refer to the employee information system without calling it out as a concept, you have to go back and relink all of them once you realize they should be related. Further, you quite likely didn't use the same words to refer to the system in every case, so a search might not be that effective at finding all the instances. You may not even know it would be useful to //have// these relationships unless you've been linking as you go along!)\\n\\nFor our purposes, let's say we don't really care about keeping track of every note that discusses the HR department, nor about keeping notes about the department itself, so we'll leave that one off. However, the employee information system is probably going to be important, so let's link that one up by putting it in CamelCase. \\n\\n```html\\nJane works in the HR department managing the EmployeeInformationSystem and onboarding new hires.\\n```\\n\\nYou'll notice the link is in italics again since we haven't created the tiddler. It's up to you how fussy you want to be about creating tiddlers once you link to them. Many people like to leave them missing, and add content only when they have some content to put in them. Others prefer to create them immediately with some dummy content, or no content, so that it's more obvious if they misspell a concept the second time (if it shows up missing and it's something you think you would have referred to previously, that's a red flag). Personally, I generally create missing tiddlers once I know some tags that apply to them (e.g., Jane is a `Contact`), or once I have some useful content to put in them.\\n\\nOne more thing here: you might notice that I didn't link to `JaneDoe`, I just wrote “Jane,” even though I said just a little while ago that it was best practice to always link to contacts. That's because it's a pet peeve of mine to see a link to the current tiddler //within that tiddler// (since you're already there, if you click on it, nothing happens). So this is the one exception. If you're not as fussy as I am, you might just make it a habit to always link.\\n\\n!! Adding fields\\n\\nThere were a couple more pieces of information about Jane we wanted to keep track of:\\n\\n* contact information\\n* relationships to other people at the company -- manager and family\\n\\nSince this is a textbook example, let's keep life simple and say that at our company, email address and company phone number are the only contact information we need to know. We'll also consider only one type of “family relation,” whether it's the person's spouse, child, or third cousin twice removed.\\n\\nWe could just write this information in the text of the tiddler. However, as we create more contacts, it's likely we'd end up doing that in a slightly different way on each contact's tiddler. As a result, if we later decided we wanted to get a list of all the phone numbers of our contacts, we'd have to go through and pick them out manually. If we instead put each piece of information in a separate [[field|Fields]], we can easily search on or reference just that information from elsewhere in the wiki -- for instance, we could find everyone whose phone number starts with the area code 612, or create a table of all our contacts and their email addresses. You'll see much more on this later.\\n\\nSo let's create some fields. We can map the information onto fields this way:\\n\\n|!Name|!Value|\\n|`email`|`janedoe@company.com`|\\n|`phone`|`888-555-1234`|\\n|`manager`|`ChrisSmith`|\\n|`family`|`JohnDoe EmilyDoe`|\\n\\nTo actually add the fields, look under the text of the tiddler where it says //Add a new field//, fill in the //field name// and //field value// textboxes as appropriate, and click the //add// button or press the Enter key.\\n\\nA couple of notes about fields:\\n\\n* We'll want to be sure we ''use the same field names'' on every contact tiddler, or else we won't be able to cross-reference the values across different tiddlers. The drop-down for //field name// will show the names you've used in the past to reduce the chances of misremembering what you called it. Like tiddler names, field names are case-sensitive.\\n* Similarly, it's a good idea to be sure to use a ''consistent format'' across all tiddlers. For instance, for the phone number, decide that you use the `nnn-nnn-nnnn` format, rather than `nnnnnnnnnn` or `(nnn) nnn-nnnn`, and then use that across all contact tiddlers.\\n* The `family` field is an example of a ''tiddler list'' (or just ''list''), which consists of tiddler names separated by spaces. If your tiddler names have spaces in them, you put each tiddler name in double square brackets as if it were a link: `[[John Doe]] [[Emily Doe]]`. TiddlyWiki understands that lists are a series of separate tiddler names and can work with the values individually. We'll learn [[more about lists|Ordering Tiddlers]] in the next chapter.\\n*  Field names conventionally ''contain only lowercase letters and hyphens'' (`-`). (Once upon a time, other characters were entirely disallowed.) Unless you have a good reason to do something else, it makes sense to follow this convention; aside from it being common practice, this draws a clear distinction between tiddler names (usually capitalized) and field names (usually lowercase), and any [[filters|Filters]] you write will be cleaner.\\n\\nGo ahead and save the `JaneDoe` tiddler. You'll see that your custom fields don't show up anywhere on the tiddler itself, but if you click the info button <<textual-button \\\"info-button\\\">> and then the //Fields// tab, they'll appear there.\\n\\n!! Outstanding issues\\n\\nYou've probably noticed there are some annoying things about our implementation of contacts. These include:\\n\\n# ''You can't see the fields'' with Jane's contact information on the tiddler. Having to click the info button and then the //Fields// tab just to see Jane's phone number might annoy you. We'll solve this in an [[exercise|Ex:JaneDataTransclusion]] in chapter 4.\\n# Further, the people in the `family` and `manager` fields shown in the info area ''aren't linked'', so you'd have to go search for them if you wanted more information. The exercise mentioned in #1 will solve this issue too.\\n# You ''have to remember to add the fields'' every time you create a contact, and there is no prompting about what information to include in the field. We'll discuss how to create custom buttons that [[create tiddlers with prefilled fields|Creating Tiddlers With Predefined Fields]] in chapter 6.\\n\\nFor now, we have a working if suboptimal implementation of contacts, so let's proceed to creating some more tiddler types.\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\"},\"Copyright\":{\"title\":\"Copyright\",\"created\":\"20210322221603280\",\"description\":\"Legal notices and information on redistributing //Grok TiddlyWiki//.\",\"modified\":\"20220103163329694\",\"parent\":\"Appendices\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Content copyright © 2021--<<now YYYY>> Soren Bjornstad. The TiddlyWiki core and the plugins found in this wiki belong to their respective owners and are used under license.\\n\\n//Grok TiddlyWiki//, including all custom TiddlyWiki templates and logic found in the wiki under `$:/sib/` and `$:/plugins/sobjornstad/`, is available under the ''CC BY-NC-ND 4.0'' [[license|https://creativecommons.org/licenses/by-nc-nd/4.0/?ref=chooser-v1]]. In summary, this means you are free to copy and share it with whomever you want, and to modify and remix it for your own personal use. You may //not// distribute all or part of //Grok TiddlyWiki// or its custom logic commercially, nor modify or adapt it and distribute a modified version, without first getting my permission. And while I have tried my best to be understandable and accurate, //Grok TiddlyWiki// is offered as-is with no warranty, and I will not be liable for any consequences that may arise from your use or redistribution of this free resource.\\n\\nIf you are interested in commercially distributing or adapting //Grok TiddlyWiki// in some way, or in using TakeAway for your own project, [[let's talk|https://sorenbjornstad.com/contact]].\\n\\nSome of the plugins found in the wiki, as well as the TiddlyWiki core itself, are available under licenses other than CC BY-NC-ND 4.0 -- either the MIT license or the 3-clause BSD license. Both of these licenses allow for freer use than CC BY-NC-ND 4.0, so this should not pose any difficulty, but it is ultimately your legal responsibility to ensure you comply with those licenses as well when redistributing //Grok TiddlyWiki//.\\n\\nThe summary above is for your convenience only and does not alter or supersede the text of any of these licenses, nor does it constitute legal advice. See the full licenses for your exact rights and obligations.\\n\\nThis is version ''{{Metadata##version}}'' of GTW. The latest version can always be found at https://groktiddlywiki.com.\\n\\n<p class=\\\"gtw-cc-copyright\\\" xmlns:cc=\\\"http://creativecommons.org/ns#\\\" xmlns:dct=\\\"http://purl.org/dc/terms/\\\"><a class=\\\"tc-tiddlylink-external\\\" property=\\\"dct:title\\\" rel=\\\"cc:attributionURL\\\" href=\\\"https://groktiddlywiki.com\\\">Grok TiddlyWiki</a> by <a class=\\\"tc-tiddlylink-external\\\" rel=\\\"cc:attributionURL dct:creator\\\" property=\\\"cc:attributionName\\\" href=\\\"https://sorenbjornstad.com\\\">Soren Bjornstad</a> is licensed under <a class=\\\"tc-tiddlylink-external\\\" href=\\\"http://creativecommons.org/licenses/by-nc-nd/4.0/?ref=chooser-v1\\\" target=\\\"_blank\\\" rel=\\\"license noopener noreferrer\\\" style=\\\"display:inline-block;\\\">CC BY-NC-ND 4.0.<img style=\\\"height:22px!important;margin-left:3px;vertical-align:text-bottom;\\\" src=\\\"https://mirrors.creativecommons.org/presskit/icons/cc.svg?ref=chooser-v1\\\"><img style=\\\"height:22px!important;margin-left:3px;vertical-align:text-bottom;\\\" src=\\\"https://mirrors.creativecommons.org/presskit/icons/by.svg?ref=chooser-v1\\\"><img style=\\\"height:22px!important;margin-left:3px;vertical-align:text-bottom;\\\" src=\\\"https://mirrors.creativecommons.org/presskit/icons/nc.svg?ref=chooser-v1\\\"><img style=\\\"height:22px!important;margin-left:3px;vertical-align:text-bottom;\\\" src=\\\"https://mirrors.creativecommons.org/presskit/icons/nd.svg?ref=chooser-v1\\\"></a></p>\\n\\n<style>\\n.gtw-cc-copyright {\\n  border: 1px solid;\\n  padding: 5px;\\n  text-align: center;\\n}\\n</style>\"},\"Creating Evergreen Notes\":{\"title\":\"Creating Evergreen Notes\",\"created\":\"20200603023508505\",\"description\":\"TiddlyWiki can prevent your old notes from withering and being lost when you use its features appropriately.\",\"modified\":\"20210502173906498\",\"parent\":\"Filing and Organizing\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"A recent exercise, [[Ex:FudgeAdviceReflection]], brings up some crucial points about how we organize our notes -- less about TiddlyWiki than about notes, but germane to TiddlyWiki. You can use TiddlyWiki without thinking about these points, but you'll be missing a lot of its value if you do. (If you're using TiddlyWiki for a purpose other than taking notes, some of this section may not apply, but most of it will likely still be helpful; you may just need to think a little bit about how it applies to your use case.)\\n\\nIf you skipped the last two exercises in [[Creating Hierarchies with a Table of Contents]], go back and do them (the last one follows on from the penultimate one). Then let's review what we did. We were in the `EmployeeProfileSetupMeeting`, and we extracted a tiddler for a part of that meeting in which Jane told us to be careful about using the word “fudge.” We then made it a child -- a hierarchical subcomponent -- of that meeting.\\n\\nThis section might be about to make you realize that, over your lifetime, you've lost track of a great deal of useful information that you could have saved, so buckle up!\\n\\n!! Why notes shouldn't stay where they're taken\\n\\nLet's think about what we did with the fudge note for a moment. Why did we take the time to write down this piece of information anyway? I don't know your motivation for keeping notes, and maybe you've never even thought about it, but mine for making this note would go something like this. I hope that the notes will have one or more of these functions:\\n\\n# ''Integration'': The act of making the note will help me think harder about the ideas in it and how they relate to what I already know, thus increasing my chance of remembering it without needing the notes at all.\\n# ''Reference'': When I'm about to talk about fudge in the future, even though I don't remember exactly what I needed to be careful about, I'll remember there was something about fudge that I made a note of, and I can then look it up.\\n# ''Serendipity'': The note about fudge will end up in a location where I happen across it at a time when it's relevant, even if I have completely forgotten the information existed at all (perhaps when I'm making plans to send an email to the whole office about getting fudge).\\n\\nI am guessing that your motivation is not altogether different.\\n\\nNone of these purposes are particularly well-served by keeping Jane's useful social tip ''within the notes about the meeting''. This may sound like an odd idea, because most people never move notes after they take them, and they take them in chronological bursts, perhaps divided into categories (e.g., a “meetings” notebook, a “project planning” notebook, a “calculus class” notebook). But think about it:\\n\\n* In scenario (2), unless the situation in which Jane told us this information was particularly unusual or shocking, it's highly unlikely that a month from now we'll remember that Jane was the one who gave it to us in this particular onboarding meeting and know to look in this meeting's notes for the information.\\n* In scenario (3), the chance we will stumble upon this meeting's notes again while writing new notes about fudge is similarly small.\\n* The concern with scenario (1) is less obvious, but if we spend some time making sure all of our notes are in the right place, chances are that will force us to [[think about the notes more thoroughly and connect them to related things we know about|https://en.wikipedia.org/wiki/Memory_rehearsal#Elaborative_rehearsal]], which means we're much more likely to remember them later.\\n\\nYou might object that we could just do a [[search|Searching]] for “fudge” to find it, so it doesn't matter where it is. I'm not bashing full-text search, because it's a fantastically useful tool, but it only goes so far. First of all, it only helps at all for scenario (2). No matter how good the search is, it doesn't help you find things you didn't know you were looking for, as in scenario (3), nor does it improve your memory, as in scenario (1). Second, while this is all fine at first, once you have several years of detailed notes, full-text search becomes considerably less helpful -- there are just too many matches to wade through for common words. (Most people have never been able to take notes that actually scale this far, so they haven't experienced this phenomenon!)\\n\\n(Sidebar: Machine-learning tools may be able to help suggest related notes in the future, as well as offering more intelligent options for full-text searches, thus helping with both (2) and (3), but the technology hasn't been tested in small-scale databases like personal notes yet as far as I'm aware, and it seems unlikely to ever do as well as relationships you describe yourself.)\\n\\n!! Making notes evergreen\\n\\nAn important insight when organizing notes is that ''the context in which you learn something is usually not the one in which that information is useful long-term''. New and interesting ideas usually consist of placing an existing idea in a new context, and unless you're taking an exam, even ideas you need to regurgitate unmodified are unlikely to be needed exactly in their original context. (You don't need to know the Pythagorean Theorem when you're looking at your math textbook; you need to know it when you have the dimensions of a room in your new house and want to figure out how much space your couch will take up if you put it diagonally in a corner.) Therefore, your goal when taking notes should be to ''put the idea in the context where it will be most useful'', rather than the context where you learned it.\\n\\nOf course, you're unlikely to know ahead of time precisely what that most useful context will be -- after all, if you did, you'd already have your next great idea. To approximate this ideal, we should:\\n\\n# Strive to place each note in a ''retrieval context'', i.e., one which will be permanently applicable and which will make sense when we are looking for the note.\\n# Relate the note to ''as many relevant things as possible'' to increase the chance of serendipitous associations later.\\n# Regularly ''return to each note'' to add additional links, insights, and references and move content around. Your thoughts change over time; your notes should change with them.\\n\\n[[Andy Matuschak|https://notes.andymatuschak.org/]] calls notes that follow this pattern ''evergreen notes''. These notes evolve and stay relevant, meaningful, and accessible over time, as opposed to traditional notes, which wither and die shortly after they're created as the original context ceases to matter. In his book //How to Take Smart Notes//, Sönke Ahrens likens the traditional note-taking pattern of storing notes chronologically to keeping your pants with your bleach because you bought them on the same day: chronology doesn't help you create any useful order here.\\n\\n!! Applying the principles\\n\\nLet's take each of the considerations for creating evergreen notes one at a time. First, the ''retrieval context''. The context we put a note in should be //permanently applicable// and //relevant to the situations where the note would be useful//.\\n\\nClearly, the meeting with Jane is not a permanently applicable context; once a meeting has happened, unless it made a truly remarkable impression or went down in company history for some reason, it's likely to be entirely forgotten within a week or two. The applicable contexts here are probably something like “things to be careful about at this company,” “bringing food to the office,” and maybe “fudge” (though you're unlikely to need a great deal of information about fudge at the office, you might want some in a more general wiki that included your favorite recipes).\\n\\nIn addition to being permanently applicable, the context should be one in which the note will actually be useful. We won't of course know exactly how the note will be useful in advance, so this can't be an exact science, but it's all too common to see people tag or otherwise classify their notes based on useless criteria. For instance, in the exercise that spawned this whole section, the scenario said that this was advice Jane gave us that shouldn't stray. We might then choose to classify this as “advice someone gave us that we shouldn't share” -- but this is a useless context. There is no situation in which we would plausibly say, “Hmm, what's some advice I've gotten at this company that I shouldn't tell John about?” These useless contexts not only waste our time but also make it harder to identify the most important parts of the note every time we return to it.\\n\\nIn TiddlyWiki, we'll want to add links or tags to put the item in appropriate contexts. A “things to be careful about” tag sounds like a grand idea: as we're starting the job, every time we hear about or experience a sore or touchy point, we can make a tiddler describing it, and we can periodically review the contents and have them as a reference if something catches our attention. (“Wait, fudge? I'm getting a bad feeling about this.”) Let's go ahead and add such a tag to the fudge tiddler. The tag tiddler won't exist yet, but that's fine -- if we later find content we should include in it, we can create it then.\\n\\nSecond, ''relating the item to as many relevant things as possible''. By now you have identified at least one sensible retrieval context for the item. But we want to put the item into multiple retrieval contexts, since we do not know which one it will be useful in later, and doing this may require taking a few moments to sit and think about what concepts it's related to. Certainly, if you spot any phrases in the text of your tiddler that might make good links, you can use those. But if you stop to think about it, you might also recognize connections to other things you've been working on or pondering that the text doesn't currently allude to. Add those links or tags in too. If it's not immediately obvious how some interesting but vague connection relates to the current tiddler and I'm not moved to spend a lot of time thinking about it, I often write something like `Cf. OtherTiddler` at the bottom of the tiddler.\\n\\nIf you feel like it, or if there's a particularly strong connection between the two notes, you can go to the tiddler at the other end of the link and see if it makes sense to work a mention to this tiddler into that as well. However, since TiddlyWiki will automatically list this tiddler as a backlink on the other tiddler, this isn't critical.\\n\\nLast, ''continuing to evolve our notes in the future''. The first two principles make it possible to continually revisit and improve on our notes by ensuring that we'll regularly encounter the notes whenever they're relevant. But it's this final item -- revisiting and improving on our notes over time, and deleting them if they are clearly never going to be useful again -- that really makes them //evergreen// and prevents them from decaying into uselessness.\\n\\nFortunately, TiddlyWiki is a low-friction editing environment: if we spot something that could use additional information, is related to another topic but doesn't have a link, or has gone out of date, all we have to do is click on the edit button and fix it. Do this! Notes that are out of date aren't useful, and the more out-of-date notes you have, the less useful the system as a whole becomes and the less motivated you'll be to refer to it and keep it updated. If you spot something wrong, fix it immediately. The [[broken windows theory|https://en.wikipedia.org/wiki/Broken_windows_theory]] definitely applies to notes.\\n\\n\\n!! What notes should be evergreen?\\n\\nCreating and maintaining evergreen notes, as you can see, requires some effort. If you like being creative, having useful ideas, and keeping the most important information for your work close at hand, this effort is worth it. However, it's also important not to spend our time rereading and carefully maintaining useless notes; not only is this a waste of time, it makes our work dull and draws our attention away from the ideas that matter.\\n\\nA lot of notes don't deserve to become evergreen; they //should// wither and die. Your brain does this: if something's inconsequential in the long term, you forget it. So your notes should do the same. Since computers don't automatically prune the information we put into them, you have to expend a little bit of conscious effort to help them along.\\n\\nThe question to ask yourself when you review notes on a meeting or a task you completed or a random thought you had in the shower is: ''do I want this idea to outlive the day?'' If the answer is yes, figure out how to pull that idea out into a tiddler of its own (or maybe integrate it into an existing tiddler). If the answer is no, save your time for a more valuable endeavor and leave the idea where it sits. If later you still remember that you had it and realize you badly need it, you'll probably be able to find it eventually with some searching and some manual effort. If not, as will happen over 99% of the time, your notes and your brain will have that much less useless clutter in them.\\n\\n!! Exercises\\n\\n{{Ex:FudgeTiddlerRevisited||ExerciseTemplate}}\\n{{Ex:IdentifyingRecentEvergreenNotes||ExerciseTemplate}}\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\"},\"Creating Hierarchies with a Table of Contents\":{\"title\":\"Creating Hierarchies with a Table of Contents\",\"created\":\"20200603023508492\",\"description\":\"TiddlyWiki can produce hierarchical tables of contents from tag structures.\",\"modified\":\"20240727195521568\",\"parent\":\"Filing and Organizing\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Being able to browse by tags and links is nice. For many use cases that's enough, and indeed it's often better not to tie ourselves into trying to organize all of our notes into a single hierarchy. Sometimes, though, we have a cluster of notes about a particular topic that ''naturally forms into a hierarchy'' -- for example, an individual project -- and being able to view that hierarchy in a table of contents is a valuable way to see an overview of the topic. And certain applications of TiddlyWiki, such as writing a book, really do benefit from a hierarchy covering the entire contents of the wiki.\\n\\nImportant disclaimer: you can only use the built-in table-of-contents functionality with a hierarchy built out of tags, not one built out of fields or links. Fortunately, that's how we chose to do it in our example wiki. The TiddlyWiki Locator [[plugin|Plugins]] is useful if you need more powerful tools, including navigating hierarchies built of fields or links.\\n\\n\\n!! Creating structure tiddlers\\n\\nLet's look at how we can create a table of contents for our onboarding project. We'll begin by creating some basic structure underneath it. Let's say the project is broadly divided into three parts. We'll need to create a tiddler for each of these parts to define the hierarchy:\\n\\n* HR stuff about the company and government-mandated training -- `OnboardingHr`\\n* Introductions and social events/notes -- `OnboardingPeople`\\n* Training for the position -- `OnboardingTraining`\\n\\nGo ahead and create those three tiddlers and tag them `OnboardingProcess`, thus marking them as direct members of the idea `OnboardingProcess`. Rather than create new tiddlers and tag them manually, here's a handy timesaver: click the more drop-down <<textual-button \\\"down-arrow\\\">> on the `OnboardingProcess` tiddler and choose <<textual-button \\\"new-here-button\\\">> //New here//. A new tiddler will open, already tagged `OnboardingProcess`.\\n\\nThere's no need to put any content in the tiddlers for the time being. If we later find we need to give an overview of that part of the onboarding process, or we have information about it that doesn't seem to deserve its own tiddler, we can add it at that time.\\n\\n!! Creating the table of contents\\n\\nThe most basic table of contents is created with the wikitext `<<toc \\\"Root\\\">>`, where `Root` is the name of the tiddler you want the table of contents to start at. In our case, this will be:\\n\\n```html\\n<<toc \\\"OnboardingProcess\\\">>\\n```\\n\\nThe funny double angle brackets `<<>>` introduce a reference to a [[variable|Variables]]. You don't need to worry about what that is for now; we'll learn a whole lot more about them in [[Chapter 4|Transclusion]].\\n\\nGo ahead and edit the `OnboardingProcess` tiddler and drop that snippet in. You'll see that a numbered list of the items tagged `OnboardingProcess` shows up. But oops, the `EmployeeProfileSetupMeeting` probably doesn't belong at the top level now that we've added our three subparts of the onboarding project. It makes more sense to have it in `OnboardingHr`, agreed? Let's open the `EmployeeProfileSetupMeeting`, remove the `OnboardingProcess` tag, and add the `OnboardingHr` tag. If we save it and go back up to `OnboardingProcess` now, we'll see that now it's indented into a second level.\\n\\nThis is great, but what happens if we have a project tiddler that has dozens of tiddlers in it? This list is going to get long really fast! Try changing the code to this:\\n\\n```html\\n<<toc-expandable \\\"OnboardingProcess\\\">>\\n```\\n\\nYou'll see that only the topmost level of the hierarchy is displayed now, and little chevrons <<textual-button \\\"right-arrow\\\">> appear next to the items. If you click the chevron by `OnboardingHr`, it turns to point down <<textual-button \\\"down-arrow\\\">> and the next level shows up.\\n\\nBut wait…why are there chevrons next to `OnboardingPeople` and `OnboardingTraining`? Those don't have any content yet! If you click on one of them, you'll see that the chevron changes direction but nothing else happens. That's irritating, isn't it?\\n\\nAll right, third time's the charm:\\n\\n```html\\n<<toc-selective-expandable \\\"OnboardingProcess\\\">>\\n```\\n\\nAh, that's better! (If only it were so easy to solve annoying behavior in all of tech.) Now the chevrons only show up by the elements that can actually be expanded.\\n\\n<$details summary=\\\"Straight quotes and curly quotes\\\">\\n\\nThere are many types of quotation marks available on computers. The most common are \\\"straight quotes\\\" (available on most keyboards), where the opening and closing marks are identical, and “curly quotes,” where there are two different characters that point inward towards the quoted text. Curly quotes are preferable in text – you would never see straight quotes in a published book, for instance. But curly quotes aren't valid in most computer code, including [[wikitext|Wikitext]].\\n\\nIn the examples above, for instance, if we had instead written:\\n\\n```html\\n<<toc-expandable “OnboardingProcess”>>\\n```\\n\\n...this would not work correctly.\\n\\nIf you just type the quotation mark key on your keyboard when writing wikitext directly in TiddlyWiki, you'll usually be OK. However, if you write wikitext in another app, like Microsoft Word, and then try to paste it into TiddlyWiki, it's possible that app will automatically convert your straight quotes to curly quotes, and then your wikitext will mysteriously not work. In this case, you'll need to backspace the quotation marks and add new straight ones when you paste.\\n\\nA similar problem occurs on some Mac and iOS devices, which may be configured to automatically convert straight quotes to curly quotes in text entry fields across all applications, potentially including your web browser. If you find this happening on the Mac, you can turn it off by unchecking //Edit > Substitutions > Smart Quotes// on your menu bar.\\n\\n</$details>\\n\\n\\n!! Ordering items\\n\\nYou might be wondering whether we can change the order of the items under each branch of the table of contents. TiddlyWiki has a general mechanism for ordering the tiddlers of a particular tag, and this order, once established, will be respected in many places, including tables of contents. We'll learn about this mechanism in the next section, [[Ordering Tiddlers]].\\n\\n\\n!! Exercises\\n\\n{{Ex:TocAddition||ExerciseTemplate}}\\n{{Ex:TocInternalExternalNav||ExerciseTemplate}}\\n{{Ex:TocCaptions||ExerciseTemplate}}\\n{{Ex:FudgeAdviceTiddler||ExerciseTemplate}}\\n{{Ex:FudgeAdviceReflection||ExerciseTemplate}}\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\"},\"Creating Plugins\":{\"title\":\"Creating Plugins\",\"created\":\"20201124224911613\",\"description\":\"You can share your custom TiddlyWiki tools with other wikis and users by extracting them into plugins.\",\"modified\":\"20241017011414083\",\"parent\":\"Getting Technical\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"If you've developed some functionality in [[System Tiddlers]] in your wiki that you think others might get some use out of, you may wish to ''package them'' as a [[plugin|Plugins]] to make them easier to distribute.\\n\\n(Actually, you can distribute //any// content in plugins, system tiddlers or not. Plugins are rarely used for anything other than common wiki functionality, but you might be able to come up with some creative uses. For instance, //Grok TiddlyWiki// distributes most of its content as a plugin. This takes advantage of the [[shadowing|Shadow Tiddlers]] mechanism to allow readers to update their books by importing a new version while leaving any changes they may have made in place.)\\n\\n\\n!! Folder structure and metadata\\n\\nPlugin development is usually more convenient on the Node.js version of TiddlyWiki, so begin by [[installing that|https://tiddlywiki.com/#GettingStarted%20-%20Node.js]] if you don't already have it. (If you don't want to use Node.js, you can use the [[Tinka|https://tinkaplugin.github.io/]] plugin. Yes, it's a plugin that helps you create plugins.)\\n\\n''Create a new folder wiki'' to house your plugin. You'll use this wiki to document the features of the plugin as well.\\n\\nWithin the folder wiki, next to the `tiddlywiki.info` file, there is a `plugins` directory (if it doesn't exist yet, you can create it). ''Create a new directory'' here for your plugin, like you would if you were installing a third-party plugin. To this directory, ''add the tiddlers'' you want to bundle in the plugin. You can organize them into subfolders if you like, but note that this will have no impact on the hierarchy of the system tiddlers within the wiki -- the `title` field of each tiddler is the sole determiner of what the tiddlers are called.\\n\\nThen ''add a `plugin.info` file'' with some metadata in the plugin's folder (edit as appropriate for your plugin):\\n\\n```json\\n{\\n    \\\"title\\\": \\\"$:/plugins/yourname/pluginname\\\",\\n    \\\"description\\\": \\\"summary of the plugin's purpose\\\",\\n    \\\"author\\\": \\\"yourname\\\",\\n    \\\"version\\\": \\\"0.0.1\\\",\\n    \\\"core-version\\\": \\\">=5.0.8\\\",\\n    \\\"source\\\": \\\"https://github.com/yourgithub/pluginname\\\",\\n    \\\"list\\\": \\\"readme license\\\",\\n    \\\"plugin-type\\\": \\\"plugin\\\"\\n}\\n```\\n\\n''Pay special attention to the `list` field'', which I've added to this template from the standard one presented in the TiddlyWiki dev wiki. The tiddlers in here become tabs in the plugin's tiddler (the one you get when you click on it in the //Plugins// view of the //More// tab of the sidebar). It's good practice to include at least a readme briefly describing the plugin and where you can learn more, and a license (see https://choosealicense.com/ if you're not sure what this is or how to choose one; the MIT license is popular in the TiddlyWiki community).\\n\\nThe `list` field is a [[tiddler list|Ordering Tiddlers]], but a weird one -- TiddlyWiki prepends the value of `title` plus a slash to the names listed here, so `readme` as shown in the template actually refers to `$:/plugins/yourgithub/pluginname/readme`. (I'm still sour about how long this took me to figure out the first time I made a plugin!)\\n\\n!! Editing\\n\\nWhile you're tweaking the plugin, writing the docs, and making sure everything is correct, if you want to test out or edit tiddlers directly in TiddlyWiki, you can start the listener in the wiki folder (`tiddlywiki --listen`) and edit from your browser.\\n\\nIt's good practice to include a prominent link to your plugin tiddler (e.g., `$:/plugins/yourname/yourpluginname`) on one of the //startup tiddlers// for your wiki (i.e., the ones that appear when you load the wiki, as configured in GettingStarted), since users will need to drag and drop this link to install the plugin.\\n\\n!! Building\\n\\nIf you know how to use [[Git|https://git-scm.com/]] or another source-control tool, now is a good time to create a repository and commit your folder wiki if you haven't already done so.\\n\\nGenerally, to make your plugin available on the web, all you have to do is ''share your wiki''. The simplest way to share your wiki is to build it into a single file by running `tiddlywiki --build index`, which will place an `index.html` file in the `output` subdirectory of the wiki. You can then publish this file to the web any way you like, or even just email it to other users; an easy, free, and popular method is to use [[GitHub Pages|https://pages.github.com/]] to serve the page from the same GitHub repository you keep the source code of your plugin in. Users can drag and drop the plugin link to install it, as mentioned in the //Editing// section above.\\n\\n\\n!! Resources\\n\\n* ''The TiddlyWiki Dev wiki'' is a bit short on detail and a bit out of date as of this writing, but [[offers some valuable guidance on the process|https://tiddlywiki.com/dev/#Developing%20plugins%20using%20Node.js%20and%20GitHub]].\\n* The [[Sistan|http://sistan.tiddlyspot.com]] ''online tutorial'' presents several options for creating plugins in somewhat more detail than provided here, including options for building a plugin from within a single-file wiki, without using Node at all.\\n* The [[PluginMechanism|https://tiddlywiki.com/#PluginMechanism]] ''page on tiddlywiki.com'' describes the details of how plugins are handled internally and how metadata is defined, as well as how to create plugins that depend on other plugins.\\n\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\"},\"Creating Tiddlers With Predefined Fields\":{\"title\":\"Creating Tiddlers With Predefined Fields\",\"created\":\"20200719030352650\",\"description\":\"Explore buttons, system tags, action widgets, and messages by adding new buttons to the toolbar that create tiddlers with some custom field values already in place.\",\"modified\":\"20240929014913849\",\"parent\":\"Looking Under the Hood\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"In our office wiki, we have a number of types of tiddlers that we often need to create with particular text and fields. In particular, let's focus on contacts and meetings. Right now, it's fairly complicated to add one of these -- we have to remember what fields and standard content we want to add to each. It would be better if, like with the built-in [[journal button|Journal Tiddlers]], we could ''prefill some values in the tiddler's fields''.\\n\\nTiddlyWiki has a built-in message called `tm-new-tiddler` that can help us do this. A ''message'' is a way of triggering a specific action to take place in the wiki -- when you trigger a message, any widgets higher up the widget tree are given the opportunity to respond to the message. That is, if you trigger a message within a button, the button can respond, the HTML element containing the button can respond, and so on up to the level of the whole wiki. This is much like [[the way TiddlyWiki refreshes elements after a tiddler is changed|Ex:EditCurrentTiddler/answer]], but the news propagates the other way: news of refreshes starts at the top of the wiki and works its way down the widget tree to each element on a page, while a message starts at an individual element and works its way up the widget tree until it reaches the //root widget// (the very top of the tree).\\n\\nYou can trigger a message using the `$action-sendmessage` widget. This is a new type of widget that we haven't seen before, called an ''action widget''. (As you might have guessed, the names of all action widgets begin with `$action-`.) An action widget doesn't display anything on the screen, but instead causes something to happen -- creating a new tiddler, navigating somewhere, sending a message, etc. An action widget can't stand alone in a tiddler but has to be part of a button or other triggerable element, or it will never do anything (if TiddlyWiki didn't enforce this restriction, the action would fire randomly whenever something happened that triggered its containing tiddler to refresh itself, which you probably wouldn't want!).\\n\\nHere's how this looks in practice for creating a new tiddler:\\n\\n{{Sn:NewTiddlerActionWidget||MagicSnippet}}\\n\\nIt's also possible to put the action widget inside the `$button` widget along with the text of the button:\\n\\n{{Sn:NewTiddlerActionWidgetText||MagicSnippet}}\\n\\nThis second method is widespread in the wild, but it's usually better to avoid it nowadays, as [[it's deprecated|https://tiddlywiki.com/#ActionWidgets]] and could be removed in a future version of TiddlyWiki.\\n\\nIn either case, when you click on the button, the action will be triggered, which will send a `tm-new-tiddler` message, which will create a new draft tiddler with the fields you've defined in the attributes of the action widget and open it for editing.\\n\\nIf you like, you can put several action widgets within the procedure or the `$button` widget. They will be triggered in sequence when the button is clicked.\\n\\n\\n!! `$action-log`\\n\\nIf you're struggling to get actions to work, you may find the <a href=\\\"https://tiddlywiki.com/#ActionLogWidget\\\" class=\\\"tc-tiddlylink-external\\\">`$action-log`</a> action widget helpful. It works exactly like the `$log` widget we discussed in [[When Things Go Wrong]] does, but it logs its values only when the action is triggered. You can plop this next to the other action(s) you're trying to use and look at the values of relevant variables (which are otherwise very hard to see the values of, since action widgets are invisible and the contents of the `actions` property of a button doesn't appear anywhere on screen).\\n\\n\\n!! Exercises\\n\\n{{Ex:NewContactButton||ExerciseTemplate}}\\n{{Ex:NewMeetingButton||ExerciseTemplate}}\\n{{Ex:ButtonsOnPageToolbar||ExerciseTemplate}}\\n{{Ex:SelectiveButtonDisplay||ExerciseTemplate}}\\n{{Ex:ButtonDisplayTweaks||ExerciseTemplate}}\\n\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\"},\"Creating a List of Links and Backlinks\":{\"title\":\"Creating a List of Links and Backlinks\",\"created\":\"20200718160337924\",\"description\":\"Dive into adding custom tooling to TiddlyWiki by building a list of outbound and inbound links that appears at the bottom of every tiddler.\",\"modified\":\"20240926120809780\",\"parent\":\"Looking Under the Hood\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Let's put everything we've learned so far about customizing TiddlyWiki together by building a useful and commonly requested tool. Several plugins offer prefabricated versions of the tool we're about to discuss, which you might or might not prefer to building your own, but creating our own will be educational at the least.\\n\\nWe know we can get at the backlinks of a tiddler by looking at the info section of a tiddler. In many types of wikis, however, it's convenient to have the backlinks much more obvious. Let's build some custom functionality to ''show all of the backlinks at the bottom of each tiddler'' without having to click on anything. While we're at it, let's summarize the forward links in the tiddler here, too: at the bottom of the tiddler, we'll have two columns, the left column showing all the forward links and the right column showing all the backward links. (You may notice that this is strikingly like the “related topics” view you can find in the footer of any section in this book -- so no cheating by looking there!)\\n\\nMost of this section will be presented as a series of exercises: you'll be given a small incremental step in the implementation to try on your own, and in the answer I will show one possible way to do it. At that point, you're free to either change your implementation to match the answer or attempt to continue with your own version.\\n\\n\\n!! Building the logic\\n\\n{{Ex:BasicBacklinksList||ExerciseTemplate}}\\n{{Ex:BasicLinksList||ExerciseTemplate}}\\n{{Ex:LinkedTiddlerExcerpt||ExerciseTemplate}}\\n{{Ex:CreatingLinkDivs||ExerciseTemplate}}\\n{{Ex:LinkDivClasses||ExerciseTemplate}}\\n\\n\\n!! Improving the formatting\\n\\nCustom formatting can be added to tiddlers using a //stylesheet//. Stylesheets are written in the [[CSS|https://en.wikipedia.org/wiki/Cascading_Style_Sheets]] (Cascading Style Sheets) language, an extremely powerful if slightly obtuse formatting language that controls the display of every web page you've ever looked at. You can either put a stylesheet in an individual tiddler within `<style>` tags (this is called an //inline// stylesheet) or make it global to the wiki. See [[Stylesheets]] if you know a little CSS and want more details on the options TiddlyWiki provides here.\\n\\nTeaching you CSS is outside the scope of this book, so I'm just going to give you a stylesheet to use with this exercise. If you're interested in learning more, there are a wide variety of resources on the Internet.\\n\\n```css\\n<style>\\ndiv.sib-links-container {\\n  border: 1px dashed white;\\n  overflow: auto;\\n  padding: 2px;\\n}\\ndiv.sib-links-container div ul {\\n  list-style-type: none;\\n  padding-left: 0;\\n}\\ndiv.sib-links-container div ul div.sib-links-excerpt {\\n  padding-left: 1em;\\n  color: <<colour muted-foreground>>;\\n}\\ndiv.sib-links-forward {\\n  width: 50%;\\n  float: left;\\n  padding-right: 0.5em;\\n}\\ndiv.sib-links-backward {\\n  width: 50%;\\n  float: right;\\n  padding-left: 0.5em;\\n}\\n</style>\\n```\\n\\nIf you named the classes you put on your divs something different than I did, you'll need to replace the names in the part before each opening `{` (this part is called the //CSS selector//). Otherwise, just paste this at the bottom of the tiddler and save it, and your links should suddenly look much prettier.\\n\\n\\n!! Final tweaks\\n\\n{{Ex:ExcerptConfigurationTiddler||ExerciseTemplate}}\\n{{Ex:PaletteInvestigation||ExerciseTemplate}}\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\"},\"Custom Widgets\":{\"title\":\"Custom Widgets\",\"created\":\"20240901044700214\",\"description\":\"Custom widgets are a special type of procedure that imitates the syntax of built-in widgets.\",\"modified\":\"20241017002859774\",\"parent\":\"Macros, Wikification, and Widgets\",\"tags\":\"Section Concept\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"The built-in [[widgets|Widgets]] in TiddlyWiki are written in JavaScript. However, it's possible to define your own widgets, called ''custom widgets'', using wikitext. What these widgets can do is, of course, more limited than what widgets that run arbitrary JavaScript can do, but they can accomplish a wide variety of useful tasks nevertheless.\\n\\nSince they are just a way of wrapping up wikitext, there is little difference in principle between a custom widget and a transclusion of a template or a procedure. (In fact, a custom widget internally //is// a procedure, just one called using a different syntax.) In most cases, you can choose any of these features to reuse the same wikitext in multiple places. However, sometimes one syntax is more elegant than another.\\n\\nCustom widgets are defined using the same pragma syntax as [[Procedures]], [[Functions]], and [[Macros]], except that:\\n\\n* The word `widget` is used.\\n* Like all widgets, your custom widget must have a name beginning with `$`.\\n* The name of your custom widget must contain a dot (`.`). Unlike for [[function|Functions]] names, this is not an optional naming convention that allows shorter syntax, it is outright required. (There is one exception to this rule, which we'll discuss in the next chapter, in [[Overriding Built-In Widgets]].)\\n\\nHere's a very simple example:\\n\\n{{Sn:BoldItalicsWidget||MagicSnippet}}\\n\\nBy default, custom widgets, like procedures and functions, are scoped to the tiddler in which they appear, and they can be (and most often are) made global in the same way as procedures, functions, and macros, by tagging their tiddler with `$:/tags/Global`.\\n\\n\\n!! Using the widget body\\n\\nTypically, the main reason we want to use a custom widget rather than a procedure or a transclusion is to take advantage of a widget's ability to include large blocks of arbitrary wikitext, HTML, and widgets in its body, ''without requiring quoting''. The widget's body automatically fills a [[slot|Parameterizing Field Transclusions]] called `ts-raw`, so we use the `$slot` widget to retrieve it:\\n\\n{{Sn:BoldItalicsWidgetBody||MagicSnippet}}\\n\\n(For more on the `$slot` widget, review [[Parameterizing Field Transclusions]].)\\n\\nAs with built-in widgets, if we want the content of a widget to be in [[block mode|Block Mode and Inline Mode]], we need to put blank lines inside the opening and closing tags of our custom widget:\\n\\n```html\\n<$format.bold-italics>\\n\\nTest text rendered in block mode\\n\\n</$format.bold-italics>\\n```\\n\\n\\n!! Exercises\\n\\n{{Ex:ContactQuote||ExerciseTemplate}}\\n\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\"},\"Data Tiddlers\":{\"title\":\"Data Tiddlers\",\"created\":\"20200717234504136\",\"description\":\"A //data tiddler// packs a series of name-value pairs into a single tiddler's text field.\",\"modified\":\"20241008121851907\",\"parent\":\"More Organizational Tools\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Once in a while you may end up with a bunch of simple data composed of key-value pairs, where you have one piece of information and want to look up the other. For instance, let's suppose we want to create a display of what holiday today is, if it is a holiday. We have a list of the months and days of some common United States holidays (we'll pretend for the moment that no holidays exist that don't fall on the same date every year!):\\n\\n|!Date|!Holiday name|\\n|01/01|New Year's Day|\\n|07/04|Independence Day|\\n|10/31|Halloween|\\n|12/25|Christmas Day|\\n\\nIf we have lots of other information about these holidays, it would make sense to create a tiddler for each holiday and use [[fields|Fields]] to store the different data points we wanted to track about each holiday. However, if the names and dates above are all we care about, and we just want to be able to see if a particular day is a holiday, that might be overkill.\\n\\nWe might also find the approach of creating tiddlers annoying if we have a way to import this data from somewhere outside the wiki -- we can likely get a list of holidays in some standard format, but TiddlyWiki tiddlers are not likely to be one of those standard formats!\\n\\nIn these situations, ''data tiddlers'' can come in handy. A data tiddler is a tiddler with a special content type whose `text` field contains a series of key-value pairs, like the date-name pairs shown in the table above. There are two ways to format a data tiddler: TiddlyWiki's ''built-in dictionary format'', and ''JSON'' (JavaScript Object Notation, a standard data interchange format). If you're familiar with JSON, be aware that only very simple JSON files with a single level of key-value pairs {{Ltc:JsonSupport||LieToChildrenTemplate}} (no arrays or objects).\\n\\nDictionary data tiddlers can't contain colons `:` in their keys, or newlines anywhere. JSON data tiddlers allow you to include all characters, provided they are [[properly escaped|https://www.freeformatter.com/json-escape.html]].\\n\\nEach key-value pair in a data tiddler is called a ''property'', and the key of each property is called its ''index''.\\n\\n\\n!! Creating a data tiddler\\n\\nLet's create a data tiddler called `UsHolidays` for these holidays. The tiddler's content will look like this:\\n\\n```html\\n01/01: New Year's Day\\n07/04: Independence Day\\n10/31: Halloween\\n12/25: Christmas Day\\n```\\n\\nYou can see that the keys (the month and day) are separated from the values (the name of the holiday) by a colon. Spaces before or after the colon don't affect the value TiddlyWiki sees.\\n\\nPaste this content into a new tiddler, then from the //Type// drop-down underneath the text field, pick `application/x-tiddler-dictionary` and save the tiddler.\\n\\nTo work with data tiddlers, we use a special addition to the normal transclusion syntax: to get the value for the index `07/04` from the `UsHolidays` data tiddler, we write `{{UsHolidays##07/04}}`. You can also use the `getindex` filter operator, like `[[UsHolidays]getindex[07/04]]`.\\n\\n{{Sn:UsHolidaysTransclusion||MagicSnippet}}\\n\\n!! Exercises\\n\\n{{Ex:HolidayToday||ExerciseTemplate}}\\n{{Ex:VeryOrdinaryDay||ExerciseTemplate}}\\n{{Ex:JsonHoliday||ExerciseTemplate}}\\n\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\"},\"Datetime Format\":{\"title\":\"Datetime Format\",\"created\":\"20210207000729290\",\"modified\":\"20240614032109334\",\"tags\":\"Fragment\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"TiddlyWiki uses an awkward format for dates and times: the four-digit year, the two-digit month, the two-digit day, the two-digit 24-hour hour, the two-digit minute, the two-digit second, and the three-digit milliseconds, all run together, in the UTC timezone (colloquially known as {{Ltc:GmtUtc||LieToChildrenTemplate}}). So if it's 8:31:41 PM my time on May 30, 2024 right now, Central Daylight Time (UTC-5), the time according to TiddlyWiki is 20240531013141000 (it's on the 31st at 1am because I have to add 5 hours to get to UTC).\"},\"Downloading Grok TiddlyWiki\":{\"title\":\"Downloading Grok TiddlyWiki\",\"created\":\"20201230143321900\",\"description\":\"How to make a copy of this book so you can save your progress.\",\"modified\":\"20241009130234039\",\"parent\":\"The Shape of TiddlyWiki\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"//Grok TiddlyWiki// is itself a TiddlyWiki, as you may have noticed or suspected by now. To get the full value out of GTW, you'll want to ''create your own copy of this wiki'' -- this will allow GTW to save information about your progress and personalize the book for you. If you don't create a copy, you won't be able to keep track of which exercises you've completed, review takeaways, create bookmarks, or save your place when you stop reading.\\n\\n{{SavingProgress}}\"},\"Ex:AddContactTemplates\":{\"title\":\"Ex:AddContactTemplates\",\"complete\":\"\",\"created\":\"20200605153455384\",\"length\":\"s\",\"modified\":\"20210322232758036\",\"origin\":\"Templates and the Current Tiddler\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Place the `ContactInformationTemplate` on all of the contacts in your wiki.\\n\\n(You may be wondering if there's a way to avoid even the repetition of adding the reference to the template to all your tiddlers. The answer is yes, and we'll [[be getting there in a couple chapters|The View Template]].)\"},\"Ex:AllFamilyInformation\":{\"title\":\"Ex:AllFamilyInformation\",\"complete\":\"\",\"created\":\"20201122034146442\",\"length\":\"m\",\"modified\":\"20210409214810732\",\"origin\":\"Filters and Transclusions\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Edit the `ContactInformationTemplate` so that a contact's family members each get their own bullet point, nested underneath the `Family` bullet point, listing their name and phone number, like this:\\n\\n* ''Family'':\\n** JohnDoe: 888-555-9999\\n** EmilyDoe: 888-555-1111\\n\\n//Tip:// You'll need to use [[HTML]] for the inner bulleted list, as wikitext lists can't be interleaved successfully with `$list` widgets. While it's possible to make everything show up correctly while still writing the outer bulleted list in wikitext, if you're struggling with the formatting, it may be easier to switch the outer list to an HTML list as well.\\n\\nAs a reminder, to nest lists in HTML, put another `<ul>` opening tag inside an `<li>` tag.\"},\"Ex:AllFamilyInformation/answer\":{\"title\":\"Ex:AllFamilyInformation/answer\",\"created\":\"20201122034213721\",\"modified\":\"20201122034453414\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"```html\\n<ul>\\n  <li>''Email'': {{!!email}}</li>\\n  <li>''Phone'': {{!!phone}}</li>\\n  <li>\\n    ''Family'':\\n    <ul>\\n      <$list filter={{!!family}}>\\n        <li>{{!!title}}: {{!!phone}}</li>\\n      </$list>\\n    </ul>\\n  </li>\\n  <li>''Manager'': {{!!manager}}</li>\\n</ul>\\n```\\n\\nHere's the same thing, retaining the outer bulleted list in wikitext. The critical part is that the `<ul>` has to be on the same line as the end of the `Family` bullet -- otherwise it won't be treated as a nested list.\\n\\n```html\\n* ''Email'': {{!!email}}\\n* ''Phone'': {{!!phone}}\\n* ''Family'': <ul>\\n  <$list filter={{!!family}}>\\n    <li>{{!!title}}: {{!!phone}}</li>\\n  </$list>\\n</ul>\\n* ''Manager'': {{!!manager}}\\n```\"},\"Ex:AlphabeticallyLastDescription\":{\"title\":\"Ex:AlphabeticallyLastDescription\",\"created\":\"20200603185508516\",\"length\":\"M\",\"modified\":\"20210606030005775\",\"origin\":\"Common Filter Operators\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"What is the alphabetically last description that any button on the editor toolbar uses? (The description is what shows up when you hover over the button, minus the indication of the keyboard shortcut. No cheating by hovering over every button!)\\n\\nYou'll need some additional information for this one:\\n\\n* Remember that [[everything's a tiddler|Tiddlers]]? Buttons in TiddlyWiki's interface are tiddlers too!\\n* A tiddler is part of the editor toolbar if it is tagged `$:/tags/EditorToolbar`.\\n* You'll need to start your filter with `all[shadows]` to get any results.\\n* Your filter expression will have more steps than any we've seen so far. Add one step to the filter expression at a time, inspecting the result to determine how you need to modify the list (what step you need to add) next. You'll eventually reach a point where you have a bunch of results that are wrapped in curly braces, like `{{$:/language/Buttons/Paint/Description}}`. When you get here, add the following filter steps to the end of your filter: `split[{{]split[}}]`.\\n\\nAnd here are two hints if you need them:\\n\\n# How do you think we would define the description of a button in the TiddlyWiki data model?\\n# The content of a language tiddler, like `$:/language/Buttons/Paint/Description`, is stored in its `text` field.\\n\\nThis one is intended to be a little bit above your level at the moment -- we won't get to some of the concepts involved until chapter 6, [[Looking Under the Hood]] -- so you might not be able to figure it out. But spend some time working on it before you look at the answer.\"},\"Ex:AlphabeticallyLastDescription/answer\":{\"title\":\"Ex:AlphabeticallyLastDescription/answer\",\"created\":\"20200603185713595\",\"length\":\"M\",\"modified\":\"20210206183436530\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"The answer, at least as of TiddlyWiki 5.1.23 with no plugins, is ''Wrap selection in square brackets''.\\n\\nHere's the filter I used:\\n\\n```\\n[all[shadows]tag[$:/tags/EditorToolbar]get[description]split[{{]split[}}]get[text]!sort[]first[]]\\n```\\n\\nHere's a live version. The `{{{triple curly braces}}}` tell TiddlyWiki to display the result of the filter; we'll learn much more about this syntax in [[Filters and Transclusions]].\\n\\n{{Sn:AlphabeticallyLastFilter||MagicSnippet}}\\n\\nYou might have used a slightly different filter; as usual with computers, there's more than one way to do things.\\n\\nLet's break this filter down:\\n\\n* `all[shadows]`: As mentioned in the question, you won't be able to see any of the tiddlers we're looking at without adding this. We'll talk more about [[shadow tiddlers|Shadow Tiddlers]] in a later chapter.\\n* `tag[$:/tags/EditorToolbar]`: This limits the list of shadow tiddlers to those that represent buttons on the editor toolbar.\\n* `get[description]`: This retrieves the contents of the `description` field of each matching tiddler. Thus, instead of the tiddler titles being in our filter pipeline, the contents of the `description` fields of each tiddler will now be in the pipeline.\\n* `split[{{]split[}}]`: This eliminates the `{{double braces}}` that surround each value of the `description` field on these tiddlers. Double braces introduce //transclusion//, which we'll [[discuss|Transclusions]] in a later chapter.\\n* `get[text]`: Removing the double braces resulted in a new set of tiddler titles. We want to get the text of these tiddlers, since that contains the descriptions we're looking at.\\n* `!sort[]`: This sorts the set of tiddler texts in our filter pipeline in reverse order, putting the alphabetically last item at the top, which is `Wrap selection in square brackets`.\\n* `first[]`: This selects only the first item. You don't really have to use this in this case -- you could just pick the first item out of the list -- but it'll be nice later when you learn how to display the results of a filter inside some other part of TiddlyWiki's interface and a bunch of irrelevant crud will be much more annoying.\"},\"Ex:BacklinksConditionalDisplay\":{\"title\":\"Ex:BacklinksConditionalDisplay\",\"created\":\"20210207214626820\",\"length\":\"m\",\"modified\":\"20240926221038824\",\"origin\":\"Hiding and Showing Things\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Using a `$list` widget, update your template that [[displays a list of links and backlinks|Creating a List of Links and Backlinks]] so that the list doesn't appear if there are no links or backlinks.\"},\"Ex:BacklinksConditionalDisplay/answer\":{\"title\":\"Ex:BacklinksConditionalDisplay/answer\",\"created\":\"20210207214655751\",\"modified\":\"20210207215748750\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"The portion that needs to be wrapped in a `$list` widget is the part that calls the macros -- trying to wrap the macros won't end well because [[pragmas have to be the first thing in their tiddler|Ex:MacroPosition/answer]].\\n\\n```html\\n<$list filter=\\\"[all[current]links[]] [all[current]backlinks[]] +[first[]]\\\" variable=_>\\n  <!-- begin part that was already there -->\\n  <div class=\\\"sib-link-display\\\">\\n    <<linkDisplay \\\"Links\\\" \\\"links[]\\\" \\\"sib-links\\\">>\\n    <<linkDisplay \\\"Backlinks\\\" \\\"backlinks[]\\\" \\\"sib-backlinks\\\">>\\n  </div>\\n  <!-- end part that was already there -->\\n</$list>\\n```\"},\"Ex:BasicBacklinksList\":{\"title\":\"Ex:BasicBacklinksList\",\"created\":\"20200718200211240\",\"length\":\"m\",\"modified\":\"20210418142252483\",\"origin\":\"Creating a List of Links and Backlinks\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Create a tiddler called `$:/yourname/TiddlerLinkSummary`. Make this tiddler display a simple bulleted list of all backlinks of the current tiddler. (Since we will need to make this more complex momentarily, use a `$list` widget, not a `list-links` macro.) Then make this content included at the bottom of every tiddler.\"},\"Ex:BasicBacklinksList/answer\":{\"title\":\"Ex:BasicBacklinksList/answer\",\"created\":\"20200718200917466\",\"modified\":\"20210418142212216\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"To display the list:\\n\\n```html\\nBacklinks:\\n\\n<ul>\\n<$list filter=\\\"[all[current]backlinks[]]\\\">\\n  <li><$link /></li>\\n</$list>\\n</ul>\\n```\\n\\nTo make the `$:/yourname/TiddlerLinkSummary` template appear on every tiddler, you'll need to tag it `$:/tags/ViewTemplate`. Positioning it in the `list` is optional in this case, since it will appear after the listed items anyway by default.\"},\"Ex:BasicLinksList\":{\"title\":\"Ex:BasicLinksList\",\"created\":\"20200718201206937\",\"length\":\"m\",\"modified\":\"20240926115120468\",\"origin\":\"Creating a List of Links and Backlinks\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Edit `$:/yourname/TiddlerLinkSummary` to show a list of the forward links as well. We don't want the wikitext to get too repetitive, so create a procedure to hold the bits that are the same in both. You may find the `subfilter` [[filter operator|https://tiddlywiki.com/#subfilter%20Operator]] helpful.\"},\"Ex:BasicLinksList/answer\":{\"title\":\"Ex:BasicLinksList/answer\",\"created\":\"20200718201238626\",\"modified\":\"20240926115335072\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"My tiddler now looks like this:\\n\\n```html\\n\\\\procedure linkDisplay(title, subfilter)\\n<<title>>:\\n\\n<ul>\\n<$list filter=\\\"[all[current]subfilter<subfilter>]\\\">\\n  <li><$link /></li>\\n</$list>\\n</ul>\\n\\\\end\\n\\n<<linkDisplay \\\"Links\\\" \\\"[links[]]\\\">>\\n<<linkDisplay \\\"Backlinks\\\" \\\"[backlinks[]]\\\">>\\n```\\n\\n`subfilter` runs the complete filter expression in its parameter with `subfilter`'s input tiddlers as the input tiddlers of the new expression.\\n\\nYou wouldn't have to use `subfilter` here if you didn't want to. You could use a [[macro|Macros]] with text substitution instead of a procedure and directly add `links[]` or `backlinks[]` into the filter expression, or you could just repeat `all[current]` in both filters; that would hardly be a horrible amount of repetition.\"},\"Ex:BasicWikitext\":{\"title\":\"Ex:BasicWikitext\",\"complete\":\"\",\"created\":\"20201125212517598\",\"length\":\"m\",\"modified\":\"20210409022603240\",\"origin\":\"Journal Tiddlers\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Edit the journal tiddler again by clicking the pencil icon <<textual-button \\\"edit-button\\\">> in its upper-right corner, and add some boilerplate that uses the following types of formatting in the notes editor:\\n\\n* ''Bold'', //italics//, and `monospaced text`\\n* A bulleted list\\n* A numbered list\\n* A section heading\\n* A block quote\\n* A code snippet (called a “monospaced block” on the editor toolbar)\\n\\nFor the lists, block quotes, and code snippets, note that you need to have at least one blank line both above and below them to ensure everything displays correctly.\\n\\nWe'll be learning more wikitext syntax as we go through the rest of the book. You can also refer to the [[Wikitext Reference]] appendix for a listing of the syntax you're most likely to want. That said, if you don't feel comfortable with what you've seen so far, you might consider doing this exercise a second time; if you feel uncomfortable using wikitext, it will be a major drag on your ability to accomplish more complicated things in TiddlyWiki.\"},\"Ex:BulletedMeetingList\":{\"title\":\"Ex:BulletedMeetingList\",\"created\":\"20200603192826693\",\"length\":\"m\",\"modified\":\"20210130174314210\",\"origin\":\"Your First Dynamic List\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Modify the `MeetingList` so that instead of separating the meetings with a simple line break, they form a bulleted list.\\n\\n//Hint 1//: Remember that HTML code for creating a bulleted list?\\n\\n//Hint 2//: The contents of the list widget are rendered once for every tiddler output by the filter. Which parts of the HTML code for creating a list need to be used repeatedly, and which need to be used only once?\"},\"Ex:BulletedMeetingList/answer\":{\"title\":\"Ex:BulletedMeetingList/answer\",\"created\":\"20200603194852266\",\"modified\":\"20200603195014987\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"```html\\n<ul>\\n  <$list filter=\\\"[tag[Meeting]!sort[at]]\\\">\\n    <li><<currentTiddler>></li>\\n  </$list>\\n</ul>\\n```\\n\\n(If you left in the `contains:participants[JaneDoe]` filter step from the previous exercise, that's fine too.)\"},\"Ex:ButtonDisplayTweaks\":{\"title\":\"Ex:ButtonDisplayTweaks\",\"created\":\"20200822192642714\",\"length\":\"M\",\"modified\":\"20210130174312240\",\"origin\":\"Creating Tiddlers With Predefined Fields\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Our buttons don't display very nicely:\\n\\n* They're absolutely gigantic on the toolbar and have text on them instead of an icon.\\n* Their shape doesn't match that of the other tiddlers.\\n* They don't have tooltips.\\n* They don't have a description in the ''Tools'' tab of the sidebar.\\n\\nCorrect these issues. You'll want to refer to an existing tiddler on the toolbar to see how each of these things is done.\\n\\n//Tip//: The fastest way to choose an icon from the set that comes with TiddlyWiki is to open the tag manager and pretend to pick an icon from the drop-down. Each icon shows its full tiddler name, so you can then use that name elsewhere.\"},\"Ex:ButtonDisplayTweaks/answer\":{\"title\":\"Ex:ButtonDisplayTweaks/answer\",\"created\":\"20200822192711306\",\"modified\":\"20240926121453690\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"For a simple fix to the icon problem, just replace the text with an icon transclusion, e.g., `{{$:/core/images/quote}}`. This is probably good enough in many circumstances. However, TiddlyWiki lets you configure whether text, icon, or both is shown for each place a toolbar button can appear (for instance, both appear by default on the Tools tab of the sidebar). If you want this feature to work, you'll want to borrow the following snippet from one of the existing buttons:\\n\\n```html\\n<$list filter=\\\"[<tv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/save-button}}\\n</$list>\\n<$list filter=\\\"[<tv-config-toolbar-text>match[yes]]\\\">\\n<span class=\\\"tc-btn-text\\\"><$text text={{$:/language/Buttons/SaveWiki/Caption}}/></span>\\n</$list>\\n```\\n\\nWithin the context of any button display, these variables will be defined as either `yes` or `no`, and you can check using the above filters to see whether you should display each part. (Unless you plan to be translating your own wiki into different languages, you can safely hard-code the caption or put it in the `{{!!caption}}` field rather than putting it into a separate tiddler under `$:/language`.)\\n\\nA related problem is that the button will still be square and not match the existing buttons. To fix this, add the `class` and `selectedClass` attributes that are used on the existing buttons:\\n\\n```html\\n<$button class=<<tv-config-toolbar-class>> selectedClass=\\\"tc-selected\\\" ...>\\n```\\n\\nFor the tooltips, adding a `tooltip` attribute to the `<$button>` widget will do the trick.\\n\\nFor the description, just set the `description` field on the tiddler.\"},\"Ex:ButtonsOnPageToolbar\":{\"title\":\"Ex:ButtonsOnPageToolbar\",\"created\":\"20200822192414704\",\"length\":\"m\",\"modified\":\"20210418161630255\",\"origin\":\"Creating Tiddlers With Predefined Fields\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Add these new buttons (created in [[Ex:NewContactButton]] and [[Ex:NewMeetingButton]]) to the toolbar above the search box in the sidebar. This will require applying a tag to their tiddlers.\"},\"Ex:ButtonsOnPageToolbar/answer\":{\"title\":\"Ex:ButtonsOnPageToolbar/answer\",\"created\":\"20200822192432851\",\"modified\":\"20200822192450806\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"The tag to use is `$:/tags/PageControls`.\"},\"Ex:BypassSecurityWithTextSubstitution\":{\"title\":\"Ex:BypassSecurityWithTextSubstitution\",\"created\":\"20210207223511379\",\"length\":\"m\",\"modified\":\"20240929002643934\",\"origin\":\"Macros\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Suppose that the following macro is being used to validate whether the user is authorized to access something:\\n\\n{{Sn:AuthorizationBypass||MagicSnippet}}\\n\\nBecause of the way text substitution works, it's possible to bypass this authentication check without knowing the password (or looking in that tiddler). Figure out what you can fill in between the quotation marks in the macro call to bypass the password check, and check your answer by editing the live example above.\"},\"Ex:BypassSecurityWithTextSubstitution/answer\":{\"title\":\"Ex:BypassSecurityWithTextSubstitution/answer\",\"created\":\"20210207223547576\",\"modified\":\"20241016130845014\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Congratulations, you are a //TiddlyWiki hacker//!\\n\\nHilariously, all it really takes is a single `]`, because this causes the filter syntax to become invalid, which causes the tiddler `Filter error: Missing [ in filter expression` to appear in the output and the conditional expression to become true. You could use any number of variations on the theme of making the filter syntax invalid.\\n\\nA more complete version, riffing on the example we saw above, would be `x]][x` -- that is, create an unconditional filter run for the tiddler `[[x]]` so there's some output to the filter, then open a new run which tries to match the text `x` against the password (presumably this will fail, but that will be OK because we've already added a tiddler to the final output of the filter run).\"},\"Ex:CStartTiddlers\":{\"title\":\"Ex:CStartTiddlers\",\"created\":\"20240831222628296\",\"length\":\"m\",\"modified\":\"20240929003027345\",\"origin\":\"Functions\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"This snippet is supposed to show a list of all tiddlers in the wiki whose names start with C. Why do you think it doesn't show all the tiddlers? Fix it so it does.\\n\\n{{Sn:BuggyCStartTiddlers||MagicSnippet}}\"},\"Ex:CStartTiddlers/answer\":{\"title\":\"Ex:CStartTiddlers/answer\",\"created\":\"20240831223333520\",\"modified\":\"20241016124049253\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"It turns out that calling a function with `<<angle brackets>>` always gives only the first output tiddler produced by the filter (unlike elsewhere in TiddlyWiki, this is true even if it's placed directly within wikitext rather than as the value of an attribute).\\n\\nThe most straightforward way to get the code snippet working as desired is by calling the function using the `function[]` operator (or the shortcut syntax) instead:\\n\\n{{Sn:FixedCStartTiddlers||MagicSnippet}}\\n\\nInterestingly, you can also fix this by making `tiddlers-starting-with-C` ''a procedure instead of a function'':\\n\\n{{Sn:AlternatelyFixedCStartTiddlers||MagicSnippet}}\\n\\nPuzzling through why this is may be enlightening. Spend a couple minutes seeing if you can figure it out before continuing! Consider what TiddlyWiki is doing as it evaluates a procedure vs. a function.\\n\\n<$details summary=\\\"Answer\\\">\\n\\nWhen `tiddlers-starting-with-C` is defined as a function, TiddlyWiki evaluates the filter in its body as part of the transclusion `<<tiddlers-starting-with-C>>` itself, because a function call causes the filter inside the function to be executed and output tiddlers to be produced. Then it passes those output tiddlers (or rather, output tiddler, since the angle bracket syntax always results in a single output tiddler) to the `filter` parameter of the `$list` widget. A single tiddler name is a valid filter, so the body of the `$list` widget is rendered once with that tiddler name as the current tiddler.\\n\\nIn contrast, when `tiddlers-starting-with-C` is defined as a procedure, TiddlyWiki evaluates the filter as wikitext, which simply yields the text of the filter itself (since there aren't any formatting instructions, transclusions, widgets, etc. in it). Then it passes this filter text to the `filter` parameter of the `$list` widget. The `$list` widget actually runs the text of a filter passed to the `filter` parameter, so this is perfectly valid, and completely equivalent to just:\\n\\n```html\\n<$list filter=\\\"[all[shadows+tiddlers]prefix[C]]\\\">\\n  <$link /><br>\\n</$list>\\n```\\n\\n</$details>\"},\"Ex:CamelCaseKnowledgeTiddlers\":{\"title\":\"Ex:CamelCaseKnowledgeTiddlers\",\"autoinclude\":\"Reviewing the Basics\",\"created\":\"20200603030418783\",\"length\":\"m\",\"modified\":\"20210521201654599\",\"origin\":\"Reviewing the Basics\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Try changing the title of one of your knowledge tiddlers to not be in CamelCase (add some spaces to it, and/or change the capitalization).\\n\\n* Notice the drop-down showing you any links that will break when you rename the tiddler.\\n* Visit the tiddlers those other links were contained in and update the links to match. You'll have to use the `[[square bracket syntax]]` now.\\n* What are some of the advantages and disadvantages of camel-case linking? If you have a TiddlyWiki use case in mind for yourself, do you think camel-case links will be a good idea there?\\n\\n//Note:// If you rename tiddlers often, the [[Relink plugin|Useful Plugins]] can update the links automatically.\"},\"Ex:CamelCaseKnowledgeTiddlers/answer\":{\"title\":\"Ex:CamelCaseKnowledgeTiddlers/answer\",\"autoinclude\":\"Reviewing the Basics\",\"created\":\"20200603030458934\",\"length\":\"m\",\"modified\":\"20210131211311582\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"On the topic of the advantages and disadvantages of camel-case linking…\\n\\n!!! Advantages\\n\\n* Linking is faster.\\n* If you're a programmer, you may dislike spaces!\\n* You're encouraged to create more concise titles which are in a consistent format.\\n* If you copy the formatted text into another tiddler which is in edit mode, the links will stay there. This does not work with `[[links like this]]`. A small thing, but quite convenient.\\n\\n!!! Disadvantages\\n\\n# According to some people, it looks ugly and disrupts the flow of text.\\n# If people try to camel-case even things that don't take naturally to it, adding extra words or capitalizing words in the middle, how they did this is not always obvious, and someone may end up missing a title that already exists and creating a new one. More on this later.\\n# Words that just happen to use the CamelCase format but are not supposed to refer to page titles have to be escaped in some way. In TiddlyWiki this is done by putting a `~` before the word.\\n# Particularly long titles may be difficult to read or fail to wrap nicely over multiple lines.\\n\\nSee also the [[CamelCase]] appendix.\\n\"},\"Ex:CanonicalUri\":{\"title\":\"Ex:CanonicalUri\",\"created\":\"20210130042001704\",\"length\":\"m\",\"modified\":\"20210130220431659\",\"origin\":\"Images and Attachments\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Select a contact you didn't add an image for above. Place an image for this contact in a folder called `images` next to your example TiddlyWiki, and use the `_canonical_uri` field on a new tiddler to reference this contact's image. Check to be sure the image is displayed on the contact tiddler as expected.\"},\"Ex:CaptionsByTag\":{\"title\":\"Ex:CaptionsByTag\",\"created\":\"20200718220801449\",\"length\":\"m\",\"modified\":\"20210130174325776\",\"origin\":\"Buttons and Input Widgets\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Create a tiddler called `CaptionsByTag`. This tiddler should contain an input widget into which the user types the name of a tag. A table underneath the input widget should show all of the tiddlers with this tag along with their captions, if any. That would look something like this:\\n\\n|!Tiddler|!Caption|\\n|FudgeAtTheOffice|The Great Fudge Warning|\\n\\n//Note//: You'll have to use raw HTML tables to get this to display correctly -- wikitext tables don't work if you interrupt them with a `list` widget. An HTML table has this basic form:\\n\\n{{Sn:HtmlTable||MagicSnippet}}\\n\\nThe equivalent wikitext table would be:\\n\\n{{Sn:WikitextTable||MagicSnippet}}\\n\\n`tr` stands for //table row//, `th` for //table header//, and `td` for //table data//.\"},\"Ex:CaptionsByTag/answer\":{\"title\":\"Ex:CaptionsByTag/answer\",\"created\":\"20200718221130421\",\"modified\":\"20200718221132771\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"```html\\n<$edit-text tiddler=\\\"$:/temp/captionbytag\\\" tag=\\\"input\\\" default=\\\"\\\"/>\\n\\n<table>\\n  <tr>\\n    <th>Tiddler</th>\\n    <th>Caption</th>\\n  </tr>\\n  <$list filter=\\\"[tag{$:/temp/captionbytag}]\\\">\\n  <tr>\\n    <td>{{!!title}}</td>\\n    <td>{{!!caption}}</td>\\n  </tr>\\n  </$list>\\n</table>\\n```\"},\"Ex:CarItems\":{\"title\":\"Ex:CarItems\",\"complete\":\"\",\"created\":\"20210206151036838\",\"length\":\"M\",\"modified\":\"20210606143448300\",\"origin\":\"Project Tiddlers\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Suppose you have a tiddler `MyCar`, along with a series of tiddlers describing the items you keep in your car. Why should each item state that it belongs in your car, rather than the car listing out all of the items it contains?\\n\\nCreate the car tiddler in your example wiki and relate several items to it, using each of the four methods discussed in this section. What methods do you like best?\"},\"Ex:CarItems/answer\":{\"title\":\"Ex:CarItems/answer\",\"created\":\"20210206151218118\",\"modified\":\"20210606143443369\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Each item should most likely state that it belongs in your car because this mechanism is less fussy: you don't have to manually update the car tiddler when you add a new item to your car, and you can say that an item belongs in multiple locations by editing only the item.\"},\"Ex:CircleMathRearrangement\":{\"title\":\"Ex:CircleMathRearrangement\",\"created\":\"20240831221924665\",\"length\":\"s\",\"modified\":\"20240929001511377\",\"origin\":\"Functions\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"In the circle math example, we carefully ordered the functions so that if function B calls function A, function A always comes before function B. What happens if you change the order of the functions so this isn't true? Why do you think this is?\"},\"Ex:CircleMathRearrangement/answer\":{\"title\":\"Ex:CircleMathRearrangement/answer\",\"created\":\"20240831222036242\",\"modified\":\"20240831222455269\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Perhaps surprisingly, this works perfectly fine:\\n\\n{{{Sn:CircleMathRearrangement||MagicSnippet}}}\\n\\nThis is OK because TiddlyWiki reads all the pragmas in a tiddler prior to doing anything with their contents them. While the `pi` variable, for example, isn't defined until after all of the functions that use `pi` are, that's OK because TiddlyWiki still hasn't actually evaluated any filters yet. It's only once //all// the pragmas have been read and their names added to the current scope that TiddlyWiki starts actually parsing the wikitext of the tiddler, sees function calls, and tries to run the filters inside the functions. So by the time TiddlyWiki tries to use the name `pi`, it's fully defined.\\n\\nIt's still good practice to try to define functions and procedures roughly “in order”, with those that depend on earlier ones later in the tiddler, simply because this makes it easier to find the one you're looking for when you read through the tiddler later.\"},\"Ex:CircularTransclusion\":{\"title\":\"Ex:CircularTransclusion\",\"created\":\"20200604022701610\",\"length\":\"s\",\"modified\":\"20210130174328217\",\"origin\":\"Field Transclusions\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"What happens if you transclude tiddler A into tiddler B, and tiddler B into tiddler A?\"},\"Ex:CircularTransclusion/answer\":{\"title\":\"Ex:CircularTransclusion/answer\",\"created\":\"20200604022723842\",\"modified\":\"20200623131614385\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Same thing as if you transclude a tiddler into itself (because that's effectively what you //are// doing, if you think about it).\"},\"Ex:CloseAndReopen\":{\"title\":\"Ex:CloseAndReopen\",\"complete\":\"\",\"created\":\"20201229033852084\",\"length\":\"s\",\"modified\":\"20210327163010989\",\"origin\":\"Journal Tiddlers\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Close your new journal tiddler and open it again.\"},\"Ex:ConditionalProcedure\":{\"title\":\"Ex:ConditionalProcedure\",\"created\":\"20240830022744545\",\"length\":\"m\",\"modified\":\"20240929002648020\",\"origin\":\"Conditional Inclusion\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"This code snippet is quite repetitive:\\n\\n```html\\n<ul>\\n  <% if [all[current]has[email]] %>\\n    <li>''Email'': {{!!email}}</li>\\n  <% endif %>\\n  <% if [all[current]has[phone]] %>\\n    <li>''Phone'': {{!!phone}}</li>\\n  <% endif %>\\n  <% if [all[current]has[family]] %>\\n    <li>''Family'': {{!!family}}</li>\\n  <% endif %>\\n  <% if [all[current]has[manager]] %>\\n    <li>''Manager'': {{!!manager}}</li>\\n  <% endif %>\\n</ul>\\n```\\n\\nWrite a [[procedure|Procedures]] that wraps the logic that's repeated here, and call it four times to produce the same result.\\n\\n//Hint:// To transclude a field of the current tiddler whose name is in a variable, use the `$transclude` widget with the `$field` parameter: `<$transclude $field=<<myvariable>>/>`.\"},\"Ex:ConditionalProcedureContinued\":{\"title\":\"Ex:ConditionalProcedureContinued\",\"created\":\"20240830022944745\",\"length\":\"m\",\"modified\":\"20240929002940680\",\"origin\":\"Conditional Inclusion\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"The result of [[Ex:ConditionalProcedure]] is still repetitive in that it uses the same procedure call four times in a row, with only the field name changing. Can you remove even this repetition, so there is only a single procedure call?\\n\\n//Hint 1:// What TiddlyWiki feature have we seen that renders some wikitext multiple times?\\n\\n//Hint 2:// A type of filter expression we haven't discussed explicitly yet consists of a tiddler list (sequence of tiddler names).\"},\"Ex:ConditionalProcedureContinued/answer\":{\"title\":\"Ex:ConditionalProcedureContinued/answer\",\"created\":\"20240830023119470\",\"modified\":\"20241010131656908\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"The trick here (useful in a wide variety of situations) is to use a `$list` widget with a filter consisting of a “tiddler list” of the items you want to loop over, here the field names. We'll assign these to the variable `field`, and pass that variable's value as the parameter to the `contact-info-item` procedure:\\n\\n```html\\n\\\\procedure contact-info-item(field)\\n  <% if [all[current]has<field>] %>\\n    <li>\\n      ''<<field>>'':\\n      <$transclude $field=<<field>>/>\\n    </li>\\n  <% endif %>\\n\\\\end\\n\\n<ul>\\n  <$list filter=\\\"email phone family manager\\\" variable=\\\"field\\\">\\n    <$transclude $variable=\\\"contact-info-item\\\" field=<<field>> />\\n  </$list>\\n</ul>\\n```\\n\\nOne can imagine taking this even further, getting the actual procedure call down to a single line:\\n\\n```html\\n\\\\procedure contact-info-item(field)\\n  <% if [all[current]has<field>] %>\\n    <li>\\n      ''<<field>>'':\\n      <$transclude $field=<<field>>/>\\n    </li>\\n  <% endif %>\\n\\\\end\\n\\n\\\\procedure contact-info(fields)\\n  <ul>\\n    <$list filter=<<fields>> variable=\\\"field\\\">\\n      <$transclude $variable=\\\"contact-info-item\\\" field=<<field>>/>\\n    </$list>\\n  </ul>\\n\\\\end\\n\\n<<contact-info \\\"email phone family manager\\\">>\\n```\\n\\n...but at some point, adding additional layers of abstraction makes your wikitext harder to understand, rather than easier.\"},\"Ex:ConditionalProcedure/answer\":{\"title\":\"Ex:ConditionalProcedure/answer\",\"created\":\"20240830022808182\",\"modified\":\"20240830022819289\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"```html\\n\\\\procedure contact-info-item(field)\\n  <% if [all[current]has<field>] %>\\n    <li>\\n      ''<<field>>'':\\n      <$transclude $field=<<field>>/>\\n    </li>\\n  <% endif %>\\n\\\\end\\n\\n!! Information about {{!!title}}\\n\\n<ul>\\n  <<contact-info-item \\\"email\\\">>\\n  <<contact-info-item \\\"phone\\\">>\\n  <<contact-info-item \\\"family\\\">>\\n  <<contact-info-item \\\"manager\\\">>\\n</ul>\\n```\\n\\nNote that the result of this snippet is slightly different than the original code in that the field names are no longer capitalized. If you're fussy about this, you can use the `$text` widget and the `sentencecase[]` operator in a filtered transclusion to upper-case the first letter of the field name:\\n\\n```html\\n\\\\procedure contact-info-item(field)\\n  <% if [all[current]has<field>] %>\\n    <li>\\n      ''<$text text={{{ [<field>sentencecase[]] }}}/>'':\\n      <$transclude $field=<<field>>/>\\n    </li>\\n  <% endif %>\\n\\\\end\\n```\"},\"Ex:ConditionalSetAt\":{\"title\":\"Ex:ConditionalSetAt\",\"created\":\"20210207215704886\",\"length\":\"m\",\"modified\":\"20210502160207975\",\"origin\":\"Hiding and Showing Things\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Repeat the [[previous exercise|Ex:EmptyAtField]], but use a conditional `$set` widget. It's OK if the behavior when the `at` field is empty, rather than missing, differs from the previous exercise.\"},\"Ex:ConditionalSetAt/answer\":{\"title\":\"Ex:ConditionalSetAt/answer\",\"created\":\"20210207215734574\",\"modified\":\"20210207215634063\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"```html\\n<$set name=\\\"meetingTime\\\" filter=\\\"[all[current]has[at]]\\\" value={{!!at}} emptyValue=\\\"(no time specified)\\\">\\n\\n| !Time|<<meetingTime>>|\\n| !Participants|{{!!participants}}|\\n\\n</$set>\\n```\\n\\n(Note the need for an empty line after `$set` to make the table start in [[block mode|Block Mode and Inline Mode]].)\"},\"Ex:ConditionalStyle\":{\"title\":\"Ex:ConditionalStyle\",\"created\":\"20210130034125288\",\"length\":\"m\",\"modified\":\"20210130174332213\",\"origin\":\"Stylesheets\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Modify the tiddler containing `my-funny-class` so that that class's styles apply only if the config tiddler `$:/config/ShowFunnyText` is set to `yes`.\"},\"Ex:ConditionalStyle/answer\":{\"title\":\"Ex:ConditionalStyle/answer\",\"created\":\"20210130034151941\",\"modified\":\"20241015025611956\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"To accomplish this, simply wrap the class in a conditional expression so that the CSS doesn't show up if the config tiddler isn't set appropriately:\\n\\n```html\\n<% if [[$:/config/ShowFunnyText]text[yes]] %>\\n.my-funny-class2 {\\n  background-color: blue;\\n  color: yellow;\\n  font-size: 150%;\\n  border: 3px dotted orange;\\n  text-align: right;\\n}\\n<% endif %>\\n```\\n\\nNote that, as discussed above, the content type must not be `text/css` here, or conditional expressions won't be evaluated.\\n\\nThe filter can be written in several ways; for instance, you could equivalently use:\\n\\n```html\\n[{$:/config/ShowFunnyText}match[yes]]\\n```\\n\"},\"Ex:ConflictingStatements\":{\"title\":\"Ex:ConflictingStatements\",\"created\":\"20241001114012257\",\"length\":\"m\",\"modified\":\"20241001120510771\",\"origin\":\"Parameterizing Field Transclusions\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Suppose you have several co-workers who each have their own opinion about what action to take, and they write a short statement explaining it. Create a `Statements` tiddler that accepts the names of up to three people as parameters, along with corresponding slots where you can write what the statements are. For each statement it should give the person's name, then a block quote containing their statement.\\n\\nUse a procedure inside `Statements` to avoid duplicating the wikitext that shows the person's name and their statement.\\n\\n(You might end up with some text that appears even if you didn't use all of the people/slots. If you want to try hiding it, feel free – we already know some techniques that can do this – but in the [[next section|Conditional Expressions]]), we'll learn the easiest way to do this, so it's fine to just wait!)\"},\"Ex:ConflictingStatements/answer\":{\"title\":\"Ex:ConflictingStatements/answer\",\"created\":\"20241001115546803\",\"modified\":\"20241001115551760\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"```html\\n\\\\parameters(person1, person2, person3)\\n\\n\\\\procedure person-statement(person, slot)\\n  <<person>> says:\\n\\n  <blockquote>\\n    <$slot $name=<<slot>> $depth=\\\"2\\\"/>\\n  </blockquote>\\n\\\\end\\n\\n<$transclude $variable=\\\"person-statement\\\" person=<<person1>> slot=\\\"statement1\\\"/>\\n<$transclude $variable=\\\"person-statement\\\" person=<<person2>> slot=\\\"statement2\\\"/>\\n<$transclude $variable=\\\"person-statement\\\" person=<<person3>> slot=\\\"statement3\\\"/>\\n```\\n\\nNote the need for the `$depth` parameter to get the value of the slot since there is an intervening transclusion (of a procedure).\\n\\nHere's a test with two people/statements:\\n\\n```html\\nOur team has a little bit of extra time this quarter; what should we use it for?\\n\\n<$transclude $tiddler=\\\"Statement\\\" person1=\\\"Alice\\\" person2=\\\"Bob\\\">\\n  <$fill $name=\\\"statement1\\\">\\n    There are not enough croissants available in the cafeteria this week. We must create a committee to solve it immediately.\\n  </$fill>\\n  <$fill $name=\\\"statement2\\\">\\n    Personally, I would prefer that our next initiative involve AI. We don't currently have enough buzzwords on our organization's homepage.\\n  </$fill>\\n</$transclude>\\n```\"},\"Ex:ConstructorAfterFilterStep\":{\"title\":\"Ex:ConstructorAfterFilterStep\",\"complete\":\"\",\"created\":\"20201230212136525\",\"length\":\"m\",\"modified\":\"20240612042317404\",\"origin\":\"Anatomy of Filter Steps\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"What do you think happens if you run the filter `[tag[Contact]title[EmployeeInformationSystem]tag[Application]]`? Assume that the `EmployeeInformationSystem` tiddler is tagged `Application` but not `Contact`.\\n\\nCheck your answer by running the filter in TiddlyWiki, after ensuring that `EmployeeInformationSystem` is tagged appropriately.\"},\"Ex:ConstructorAfterFilterStep/answer\":{\"title\":\"Ex:ConstructorAfterFilterStep/answer\",\"created\":\"20201230212214599\",\"modified\":\"20221015161034782\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"One tiddler `EmployeeInformationSystem` is returned. The step `tag[Contact]` is a no-op (short for //no operation//, meaning adding or removing it has no impact on the final result), because `title` is a constructor and ignores its input.\"},\"Ex:ContactCard\":{\"title\":\"Ex:ContactCard\",\"created\":\"20210206220358830\",\"length\":\"m\",\"modified\":\"20210206220548966\",\"origin\":\"Miscellaneous Widgets\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Create a tiddler called `ContactCard` that displays a drop-down menu from which you can select any contact in the wiki. Underneath the drop-down menu, the selected contact is transcluded through the `ContactInformationTemplate`, showing the contact's details.\"},\"Ex:ContactCard/answer\":{\"title\":\"Ex:ContactCard/answer\",\"created\":\"20210206220636892\",\"modified\":\"20210206220538164\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"```html\\n<$select tiddler=\\\"$:/temp/CurrentContactCard\\\" default=\\\"\\\">\\n    <option value=\\\"\\\">(select a contact)</option>\\n    <$list filter=\\\"[tag[Contact]]\\\">\\n        <option value=<<currentTiddler>>><<currentTiddler>></option>\\n    </$list>\\n</$select>\\n\\n<$tiddler tiddler={{$:/temp/CurrentContactCard}}>\\n    {{||ContactInformationTemplate}}\\n</$tiddler>\\n```\"},\"Ex:ContactInformationPicture\":{\"title\":\"Ex:ContactInformationPicture\",\"complete\":\"\",\"created\":\"20210130041146429\",\"length\":\"M\",\"modified\":\"20210130174336965\",\"origin\":\"Images and Attachments\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Edit the ContactInformationTemplate so that it tries to include a picture for each contact. If the tiddler name is, for example, `JaneDoe`, and there is a tiddler called `JaneDoe/Picture`, Jane's picture, at most 300 pixels wide, should appear at the top of the tiddler. No error should be displayed if such a picture doesn't exist (//hint//: a filter operator called `is[tiddler]` will come in handy).\\n\\nAdd an image for one of your contacts and confirm that everything displays as expected for contacts that have a picture and for contacts that do not.\"},\"Ex:ContactInformationPicture/answer\":{\"title\":\"Ex:ContactInformationPicture/answer\",\"created\":\"20210130041415979\",\"modified\":\"20241001021028138\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"```html\\n<$list filter=\\\"[all[current]addsuffix[/Picture]is[tiddler]]\\\">\\n  <$image source=<<currentTiddler>> width=300/>\\n</$list>\\n```\\n\\nNotice that there's no need to use [[Conditional Expressions]] to ensure nothing is displayed if the image isn't available -- if the picture tiddler doesn't exist, there will be zero results for the filter, and the `$list` widget will never render anything.\"},\"Ex:ContactLinks\":{\"title\":\"Ex:ContactLinks\",\"created\":\"20240928180939170\",\"length\":\"m\",\"modified\":\"20240928181425501\",\"origin\":\"Using Variables as Attributes\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Suppose you use a webapp to store your contacts which allows you to access them at `https://mycontacts.com/contactname`, where `contactname` is the name of their tiddler in TiddlyWiki (e.g., `JaneDoe`). Create a tiddler called `ContactLinks` that contains a bulleted list of all your contacts (sorted in alphabetical order). Each bullet should contain a link to the contact's tiddler in TiddlyWiki, and a link to the contact's page on mycontacts.com.\\n\\nUse a [[dynamic list|Your First Dynamic List]] so new contacts are automatically added. Recall that the current item in a dynamic list is available in the `currentTiddler` variable.\"},\"Ex:ContactLinks/answer\":{\"title\":\"Ex:ContactLinks/answer\",\"created\":\"20240928181020317\",\"modified\":\"20240928181022422\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Here's a simple version.\\n\\n```html\\n<ul>\\n  <$list filter=\\\"[tag[Contact]]\\\">\\n    <li><<currentTiddler>> (<a href=`https://mycontacts.com/$(currentTiddler)$`>mycontacts.com</a>) \\n  </li>\\n  </$list>\\n</ul>\\n```\"},\"Ex:ContactList\":{\"title\":\"Ex:ContactList\",\"complete\":\"\",\"created\":\"20200603192624309\",\"length\":\"m\",\"modified\":\"20210130174338739\",\"origin\":\"Your First Dynamic List\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Create a `ContactList`, similar to our `MeetingList`, that shows all contacts in alphabetical order by their first name.\\n\\n//Tip//: To create a new tiddler and start it with the contents of an existing tiddler, click the \\\"more\\\" drop-down on the existing tiddler's toolbar and choose ''Clone''.\"},\"Ex:ContactListNoPhoneExclusion\":{\"title\":\"Ex:ContactListNoPhoneExclusion\",\"complete\":\"\",\"created\":\"20200603192656839\",\"length\":\"m\",\"modified\":\"20210130174339217\",\"origin\":\"Your First Dynamic List\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Modify the `ContactList` so that contacts with no phone number are excluded.\"},\"Ex:ContactListNoPhoneExclusion/answer\":{\"title\":\"Ex:ContactListNoPhoneExclusion/answer\",\"created\":\"20200603194024447\",\"modified\":\"20200603210244780\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Add a `has[phone]` filter step:\\n\\n```html\\n<$list filter=\\\"[tag[Contact]has[phone]sort[]]\\\">\\n    <<currentTiddler>><br>\\n</$list>\\n```\\n\\nYou might also have put `has[phone]` before `tag[Contact]` or after `sort[]` -- the order doesn't matter in this case.\"},\"Ex:ContactList/answer\":{\"title\":\"Ex:ContactList/answer\",\"created\":\"20200603193925777\",\"modified\":\"20210409172309774\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"```html\\n<$list filter=\\\"[tag[Contact]sort[]]\\\">\\n  <<currentTiddler>><br>\\n</$list>\\n```\\n\\n(You might also have kept the bulleted-list version from the [[previous exercise|Ex:BulletedMeetingList]].)\"},\"Ex:ContactQuote\":{\"title\":\"Ex:ContactQuote\",\"created\":\"20240901190714607\",\"length\":\"m\",\"modified\":\"20240929002947012\",\"origin\":\"Custom Widgets\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Write a `$contact.quote` widget that renders a blockquote for something somebody in your contacts said, given a body containing the quotation and a `contact` parameter containing the name of the contact's tiddler. \\n\\nThe widget should show a link to the person's tiddler, with text matching their name (taken from the `caption` field of the tiddler if it exists, or the title if it doesn't), then a colon, then starting on the next line a blockquote.\\n\\n//Tip//: Use the `<blockquote>` HTML element, not one of the wikitext syntaxes – `$slot` doesn't play nice with wikitext formatting here.\"},\"Ex:ContactQuote/answer\":{\"title\":\"Ex:ContactQuote/answer\",\"created\":\"20240901191043077\",\"modified\":\"20241008122457969\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"```html\\n\\\\widget $contact.quote(contact)\\n  <$link to=<<contact>>><$text text={{{ [<contact>has[caption]get[caption]] ~[<contact>get[title]] }}}/></$link>:\\n\\n  <blockquote>\\n    <$slot $name=\\\"ts-raw\\\"/>\\n  </blockquote>\\n\\\\end\\n\\n<$contact.quote contact=\\\"JaneDoe\\\">\\n  This is how you do the thing.\\n</$contact.quote>\\n```\\n\\nNote that you need either `has[caption]` before or `!is[blank]` after the `get[caption]` step -- otherwise the first filter will have one output tiddler that is the empty string, rather than zero output tiddlers, and the second filter run won't trigger (recall that `~` is another name for `:else`, i.e., use this run only if the previous run had no output). This is just a perhaps unexpected quirk of the `get` filter operator, previously mentioned in [[Ex:DefaultToField]].\\n\\nAnother option for the fallback from caption to title is to use nested `$transclude` widgets, since the body of each `$transclude` widget is used if the tiddler or field is missing:\\n\\n```html\\n<$link to=<<contact>>>\\n  <$transclude $tiddler=<<contact>> $field=\\\"caption\\\">\\n    <$transclude $tiddler=<<contact>> $field=\\\"title\\\"/>\\n  </$transclude>:\\n</$link>\\n```\"},\"Ex:ContactRadioButtonQualification\":{\"title\":\"Ex:ContactRadioButtonQualification\",\"created\":\"20210208023102625\",\"length\":\"m\",\"modified\":\"20210208023021260\",\"origin\":\"Qualification\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Return to the radio buttons we added to the ContactInformationTemplate in [[Ex:FamilyRadioButton]] to display the contact information of a family member of the contact. As written in the answer of that exercise, it is in need of a `qualify` macro so that if multiple contacts are open, they can have different family members selected at once. Add this macro call. (If you wrote your version in a way that doesn't require qualification to work correctly with multiple contacts open, first modify it to store the selected contact in a temp tiddler like the book's version does.)\"},\"Ex:ContactRadioButtonQualification/answer\":{\"title\":\"Ex:ContactRadioButtonQualification/answer\",\"created\":\"20210208023126941\",\"modified\":\"20240926224528156\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"The version presented in the exercise, upgraded, looks like this:\\n\\n```html\\nView phone number for family member: <$list filter={{!!family}}><$radio tiddler=<<qualify \\\"$:/temp/FamilyContact\\\">> value=<<currentTiddler>>>&nbsp;<<currentTiddler>></$radio>&ensp;</$list>\\n\\n<$let stateTiddlerName=<<qualify \\\"$:/temp/FamilyContact\\\">>>\\n  <$transclude tiddler={{{ [<stateTiddlerName>get[text]] }}} field=\\\"phone\\\"/>\\n</$let>\\n```\\n\\nNote that some gymnastics are required with the `$set` widget and the filtered transclusion passed to the `$transclude` widget. You might have been tempted to try simply:\\n\\n```html\\n<$transclude tiddler=<<qualify \\\"$:/temp/FamilyContact\\\">> field=\\\"phone\\\"/>\\n```\\n\\n…but this does not work, for the same reason we had to use a `{{transcluded tiddler name}}` as the value of the `tiddler` attribute rather than a `\\\"quoted tiddler name\\\"` -- we want to transclude the tiddler //named within// the target of the `qualify` macro, not the tiddler that is the target of the qualify macro.\\n\"},\"Ex:ContactTabs\":{\"title\":\"Ex:ContactTabs\",\"created\":\"20200717223526481\",\"length\":\"s\",\"modified\":\"20210130174342014\",\"origin\":\"Tabs\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Create a set of tabs to show all contacts in the wiki. Take a look through the tabs -- what isn't displaying right, and what might that mean?\"},\"Ex:ContactTabs/answer\":{\"title\":\"Ex:ContactTabs/answer\",\"created\":\"20200717223559611\",\"modified\":\"20240924000047747\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"You should have noticed that field transclusions don't work. This is because the `tabs` procedure, surprisingly, doesn't change the current tiddler when rendering each tab.\"},\"Ex:ContactsOnlyOnContacts\":{\"title\":\"Ex:ContactsOnlyOnContacts\",\"created\":\"20200718030804420\",\"length\":\"m\",\"modified\":\"20210207182716511\",\"origin\":\"The View Template\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Adjust the `$:/yourname/TiddlerTypeTemplates/Contact` component of the ViewTemplate so that the contact information template is used only on tiddlers tagged `Contact`.\"},\"Ex:ContactsOnlyOnContacts/answer\":{\"title\":\"Ex:ContactsOnlyOnContacts/answer\",\"created\":\"20200718031215831\",\"modified\":\"20240926004517777\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"```html\\n<% if [all[current]tag[Contact]] %>\\n  {{||ContactInformationTemplate}}\\n<% endif %>\\n```\\n\\nAs usual, there's more than one way to do this. In particular, there are other filters you could use, for example `[<currentTiddler>tag[Contact]]`.\"},\"Ex:ContainingCurrentTiddler\":{\"title\":\"Ex:ContainingCurrentTiddler\",\"complete\":\"\",\"created\":\"20200605153051247\",\"length\":\"m\",\"modified\":\"20210322233056530\",\"origin\":\"Templates and the Current Tiddler\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Suppose that in the `MeetingList`, we want each meeting to display not only its name, but also the name of the tiddler we're using to look at the information (or, more precisely, the current tiddler as defined by TiddlyWiki). That is, since we're viewing the output in the `MeetingList` tiddler, it should say `MeetingList`. The list might look something like this:\\n\\n* An item on MeetingList: EmployeeProfileSetupMeeting\\n* An item on MeetingList: SecondMeeting\\n\\nModify your list widget to achieve this output. The output should continue to be correct if you copy and paste (or transclude) the list widget into a different tiddler -- i.e., you cannot simply write `MeetingList` literally but must dynamically retrieve the title of the tiddler the list widget is in.\"},\"Ex:ContainingCurrentTiddler/answer\":{\"title\":\"Ex:ContainingCurrentTiddler/answer\",\"created\":\"20200605153116452\",\"modified\":\"20240925231405488\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"```html\\n<$let previousCurrentTiddler=<<currentTiddler>> >\\n<ul>\\n  <$list filter=\\\"[tag[Meeting]!sort[at]]\\\">\\n    <li>An item on <<previousCurrentTiddler>>: <$link to=<<currentTiddler>>/></li>\\n  </$list>\\n</ul>\\n</$let>\\n```\\n\\nIt turns out this is a sufficiently common pattern that there's an attribute you can add to the `$list` widget to make it easier, called `variable`. This attribute defaults to `currentTiddler`, but if you set it to something else, the current tiddler will be unmodified and that other variable will contain the current item being listed:\\n\\n```html\\n<ul>\\n  <$list filter=\\\"[tag[Meeting]!sort[at]]\\\" variable=\\\"meeting\\\">\\n    <li>An item on <<currentTiddler>>: <$link to=<<meeting>>/></li>\\n  </$list>\\n</ul>\\n```\\n\"},\"Ex:CountWidgetReplacement\":{\"title\":\"Ex:CountWidgetReplacement\",\"created\":\"20210206220335570\",\"length\":\"m\",\"modified\":\"20210206220346247\",\"origin\":\"Miscellaneous Widgets\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Go to the `WikiStatistics` tiddler, originally created in the exercise [[Ex:WikiStatistics]], and replace any numbers that you can with an appropriate `$count` widget.\"},\"Ex:CountWidgetReplacement/answer\":{\"title\":\"Ex:CountWidgetReplacement/answer\",\"created\":\"20210206220427285\",\"modified\":\"20241015025121901\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"```html\\n<ul>\\n  <li>There are <$count filter=\\\"[tag[Contact]]\\\"/> people in this wiki.</li>\\n  <li>There are <$count filter=\\\"[tag[Meeting]links[]!tag[Contact]]\\\"/> non-contact tiddlers linked from meetings.</li>\\n  <$set name=\\\"totalTiddlers\\\" value={{{ [!is[system]count[]] }}}>\\n    <li><$text text={{{ [tag[Contact]count[]divide<totalTiddlers>multiply[100]precision[3]] }}}/>% of all non-system tiddlers in the wiki are contacts.</li>\\n  </$set>\\n</ul>\\n```\\n\\nAs you can see, the percentage calculation cannot be replaced since `count[]` is not the final filter step.\"},\"Ex:CreateMeetingTemplate\":{\"title\":\"Ex:CreateMeetingTemplate\",\"complete\":\"\",\"created\":\"20200605153755202\",\"length\":\"m\",\"modified\":\"20210322232807963\",\"origin\":\"Templates and the Current Tiddler\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<!--\\n<$action-createtiddler $basetitle=<<qualify \\\"$:/temp/Render\\\">> $savetitle=\\\"!!rendering\\\" text=<<mytext>>/>-->\\n\\nOur meetings have two fields, `at` and `participants`, which don't show up anywhere on the meeting tiddlers. Create a new template tiddler, `MeetingInformationTemplate`, and add a table something like the following.\\n\\n{{Sn:MeetingParticipants||MagicSnippet}}\\n\\nObviously, your version should include the correct information for whichever tiddler the template is being transcluded into. Don't miss the space before the `!` in `Time` and `Participants` in the wikitext, which causes the headings to be right-aligned rather than centered.\\n\\nTransclude this template at the top of all your meeting tiddlers.\"},\"Ex:CreateMeetingTemplate/answer\":{\"title\":\"Ex:CreateMeetingTemplate/answer\",\"created\":\"20200605153818124\",\"modified\":\"20200605153830195\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"In the `MeetingInformationTemplate` tiddler:\\n\\n```html\\n| !Time|{{!!at}}|\\n| !Participants|{{!!participants}}|\\n```\\n\\nThen in each meeting tiddler:\\n\\n```html\\n{{||MeetingInformationTemplate}}\\n```\"},\"Ex:CreateSystemTiddler\":{\"title\":\"Ex:CreateSystemTiddler\",\"created\":\"20210103191056359\",\"length\":\"s\",\"modified\":\"20210130174348070\",\"origin\":\"System Tiddlers\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Create a new system tiddler, then close it and go locate it again.\"},\"Ex:CreatedNowButton\":{\"title\":\"Ex:CreatedNowButton\",\"created\":\"20210207180055632\",\"length\":\"m\",\"modified\":\"20210207180032241\",\"origin\":\"Working with Dates\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Make a button labeled //Created Now// that resets the `created` date of the current tiddler to the current time. Place the button on a template, or simply on a test tiddler, and try resetting the created time of the tiddler.\"},\"Ex:CreatedNowButton/answer\":{\"title\":\"Ex:CreatedNowButton/answer\",\"created\":\"20210207180126132\",\"modified\":\"20240926224412794\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"```html\\n<$button set=\\\"!!created\\\" setTo=<<now [UTC]YYYY0MM0DD0hh0mm0ssXXX>>>\\n  Created Now\\n</$button>\\n\\n{{!!created}}}\\n```\\n\\n(The `{{!!created}}` is just there so you can check your work. You can also click the info button and look on the //Fields// tab.)\"},\"Ex:CreatingBasicFilters\":{\"title\":\"Ex:CreatingBasicFilters\",\"complete\":\"\",\"created\":\"20200603184510002\",\"length\":\"M\",\"modified\":\"20240614050120300\",\"origin\":\"Using Filter Expressions\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Write and test filter expressions for the following criteria:\\n\\n# All tiddlers tagged with `Application`.\\n# All tiddlers tagged with both `Application` and `OnboardingProcess`.\\n#* You'll need to add the `OnboardingProcess` tag to at least one application if you haven't done so already, if you want to see any results.\\n# The tiddler `JaneDoe`, but only if it is tagged with `Application`.\\n#* You won't get any results for this one if you write it correctly, since Jane is not an application, so afterwards you might want to try adding the tag to Jane's tiddler so you can see how it behaves then.\\n# All tiddlers that link to the tiddler `EmployeeProfileSetupMeeting`.\\n#* //Hint//: In addition to `links[]`, there is a `backlinks[]` operator.\\n# All tiddlers that link to the tiddler `EmployeeProfileSetupMeeting` and are //not// daily-journal tiddlers.\\n\"},\"Ex:CreatingBasicFilters/answer\":{\"title\":\"Ex:CreatingBasicFilters/answer\",\"created\":\"20200603184605684\",\"modified\":\"20210207150044596\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"# `[tag[Application]]`\\n# `[tag[Application]tag[OnboardingProcess]]`\\n# `[[JaneDoe]tag[Application]]`\\n#* You might think that `[tag[Application][JaneDoe]]` would be equivalent, but surprisingly it is not. In the next section, [[Anatomy of Filter Steps]], we'll learn that this is because the title operator is a //constructor//; that is, it ignores its input entirely.\\n# `[[EmployeeProfileSetupMeeting]backlinks[]]`\\n# `[[EmployeeProfileSetupMeeting]backlinks[]!tag[Journal]]`\"},\"Ex:CreatingLinkDivs\":{\"title\":\"Ex:CreatingLinkDivs\",\"created\":\"20200718201457359\",\"length\":\"s\",\"modified\":\"20241010131853886\",\"origin\":\"Creating a List of Links and Backlinks\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Let's do a bit of formatting now. It probably will look better if the excerpt starts on a new line after the title, especially once we get this into two columns. An easy way to do that in HTML is to place the excerpt procedure call in a `<div>` tag (short for //division//), which is a generic way to group content together, so go ahead and do that and check that it works.\\n\\nIn addition, let's wrap the `Links` and `Backlinks` sections, including the titles, each in a div (you can do this within the procedure). We'll need to have them in separate divs to get them to appear in two columns.\\n\\nLastly, wrap the whole thing (both the Links and Backlinks sections) in one more div.\\n\\nAside from the excerpts appearing on separate lines from the tiddler titles, you should not see any difference in output yet -- we've merely made it possible to style with CSS.\"},\"Ex:CreatingLinkDivs/answer\":{\"title\":\"Ex:CreatingLinkDivs/answer\",\"created\":\"20200718201524979\",\"modified\":\"20240926120244383\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"```html\\n\\\\procedure excerptify(title)\\n  <$wikify name=\\\"contents\\\" text={{{ [<title>get[text]] }}}>\\n    <$text text={{{ [<contents>split[]first[200]join[]] }}} />...\\n  </$wikify>\\n\\\\end\\n\\n\\\\procedure linkDisplay(title, subfilter)\\n  <div>\\n    <<title>>:\\n\\n    <ul>\\n      <$list filter=\\\"[all[current]subfilter<subfilter>]\\\">\\n        <li>\\n          <$link />:\\n          <div><$transclude $variable=\\\"excerptify\\\" title={{!!title}}/></div>\\n        </li>\\n      </$list>\\n    </ul>\\n  </div>\\n\\\\end\\n\\n<div>\\n  <<linkDisplay \\\"Links\\\" \\\"[links[]]\\\">>\\n  <<linkDisplay \\\"Backlinks\\\" \\\"[backlinks[]]\\\">>\\n</div>\\n```\"},\"Ex:CreatingMoreFilters\":{\"title\":\"Ex:CreatingMoreFilters\",\"created\":\"20200603185133343\",\"length\":\"m\",\"modified\":\"20210320170409142\",\"origin\":\"Common Filter Operators\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Compose and run filters to answer the following questions:\\n\\n# How many tiddlers are in the wiki?\\n# How many of those are system tiddlers?\\n# What meetings contain a link to `JaneDoe`?\\n#* //Hint//: Work backwards.\\n# Which contact has the alphabetically earliest phone number?\\n# Which tiddlers have text in a field called `at`?\\n# Which tiddlers contain the words `JaneDoe` and `help` somewhere in their text field? Use only a single filter step.\"},\"Ex:CreatingMoreFilters/answer\":{\"title\":\"Ex:CreatingMoreFilters/answer\",\"created\":\"20200603185304662\",\"modified\":\"20211129231027978\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"I won't list the actual answers because you've likely played with your wiki enough by now that your answers will be slightly different from mine, but here are the filters you can use:\\n\\n# `[count[]]`\\n# `[is[system]count[]]`\\n# `[[JaneDoe]backlinks[]tag[Meeting]]`\\n# `[tag[Contact]sort[phone]]` (and take the first in the list)\\n# `[has[at]]` (or, more verbosely, `[!field:at[]]`)\\n# `[search:text[JaneDoe help]]` (just `[search[JaneDoe help]]` is fine too, but note that this will also find matches in the `title` and `tags` fields, which might lead to more false positives)\\n\\nOn #6, you may notice several [[system tiddlers|System Tiddlers]] related to Advanced Search in the list. That's because what you're typing into the search box is stored in those tiddlers! We'll learn how this works in [[Buttons and Input Widgets]].\"},\"Ex:CurrentTiddlerAndListWidget\":{\"title\":\"Ex:CurrentTiddlerAndListWidget\",\"complete\":\"\",\"created\":\"20200605152649952\",\"length\":\"m\",\"modified\":\"20210322233057274\",\"origin\":\"Templates and the Current Tiddler\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"In the section on [[dynamic lists|Your First Dynamic List]], we used the value of the variable `<<currentTiddler>>`, without knowing exactly what it was. Review the use of that variable in the dynamic lists section. What does this usage tell you about the interaction of the current tiddler and the `$list` widget?\"},\"Ex:CurrentTiddlerAndListWidget/answer\":{\"title\":\"Ex:CurrentTiddlerAndListWidget/answer\",\"created\":\"20200605152719074\",\"modified\":\"20210207221748314\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"The `$list` widget changes the current tiddler to be each result of the filter in turn.\"},\"Ex:DateFormatter\":{\"title\":\"Ex:DateFormatter\",\"created\":\"20210207180143092\",\"length\":\"M\",\"modified\":\"20210207181226974\",\"origin\":\"Working with Dates\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Create a tiddler called `DateFormatter` that allows you to choose any non-system tiddler in the wiki and a field on that tiddler from drop-down menus, then displays the date stored in that field in at least five different formats. The formats displayed should be configurable by creating tiddlers in `$:/config/DateFormatter/Formats`.\\n\\nIf the field chosen can't be interpreted as a date, the text `(not a date)` should appear where the formatted date otherwise would.\\n\\n//Tip//: The `fields[]` operator gets the names of the fields present on its input tiddlers.\\n\\nHere's an example of what it might look like:\\n\\n{{date-formatter-example.png}}\"},\"Ex:DateFormatter/answer\":{\"title\":\"Ex:DateFormatter/answer\",\"created\":\"20210207180211360\",\"modified\":\"20241010131913941\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Here's my version. You presumably have something slightly different.\\n\\n```html\\n\\\\procedure show-date(fmt) <$view tiddler={{!!selectedtiddler}} field={{!!selectedfield}} format=\\\"date\\\" template=<<fmt>>>(not a date)</$view>\\n\\n\\\\procedure date-row(name, fmt)\\n<tr>\\n  <td><<name>></td>\\n  <td><$transclude $variable=\\\"show-date\\\" fmt=<<fmt>>/></td>\\n</tr>\\n\\\\end\\n\\nTiddler:\\n<$select field=\\\"selectedtiddler\\\" default=\\\"\\\">\\n    <option value=\\\"\\\">(choose a tiddler)</option>\\n    <$list filter=\\\"[!is[system]]\\\">\\n        <option value=<<currentTiddler>>><<currentTiddler>></option>\\n    </$list>\\n</$select>\\n\\n<!-- Don't show the field drop-down if no tiddler is selected, since it won't contain any options. -->\\n<% if [all[current]get[selectedtiddler]!is[blank]] %>\\nField:\\n<$select field=\\\"selectedfield\\\" default=\\\"created\\\">\\n    <$list filter=\\\"[{!!selectedtiddler}fields[]]\\\">\\n        <option value=<<currentTiddler>>><<currentTiddler>></option>\\n    </$list>\\n</$select>\\n<% endif %>\\n\\n<% if [all[current]has[selectedtiddler]has[selectedfield]] %>\\n<table>\\n    <tr>\\n        <th>Format</th>\\n        <th>Date</th>\\n    </tr>\\n    <$list filter=\\\"[prefix[$:/config/DateFormatter/Formats/]]\\\" variable=\\\"currentFormat\\\">\\n        <$transclude $variable=\\\"date-row\\\"\\n            name={{{ [<currentFormat>removeprefix[$:/config/DateFormatter/Formats/]] }}} \\n            fmt={{{ [<currentFormat>get[text]] }}}/>\\n    </$list>\\n</table>\\n<% endif %>\\n```\"},\"Ex:DefaultToField\":{\"title\":\"Ex:DefaultToField\",\"created\":\"20201122170015880\",\"length\":\"m\",\"modified\":\"20241007224340241\",\"origin\":\"Filters and Transclusions\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Modify the template you created in [[Ex:WikipediaLinkTemplate]] so that if the `articleName` variable is not defined, the article name will instead be taken from the `articlename` field of the current tiddler.\\n\\n//Tip//: The `else` filter operator, which adds a constant string to the pipeline if there are no input tiddlers, will be useful here. You will also need to put `!is[blank]` before the `else` operator -- we'll explain why once you've completed this exercise.\"},\"Ex:DefaultToField/answer\":{\"title\":\"Ex:DefaultToField/answer\",\"created\":\"20201122170037082\",\"modified\":\"20241007224504785\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"In your `WikipediaLinkTemplate`:\\n\\n```html\\n<$let theArticle={{{ [<articleName>!is[blank]else{!!articlename}] }}}>\\n    <a class=\\\"tc-tiddlylink-external\\\" href={{{ [{WikipediaMetadata!!url}addsuffix<theArticle>] }}}>\\n        <<theArticle>>\\n    </a>\\n</$set>\\n```\\n\\nNote that now, when you're transcluding the `{{WikipediaLinkTemplate}}`, if you want to use the default `articlename` field, you'll need to use `||` in the transclusion to set the current tiddler correctly (unlike for the [[previous version|Ex:WikipediaLinkTemplate]], where it didn't matter). The current tiddler remains irrelevant if you're manually setting the variable instead.\\n\\nYou are probably wondering why we need `!is[blank]`. To understand, consider what happens if `articleName` hasn't been defined. As we learned way back in the [[Variables]] section, a variable that hasn't been defined evaluates to nothing. However, within filters, TiddlyWiki makes a distinction between having a single value that contains no characters in the pipeline (programmers call this an //empty value// or //empty string//) and the state of there being no value at all in the pipeline (programmers call this //null//).\\n\\nThis may sound like a silly distinction. Indeed, sometimes null and empty can safely be treated as the same thing -- but other times they are quite different. For instance, suppose we are surveying people to find out what names they have printed on the nameplates on their office doors. Alice tells us that she has //nothing// printed on her nameplate (empty value) -- perhaps she just moved into a new office. Bob, on the other hand, didn't answer the question at all (no value, or null value). When analyzing our results, mixing these states together might lead us to incorrect conclusions -- e.g., we might think that 50% of people at the company have empty nameplates and conclude that we need to launch an initiative to fix people's nameplates, when in reality Alice is the only one who has a bad nameplate and a bunch of other people just didn't answer our survey.\\n\\nIn the case of this filter, when no article name is defined, the output of the `<articleName>` filter step is a single empty value. The function of the `!is[blank]` filter step is to eliminate any empty values from the pipeline. Thus, after `!is[blank]`, we don't pass any input values into `else`, and `else` concludes it should output the value of the `articlename` field. If we had left out `!is[blank]`, `else` would receive one input value (an empty one, but an input value nonetheless), so it would just pass the input value through to the output unmodified. Then `theArticle` would also be empty, and the target of our link would be missing.\"},\"Ex:DontOverrideViewTemplateTag\":{\"title\":\"Ex:DontOverrideViewTemplateTag\",\"complete\":\"\",\"created\":\"20200718034451465\",\"length\":\"m\",\"modified\":\"20210321003424291\",\"origin\":\"The View Template\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"In [[Ex:MoveContactInformation]], we edited the `list` field of $:/tags/ViewTemplate, which means that we now have an overridden shadow tiddler for that tag. (You can confirm this by looking under the tag pill or in the ''Shadows'' or ''Explorer'' sidebar view -- it will no longer be listed in bold.)\\n\\nIn this case, that's not the end of the world, since the tag contains no body text and it's relatively unlikely extra elements will be added to this list in a future version of TiddlyWiki (thus necessitating a manual merge if we want them to show up). However, suppose we want to be purists and avoid overriding a shadow tiddler unless absolutely necessary. How can we achieve the same effect without needing to override `$:/tags/ViewTemplate`?\\n\\nDelete the overridden shadow tiddler `$:/tags/ViewTemplate` prior to attempting this exercise to put your  `$:/yourname/TiddlerTypeTemplates/` templates back in their default position, so you can tell if you've succeeded.\"},\"Ex:DontOverrideViewTemplateTag/answer\":{\"title\":\"Ex:DontOverrideViewTemplateTag/answer\",\"created\":\"20200718034820651\",\"modified\":\"20210207183128249\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Add a `list-before` field to `$:/yourname/TiddlerTypeTemplates/Contact` and set its value to `$:/core/ui/ViewTemplate/body`, then similarly for `/Meeting`. Take another look at [[Ordering Tiddlers]] if you don't remember how this works.\\n\\nSetting `list-after` to `$:/core/ui/ViewTemplate/classic` would have the same effect, but I bet you're going to have no idea why you set the field to that specific value when you look at it 6 months from now. Saying it comes before `body` is much more intuitive. It also protects you better against future changes -- if you used `list-after` and `classic` were to move to some other location on the tiddler display, your template might move around with it to a confusing spot. However, it's unlikely you will ever not want this template to appear right before the text of the tiddler, no matter where the text might move to.\"},\"Ex:EditCurrentTiddler\":{\"title\":\"Ex:EditCurrentTiddler\",\"created\":\"20210107230556451\",\"length\":\"m\",\"modified\":\"20210818190539836\",\"origin\":\"Buttons and Input Widgets\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"The `$edit-text` widget can edit any field on any tiddler, so we don't have to use a temporary tiddler if we don't want to. In the example above, we could just update the `userwhoclicked` field directly as the user types.\\n\\nLook up the documentation for the `$edit-text` widget to learn how to select which field the widget should edit, then change the example to behave accordingly.\"},\"Ex:EditCurrentTiddler/answer\":{\"title\":\"Ex:EditCurrentTiddler/answer\",\"created\":\"20210107230620928\",\"modified\":\"20241017004341771\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Quick and easy:\\n\\n```html\\n<$edit-text tiddler=<<currentTiddler>> field=\\\"userwhoclicked\\\" tag=\\\"input\\\" default=\\\"\\\"/>\\n```\\n\\n''A historical note'' that continues to have both practical and pedagogical relevance: Before TiddlyWiki 5.2.0, it was impractical to directly edit a field on the current tiddler, as the text box would lose focus every time you typed a single character, making typing anything into it infuriating. For this reason, when you browse existing wikis or look at old sample code, you may still see temporary tiddlers being used as the targets of edit boxes where they don't look like they would be useful.\\n\\nTo understand why this happened previously, recall that whenever we make any change in the wiki, it is immediately reflected elsewhere -- for instance, a tiddler that is changed so that it newly matches a filter will immediately show up in any lists that use that filter. TiddlyWiki does this by notifying each widget displayed on the screen that a tiddler has changed and giving it a chance to refresh itself if it thinks it might need to display something different as a result of that tiddler changing. (Specifically, the //root widget//, at the “top” of the wiki, sends the news to all of its immediate child widgets, like the sidebar and the story river, then each of those transmit the news to their children, and so on until the message has propagated everywhere it is relevant.)\\n\\nIn versions prior to 5.2.0, anytime any field on a tiddler was changed, all transclusions of that tiddler were refreshed. That included the display of the whole tiddler in the story river and all its contents, since tiddlers are displayed in the story river [[by transcluding them through a template|The View Template]].\\nThe display of the tiddler in the story river of course included the edit widget -- and when a text box is removed from the page and re-rendered, its focus is lost.\\n\\nIn 5.2.0, the refresh mechanism was improved so that transclusions of a tiddler are only refreshed when the specific field being transcluded has changed. This change not only avoids unnecessary refreshes and improves performance, it also prevents this lost-focus issue -- since the text box is included within the `text` field of the tiddler specifically, changing any other field using the text box won't trigger a refresh of the widget.\"},\"Ex:EditTemplateInformation\":{\"title\":\"Ex:EditTemplateInformation\",\"created\":\"20200718033649271\",\"length\":\"m\",\"modified\":\"20210207182939809\",\"origin\":\"The View Template\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Add the tiddlers under `$:/yourname/TiddlerTypeTemplates/` to the edit template as well. What do you notice about where they appear? Does it make sense to have them here?\"},\"Ex:EditTemplateInformation/answer\":{\"title\":\"Ex:EditTemplateInformation/answer\",\"created\":\"20200718033728129\",\"modified\":\"20210418135804196\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"To add these tiddlers to the edit template, tag them `$:/tags/EditTemplate`.\\n\\nA trick with the edit template is that you can't easily add content to the preview section -- it has to go either above or below the editor (and the preview if the previewer is showing). Of course it is possible to do so if you really want to, but you have to override a shadow tiddler.\\n\\nIn this case, however, it probably isn't particularly useful anyway -- we put these templates on there so that we could easily see the values of some tiddler fields, but when we're editing we can easily see all of the fields to begin with.\"},\"Ex:EisLet\":{\"title\":\"Ex:EisLet\",\"created\":\"20240616143236245\",\"length\":\"s\",\"modified\":\"20240727192519224\",\"origin\":\"Variables\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Change the `EmployeeInformationSystem` tiddler from using two `$set` widgets to using one `$let` widget. Make sure all references still show up correctly.\"},\"Ex:EisLet/answer\":{\"title\":\"Ex:EisLet/answer\",\"created\":\"20240616143353115\",\"modified\":\"20240616143425516\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"```html\\n<$let\\n  disclaimer=\\\"(This paragraph does not represent the formal opinion of my company.)\\\"\\n  eis=\\\"Employee Information System\\\"\\n>\\n\\nThe <<eis>> at this nice company allows employees to perform tasks such as:\\n\\n* update their names and other personal information (on the front page after signing in)\\n* view pay stubs (\\\"remuneration\\\" tab)\\n* request vacation dates (\\\"time off\\\" tab)\\n<<disclaimer>>\\n\\nYou need to use the Really Annoying Five-Factor Authentication Process to get into the <<eis>> if it is a Tuesday, unless you have also purchased coffee (tea or pastries do not count) in the company cafeteria earlier in the day. <<disclaimer>>\\n\\nJaneDoe taught me about the <<eis>> in our EmployeeProfileSetupMeeting. <<disclaimer>>\\n\\n</$let>\\n```\"},\"Ex:EisVariable\":{\"title\":\"Ex:EisVariable\",\"created\":\"20200603201028095\",\"length\":\"s\",\"modified\":\"20240616143205804\",\"origin\":\"Variables\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"In the `EmployeeInformationSystem` tiddler, define a second variable called `eis` with the value `Employee Information System`, and replace all references to the EIS or Employee Information System with the value of the `eis` variable. Make sure the disclaimer still shows up correctly.\"},\"Ex:EisVariable/answer\":{\"title\":\"Ex:EisVariable/answer\",\"created\":\"20200603201108320\",\"modified\":\"20210116203519491\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Simply add a second `$set` widget:\\n\\n```html\\n<$set name=\\\"disclaimer\\\" value=\\\"(This paragraph does not represent the formal opinion of my company.)\\\">\\n<$set name=\\\"eis\\\" value=\\\"Employee Information System\\\">\\n\\nThe <<eis>> at this nice company allows employees to perform tasks such as:\\n\\n* update their names and other personal information (on the front page after signing in)\\n* view pay stubs (\\\"remuneration\\\" tab)\\n* request vacation dates (\\\"time off\\\" tab)\\n<<disclaimer>>\\n\\nYou need to use the Really Annoying Five-Factor Authentication Process to get into the <<eis>> if it is a Tuesday, unless you have also purchased coffee (tea or pastries do not count) in the company cafeteria earlier in the day. <<disclaimer>>\\n\\nJaneDoe taught me about the <<eis>> in our EmployeeProfileSetupMeeting. <<disclaimer>>\\n\\n</$set>\\n</$set>\\n```\\n\\nDon't forget to add the second closing `</$set>` tag to match the opening one. In this case, you likely won't notice a difference if you forget, since TiddlyWiki will try its best to figure out what you meant, but if you have lots of content later in the tiddler, it might get confused by the lack of a closing tag.\"},\"Ex:EmptyAtField\":{\"title\":\"Ex:EmptyAtField\",\"created\":\"20210207215057345\",\"length\":\"m\",\"modified\":\"20210502155943685\",\"origin\":\"Hiding and Showing Things\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Update the `MeetingInformationTemplate` to use a fallback to display the text `(no time specified)` if there is no `at` field on the tiddler.\"},\"Ex:EmptyAtField/answer\":{\"title\":\"Ex:EmptyAtField/answer\",\"created\":\"20210207215123361\",\"modified\":\"20210502160129548\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"```html\\n| !Time|<$view field=\\\"at\\\">(no time specified)</$view>|\\n| !Participants|{{!!participants}}|\\n```\\n\\nYou might have also used a `$transclude` widget; in this case it's equivalent since there is no wikitext to wikify in the `at` field if we're using it normally. In [[Working with Dates]], we'll learn that the `$view` widget has some special features for dates that usually make it more useful than the `$transclude` widget.\\n\\nIt's worth noting that TiddlyWiki here makes a distinction between an empty `at` field and an `at` field that doesn't exist at all: if the `at` field exists but is empty, it won't use the fallback. If you don't want there to be a difference between these states, use a filter with the `has` operator instead.\\n\"},\"Ex:EmptyProcedureCall\":{\"title\":\"Ex:EmptyProcedureCall\",\"created\":\"20210409193632190\",\"length\":\"s\",\"modified\":\"20240929003920167\",\"origin\":\"Procedures\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Try calling a procedure that doesn't exist (say, one called `notaprocedure`). What happens?\"},\"Ex:EmptyProcedureCall/answer\":{\"title\":\"Ex:EmptyProcedureCall/answer\",\"created\":\"20210409193703559\",\"modified\":\"20240929003958513\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"There is no output at all, just like if you refer to a variable that has gone out of scope or was never created.\"},\"Ex:EqualsPrefixNeeded\":{\"title\":\"Ex:EqualsPrefixNeeded\",\"created\":\"20240901144824449\",\"length\":\"s\",\"modified\":\"20241008123514104\",\"origin\":\"Overriding Built-In Widgets\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Why did we need to use the `=` (also called `:all`) filter prefix in the [[previous exercise|Ex:SaveOptionalParameters]]?\"},\"Ex:EqualsPrefixNeeded/answer\":{\"title\":\"Ex:EqualsPrefixNeeded/answer\",\"created\":\"20240901144947042\",\"modified\":\"20240901145116622\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"If we didn't use `=`, the `tooltip` and its value would be [[dominantly appended|Multi-Run Filters]]. This would work OK if neither `tooltip` nor its value had occurred earlier in the relevant tiddler list, or if `tooltip` had already been set to precisely same value earlier in the tiddler list. However, if one of them had occurred and not the other, then one of the lists would end up longer than the other, breaking the correspondence between the names and values lists. For example, suppose we start with:\\n\\n```\\n$names=\\\"to class\\\"\\n$values=\\\"[[Tiddlers]] [[red]]\\\"\\n```\\n\\nNow if we add a tooltip parameter with the text `Tiddlers` without using `=`, we'll get the broken result:\\n\\n```\\n$names=\\\"to class tooltip\\\"\\n$values=\\\"[[red]] [[Tiddlers]]\\\"\\n```\\n\\n...because `[[Tiddlers]]` was dominantly appended, yoinking it out of the position where it was needed for the `to` attribute. Using `=`, no deduplication is performed and the elements being added are simply tacked on to the end.\"},\"Ex:ExcerptConfigurationTiddler\":{\"title\":\"Ex:ExcerptConfigurationTiddler\",\"created\":\"20200718202059389\",\"length\":\"m\",\"modified\":\"20210130174409534\",\"origin\":\"Creating a List of Links and Backlinks\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Make the size of the excerpt configurable via a configuration tiddler. Call the configuration tiddler `$:/config/LinkExcerptLength`.\"},\"Ex:ExcerptConfigurationTiddler/answer\":{\"title\":\"Ex:ExcerptConfigurationTiddler/answer\",\"created\":\"20200718202118837\",\"modified\":\"20200718202122620\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Your configuration tiddler itself just needs to contain the text `200` (or whatever number of characters you want to show). To use the value on your filter, the easiest method is:\\n\\n```html\\n{{{ [<wikitext>split[]first{$:/config/LinkExcerptLength}join[]] }}}\\n```\"},\"Ex:ExploreSystemTiddlers\":{\"title\":\"Ex:ExploreSystemTiddlers\",\"created\":\"20210103191015407\",\"length\":\"m\",\"modified\":\"20240926003953431\",\"origin\":\"System Tiddlers\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Take a few minutes to poke around in the ''Explorer'' section of the ''More'' sidebar tab and look into a few system tiddlers to see how they're organized. You can safely edit a system tiddler to look at its wikitext if you like, notwithstanding the scary warning about editing a shadow tiddler; just be sure to click the X button to discard changes when you're done.\"},\"Ex:ExtractFunctions\":{\"title\":\"Ex:ExtractFunctions\",\"created\":\"20240831221450257\",\"length\":\"m\",\"modified\":\"20240929003036842\",\"origin\":\"Functions\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Return to the [[alphabetically last description|Ex:AlphabeticallyLastDescription]] exercise:\\n\\n{{Sn:AlphabeticallyLastFilter||MagicSnippet}}\\n\\nExtract one or more functions from this filter to make it easier to understand. That is, group some of the filter steps by the task they accomplish and create a function with a name that clearly describes what those steps do, and change the filter to call that function instead of using the steps directly.\"},\"Ex:ExtractFunctions/answer\":{\"title\":\"Ex:ExtractFunctions/answer\",\"created\":\"20240831221508407\",\"modified\":\"20240831221544364\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"The correct answer to this exercise will depend on how you think about the tasks being carried out by this filter. Probably the most obvious function to extract is:\\n\\n```\\n\\\\function .enter-transclusion [split[{{]split[}}]get[text]]\\n\\n{{{ [all[shadows]tag[$:/tags/EditorToolbar]get[description].enter-transclusion[]!sort[]first[]] }}}\\n```\\n\\nAn `.editor-toolbar-description` function replacing the first three steps might plausibly make this filter more understandable, too.\"},\"Ex:FamilyRadioButton\":{\"title\":\"Ex:FamilyRadioButton\",\"created\":\"20210206220348508\",\"length\":\"m\",\"modified\":\"20210206220517570\",\"origin\":\"Miscellaneous Widgets\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Add a series of radio buttons on the `ContactInformationTemplate` that allow you to view some information about each family member of the current tiddler.\"},\"Ex:FamilyRadioButton/answer\":{\"title\":\"Ex:FamilyRadioButton/answer\",\"created\":\"20210206220547886\",\"modified\":\"20240926224603550\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Here's a simple version that just shows the phone number:\\n\\n```html\\nView phone number for family member: <$list filter={{!!family}}><$radio tiddler=<<qualify \\\"$:/temp/FamilyContact\\\">> value=<<currentTiddler>>>&nbsp;<<currentTiddler>></$radio>&ensp;</$list>\\n\\n<$let stateTiddlerName=<<qualify \\\"$:/temp/FamilyContact\\\">>>\\n  <$transclude tiddler={{{ [<stateTiddlerName>get[text]] }}} field=\\\"phone\\\"/>\\n</$let>\\n```\\n\\nNotice that we don't transclude the tiddler `$:/temp/FamilyContact` itself, like `<$transclude tiddler=\\\"$:/temp/FamilyContact\\\"/>`, we transclude //the transcluded value of// `$:/temp/FamilyContact` (using the filter `[<stateTiddlerName>get[text]]`). You might have to think about this for a moment: we stored the name of the selected contact in the tiddler `$:/temp/FamilyContact`, so we don't want to transclude the tiddler `$:/temp/FamilyContact` -- we would be trying to get the value of the `phone` field of `$:/temp/FamilyContact` itself (which is presumably empty). Instead, we want to transclude the `phone` field of the tiddler which is named within that tiddler (i.e., the contact tiddler we selected). This means we effectively have to transclude twice.\"},\"Ex:FilteredTelephoneLink\":{\"title\":\"Ex:FilteredTelephoneLink\",\"created\":\"20210131040945181\",\"length\":\"m\",\"modified\":\"20240923221709793\",\"origin\":\"Macros\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Repeat the [[telephone link exercise|Ex:TelephoneLink]], but this time use a filter rather than `backtick substitution` or a macro to combine the `tel:` part and the phone number. You may need to visit the TiddlyWiki documentation to find an appropriate filter operator.\"},\"Ex:FilteredTelephoneLink/answer\":{\"title\":\"Ex:FilteredTelephoneLink/answer\",\"created\":\"20210131041013435\",\"modified\":\"20240923221703037\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"```html\\n<a href={{{ [[tel:]addsuffix{!!phone}] }}}>Call {{!!title}}</a>\\n```\\n\\nOr, equivalently:\\n\\n```html\\n<a href={{{ [{!!phone}addprefix[tel:]] }}}>Call {{!!title}}</a>\\n```\\n\\nThis suggests a general fact: most anything you can do with [[text substitution|Text Substitution]] in a macro, you can also achieve with a [[filtered transclusion|Filters and Transclusions]]. Which you choose is largely personal preference, although sometimes one might be significantly clearer and easier than the other, in which case you should probably choose that one. And in simple cases like this where backticks will suffice, those are probably clearest of all.\"},\"Ex:FixingContactTabs\":{\"title\":\"Ex:FixingContactTabs\",\"created\":\"20200717223809578\",\"length\":\"m\",\"modified\":\"20241010125923124\",\"origin\":\"Tabs\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Fix the issue identified in the previous exercise, [[Ex:ContactTabs]], so that all contacts display all information correctly.\\n\\n//Hint 1//: You'll need to create a template tiddler. You can specify the name of a template used to render each tab using the `template` parameter to the `tabs` procedure.\\n\\n//Hint 2//: The `currentTab` variable contains the name of the tiddler being rendered as the current tab.\\n\\nIf you get really stuck, read the TiddlyWiki [[documentation|https://tiddlywiki.com/#tabs%20Macro]] on the `tabs` procedure, which explains how to do this. Try to figure it out yourself for a few minutes first, though!\"},\"Ex:FixingContactTabs/answer\":{\"title\":\"Ex:FixingContactTabs/answer\",\"created\":\"20200717224206811\",\"modified\":\"20241015002159415\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"First, create a template tiddler called `ContactTabTemplate` with content like the following:\\n\\n```html\\n<$tiddler tiddler=<<currentTab>>>\\n  <$transclude mode=\\\"block\\\"/>\\n</$tiddler>\\n```\\n\\nWhen each tab is transcluded through this template, the current tiddler will be set to `<<currentTab>>` prior to rendering each tab's tiddler, so all references to the current tiddler within that tab's tiddler will now be set in the same way as if that tiddler were being rendered directly in the story river.\\n\\nA couple of notes:\\n\\n* The `$tiddler` widget is the most idiomatic way to set the current tiddler, but you could equivalently set the variable `currentTiddler` using something like a `$let` widget.\\n* We didn't specify a tiddler for the `$transclude` widget. That's because if you don't specify either a `$tiddler` or `$variable` parameter, the widget defaults to transcluding the current tiddler.\\n* We specified `mode=\\\"block\\\"` on the `$transclude` widget. We could also have left blank lines around the `$transclude` widget to get the same effect. We'll talk more about this next chapter, in [[Block Mode and Inline Mode]].\\n\\nOnce the template tiddler is in place, add a `template:ContactTabTemplate` parameter to the `tabs` call used to render your contact tabs to use this template.\"},\"Ex:FriendlyViewsNames\":{\"title\":\"Ex:FriendlyViewsNames\",\"complete\":\"\",\"created\":\"20200718044721309\",\"length\":\"m\",\"modified\":\"20210418141357078\",\"origin\":\"Adding to the Sidebar\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"By default, all of the tabs will have ugly system-tiddler names on them, like `$:/yourname/Views`. Fix this so they have friendly names like we defined at the beginning of this section.\"},\"Ex:FriendlyViewsNames/answer\":{\"title\":\"Ex:FriendlyViewsNames/answer\",\"created\":\"20200718044740351\",\"modified\":\"20241010131009806\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"To do this, you simply set the `caption` field of each tiddler. The caption applies on tabs, in tables of contents, in tag pills, and pretty much anywhere else you can think of except the actual title line when looking at the tiddler.\\n\\nNote that the `default` parameter to `tabs` still needs to refer to the title, not the caption. This may seem obvious since the title is always how TiddlyWiki refers to the tiddler internally, but it can be unexpected when the name that appears on the tab doesn't work to select that tab!\"},\"Ex:FudgeAdviceReflection\":{\"title\":\"Ex:FudgeAdviceReflection\",\"created\":\"20200603200049928\",\"length\":\"m\",\"modified\":\"20210130174418398\",\"origin\":\"Creating Hierarchies with a Table of Contents\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Revisit the tiddler you created in the previous exercise.\\n\\n* Logically, is it a child of that meeting? Or is it a separate idea that just happened to occur during that meeting?\\n* Would it be better to use a different kind of relationship, like a link?\\n* Think about the title you chose: does it [[serve as metacommentary on the idea|Tiddler Titles]]?\"},\"Ex:FudgeAdviceTiddler\":{\"title\":\"Ex:FudgeAdviceTiddler\",\"created\":\"20200603200012761\",\"length\":\"s\",\"modified\":\"20210409134556285\",\"origin\":\"Creating Hierarchies with a Table of Contents\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Suppose that, during our meeting, Jane gave us some advice about the company that probably shouldn't stray. We might want to put that in a separate tiddler to reduce the chance we accidentally copy and paste it over to someone else who asks what happened at the meeting.\\n\\nCreate such a tiddler with the following text, and make it a child of the `EmployeeProfileSetupMeeting`, so we'll still be able to keep track of it:\\n\\n```html\\nJaneDoe told me, while we were together at the EmployeeProfileSetupMeeting, that I should be very careful about saying the word \\\"fudge\\\" in this office, due to an incident involving Robert at the 2018 Christmas party that nobody wants to talk about.\\n```\\n\\nCheck the `OnboardingProcess` table of contents again. Did you get a third level of hierarchy?\"},\"Ex:FudgeTiddlerRevisited\":{\"title\":\"Ex:FudgeTiddlerRevisited\",\"created\":\"20200603200326772\",\"length\":\"s\",\"modified\":\"20210130174421216\",\"origin\":\"Creating Evergreen Notes\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"If you didn't do it while reading, go back to the fudge tiddler and give it appropriate tags and links. You can link to some nonexistent tiddlers if you like.\"},\"Ex:FudgeTransclusion\":{\"title\":\"Ex:FudgeTransclusion\",\"created\":\"20200604014215820\",\"length\":\"s\",\"modified\":\"20210130174422990\",\"origin\":\"Field Transclusions\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Our initial motivation for extracting the now-infamous fudge tiddler from the `EmployeeProfileSetupMeeting` tiddler was so that we wouldn't accidentally share that information with somebody. Suppose that everyone else at the company also uses TiddlyWiki, so we always share our notes as raw wikitext instead of rendered/formatted output so recipients can paste it directly into their own wikis. In this case, we can rely on transclusion to protect us provided that the fudge tiddler's title isn't too revealing: if we copy the whole tiddler without noticing this inclusion, the recipient won't get the transcluded tiddler and thus won't see our embarrassing notes.\\n\\nAll this is to say, transclude the fudge tiddler into the `EmployeeProfileSetupMeeting` tiddler. What are the advantages and disadvantages of doing it this way as opposed to linking or tagging?\"},\"Ex:FudgeTransclusion/answer\":{\"title\":\"Ex:FudgeTransclusion/answer\",\"created\":\"20200604014230718\",\"modified\":\"20200604014239895\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"* //Advantages//: You don't have to click on and open another tiddler. The other content blends seamlessly into this one.\\n* //Disadvantages//: Editing is more difficult. It's not obvious where the content comes from, or even that it's transcluded, without going into edit mode.\"},\"Ex:FudgeWithoutJane\":{\"title\":\"Ex:FudgeWithoutJane\",\"created\":\"20200716022808142\",\"length\":\"s\",\"modified\":\"20210130174424856\",\"origin\":\"Multi-Run Filters\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Write a filter to find all tiddlers mentioning fudge that don't list Jane as a participant. Use two filter runs.\"},\"Ex:FudgeWithoutJane/answer\":{\"title\":\"Ex:FudgeWithoutJane/answer\",\"created\":\"20200716022842367\",\"modified\":\"20210410181030475\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"```\\n[search[fudge]] -[contains:participants[JaneDoe]]\\n```\"},\"Ex:FunnyClass\":{\"title\":\"Ex:FunnyClass\",\"created\":\"20210130034039226\",\"length\":\"s\",\"modified\":\"20210130174426726\",\"origin\":\"Stylesheets\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Add `my-funny-class` from above (or any styling you like, as long as it is distinctive) to a global stylesheet in your wiki and apply the class to some text.\"},\"Ex:FunnyTextCheckbox\":{\"title\":\"Ex:FunnyTextCheckbox\",\"created\":\"20210130035045108\",\"length\":\"m\",\"modified\":\"20210130174427177\",\"origin\":\"Stylesheets\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Add a checkbox to the control panel on a new subtab within the //Settings// tab called //Styles//, allowing this value to be toggled on and off, so the user can make text look funny only if they so desire.\"},\"Ex:FunnyTextCheckbox/answer\":{\"title\":\"Ex:FunnyTextCheckbox/answer\",\"created\":\"20210130035112224\",\"modified\":\"20210130035017840\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"The tag to add a subtab to the //Settings// section of the control panel is `$:/tags/ControlPanel/SettingsTab`. A tiddler with this tag and a caption of `Styles` could look like:\\n\\n```html\\n<$checkbox tag=\\\"input\\\" tiddler=\\\"$:/config/ShowFunnyText\\\" field=\\\"text\\\" checked=\\\"yes\\\" unchecked=\\\"no\\\" default=\\\"no\\\"> Show funny text</$checkbox>\\n```\"},\"Ex:GoogleLink\":{\"title\":\"Ex:GoogleLink\",\"complete\":\"\",\"created\":\"20210124040854550\",\"length\":\"m\",\"modified\":\"20210317024646003\",\"origin\":\"HTML\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"In a new tiddler in your wiki, create a link to Google using HTML, with `Google` as the link text. The element used to create links is `<a>`; the `href` attribute contains the URL of the link, and the content is the text of the link.\"},\"Ex:GoogleLink/answer\":{\"title\":\"Ex:GoogleLink/answer\",\"created\":\"20210124040916272\",\"modified\":\"20210124040825864\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"```html\\n<a href=\\\"https://www.google.com\\\">Google</a>\\n```\"},\"Ex:HolidayToday\":{\"title\":\"Ex:HolidayToday\",\"created\":\"20200718011939334\",\"length\":\"m\",\"modified\":\"20240924000606054\",\"origin\":\"Data Tiddlers\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Create a tiddler called `TodaysHoliday` which says `It's ''The Day'' today!`, where `The Day` is the name of the holiday that is occurring today, according to the data tiddler. Unless you happen to be doing this exercise on one of the four holidays listed above, you'll need to make up and add your own holiday with today's date so you can check the result.\\n\\nYou may need to look at the documentation for the `now` {{Ltc:NowProcedure||LieToChildrenTemplate}} to figure out how to get today's date in the `month/day` format.\"},\"Ex:HolidayToday/answer\":{\"title\":\"Ex:HolidayToday/answer\",\"created\":\"20200718011953409\",\"modified\":\"20240924001531442\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"The easiest and cleanest way uses the <a href=\\\"https://tiddlywiki.com/#TranscludeWidget\\\" class=\\\"tc-tiddlylink-external\\\">`$transclude` widget</a> with the `index` attribute to get a property from a data tiddler:\\n\\n```html\\nIt's ''<$transclude tiddler=\\\"UsHolidays\\\" index=<<now \\\"0MM/0DD\\\">> />'' today!\\n```\\n\\nHowever, we didn't discuss the `transclude` widget or its `index` attribute, so it's unlikely you thought of that unless you assumed it must exist and visited the documentation (but kudos if you did, that's the right way to think about widgets)! Here's a way to accomplish this using only tools we've already seen:\\n\\n```html\\n<$let formattedToday=<<now \\\"0MM/0DD\\\">>>\\n  It's ''<$text text={{{ [[UsHolidays]getindex<formattedToday>] }}} />'' today!\\n</$set>\\n```\\n\\n(Recall that the `text` widget is needed to prevent the holiday from turning into a link with the use of triple curly braces.)\"},\"Ex:HostingOptions\":{\"title\":\"Ex:HostingOptions\",\"created\":\"20201123000642753\",\"length\":\"m\",\"modified\":\"20210130174907396\",\"origin\":\"Supplemental Exercises\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Try out another option for [[hosting and saving your TiddlyWiki|Options for Saving and Hosting Your Wiki]].\\n\"},\"Ex:IdentifyingRecentEvergreenNotes\":{\"title\":\"Ex:IdentifyingRecentEvergreenNotes\",\"complete\":\"\",\"created\":\"20200603200410872\",\"length\":\"m\",\"modified\":\"20210321012734091\",\"origin\":\"Creating Evergreen Notes\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Find some notes you've recently taken, in any format, and review them to see if there are any ideas that would be well served by being developed as evergreen notes. These might be part of a journal, annotations you made in a book, ideas for a project, or scribbles about a lecture you attended. Write down what contexts these ideas would belong in and what other ideas they would be related to.\"},\"Ex:ImageHtml\":{\"title\":\"Ex:ImageHtml\",\"created\":\"20210124041040705\",\"length\":\"s\",\"modified\":\"20210130174430260\",\"origin\":\"HTML\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"What HTML element is used to insert an image? You may wish to search the web to find the answer.\"},\"Ex:ImageHtml/answer\":{\"title\":\"Ex:ImageHtml/answer\",\"created\":\"20210124041101968\",\"modified\":\"20210124041010621\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"`<img>`, a void element with the `src` attribute containing the URL of the image.\"},\"Ex:ImportScopes\":{\"title\":\"Ex:ImportScopes\",\"created\":\"20240923234202349\",\"length\":\"s\",\"modified\":\"20240923234448455\",\"origin\":\"Much More Than You Wanted to Know About Scopes\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Rather than nesting scopes, why not just place the local procedures in a separate tiddler and use the `\\\\import` pragma to access them?\"},\"Ex:ImportScopes/answer\":{\"title\":\"Ex:ImportScopes/answer\",\"created\":\"20240923234232294\",\"modified\":\"20241001022212227\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Using `\\\\import` would bring the local procedures into the current tiddler's scope...but //everything// in the current tiddler's scope is made global by $:/tags/Global, so separating the procedures into a separate tiddler wouldn't actually achieve anything in terms of avoiding pollution.\\n\\nMost serious programming languages solve this problem in an elegant way, by automatically //namespacing// (basically, a formalized version of prefixing the names) the things you import. If you imported `SomeTiddler`'s procedures, you would say `SomeTiddler.procedurename` rather than `procedurename` to access them. Unfortunately, TiddlyWiki doesn't currently offer this -- maybe some day!\"},\"Ex:InputExistsText\":{\"title\":\"Ex:InputExistsText\",\"created\":\"20200718215047062\",\"length\":\"m\",\"modified\":\"20210130174438445\",\"origin\":\"Buttons and Input Widgets\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Add a little bit of text to the right of the `Go` button in [[Ex:JumpToTiddler]] that displays \\\"Exists!\\\" in green if the tiddler name currently entered into the input field exists, and \\\"Not found.\\\" in red if it doesn't. This text should immediately update as you type.\\n\\n//Hint//: To quickly change the color of some text, you can wrap it with a span, like `<span style=\\\"color:blue;\\\">the text</span>`.\"},\"Ex:InputExistsText/answer\":{\"title\":\"Ex:InputExistsText/answer\",\"created\":\"20200718215113479\",\"modified\":\"20241017004242594\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"```html\\nGo to Tiddler:\\n<$edit-text tiddler=\\\"$:/temp/goto\\\" tag=\\\"input\\\" default=\\\"\\\"/>\\n<$button to={{$:/temp/goto}}>Go</$button>\\n<% if [{$:/temp/goto}is[tiddler]] %>\\n  <span style=\\\"color:green;\\\">Exists!</span>\\n<% else %>\\n  <span style=\\\"color: red;\\\">Not found.</span>\\n<% endif %>\\n```\"},\"Ex:InspectSquare\":{\"title\":\"Ex:InspectSquare\",\"complete\":\"\",\"created\":\"20210121000924032\",\"length\":\"m\",\"modified\":\"20210409174545653\",\"origin\":\"When Things Go Wrong\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Using your browser's element inspector, determine:\\n\\n# What the `class` attribute of the blue square below is.\\n# What the hidden message in this exercise says.\\n\\n<div class=\\\"bluuuuu\\\" style=\\\"background-color: blue;\\\" width=24px>&nbsp;<span style=\\\"display: none;\\\">Help, I'm trapped in an HTML span!</span></div>\\n\\n<style>\\n.bluuuuu {\\n  margin: auto;\\n  width: 10px;\\n  height: 10px;\\n  border: 1px solid rgba(0, 0, 0, 0.2) }\\n</style>\"},\"Ex:InspectSquare/answer\":{\"title\":\"Ex:InspectSquare/answer\",\"created\":\"20210121000943507\",\"modified\":\"20210121000855353\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"The class is `bluuuuu`, and the hidden message, kept in a `span` element inside the `div` element that makes up the square, is “Help, I'm trapped in an HTML span!”\"},\"Ex:JaneDataTransclusion\":{\"title\":\"Ex:JaneDataTransclusion\",\"created\":\"20200604013708933\",\"length\":\"m\",\"modified\":\"20210409200122678\",\"origin\":\"Field Transclusions\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"One of the complaints we had about our [[Contact Tiddlers]] when we initially created them was that you couldn't see any of the fields on them without clicking on the //info// button. Remedy that by adding a section to the `JaneDoe` tiddler titled `Information about Jane`, containing a bulleted list or table that shows Jane's email address, phone number, family members, and manager.\"},\"Ex:JaneDataTransclusion/answer\":{\"title\":\"Ex:JaneDataTransclusion/answer\",\"created\":\"20200604013733380\",\"modified\":\"20200604013754220\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"An easy version:\\n\\n```html\\n!! Information about Jane\\n\\n* ''Email'': {{!!email}}\\n* ''Phone'': {{!!phone}}\\n* ''Family'': {{!!family}}\\n* ''Manager'': {{!!manager}}\\n```\"},\"Ex:JaneDoeFamily\":{\"title\":\"Ex:JaneDoeFamily\",\"created\":\"20200603115901406\",\"length\":\"m\",\"modified\":\"20210130174442565\",\"origin\":\"Reviewing the Basics\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Visit Jane Doe's tiddler and review the //family// and //manager// fields. These fields refer to several people who don't have tiddlers yet. Create those tiddlers, with all the appropriate metadata.\\n\\nYou can assume that John Doe and Emily Doe are also managed by Chris Smith (though managing three family members unrelated to you sounds like a disaster waiting to happen). Your choice of phone numbers and email addresses does not matter, provided they are in the correct formats.\"},\"Ex:JaneManagerPhone\":{\"title\":\"Ex:JaneManagerPhone\",\"created\":\"20200604020227764\",\"length\":\"M\",\"modified\":\"20240925230043097\",\"origin\":\"Field Transclusions\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Transclude a line into the text of Jane's tiddler that contains Chris Smith's phone number, in case she messes up so badly that you need to contact her manager immediately.\\n\\nCan you make it so that it currently refers to Chris's phone number, but if the `manager` field is updated, the new manager's phone number will appear instead, without having to change the transclusion?\"},\"Ex:JaneManagerPhone/answer\":{\"title\":\"Ex:JaneManagerPhone/answer\",\"created\":\"20200604020245387\",\"modified\":\"20240925230029291\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Here's the obvious and straightforward way, which has the major disadvantage of silently not updating if the manager changes and perhaps making you call the wrong number at an inopportune time:\\n\\n```html\\nJane's manager's phone number is {{ChrisSmith!!phone}}.\\n```\\n\\nNow for trying to make it grab the manager's name from the `manager` field on the fly. You may have been tempted to try:\\n\\n```html\\n{{ {{!!manager}}!!phone }}\\n```\\n\\n…but unfortunately this does not work; TiddlyWiki doesn't parse wikitext within `<<>>` or `{{}}`, so variable and field transclusions cannot be nested.\\n\\nInstead, you can use the `$transclude` widget and pass the transclusion of the manager's name as the value of the `$tiddler` parameter:\\n\\n```html\\n<$transclude $tiddler={{!!manager}} $field=\\\"phone\\\"/>\\n```\\n\\nIt's possible to create additional levels of indirection (e.g., to get Jane's manager's manager), but to do it elegantly, we will need to know how to store the results of filters to a variable, which will be in an upcoming section.\"},\"Ex:JaneMeetingList\":{\"title\":\"Ex:JaneMeetingList\",\"created\":\"20200603192759957\",\"length\":\"m\",\"modified\":\"20210130174444781\",\"origin\":\"Your First Dynamic List\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Modify the `MeetingList` so that only meetings that Jane attended are shown. Be careful not to exclude meetings that Jane attended along with other people.\"},\"Ex:JaneMeetingList/answer\":{\"title\":\"Ex:JaneMeetingList/answer\",\"created\":\"20200603194617232\",\"modified\":\"20200603194755669\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"```html\\n<$list filter=\\\"[tag[Meeting]contains:participants[JaneDoe]!sort[at]]\\\">\\n  <<currentTiddler>><br>\\n</$list>\\n```\\n\\nNote the use of the `contains:` operator rather than the `field:` operator. If we used `field:`, then a meeting whose `participants` field included both Jane and someone else, like `JaneDoe ChrisSmith`, would not match.\"},\"Ex:JaneMeetingMultirun\":{\"title\":\"Ex:JaneMeetingMultirun\",\"complete\":\"\",\"created\":\"20200715230504176\",\"length\":\"s\",\"modified\":\"20210130174447066\",\"origin\":\"Multi-Run Filters\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Write a filter to find all meetings that are part of the `OnboardingHr` project or the `TopSecretHr` project and were attended by Jane.\"},\"Ex:JaneMeetingMultirun/answer\":{\"title\":\"Ex:JaneMeetingMultirun/answer\",\"created\":\"20200715230537311\",\"modified\":\"20210410180943780\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"```\\n[tag[OnboardingHr]] [tag[TopSecretHr]] +[contains:participants[JaneDoe]]\\n```\\n\\nThis works fine too, but requires more typing and is a bit harder to understand:\\n\\n```\\n[tag[OnboardingHr]contains:participants[JaneDoe]] [tag[TopSecretHr]contains:participants[JaneDoe]]\\n```\"},\"Ex:JohnDoeInAnyField\":{\"title\":\"Ex:JohnDoeInAnyField\",\"created\":\"20210206182909132\",\"length\":\"m\",\"modified\":\"20210206182844186\",\"origin\":\"Common Filter Operators\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"In an [[exercise|Ex:JohnDoeSearch]] in the [[Searching]] section, we noted that a search for `JohnDoe` did not find places where John was mentioned somewhere other than the `text` field. Write and test a filter that finds mentions of John in any field.\"},\"Ex:JohnDoeInAnyField/answer\":{\"title\":\"Ex:JohnDoeInAnyField/answer\",\"created\":\"20210206182950019\",\"modified\":\"20210409164849480\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"```html\\n[search:*[JohnDoe]]\\n```\\n\\nTo prevent tiddlers related to $:/AdvancedSearch from appearing in your search results because you have typed text containing `JohnDoe` in the search box, you might want to use:\\n\\n```html\\n[!is[system]search:*[JohnDoe]]\\n```\"},\"Ex:JohnDoeSearch\":{\"title\":\"Ex:JohnDoeSearch\",\"created\":\"20200603175748862\",\"length\":\"m\",\"modified\":\"20210130174448580\",\"origin\":\"Searching\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Search for `JohnDoe`. Do you notice anything about the results? What's there, and what's missing?\"},\"Ex:JohnDoeSearch/answer\":{\"title\":\"Ex:JohnDoeSearch/answer\",\"created\":\"20200603175809322\",\"length\":\"m\",\"modified\":\"20240612040429639\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Uses of `JohnDoe` in the `title`, `text`, and `tags` fields of a tiddler appear when searching. Uses in other fields, however, such as the `family` field on `JaneDoe`, do not.\\n\\nLater on, we'll learn some ways around this. In the meantime, it's good to keep in mind that user-defined fields are in many ways second-class citizens in TiddlyWiki. If you want to do much with them beyond creating them, you have to add those features yourself with plugins or custom logic. This is not to say that doing so is difficult, though!\"},\"Ex:JsonHoliday\":{\"title\":\"Ex:JsonHoliday\",\"created\":\"20200718012242269\",\"length\":\"s\",\"modified\":\"20210130174454312\",\"origin\":\"Data Tiddlers\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Create another data tiddler called `UsHolidaysJson` using the same data in a JSON format, and change your `TodaysHoliday` tiddler to look the holiday up in there instead. Everything should continue to work the same way on the transclusion side. The table looks like this in JSON:\\n\\n```json\\n{\\n  \\\"01/01\\\": \\\"New Year's Day\\\",\\n  \\\"07/04\\\": \\\"Independence Day\\\",\\n  \\\"10/31\\\": \\\"Halloween\\\",\\n  \\\"12/25\\\": \\\"Christmas Day\\\"\\n}\\n```\"},\"Ex:JumpToTiddler\":{\"title\":\"Ex:JumpToTiddler\",\"created\":\"20200718214905520\",\"length\":\"m\",\"modified\":\"20210130174457312\",\"origin\":\"Buttons and Input Widgets\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Create a tiddler `JumpToTiddler` that has an input field and a `Go` button. When the button is clicked, the tiddler named in the input field should open.\\n\\n//Hint//: One of the attributes of the `button` widget we didn't discuss here will help.\"},\"Ex:JumpToTiddler/answer\":{\"title\":\"Ex:JumpToTiddler/answer\",\"created\":\"20200718215026527\",\"modified\":\"20200718215030098\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"```html\\nGo to Tiddler:\\n<$edit-text tiddler=\\\"$:/temp/goto\\\" tag=\\\"input\\\" default=\\\"\\\"/>\\n<$button to={{$:/temp/goto}}>Go</$button>\\n```\"},\"Ex:LinkDivClasses\":{\"title\":\"Ex:LinkDivClasses\",\"created\":\"20200718201549864\",\"length\":\"m\",\"modified\":\"20241001022302331\",\"origin\":\"Creating a List of Links and Backlinks\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"One more step with the divs. In order to get them formatted correctly, we need to be able to identify each of them separately. The way we do this in HTML/CSS is by applying a //class// (that is, assigning a value to the `class` attribute of the HTML tag). Adjust the wikitext so that each div has a class. It's a good idea to [[prefix your class names|Much More Than You Wanted to Know About Scopes]] (in CSS class names, the prefix is normally separated from the rest of the name by a hyphen `-`), as CSS classes apply globally. I'll prefix these with `sib-links-`.\\n\\nAgain, you won't see any changes in output yet.\"},\"Ex:LinkDivClasses/answer\":{\"title\":\"Ex:LinkDivClasses/answer\",\"created\":\"20200718201623464\",\"modified\":\"20240926120613659\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"```html\\n\\\\procedure excerptify(title)\\n  <$wikify name=\\\"contents\\\" text={{{ [<title>get[text]] }}}>\\n    <$text text={{{ [<contents>split[]first[200]join[]] }}} />...\\n  </$wikify>\\n\\\\end\\n\\n\\\\procedure linkDisplay(title, subfilter, className)\\n  <div class=<<className>>>\\n    <<title>>:\\n\\n    <ul>\\n      <$list filter=\\\"[all[current]subfilter<subfilter>]\\\">\\n        <li>\\n          <$link />:\\n          <div class=\\\"sib-links-excerpt\\\"><$transclude $variable=\\\"excerptify\\\" title={{!!title}}/></div>\\n        </li>\\n      </$list>\\n    </ul>\\n  </div>\\n\\\\end\\n\\n<div class=\\\"sib-links-container\\\">\\n  <<linkDisplay \\\"Links\\\" \\\"[links[]]\\\" \\\"sib-links-forward\\\">>\\n  <<linkDisplay \\\"Backlinks\\\" \\\"[backlinks[]]\\\" \\\"sib-links-backward\\\">>\\n</div>\\n```\"},\"Ex:LinkPattern\":{\"title\":\"Ex:LinkPattern\",\"complete\":\"\",\"created\":\"20201122171809633\",\"length\":\"m\",\"modified\":\"20210409203059428\",\"origin\":\"Your First Dynamic List\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"There's a problem with this pattern that we've been using throughout this section to create a list of links to tiddlers:\\n\\n```html\\n<$list filter=\\\"a filter\\\">\\n  <<currentTiddler>>\\n</$list>\\n```\\n\\nThe problem is that if the name of the `currentTiddler` has a space in it, it is not linked. The only reason the results have displayed correctly so far is that they're in CamelCase and as such are linked automatically.\\n\\nTo explicitly create internal links, as we alluded to back in [[Widgets]], we can use the `$link` widget:\\n\\n```html\\n<$link to=\\\"Tiddler Name to Link To\\\">Text of the Link</$link>\\n```\\n\\nAdd a space to the title of one of your meeting tiddlers, so you can see the problem, then modify the `MeetingList` you created in [[Ex:BulletedMeetingList]], using the `$link` widget to fix this problem.\\n\\n//Hint//: `<<currentTiddler>>` will get replaced in more places than you might think.\"},\"Ex:LinkPattern/answer\":{\"title\":\"Ex:LinkPattern/answer\",\"created\":\"20201122171832715\",\"modified\":\"20241010131324941\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"```html\\n<ul>\\n    <$list filter=\\\"[tag[Meeting]!sort[at]]\\\">\\n        <li><$link to=<<currentTiddler>>><<currentTiddler>></$link></li>\\n    </$list>\\n</ul>\\n```\\n\\nSince this is such a common pattern, TiddlyWiki offers several ways to abbreviate it. If the text of the link should be be the same as the target, you can leave the body empty using a self-closing tag:\\n\\n```html\\n<$link to=<<currentTiddler>>/>\\n```\\n\\nAnd in fact, if the target should be the current tiddler, you can just say:\\n\\n```html\\n<$link />\\n```\\n\\nWe'll be seeing much more of using `<<things in angle brackets>>` as attribute values in widgets and HTML tags when we learn about [[transclusion|Transclusion]] in the next chapter.\"},\"Ex:LinkTooltipNonReplace\":{\"title\":\"Ex:LinkTooltipNonReplace\",\"created\":\"20240901134634516\",\"length\":\"m\",\"modified\":\"20240929003055211\",\"origin\":\"Overriding Built-In Widgets\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Having overridden the definition of the `$link` widget above, if we explicitly supply a `tooltip` attribute on some `$link` widget, it's now silently replaced with the description one we added. Change the behavior so that the description tooltip is only applied if one isn't already provided for the widget.\"},\"Ex:LinkTooltipNonReplace/answer\":{\"title\":\"Ex:LinkTooltipNonReplace/answer\",\"created\":\"20240901134704453\",\"modified\":\"20240901134707857\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"An easy solution based on the `~` filter run prefix:\\n\\n{{Sn:LinkTooltipificationNoOverwrite||MagicSnippet}}\"},\"Ex:LinkedTiddlerExcerpt\":{\"title\":\"Ex:LinkedTiddlerExcerpt\",\"created\":\"20200718201326615\",\"length\":\"m\",\"modified\":\"20240926115801167\",\"origin\":\"Creating a List of Links and Backlinks\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Add an excerpt for each link -- in other words, grab the first 200 characters of each tiddler and show it under the title. This will help us remind us what the tiddler is about, if the [[title wasn't chosen carefully enough|Tiddler Titles]].\\n\\nWe can accomplish this by [[wikifying|Wikification]] the tiddler -- that is, processing the HTML, transclusions, and wikitext in it as if we were displaying the tiddler -- and then taking just the beginning portion of it. Here's a partially completed procedure you can use to get an excerpt from a tiddler. Your task is to figure out what goes in the filtered transclusions (to get the wikitext of the tiddler and convert the rendered wikitext to just its first 200 characters), then call the procedure from an appropriate location.\\n\\n```html\\n\\\\procedure excerptify(title)\\n  <$wikify name=\\\"contents\\\" text={{{ ... }}}>\\n    <$text text={{{ ... }}} />...\\n  </$wikify>\\n\\\\end\\n```\\n\\n//Hint//: The `split[]` filter operator with nothing in the square brackets can be used to split incoming text into individual characters. You may need to review the [[filter operators|https://tiddlywiki.com/#Filter Operators]] documentation.\"},\"Ex:LinkedTiddlerExcerpt/answer\":{\"title\":\"Ex:LinkedTiddlerExcerpt/answer\",\"created\":\"20200718201356144\",\"modified\":\"20240926115836535\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Here's what I ended up with:\\n\\n```html\\n\\\\procedure excerptify(title)\\n  <$wikify name=\\\"contents\\\" text={{{ [<title>get[text]] }}}>\\n    <$text text={{{ [<contents>split[]first[200]join[]] }}} />...\\n  </$wikify>\\n\\\\end\\n\\n\\\\procedure linkDisplay(title, subfilter)\\n<<title>>:\\n\\n<ul>\\n<$list filter=\\\"[all[current]subfilter<subfilter>]\\\">\\n  <li><$link />: <$transclude $variable=\\\"excerptify\\\" title={{!!title}}/></li>\\n</$list>\\n</ul>\\n\\\\end\\n\\n<<linkDisplay \\\"Links\\\" \\\"[links[]]\\\">>\\n<<linkDisplay \\\"Backlinks\\\" \\\"[backlinks[]]\\\">>\\n```\\n\\nYou might notice that if the first line is shorter than 200 characters, the lines are run together. This is a common issue with excerpting algorithms which you'll often see even on professional blogs and websites. While it's undoubtedly possible to fix, we won't get into the necessary machinations here; feel free to take it on as a challenge project if you like!\"},\"Ex:LinkingInTransclusions\":{\"title\":\"Ex:LinkingInTransclusions\",\"created\":\"20200604021802285\",\"length\":\"s\",\"modified\":\"20210409200451386\",\"origin\":\"Field Transclusions\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"In general, if we reference ChrisSmith in the `manager` field of the `JaneDoe` tiddler, Jane does not show up as a backlink in `ChrisSmith`'s //Backlinks// tab on the info page, because //Backlinks// shows only links in the `text` field. However, now we have a link in the text since we have transcluded the value of the `manager` field into the text. So now that we have a link, we should have a reference back to `JaneDoe` from `ChrisSmith`.\\n\\nTest this hypothesis by looking in the //Backlinks// tab of `ChrisSmith`. What did you find? Why might this be?\"},\"Ex:LinkingInTransclusions/answer\":{\"title\":\"Ex:LinkingInTransclusions/answer\",\"created\":\"20200604021822338\",\"modified\":\"20210409200812952\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Jane does not show up as a backlink, for the same reason that transcluded text didn't show up in a search in [[Ex:SearchingInTransclusions]]: the link to `ChrisSmith` is not actually part of the `JaneDoe` tiddler, but only appears there when the tiddler is viewed.\\n\\nThis is consequential enough for the topology of links between tiddlers that there's a special name for it: a link is said to be a ''hard link'' if it, in the words of the [[documentation|https://tiddlywiki.com/#Hard%20and%20Soft%20Links]], “can be detected by a superficial examination of wikitext.” Basically, that means the CamelCase tiddler name or the tiddler name in ``[[double square brackets]]`` or as the `to` parameter of a `$link` widget must be directly present in the text field. Links that appear as a result of a transclusion with `{{}}` or `<<>>`, or `$link` widgets where the `to` parameter is transcluded with `{{}}` or `<<>>`, will instead be ''soft links'' -- they will show up when you view the tiddler, but TiddlyWiki won't know about them when you use filters or other methods of querying.\"},\"Ex:LiteralMatters/answer\":{\"title\":\"Ex:LiteralMatters/answer\",\"created\":\"20210208005424077\",\"modified\":\"20240923231556948\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"//Nothing// different happens, which may be unexpected at first -- typically there is a big difference between literal values and transcluded values, as we've seen in [[Ex:QuotedMacroCall]] and [[Ex:WikifiedQuotation]]. The reason it's different here is that the `text` attribute of the `$wikify` widget is treated as wikitext. So if we give `\\\"<<someVariable>>\\\"` as the value, the first thing TiddlyWiki will do is wikify that text, which will result in the value of `someVariable`. Then TiddlyWiki will wikify that again as long as it still contains wikitext that can be transformed. Leaving off the quotation marks saves one round of wikification by directly passing the value of `someVariable` to the widget, but the end result is the same.\"},\"Ex:LocalCallFunctions\":{\"title\":\"Ex:LocalCallFunctions\",\"created\":\"20240901033821359\",\"length\":\"M\",\"modified\":\"20240929003057549\",\"origin\":\"Functions\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"In the [[local calls|Ex:LocalCalls]] exercise, we created template logic to display whether a contact's phone number was local. Write three functions to determine the type of a number, according to the definitions used in that exercise:\\n\\n* `phone.toll-free[number]`\\n* `phone.local[number]`\\n* `phone.long-distance[number]`\\n\\nEach function should take a phone number (not just an area code) as its parameter, and return that parameter unmodified as its output if the area code is in that class, and yield no output if it is not.\\n\\nModify the template to use these functions.\\n\\n//Tip 1//: In the previous answer to the exercise, we did this to check if an area code was in the list of toll-free area codes:\\n\\n```\\n[enlist{TollFreeAreaCodes}match<areaCode>]\\n```\\n\\nThat won't work anymore because the area code will need to be coming in the pipeline as an input tiddler, rather than being in a variable. You can't simply invert them, like `[<areaCode>enlist{TollFreeAreaCodes}]`, because `enlist` is a constructor and will just wipe out the area code. Instead, use a filter run with the `:intersection` prefix:\\n\\n```\\n[...get-the-area-code-somehow] :intersection[enlist{TollFreeAreaCodes}]\\n```\\n\\n`:intersection` causes TiddlyWiki to evaluate both filter runs separately, //then// compare them and keep only the values that are in both.\\n\\n\\n//Tip 2//: In order to pass the parameter through unmodified without converting it to just the area code, you'll need to do most of the work in a run with the `:filter` prefix. When a run has this prefix, TiddlyWiki will evaluate that filter once for each output tiddler of the preceding run, and keep only the tiddlers for which the new run returns any value. The value actually returned by the run is thrown away -- it only matters whether there is one or not.\\n\\nBecause the pattern in Hint 1 requires two filter runs, and you can't directly nest multiple filter runs within another filter run, you'll actually need to use a function to combine those two runs, and call that function in the run with the prefixed `:filter`.\\n\\nHere's a complete example, for a function `phone.outside-line-or-operator`, that shows the pattern you'll want to use:\\n\\n{{Sn:OutsideLineOrOperator||MagicSnippet}}\"},\"Ex:LocalCallFunctions/answer\":{\"title\":\"Ex:LocalCallFunctions/answer\",\"created\":\"20240901042833928\",\"modified\":\"20240901043842812\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Here's my version:\\n\\n```html\\n\\\\function .firstnchars(n) [split[]first<n>join[]]\\n\\\\function phone.area-code() [.firstnchars[3]]\\n\\n\\\\function .is-toll-free() [phone.area-code[]] :intersection[enlist{TollFreeAreaCodes}]\\n\\\\function .is-local() [phone.area-code[]match{CurrentAreaCode}]\\n\\n\\\\function phone.toll-free(number) [<number>] :filter[.is-toll-free[]]\\n\\\\function phone.local(number) [<number>] :filter[.is-local[]]\\n\\\\function phone.long-distance(number) [!phone.local<number>!phone.toll-free<number>then<number>]\\n\\n\\\\procedure call-type()\\n  <% if [phone.local{!!phone}] %>\\n    local\\n  <% elseif [phone.toll-free{!!phone}] %>\\n    toll-free\\n  <% elseif [phone.long-distance{!!phone}] %>\\n    long-distance\\n  <% else %>\\n    INVALID PHONE NUMBER TYPE\\n  <% endif %>\\n\\\\end\\n```\\n\\nThis is a drop-in replacement -- the `<<call-type>>` procedure call will continue to operate as before.\\n\\nA few things to notice:\\n\\n* We added `.firstnchars` and `phone.area-code` functions to avoid unnecessary duplication and make the logic easier to read.\\n* We have an `<% else %>` clause which, if we wrote the wikitext correctly, will never be used. Because most of us unfortunately do not write perfect logic every time, this is a useful way of validating our assumptions (here, that if a phone number is not local or toll-free, it is long-distance). Should this assumption ever prove untrue, perhaps because there's a mistake in our definition of “long-distance,” we'll see a message `INVALID PHONE NUMBER TYPE` on the template instead of a blank space, making both the fact that something is wrong and exactly where the issue is coming from abundantly clear. In general, obvious errors should be preferred to silence -- if the error is hidden, it's much harder to find the mistake, and you might not notice it at all until you make faulty decisions based on wrong information!\"},\"Ex:LocalCalls\":{\"title\":\"Ex:LocalCalls\",\"created\":\"20240830031047089\",\"length\":\"m\",\"modified\":\"20240929003102029\",\"origin\":\"Conditional Inclusion\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"You can add multiple clauses to a single conditional expression using `<% elseif %>`. First there must always be an `<% if FILTER %>`, then there can be zero or more `<% elseif FILTER %>`s, and finally there can optionally be an `<% else %>` clause. The first clause whose filter returns a result is used.\\n\\nSuppose that you're in the 212 area code, and your office still uses landline phones. Within the `ContactInformationTemplate`, after the contact information list, show whether a call to this person will be `local`, `long-distance`, or `toll-free`, depending on their phone number.\\n\\nYou may assume that the area code is the first three characters of the `phone` field. Use the filter steps `split[]first[3]join[]` (turn each character in the input into a single tiddler name, then discard all but the first three, then join all the tiddler names into a single tiddler name) to select the first three characters of a single input tiddler.\\n\\nConsider a number to be local if it's in the current area code, and to be toll-free if its area code is `800`, `888`, or `877`. All other numbers are long-distance.\\n\\nStore both the current area code and the list of toll-free area codes in tiddlers, called `CurrentAreaCode` and `TollFreeAreaCodes`, respectively, so that you can easily change these values in the future if necessary.\"},\"Ex:LocalCalls/answer\":{\"title\":\"Ex:LocalCalls/answer\",\"created\":\"20240830031132609\",\"modified\":\"20240830031440604\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"While you don't necessarily have to write a procedure to contain this logic, doing so in a scenario like this often helps make your template easier to understand. It may also make the wikitext easier to debug if you mess something up.\\n\\nA `call-type` procedure can look like this:\\n\\n```html\\n\\\\procedure call-type()\\n  <$let areaCode={{{ [<currentTiddler>split[]first[3]join[]] }}}>\\n    <% if [{CurrentAreaCode}match<areaCode>] %>\\n      local\\n    <% elseif [enlist{TollFreeAreaCodes}match<areaCode>] %>\\n      toll-free\\n    <% else %>\\n      long-distance\\n    <% endif %>\\n  </$let>\\n\\\\end\\n```\\n\\nThe `TollFreeAreaCodes` tiddler will contain `800 888 877` (or any ordering of those three space-separated numbers, or those numbers each surrounded with square brackets, like `[[800]]`), and the `CurrentAreaCode` tiddler will contain `212`. Then just drop something like this in an appropriate spot in the template:\\n\\n```html\\nCall will be <<call-type>>.\\n```\"},\"Ex:LogWidget\":{\"title\":\"Ex:LogWidget\",\"created\":\"20240927021945879\",\"length\":\"s\",\"modified\":\"20241015032650371\",\"origin\":\"When Things Go Wrong\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"If you haven't done so yet, try pasting the example `$log` widget shown above into somewhere in your sample wiki and find the output in the console.\\nYou can add multiple attributes to the widget, with any names you want, to log multiple things – try doing this as well.\"},\"Ex:LookAtBrowseOptions\":{\"title\":\"Ex:LookAtBrowseOptions\",\"created\":\"20210130213759996\",\"length\":\"m\",\"modified\":\"20210130213723912\",\"origin\":\"Browsing Your Tiddlers\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"If you haven't already done so, take a look at each of the tabs discussed above in your sample wiki.\"},\"Ex:MailMerge\":{\"title\":\"Ex:MailMerge\",\"created\":\"20201122235410268\",\"length\":\"h\",\"modified\":\"20241001125526439\",\"origin\":\"Supplemental Exercises\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Implement a mail merge in TiddlyWiki. Without writing JavaScript, you cannot actually send emails from TiddlyWiki, but you can produce a list of `mailto:` links that, when clicked, each open a new email in your email program with the email address, subject, and body for that recipient pre-filled. For low-volume tasks, this might be good enough.\\n\\nOn the tiddler that implements the merge, you should be able to fill in fields that provide a filter for contact tiddlers you want to send the message to, and some kind of template tiddler that uses a variable or a setting of the current tiddler to substitute in values that change.\\n\\nYou'll need to URL-encode the subject and body and put it into the link, which TiddlyWiki has a `encodeuri[]` filter operator to do. See https://en.wikipedia.org/wiki/Mailto for details of the mailto: URI structure; essentially, you want to produce links that look like this:\\n\\n```\\nmailto:whoever@example.com?subject=TheSubject&body=TheBodyOfTheEmail\\n```\\n\\n…where both `TheSubject` and `TheBodyOfTheEmail` are URL-encoded.\\n\\n//Hint//: You will need the `$wikify` widget.\\n\"},\"Ex:MainSearchBoxBinding\":{\"title\":\"Ex:MainSearchBoxBinding\",\"created\":\"20210107234956443\",\"length\":\"m\",\"modified\":\"20210130174511358\",\"origin\":\"Buttons and Input Widgets\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Figure out what tiddler and field the main search box in the sidebar is bound to.\"},\"Ex:MainSearchBoxBinding/answer\":{\"title\":\"Ex:MainSearchBoxBinding/answer\",\"created\":\"20210107235020864\",\"modified\":\"20210418160148065\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"The answer is the `text` field of `$:/temp/search`. (You may also have found `$:/temp/search/input`, which is an auxiliary tiddler used for the `keyboard-driven-input` that handles the autocomplete functions of the search box, and often contains the same text.)\\n\\nThe easiest way to find this answer is to type a weird word in the search box that you won't find anywhere else (e.g., `oobleckblargle`), then open up Advanced Search and search for the same word on the `System` tab. The tiddler will appear in the list.\"},\"Ex:MakeGlobalProcedures\":{\"title\":\"Ex:MakeGlobalProcedures\",\"created\":\"20200718022013037\",\"length\":\"m\",\"modified\":\"20241010131120022\",\"origin\":\"Much More Than You Wanted to Know About Scopes\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Find the `wikipediaLink` and `ticketLink` procedures we created in [[The Finer Points of Procedures]] and turn them into global procedures, creating one or more tiddlers to house them.\\n\\nRemove the original procedure definitions from the individual tiddlers and try calling the procedures from a few different tiddlers to make sure it works.\"},\"Ex:ManagerField\":{\"title\":\"Ex:ManagerField\",\"created\":\"20200603115339849\",\"length\":\"s\",\"modified\":\"20210130174514831\",\"origin\":\"Reviewing the Basics\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"We chose to use a field to keep track of employees' managers. List at least two other ways we could have chosen to do this, and some advantages and disadvantages of each.\"},\"Ex:ManagerField/answer\":{\"title\":\"Ex:ManagerField/answer\",\"created\":\"20200603115947939\",\"length\":\"s\",\"modified\":\"20200603210259360\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"* We could write \\\"Jane Doe's manager is ChrisSmith\\\" in Jane's tiddler.\\n** //Advantages//: Simple and straightforward.\\n** //Disadvantages//: The only thing TiddlyWiki will know about the relationship between Jane and Chris is that they are linked. It doesn't know Chris is Jane's manager.\\n\\n* We could link to the person's manager within the body text, and then tag the manager `Manager`.\\n** //Advantages//: Similarly easy to create. But this time, TiddlyWiki has a vague conception that Chris is Jane's manager that we can query for.\\n** //Disadvantages//: The relationship we've defined is really that \\\"Jane is linked to Chris, who is a manager.\\\" A manager is unlikely to directly manage //all// other employees of the company unless it's a very small company. Thus, if we refer to the manager in the tiddler of a contact who is not a direct report, it will look like they are a direct report.\\n\\n* We could tag Jane Doe with a ChrisSmith tag.\\n** //Advantages//: Easy and most semantically accurate of these alternatives. As we'll see in a future chapter, we can automatically create a hierarchical (\\\"table of contents\\\") view of managers and their employees.\\n** //Disadvantages//: Creates a lot of extra tags. TiddlyWiki understands the relationship to be something like \\\"Jane is a member of Chris['s team],\\\" which is more precise than a link but less precise than a \\\"manager\\\" field.\"},\"Ex:MeaninglessSuffix\":{\"title\":\"Ex:MeaninglessSuffix\",\"created\":\"20201230213722534\",\"length\":\"m\",\"modified\":\"20210130174516866\",\"origin\":\"Anatomy of Filter Steps\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"What happens if you add a suffix that doesn't have any meaning to a filter operator, such as `tag` or `title`?\"},\"Ex:MeaninglessSuffix/answer\":{\"title\":\"Ex:MeaninglessSuffix/answer\",\"created\":\"20201230213742844\",\"modified\":\"20201230213812364\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Nothing -- if the filter operator doesn't support suffixes, or the suffix is optional, the unexpected suffix is simply ignored.\"},\"Ex:MeetingInformation\":{\"title\":\"Ex:MeetingInformation\",\"created\":\"20200718032652074\",\"length\":\"s\",\"modified\":\"20210207183158296\",\"origin\":\"The View Template\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Put the `MeetingInformationTemplate` on meetings globally as well.\"},\"Ex:MeetingInformation/answer\":{\"title\":\"Ex:MeetingInformation/answer\",\"created\":\"20200718032732675\",\"modified\":\"20240926004551183\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Add to some tiddler tagged $:/tags/ViewTemplate, such as `$:/yourname/TiddlerTypeTemplates/Meeting`:\\n\\n```html\\n<% if [all[current]tag[Meeting]] %>\\n\\n  {{||MeetingInformationTemplate}}\\n\\n<% endif %>\\n```\\n\\n(The blank lines around `{{||MeetingInformationTemplate}}` may or may not be required -- it's required if the template contains //only// a wikitext table, or it won't be recognized [[as a separate block|Block Mode and Inline Mode]].)\"},\"Ex:MeetingListWithoutCurrentTiddler\":{\"title\":\"Ex:MeetingListWithoutCurrentTiddler\",\"complete\":\"\",\"created\":\"20200605152806072\",\"length\":\"s\",\"modified\":\"20210409202939804\",\"origin\":\"Templates and the Current Tiddler\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Modify the `MeetingList` so that it does not use the variable reference `<<currentTiddler>>` but has identical functionality.\\n\\n//Hint//: Try transcluding a field.\"},\"Ex:MeetingListWithoutCurrentTiddler/answer\":{\"title\":\"Ex:MeetingListWithoutCurrentTiddler/answer\",\"created\":\"20200605152841532\",\"modified\":\"20210327155915576\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"```html\\n<ul>\\n  <$list filter=\\\"[tag[Meeting]!sort[at]]\\\">\\n    <li><$link to={{!!title}}>{{!!title}}</$link></li>\\n  </$list>\\n</ul>\\n```\\n\\nIf you happened to remember from an [[earlier exercise|Ex:LinkPattern/answer]] that the `$link` widget creates a link to the current tiddler if you don't give it any attributes or body text at all, you could also just say this:\\n\\n```html\\n<ul>\\n  <$list filter=\\\"[tag[Meeting]!sort[at]]\\\">\\n    <li><$link /></li>\\n  </$list>\\n</ul>\\n```\"},\"Ex:MeetingOrdering\":{\"title\":\"Ex:MeetingOrdering\",\"created\":\"20200608023312103\",\"length\":\"m\",\"modified\":\"20210409135454496\",\"origin\":\"Ordering Tiddlers\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Create several more meeting tiddlers under the `OnboardingHr` tag, then try dragging and dropping them around using the tag pill list. Have the `OnboardingProcess` tiddler open as you do so, so you can see the effects on the table of contents.\"},\"Ex:MeetingOrderingByProcedure\":{\"title\":\"Ex:MeetingOrderingByProcedure\",\"created\":\"20210327155150388\",\"length\":\"m\",\"modified\":\"20241015001058093\",\"origin\":\"Ordering Tiddlers\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Repeat the [[previous exercise|Ex:MeetingOrdering]] using a `list-links-draggable` reference of the form described in this section, inserted within the `OnboardingHr` tiddler.\"},\"Ex:MeetingsToday\":{\"title\":\"Ex:MeetingsToday\",\"created\":\"20200717221603330\",\"length\":\"M\",\"modified\":\"20240924000623141\",\"origin\":\"Tabs\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Create a tiddler named `Today` and put a set of vertically arranged tabs on it showing all meetings that are happening on the current day (i.e., whose `at` field describes any time today) and excluding drafts.\\n\\nDon't worry if everything doesn't show up right -- we'll talk about why that is and how to fix it in the exercises to follow. You're done with this exercise if you can get the correct set of tabs to appear in the list.\\n\\n* You can get today's date with the built-in `now` {{Ltc:NowProcedure||LieToChildrenTemplate}}, like `<<now YYYY0MM0DD0hh>>`. (If you're wondering why we include the hours, we'll discuss the potential for day rollover when at negative UTC offsets in [[Working with Dates]].)\\n* You'll need to look up several new filter operators in the [[list|https://tiddlywiki.com/#Filter Operators]].\"},\"Ex:MeetingsToday/answer\":{\"title\":\"Ex:MeetingsToday/answer\",\"created\":\"20200717222830000\",\"modified\":\"20240924000032728\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"```html\\n<$let today=<<now YYYY0MM0DD0hh>>>\\n  <<tabs \\\"[tag[Meeting]sameday:at<today>!is[draft]]\\\" class:\\\"tc-vertical\\\">>\\n</$set>\\n```\"},\"Ex:MethodsOfTransclusion\":{\"title\":\"Ex:MethodsOfTransclusion\",\"created\":\"20200605153225001\",\"length\":\"m\",\"modified\":\"20210130174525925\",\"origin\":\"Templates and the Current Tiddler\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Create a new tiddler called `JaneTransclusion`. Transclude the content of the `JaneDoe` tiddler here -- but without writing the text `{{JaneDoe}}` anywhere in the tiddler. Once you do this successfully, find at least one other way to do it. (The answer will show you seven ways that use only tools we've already seen, so there is no shortage of options.)\\n\\n//Tip//: If the information about Jane ends up all in one line, try adding some blank lines to your wikitext.\"},\"Ex:MethodsOfTransclusion/answer\":{\"title\":\"Ex:MethodsOfTransclusion/answer\",\"created\":\"20200605153253139\",\"modified\":\"20240925231802312\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"This one's fun because TiddlyWiki gives you so many different ways to skin this cat. Here's perhaps the most obvious one:\\n\\n```html\\n<$let currentTiddler=\\\"JaneDoe\\\">\\n\\n  {{!!text}}\\n\\n</$let>\\n```\\n\\nYou may have noticed that you had to put the blank lines before and after `{{!!text}}` or the formatting ended up all funny. Back in the section on [[dynamic lists|Your First Dynamic List]], we noted that there are cases where whitespace does matter with widgets and HTML. This is one of them, and it's due to a distinction in TiddlyWiki and HTML between //block mode// and //inline mode//. We'll [[talk more about these modes later|Block Mode and Inline Mode]] -- for now, just remember that if everything gets all squashed up in one line, you're probably stuck in inline mode, and you can get out of it by putting a blank line before and after the thing that's getting squashed.\\n\\nHere are several more possibilities:\\n\\n```html\\n<$set name=\\\"currentTiddler\\\" value=\\\"JaneDoe\\\">\\n\\n  {{!!text}}\\n\\n</$set>\\n```\\n\\n```html\\n<$list filter=\\\"[[JaneDoe]]\\\">\\n\\n  {{!!text}}\\n\\n</$list>\\n```\\n\\nAnother way would be to create another tiddler, call it `JaneDoeStandin`, put `{{JaneDoe}}` in //that// tiddler, and then transclude `{{JaneDoeStandin}}`.\\n\\n`{{JaneDoe!!text}}` is technically not writing `{{JaneDoe}}`, though this solution seems a bit cheap!\\n\\nSimilarly but a little bit more cleverly, `{{JaneDoe||JaneDoe}}` (transclude the tiddler `JaneDoe` with the current tiddler as `JaneDoe`) means the same thing as `{{JaneDoe}}`. (`{{||JaneDoe}}` won't work, though, because that makes the current tiddler `JaneTransclusion`, and the `ContactInformationTemplate` transcluded within `JaneDoe` depends on the current tiddler being `JaneDoe`.)\\n\\nHere's an option that uses a widget we haven't discussed yet:\\n\\n```html\\n<$tiddler tiddler=\\\"JaneDoe\\\">\\n  <$transclude />\\n</$tiddler>\\n```\\n\\nIf you get bored, see how many other options you can come up with! I'm not at the end of my own ideas by any means.\\n\"},\"Ex:MoreSidebarTabs\":{\"title\":\"Ex:MoreSidebarTabs\",\"created\":\"20201123000253967\",\"length\":\"M\",\"modified\":\"20210130175020856\",\"origin\":\"Supplemental Exercises\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Come up with some new sections that would be useful to have on the //More// sidebar tab and add them in.\"},\"Ex:MoveContactInformation\":{\"title\":\"Ex:MoveContactInformation\",\"created\":\"20200718031841599\",\"length\":\"m\",\"modified\":\"20210130174521062\",\"origin\":\"The View Template\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Move the contact information above the rest of the tiddler's body, rather than below it.\"},\"Ex:MoveContactInformation/answer\":{\"title\":\"Ex:MoveContactInformation/answer\",\"created\":\"20200718031911364\",\"modified\":\"20210418135516766\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"You need to get your `$:/yourname/TiddlerTypeTemplates/Contact` tiddler before $:/core/ui/ViewTemplate/body in the `list` field of [[$:/tags/ViewTemplate]]. The easiest way to do this is to click the tag pill for [[$:/tags/ViewTemplate]] where it appears on your `$:/yourname/TiddlerTypeTemplates/Contact` tiddler and drag and drop the entries into the proper position.\\n\\nYou could also manually edit the `list` field, or even create a `<<list-links-draggable>>` or `<<list-tagged-draggable>>` macro to reorder the members of the tag.\"},\"Ex:MultipleTransclusion\":{\"title\":\"Ex:MultipleTransclusion\",\"created\":\"20200604022429000\",\"length\":\"s\",\"modified\":\"20210130174533888\",\"origin\":\"Field Transclusions\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"What happens if you transclude a tiddler that contains transclusions?\"},\"Ex:MultipleTransclusion/answer\":{\"title\":\"Ex:MultipleTransclusion/answer\",\"created\":\"20200604022456155\",\"modified\":\"20210409200940104\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Generally, this works the way you would hope -- first TiddlyWiki renders the “furthest down” tiddler, then it moves one level up and includes that content in that tiddler, and so on until it comes to the “top-level” transclusion.\\n\\nThere are some edge cases, which mostly involve the complexities of TiddlyWiki's concept of the //current tiddler//. We'll talk about the current tiddler in the [[next section|Templates and the Current Tiddler]].\"},\"Ex:MultiplyByTwoTwoWays\":{\"title\":\"Ex:MultiplyByTwoTwoWays\",\"created\":\"20240831225123664\",\"length\":\"m\",\"modified\":\"20240929003114070\",\"origin\":\"Functions\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"We saw two different ways to create a function that multiplies its input by two, depending on whether we wanted to take the multiplicand as an input tiddler or as a parameter:\\n\\n```html\\n\\\\function multiply-by-two(number) [<number>multiply[2]]\\n\\\\function multiply-input-by-two [multiply[2]]\\n\\n<<multiply-by-two 4>>\\n{{{ [[4]function[multiply-input-by-two]] }}}\\n```\\n\\nCreate a `multiply-anything-by-two` function that works in //either// of these roles. That is:\\n\\n{{Sn:MultiplyAnythingByTwo||MagicSnippet}}\\n\\n\"},\"Ex:MultiplyByTwoTwoWays/answer\":{\"title\":\"Ex:MultiplyByTwoTwoWays/answer\",\"created\":\"20240831225541086\",\"modified\":\"20241008120322800\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"The trick is to have a parameter that defaults to blank (or any other value that nobody can use as a valid number to be multiplied, often called a //sentinel value// in programming), and create a first filter run that removes the parameter from the pipeline (making it empty) if the parameter is still set to the sentinel value. If you still have a value, then the user of the function supplied a parameter and you can multiply it by two.\\n\\nThat settles the parameter case. Now for the input tiddler case: use the `:else` (also spelled `~`) [[filter run prefix|Multi-Run Filters]] to supply a second run which is used only if the first run had no results (thus no parameter was passed). In this run, multiply the input tiddler by 2.\\n\\nAll together:\\n\\n{{Sn:MultiplyAnythingByTwoAnswer||MagicSnippet}}\"},\"Ex:NamingConventionImagination\":{\"title\":\"Ex:NamingConventionImagination\",\"created\":\"20200603182330605\",\"length\":\"m\",\"modified\":\"20240614032249031\",\"origin\":\"Naming Conventions\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Identify a wiki you could imagine yourself creating, then write a set of naming conventions for it. These should include:\\n\\n* How exactly titles should be capitalized, including how acronyms and other weirdnesses will be handled.\\n* Whether you use CamelCase titles, and if so, what you do if there's only one word or it otherwise doesn't match the capitalization rules required to create a link.\\n* Any special rules that seem appropriate (e.g., names of sources end with their publication date or the word `Source`).\\n\\nYou can refer to the [[naming conventions for my Mosaic Muse notes system|https://mosmu.se/#OurNamingConventions]] for an example.\"},\"Ex:NamingOldNotes\":{\"title\":\"Ex:NamingOldNotes\",\"complete\":\"\",\"created\":\"20200603181434311\",\"length\":\"m\",\"modified\":\"20210130174537256\",\"origin\":\"Tiddler Titles\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Dig up some old notes you've written for yourself, in any format, and identify:\\n\\n* How you would divide them into tiddlers (we'll talk more about this later, but you know enough to take a crack at it now).\\n* What you would title each of those tiddlers.\"},\"Ex:NestedSets\":{\"title\":\"Ex:NestedSets\",\"created\":\"20201121235627600\",\"length\":\"s\",\"modified\":\"20240928203542190\",\"origin\":\"Variables\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Consider the following code:\\n\\n```html\\n<$set name=\\\"variable\\\" value=\\\"1\\\">\\n    <<variable>>\\n    <$set name=\\\"variable\\\" value=\\\"2\\\">\\n        <<variable>>\\n    </$set>\\n    <<variable>>\\n</$set>\\n```\\n\\nWhat do you think happens at each transclusion of `<<variable>>`? Check your answers by pasting this into a new tiddler.\"},\"Ex:NestedSets/answer\":{\"title\":\"Ex:NestedSets/answer\",\"created\":\"20201121235653529\",\"modified\":\"20210409192628067\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"This prints `1 2 1`. Scopes //nest//; a variable takes the value of the innermost `$set` widget available (or nothing if the variable reference isn't inside any `$set` widget referring to that variable name at all). Later on, we'll learn that this even applies across multiple tiddlers.\"},\"Ex:NewContactButton\":{\"title\":\"Ex:NewContactButton\",\"created\":\"20200822191934331\",\"length\":\"s\",\"modified\":\"20210130174540692\",\"origin\":\"Creating Tiddlers With Predefined Fields\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Create a button that creates a new contact. The created tiddler should contain the four fields we've been using, `email`, `family`, `manager`, and `phone`, but empty ready for the user to fill in; it should also have a title of `New Contact` and be tagged with `Contact`.\"},\"Ex:NewContactButton/answer\":{\"title\":\"Ex:NewContactButton/answer\",\"created\":\"20200822192038282\",\"modified\":\"20240926121337777\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"```html\\n\\\\procedure newContact()\\n  <$action-sendmessage\\n    $message=\\\"tm-new-tiddler\\\"\\n    title=\\\"New Contact\\\"\\n    tags=\\\"Contact\\\"\\n    email=\\\"\\\"\\n    family=\\\"\\\"\\n    phone=\\\"\\\"\\n    manager=\\\"\\\"/>\\n\\\\end\\n\\n<$button actions=<<newContact>>>\\n  New Contact\\n</$button>\\n```\"},\"Ex:NewMeetingButton\":{\"title\":\"Ex:NewMeetingButton\",\"created\":\"20200822192223876\",\"length\":\"m\",\"modified\":\"20210418161437467\",\"origin\":\"Creating Tiddlers With Predefined Fields\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Create a similar button for a new meeting. The `at` field should be populated with the current time in the standard TiddlyWiki date/time format, down to the minute (i.e., the seconds and milliseconds should be zero).\"},\"Ex:NewMeetingButton/answer\":{\"title\":\"Ex:NewMeetingButton/answer\",\"created\":\"20200822192244439\",\"modified\":\"20240926121350729\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"```html\\n\\\\procedure newMeetingAction()\\n<$action-sendmessage\\n  $message=\\\"tm-new-tiddler\\\"\\n  title=\\\"New Meeting\\\"\\n  tags=\\\"Meeting\\\"\\n  at=<<now [UTC]YYYY0MM0DD0hh0mm00000>>\\n  participants=\\\"\\\"/>\\n\\\\end\\n\\n<$button actions=<<newMeetingAction>>>\\n  New Meeting\\n</$button>\\n```\\n\\nNote the use of `[UTC]` in the format string for the `now` macro. If you don't tell TiddlyWiki to use UTC, the time will be filled into the `at` field in your local time zone. Since TiddlyWiki assumes that date fields contain UTC timestamps, the time will get “converted” again when you display it, yielding an incorrect time (off by whatever your UTC offset is).\\n\\nYou can hop ahead to [[Working with Dates]] if you'd like to learn more about this.\"},\"Ex:NewWiki\":{\"title\":\"Ex:NewWiki\",\"created\":\"20201123000222822\",\"length\":\"h\",\"modified\":\"20210130175019161\",\"origin\":\"Supplemental Exercises\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Create and customize a new wiki for some purpose, whether it's useful for you or not. Some ideas that might get you thinking about different ways to organize data:\\n\\n* A mini-encyclopedia for a topic you know a lot about.\\n* A recipe book.\\n* A place to plan a book or other large creative project.\\n* A catalog for your music or book collection.\"},\"Ex:NonexistentTiddlerFilter\":{\"title\":\"Ex:NonexistentTiddlerFilter\",\"created\":\"20201230212410211\",\"length\":\"m\",\"modified\":\"20210130174542977\",\"origin\":\"Anatomy of Filter Steps\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"What do you think happens if you use the `title` constructor to add a tiddler that does not exist to the pipeline?\\n\\nCheck your answer by running a filter in TiddlyWiki.\"},\"Ex:NonexistentTiddlerFilter/answer\":{\"title\":\"Ex:NonexistentTiddlerFilter/answer\",\"created\":\"20201230212441389\",\"modified\":\"20210409161640155\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"This works fine: the nonexistent tiddler name is passed through to any following filter steps and can be manipulated just like tiddlers that do exist. Of course, some filter steps will not make much sense in this case (`tag` and `links` will never return any results, for instance).\\n\\nLater on, we'll see that we can use filters to do things like manipulate text or do math. The inputs in this case will often be arbitrary strings of text or numbers rather than tiddler names, but many filter operators will still work great.\\n\\nYou can use the `is` operator with the `tiddler` parameter to filter out tiddlers that don't exist. For instance, if you said `[title[I Don't Exist]is[tiddler]]`, you would get no results, since `I Don't Exist` is not a tiddler.\"},\"Ex:NowTimestampFunction\":{\"title\":\"Ex:NowTimestampFunction\",\"created\":\"20240926222718556\",\"length\":\"m\",\"modified\":\"20240926224250425\",\"origin\":\"Working with Dates\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Why did I use a function, rather than a procedure or macro, to define `now-timestamp` here? Feel free to play with this live example if that helps.\\n\\n{{Sn:NowTimestamp||MagicSnippet}}\\n\\n//Hint//: What happens if you try to use the value of the `<<variable transclusion>>` to set something, as you often will with such a snippet, rather than rendering it within the body of the tiddler?\"},\"Ex:NowTimestampFunction/answer\":{\"title\":\"Ex:NowTimestampFunction/answer\",\"created\":\"20240926224206306\",\"modified\":\"20241012224046873\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"The first step to figuring this out is probably to try it some other way and see what happens. So let's do that:\\n\\n{{Sn:NowTimestampProcedure||MagicSnippet}}\\n\\nHmm, no, that looks just fine. So what about the hint in the exercise? Let's try setting a field on the current tiddler to the time. You might use this to click a button to indicate that you've reviewed a tiddler at a particular time, say.\\n\\n{{Sn:NowTimestampProcedureAttribute||MagicSnippet}}\\n\\nAha! Here the function works as you would expect, but the procedure simply puts the literal text of the procedure body in the field. (This is hard to notice if you just transclude the value, because the macro call to `now` expands when you do so. The `$view` widget doesn't wikify the field, so it shows the true value, as does editing the tiddler and looking at its field values.)\\n\\nThe million-dollar question is, of course, why?\\n\\nRecall that we are transcluding the value of `now-timestamp` as an attribute of the `$button` widget, namely `setTo`. This means that the value [[will only be wikified once|Wikification]]! Consequently, the literal text of the procedure appears in the output. Changing it to a [[macro|Macros]] instead of a procedure doesn't help, because there's no way to use text substitution to call the `now` macro.\\n\\nBut when we change it to a function, the effect of the `<<>>` syntax changes! It will still only be wikified once, but wikifying a function call results in evaluating the filter expression within the function -- and evaluating this filter expression requires calling the `now` macro, so that happens during the single wikification.\\n\\nYou may find this trick a useful alternative to verbose uses of the `$wikify` widget on occasion.\"},\"Ex:OnboardingPeopleFirst\":{\"title\":\"Ex:OnboardingPeopleFirst\",\"created\":\"20210130215824441\",\"length\":\"s\",\"modified\":\"20210130220046009\",\"origin\":\"Ordering Tiddlers\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Use the `list-before` field to make the `OnboardingPeople` tiddler appear first in the table of contents you created within the `OnboardingProcess` tiddler in the previous section.\"},\"Ex:OnboardingPeopleFirst/answer\":{\"title\":\"Ex:OnboardingPeopleFirst/answer\",\"created\":\"20210130215932504\",\"modified\":\"20210130220004631\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Set `list-before` on `OnboardingPeople` to `OnboardingHr`. (Note that the appropriate value is not `HR`, even though if you did [[one of the last exercises|Ex:TocCaptions]] in the previous section, that's what shows up in the table of contents. The caption is only used for display; you still have to specify the title in all other contexts.)\"},\"Ex:PaletteInvestigation\":{\"title\":\"Ex:PaletteInvestigation\",\"created\":\"20200718202138869\",\"length\":\"m\",\"modified\":\"20210130174544781\",\"origin\":\"Creating a List of Links and Backlinks\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"In the stylesheet I provided, you may have noticed there is a macro call: `<<colour muted-foreground>>`.  This macro is used to retrieve a color from the palette. The benefit is that if you change the palette of your wiki, the color of the excerpt text will change to something appropriate as well.\\n\\nFind the definition of the `colour` macro and figure out how the CSS color value (it'll be a `#` and six numbers and letters) is retrieved.\"},\"Ex:PaletteInvestigation/answer\":{\"title\":\"Ex:PaletteInvestigation/answer\",\"created\":\"20200718202204205\",\"modified\":\"20241010131620392\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"The macro definition is found in `$:/core/macros/CSS`. (If you're American and don't appreciate the spelling `colour`, notice there is a `color` macro too that just calls `colour`!). The macro transcludes the tiddler named in `$:/palette` with this bit:\\n\\n```html\\n<$transclude tiddler={{$:/palette}} index=\\\"$name$\\\">\\n```\\n\\n`$:/palette` is a configuration tiddler managed by TiddlyWiki that contains the name of whichever palette you've currently selected in the control panel. If you then open up the palette named therein (e.g., `$:/palettes/GruvboxDark`), you'll see a [[data tiddler|Data Tiddlers]] listing the names of colors and their CSS values (or, sometimes, another call to the `<<colour>>` macro).\\n\\nIn the macro definition, you might wonder what's with all the other `$transclude` widgets:\\n\\n```html\\n<$transclude tiddler={{$:/palette}} index=\\\"$name$\\\">\\n  <$transclude tiddler=\\\"$:/palettes/Vanilla\\\" index=\\\"$name$\\\">\\n    <$transclude tiddler=\\\"$:/config/DefaultColourMappings/$name$\\\"/>\\n  </$transclude>\\n</$transclude>\\n```\\n\\nIn case the `$transclude` widget is not able to transclude the tiddler for some reason (e.g., it doesn't exist), then the contents of the widget are used as a //fallback// (more on this in [[Hiding and Showing Things]]). So if the palette isn't set, then the `Vanilla` palette is used, and if that's gone as well for some reason, a set of default mappings are used.\"},\"Ex:ParameterizedCit\":{\"title\":\"Ex:ParameterizedCit\",\"created\":\"20241001024940811\",\"length\":\"m\",\"modified\":\"20241001025212124\",\"origin\":\"Parameterizing Field Transclusions\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Clone the `ContactInformationTemplate` and create a `ContactInformationParameters` version that does not use the current tiddler in any way (and thus does not need to be transcluded as a template).\\n\\nIf you've been messing with your `ContactInformationTemplate`, feel free to start with this version:\\n\\n```html\\n<h2>Information about {{!!title}}</h2>\\n\\n<ul>\\n<li>''Email'': {{!!email}}</li>\\n<li>''Phone'': {{!!phone}}</li>\\n<li>\\n  ''Family'':\\n  <$transclude $variable=\\\"list-links-draggable\\\" tiddler=<<currentTiddler>> field=\\\"family\\\" />\\n</li>\\n<li>''Manager'': {{!!manager}}</li>\\n</ul>\\n```\"},\"Ex:ParameterizedCit/answer\":{\"title\":\"Ex:ParameterizedCit/answer\",\"created\":\"20241001025001134\",\"modified\":\"20241001025151680\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"There are a number of ways you could go about this, including passing only one parameter for the tiddler name and then retrieving the appropriate fields off of that, but here's perhaps the most straightforward version:\\n\\n```html\\n\\\\parameters(name, email, phone, manager)\\n\\n<h2>Information about <<name>></h2>\\n\\n<ul>\\n  <li>''Email'': <<email>></li>i\\n  <li>''Phone'': <<phone>></li>\\n  <li>\\n    ''Family'':\\n    <$transclude $variable=\\\"list-links-draggable\\\" tiddler=<<name>> field=\\\"family\\\" />\\n  </li>\\n  <li>''Manager'': <<manager>></li>\\n</ul>\\n\\n<$transclude $tiddler=\\\"ContactInformationTemplateParameterized\\\" name={{!!title}} manager={{!!manager}} email={{!!email}} phone={{!!phone}}/>\\n```\\n\\nNote that we can't pass the `family` field as a parameter and use that directly because we need to be able to edit the `list` field of the contact tiddler in `list-links-draggable`, so instead we use the passed `name`. If we wanted to be able to use a `name` parameter that wasn't the name of the tiddler, we could add an additional parameter for the tiddler name.\\n\\nIn practice, a template is clearly an easier and cleaner way to handle the `ContactInformationTemplate` than parameters!\"},\"Ex:PreserveSecurityWithTextSubstitution\":{\"title\":\"Ex:PreserveSecurityWithTextSubstitution\",\"complete\":\"\",\"created\":\"20210207223713616\",\"length\":\"s\",\"modified\":\"20240929003223041\",\"origin\":\"Macros\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Change the filter in [[Ex:BypassSecurityWithTextSubstitution]] so that it is not vulnerable to this kind of manipulation. Continue using a macro -- don't convert it to a procedure. (Of course, the user could still just edit the tiddler and remove the authentication altogether. TiddlyWiki is not a suitable environment when users need to have limited access.)\"},\"Ex:PreserveSecurityWithTextSubstitution/answer\":{\"title\":\"Ex:PreserveSecurityWithTextSubstitution/answer\",\"created\":\"20210207223742670\",\"modified\":\"20210207224241431\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Here's one way:\\n\\n{{Sn:AuthorizationUnbypass||MagicSnippet}}\"},\"Ex:PrettyWikipediaLink\":{\"title\":\"Ex:PrettyWikipediaLink\",\"complete\":\"\",\"created\":\"20200603203233591\",\"length\":\"s\",\"modified\":\"20240616174408034\",\"origin\":\"Procedures\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Update the `wikipediaLink` procedure to output a link whose text is instead `Wikipedia: {Aardvark}` (where `{Aardvark}` is the parameter passed to the procedure).\"},\"Ex:PrettyWikipediaLink/answer\":{\"title\":\"Ex:PrettyWikipediaLink/answer\",\"created\":\"20200603203254646\",\"modified\":\"20241007222349976\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"```html\\n\\\\procedure wikipediaLink(articleName)\\n  <a href=`https://en.wikipedia.org/wiki/$(articleName)$`>\\n    Wikipedia: <<articleName>></a>\\n\\\\end\\n```\\n\\nYou might notice that I put the `</a>` on the same line, rather than one line below. This is because TiddlyWiki will include an unwanted trailing space in the link text, like [[Wikipedia: Aardvark |https://en.wikipedia.org/wiki/Aardvark]], if there is a new line there. (That applies equally to the examples earlier in this section, too – I just didn't want to get into that right away!)\\n\\nYou can avoid this behavior using the pragma `\\\\whitespace trim`, which [[causes whitespace that's not between two text characters to be ignored|https://tiddlywiki.com/#Pragma%3A%20%5Cwhitespace]]. But if you have actual text to be rendered in the tiddler, rather than just procedure definitions, this will have undesired effects (for instance, you'll no longer be able to create new paragraphs by pressing Enter twice). Once we learn more about [[scopes|Much More Than You Wanted to Know About Scopes]] in [[Chapter 5|More Organizational Tools]], we'll be placing many of our procedures in tiddlers that don't contain any text, and this pragma will become quite useful.\"},\"Ex:ProblematicTiddlerNames\":{\"title\":\"Ex:ProblematicTiddlerNames\",\"created\":\"20200603182411293\",\"length\":\"m\",\"modified\":\"20210130174548248\",\"origin\":\"Naming Conventions\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Explain what is potentially problematic about each of these tiddler names:\\n\\n# `Company Entry Doors`\\n# `Windows`\\n# `Tiddlywiki`\\n# `VisitingTheDMV`\\n# `Onboarding: Office chair selection`\\n\\nNone of these are necessarily //wrong// -- although they might be depending on your naming conventions -- but they each exhibit a possible danger we discussed above.\"},\"Ex:ProblematicTiddlerNames/answer\":{\"title\":\"Ex:ProblematicTiddlerNames/answer\",\"created\":\"20200603182441358\",\"modified\":\"20210819205515907\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"# This name may or may not follow your language's rules about title case.\\n# This name may be ambiguous: it could refer to the operating system made by Microsoft or to the pane of glass that lets light into your office.\\n# This name doesn't follow the official capitalization, `TiddlyWiki`, so you may not realize it's already in your wiki if you later try to link to `TiddlyWiki` and end up creating a duplicate tiddler.\\n# The capitalization has not been normalized to `VisitingTheDmv` as recommended.\\n# The process of office chair selection may be relevant in contexts outside onboarding, so including onboarding in the title may not be advisable.\"},\"Ex:ProcedureAdjacency\":{\"title\":\"Ex:ProcedureAdjacency\",\"created\":\"20240925234625552\",\"length\":\"s\",\"modified\":\"20241007124707497\",\"origin\":\"Using Variables as Attributes\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"What if we don't want to have any text at all except for the URL itself in our Wikipedia link? Try setting a variable `wikipedia` to `https://en.wikipedia.org/wiki/` and placing a reference to the variable immediately next to the word `Aardvark`. What happens? Why do you think this happens?\"},\"Ex:ProcedureAdjacency/answer\":{\"title\":\"Ex:ProcedureAdjacency/answer\",\"created\":\"20240925235538142\",\"modified\":\"20240928204026535\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"You get this:\\n\\n{{Sn:AardvarkChunkLink||MagicSnippet}}\\n\\nThis brings up a very important point about the order in which TiddlyWiki processes wikitext. When you transclude the value of a variable, or any of the other things that we'll be discussing in upcoming sections and chapters, including [[Procedures]], [[Field Transclusions]], and [[Macros]], TiddlyWiki processes the wikitext within the variable //separately// from its surrounding context. You might expect that TiddlyWiki goes through the tiddler and expands all transclusions into one giant tiddler-long section of wikitext, and only then renders the wikitext to HTML. This is not the case!\\n\\nInstead, it renders wikitext in discrete “chunks.” In this example, it's processing wikitext and it sees `<<wikipedia>>`. It consequently stops rendering the current chunk of wikitext (i.e., the whole tiddler), goes and renders the wikitext in the `wikipedia` variable, and then comes back and starts a new chunk. Therefore, when `<<wikipedia>>` is read, TiddlyWiki sees a separate chunk, which happens to be a link, and which it renders into a link. Then afterwards, it sees a chunk starting with the text `Aardvark`, and it renders that as text.\"},\"Ex:ProcedurePosition\":{\"title\":\"Ex:ProcedurePosition\",\"created\":\"20200603211135898\",\"length\":\"m\",\"modified\":\"20240929004134860\",\"origin\":\"Procedures\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Try calling the `wikipediaLink` procedure //before// defining it. What happens? What about if you put some arbitrary text before the procedure definition that doesn't include a call to `wikipediaLink`?\"},\"Ex:ProcedurePosition/answer\":{\"title\":\"Ex:ProcedurePosition/answer\",\"created\":\"20200603211145810\",\"modified\":\"20240929014320738\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"In either case, you get ugly and useless output:\\n\\n{{Sn:TextBeforeProcedure||MagicSnippet}}\\n\\nPragmas, including `\\\\procedure`, have to be the very first thing in a tiddler (except for other pragmas and [[comments|Comments]]). If anything else comes before them, they're treated as normal text.\"},\"Ex:QualifyMultipleCalls\":{\"title\":\"Ex:QualifyMultipleCalls\",\"created\":\"20210208023017971\",\"length\":\"s\",\"modified\":\"20220103170446227\",\"origin\":\"Qualification\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"What happens if you remove the `$let` widget and the `stateTiddlerName` variable from the above example and call `qualify` once every time that the name of the tiddler is needed?\"},\"Ex:QualifyMultipleCalls/answer\":{\"title\":\"Ex:QualifyMultipleCalls/answer\",\"created\":\"20210208023044281\",\"modified\":\"20210208022944809\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"It still works fine. This is because `qualify` doesn't generate a random number -- it [[hashes|https://en.wikipedia.org/wiki/Hash_function]] a string of all of the tiddlers that are parents of this bit of wikitext in the tree of active transclusions.\"},\"Ex:QuotedProcedureCall\":{\"title\":\"Ex:QuotedProcedureCall\",\"created\":\"20200603224209604\",\"length\":\"m\",\"modified\":\"20241007223257460\",\"origin\":\"The Finer Points of Procedures\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Try calling `wikipediaLink` using the `$transclude` widget with variables as parameters, but surround the variable references / procedure calls in the `$transclude` widget with \\\"quotation marks\\\", like this:\\n\\n{{Sn:QuotedProcedureExpansion||$:/sib/Snippet/TiddlerAsWikitext}}\\n\\nWhat's wrong with the output now? Why do you think this happened? And is there something that's unexpectedly //right//?\"},\"Ex:QuotedProcedureCall/answer\":{\"title\":\"Ex:QuotedProcedureCall/answer\",\"created\":\"20200603224332671\",\"length\":\"s\",\"modified\":\"20241007223407652\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"You get broken links -- the URL just says `<<article>>` where the article name should be, when you hover over the link or click on it.\\n\\n{{Sn:QuotedProcedureExpansion||MagicSnippet}}\\n\\nPutting quotation marks around a procedure call or variable reference passed to an HTML attribute makes it //literal// -- that is, TiddlyWiki doesn't try to look at it to see if it's a variable or procedure call. This is very occasionally what you want, but usually it's a mistake.\\n\\nThe quotation marks should be omitted even if the procedure call has spaces in it. So for some made-up procedure `myproc` with two parameters, this would the correct way to call it, even though it may look wrong at first glance:\\n\\n```html\\n<$transclude $variable=\\\"wikipediaLink\\\" linktext=<<myproc parameter1 \\\"parameter 2\\\">> articleName=\\\"Dingo\\\"/>\\n```\\n\\nBut you might have noticed that while the link URL is incorrect, the text is correct. What's up with that?\\n\\nWe'll discuss this further in <<gtw.link-chapter-number \\\"Macros, Wikification, and Widgets\\\">>, when we get to [[Wikification]], but for now, notice that `articleName` is used as (part of) an attribute of an HTML element, while `<<linkText>>` is used directly in wikitext. This turns out to be the difference! When the value of an attribute, like `href` here, is evaluated, TiddlyWiki just takes the value of whatever is passed as the attribute -- in this case it's the text `<<article>>` -- and plops it into the URL string, and then it's done. In contrast, when the value of `<<linkText>>` is evaluated, TiddlyWiki similarly replaces it with `<<description>>`, but when TiddlyWiki parses wikitext (rather than attribute values), it keeps processing the result of each replacement over and over again, getting the values of any further references until there are no more. (We say it parses //recursively//, literally “running again.”) So on the second pass, it sees a variable `<<description>>` and replaces it with its value `An animal`, and everything is dandy.\\n\\nIn this case, the only bad effect of quoting `<<description>>` is that you make TiddlyWiki take very slightly longer to render the tiddler when you view it, since it has to do an extra step (and it's so fast at this you would never notice). But to avoid confusion, don't do that without a good reason -- if you don't really //mean// that you want to display the literal text `<<article>>` within the procedure, don't write it that way.\\n\"},\"Ex:RaffapKnowledgeTiddler\":{\"title\":\"Ex:RaffapKnowledgeTiddler\",\"autoinclude\":\"Reviewing the Basics\",\"created\":\"20200603025736756\",\"length\":\"s\",\"modified\":\"20210130174550736\",\"origin\":\"Reviewing the Basics\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Return to the Employee Information System tiddler and create a new knowledge tiddler for the Really Annoying Five-Factor Authentication Process. Use your imagination on what's involved!\"},\"Ex:RaffapReflection\":{\"title\":\"Ex:RaffapReflection\",\"autoinclude\":\"Reviewing the Basics\",\"created\":\"20200603030150268\",\"length\":\"m\",\"modified\":\"20210130174552637\",\"origin\":\"Reviewing the Basics\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Review what you wrote about the RAFFAP.\\n\\n* Did you write about anything or anyone you already have a tiddler for, and thus should link to?\\n* Are there any new concepts that should have their own tiddlers (or at least missing links)?\\n* Are there other contexts you would expect to want to retrieve the RAFFAP in which would suggest you should add certain tags to it?\\n\\nUpdate what you wrote accordingly.\"},\"Ex:ReadingDefaultGlobals\":{\"title\":\"Ex:ReadingDefaultGlobals\",\"created\":\"20200718022049665\",\"length\":\"m\",\"modified\":\"20240929004721207\",\"origin\":\"Much More Than You Wanted to Know About Scopes\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Search for all tiddlers that currently contain globals. Remember that most of these will be stored in shadow tiddlers, so you'll need to say you want to filter on shadow tiddlers to get any results. Also remember to search for both the old tag and the new tag (most items will still have the old tag).\\n\\nSpend a few minutes browsing through some of the tiddlers that come up and looking at some of the system global definitions. You'll recognize some of the procedures/macros from previous chapters, and you should be able to understand a good portion of what's going on. There's no magic -- the built-in procedures are simply wrapping up some complicated HTML and widgets for us to use in a convenient way, just like we would do when writing our own procedures.\\n\\nYou'll have to edit each shadow tiddler to look at the definitions. Just click the discard-changes button when you're done so you don't mess anything up!\"},\"Ex:ReadingDefaultGlobals/answer\":{\"title\":\"Ex:ReadingDefaultGlobals/answer\",\"created\":\"20200718022221661\",\"modified\":\"20240929004726302\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"In case you can't figure out the filter to use, it should be `[all[shadows]tag[$:/tags/Global]] [all[shadows]tag[$:/tags/Macro]]`.\"},\"Ex:RecastProceduresAsMacros\":{\"title\":\"Ex:RecastProceduresAsMacros\",\"created\":\"20210207224132602\",\"length\":\"m\",\"modified\":\"20240929003235016\",\"origin\":\"Macros\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Go back to several of the procedures you have written for previous exercises and create macro versions that use text substitution, similar to how we created `wikipediaLinkMacro` in this section.\\n\\n//Tip//: Try searching for the word `procedure` to find tiddlers that contain procedure definitions.\"},\"Ex:RedATags\":{\"title\":\"Ex:RedATags\",\"created\":\"20200716023056742\",\"length\":\"m\",\"modified\":\"20210418134717626\",\"origin\":\"Multi-Run Filters\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Write a filter to find all tiddlers that do not link to a tiddler that has a tag which is both red and begins with the letter C, sorted by title in reverse alphabetical order.\\n\\nConsider a “red” tag to be one with a color code of `#ff0000`, as in [[Classifying Tags]].\\n\\nEnglish is terrible at expressing complicated conditions like this, so to be sure you read it right, here's the sentence decomposed hierarchically and written more precisely:\\n\\n* All tiddlers matching these criteria:\\n** The tiddler does not link to:\\n*** Another tiddler:\\n**** That has a tag:\\n***** Which is red (#ff0000)\\n***** The name of which begins with a capital letter C\\n* Sorted by title in reverse alphabetical order.\\n\\n//Tip 1//: The `prefix` operator returns items from its input whose title begins with a given string of text.\\n\\n//Tip 2//: The `is[]` filter step will find all (non-[[shadow|Shadow Tiddlers]]) tiddlers in the wiki.\\n\\nA quick way to test your answer is to add a link from a tiddler that appears in the output to any contact; the tiddler should disappear from the list since it's now linking to a tiddler that has a red tag whose name begins with C.\"},\"Ex:RedATags/answer\":{\"title\":\"Ex:RedATags/answer\",\"created\":\"20200716023335690\",\"modified\":\"20210418134703851\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"```\\n[is[tiddler]]\\n-[prefix[C]color[#ff0000]tagging[]backlinks[]]\\n+[!sort[]]\\n```\\n\\nIf you want, you can get away with doing the sort //before// doing the second filter run, as part of the `[is[tiddler]]` run; since the second run only removes items, it won't disturb the order. The pattern shown above is more generally useful, though, since it works even after other ORs and ANDs.\"},\"Ex:RedTagsFilter\":{\"title\":\"Ex:RedTagsFilter\",\"created\":\"20200608014521722\",\"length\":\"m\",\"modified\":\"20210130174558529\",\"origin\":\"Classifying Tags\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Write a filter to find all tiddlers tagged with red tags. Make sure you figure out [[Ex:TagMetadataStorage]] first, or you won't have much luck.\\n\\n//Hint//: Review the //Tags// section of [[Common Filter Operators]].\"},\"Ex:RedTagsFilter/answer\":{\"title\":\"Ex:RedTagsFilter/answer\",\"created\":\"20200608014540307\",\"modified\":\"20200608014841522\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"```html\\n[color[#ff0000]tagging[]]\\n```\\n\\nNote that, in theory, the first filter step `color[#ff0000]` could find other tiddlers that aren't tags and just so happen to have a `color` field set to `#ff0000`. However, this still gives the correct output because any tiddler that tags other tiddlers is by definition a tag, and `tagging[]` will ignore any input tiddler that doesn't tag at least one other tiddler.\"},\"Ex:ReversedOptionalParameters\":{\"title\":\"Ex:ReversedOptionalParameters\",\"created\":\"20240928184257238\",\"length\":\"s\",\"modified\":\"20240928184916219\",\"origin\":\"The Finer Points of Procedures\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"What do you think will happen if you reverse the order of the parameters in the version of `wikipediaLink` with an optional parameter, so that `linkText:\\\"Wikipedia Link\\\"` comes before `articleName` in the parameter list? Try it and see.\"},\"Ex:ReversedOptionalParameters/answer\":{\"title\":\"Ex:ReversedOptionalParameters/answer\",\"created\":\"20240928184649260\",\"modified\":\"20241010131206736\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"After reversing, we get something like this:\\n\\n{{Sn:ReversedOptParameters||MagicSnippet}}\\n\\nIn the first link, we can see that `articleName` has implicitly gotten a value of `\\\"\\\"` (an empty value), because there is nothing after the `wiki/`. In fact, the same thing happens if you don't provide any default value at all and just don't include a parameter:\\n\\n{{Sn:MissingParameters||MagicSnippet}}\\n\\nThis said, putting non-optional parameters after optional ones, or calling a procedure with some non-optional parameters missing, is bad style and will likely get you very confused sooner or later, so you should certainly avoid it!\"},\"Ex:RoundtimeMacro\":{\"title\":\"Ex:RoundtimeMacro\",\"created\":\"20200822194847240\",\"length\":\"M\",\"modified\":\"20210130174601176\",\"origin\":\"JavaScript Macros\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Create a JavaScript macro called `roundtime` that rounds a TiddlyWiki-formatted timestamp to the nearest 15 minutes.\"},\"Ex:RoundtimeMacro/answer\":{\"title\":\"Ex:RoundtimeMacro/answer\",\"created\":\"20200822194914928\",\"modified\":\"20200822194933716\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Here's one version. I'm not a JavaScript developer, so there are probably easier ways to do this!\\n\\n```javascript\\n/*\\\\\\ntitle: roundtime\\ntype: application/javascript\\nmodule-type: macro\\n\\nRound TiddlyWiki-formatted times to the nearest 15 minutes\\n\\\\*/\\n\\n(function(){\\n\\\"use strict\\\";\\n\\nexports.name = \\\"roundtime\\\";\\nexports.params = [\\n  {name: \\\"timestamp\\\"}\\n];\\nexports.run = function(timestamp) {\\n    var hours = timestamp.substring(8, 10);\\n    var minutes = timestamp.substring(10, 12);\\n\\n    if (minutes < 8) {\\n        minutes = 0;\\n    } else if (minutes < 23) {\\n        minutes = 15;\\n    } else if (minutes < 38) {\\n        minutes = 30;\\n    } else if (minutes < 53) {\\n        minutes = 45;\\n    } else {\\n        minutes = 0;\\n        hours++;\\n    }\\n\\n    return timestamp.substring(0, 8) + hours + minutes + \\\"00000\\\";\\n};\\n\\n})();\\n```\\n\\n(If we wanted to dig into extracting seconds as well, we could round a bit more precisely. This is good enough for explanatory purposes!)\"},\"Ex:RubberDucking\":{\"title\":\"Ex:RubberDucking\",\"complete\":\"\",\"created\":\"20210121000751424\",\"length\":\"m\",\"modified\":\"20210206195909837\",\"origin\":\"When Things Go Wrong\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Locate a rubber duck or another appropriate object you can explain your TiddlyWiki problems to, and find the problem(s) with the following filter snippet by explaining to your chosen listener what it's doing. Check your answer by fixing the problem.\\n\\nThe goal of this filter is to display, in alphabetical order, the summaries of all tiddlers in this chapter, which are stored in their `description` fields.\\n\\n{{Sn:RubberDucking||MagicSnippet}}\"},\"Ex:RubberDucking/answer\":{\"title\":\"Ex:RubberDucking/answer\",\"created\":\"20210121000813997\",\"modified\":\"20210121001504559\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"There were three problems with this snippet:\\n\\n# The final `]` to close the filter run was left off.\\n# The `;` in `field:parent` should read `:`.\\n# The `sort[]` needs to come after the `get[description]` operator to meet the goal proposed above, or the tiddler titles (which you never see) are sorted, rather than their descriptions/summaries.\\n\\nA corrected version:\\n\\n{{Sn:RubberDuckingCorrected||MagicSnippet}}\"},\"Ex:SampleExercise\":{\"title\":\"Ex:SampleExercise\",\"complete\":\"\",\"created\":\"20210117001316615\",\"length\":\"s\",\"modified\":\"20241013020144350\",\"origin\":\"How to Use This Book\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Search the web to find the name of TiddlyWiki's original developer.\"},\"Ex:SampleExercise/answer\":{\"title\":\"Ex:SampleExercise/answer\",\"created\":\"20210117001453280\",\"modified\":\"20210123172912107\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Jeremy Ruston.\\n\\nAmong other places, you can find this answer [[in the TiddlyWiki documentation|https://tiddlywiki.com/#TiddlyWiki]], which we will unsurprisingly be seeing much more of as we continue through the book.\"},\"Ex:SaveOptionalParameters\":{\"title\":\"Ex:SaveOptionalParameters\",\"created\":\"20240901144810532\",\"length\":\"m\",\"modified\":\"20240929003242784\",\"origin\":\"Overriding Built-In Widgets\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"The `$link` widget has many optional parameters besides `to` and `tooltip`: as of the current version, `aria-label`, `tabindex`, `draggable`, `tag`, `class`, `overrideClass`, and any number of CSS data attributes and properties. Right now, we are ignoring these, possibly causing undesired effects. For instance, the following link should be rendered like an external link, but fails to do so:\\n\\n```html\\n<$link to=\\\"Tiddlers\\\" class=\\\"tc-tiddlylink-external\\\">\\n  Tiddlers (fake external)\\n</$link>\\n```\\n\\nTo prevent such lost parameters, we need to pass all the parameters we aren't explicitly changing through to the original `$link` widget. We can combine two features to achieve this: (1) the `$names` and `$values` parameters of `$genesis`, which let you set an arbitrary number of parameters by providing two filters that evaluate to a list of parameter names and a list of corresponding values, and (2) the `$params` parameter to a widget (or function or procedure), which provides a [[JSON-formatted|Data Tiddlers]] collection of all the parameters passed to the widget, even those that weren't specified in the parameters list.\\n\\nYou'll need to know several new things to complete this task:\\n\\n(1) The `$parameters` widget, which is a more verbose way of specifying the parameters of something to be transcluded (including a widget), is needed to use the `$params` attribute -- we can't specify `$params` directly in the `(parameter list)` of the `\\\\widget` pragma. The value of the `$params` attribute is the name of a variable into which the parameters are placed. Here's the syntax:\\n\\n```html\\n\\\\widget $link(to, tooltip)\\n  <$parameters $params=\\\"params-var\\\">\\n    ...here <<params-var>> is JSON containing all the params, and <<to>> and <<tooltip>> contain the values of those specific parameters\\n  </$parameters>\\n\\\\end\\n```\\n\\n(2) To get the base lists of parameter names and values, use the following functions:\\n\\n```html\\n\\\\function .rest-names() [<params-var>jsonindexes[]]\\n\\\\function .rest-values() [.rest-names[]] :map[<params-var>jsonget<currentTiddler>]\\n```\\n\\n(3) When you call the `$genesis` widget, you're //supposed// to be able to override any values in the `$names` and `$values` lists by additionally supplying that parameter (so that we could add a new `tooltip` parameter here, and that one would be used), but [[due to a bug in TiddlyWiki, this doesn't currently work|https://talk.tiddlywiki.org/t/bug-in-genesis-widget-precedence/10548]]. Instead, override parameters directly within the `$names` and `$values` lists by using new filter runs at the end with the `=` prefix, something like this:\\n\\n```\\n$names=\\\"[[...blablabla]] =[[tooltip]]\\\"\\n$values=\\\"[[...blablabla]] =[[tooltipvalue]]\\\"\\n```\"},\"Ex:SaveOptionalParameters/answer\":{\"title\":\"Ex:SaveOptionalParameters/answer\",\"created\":\"20240901145158325\",\"modified\":\"20240901145851761\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Here's one possible version:\\n\\n{{Sn:SaveOptionalParametersSolution||MagicSnippet}}\\n\"},\"Ex:SearchExploration\":{\"title\":\"Ex:SearchExploration\",\"created\":\"20200603175700245\",\"length\":\"s\",\"modified\":\"20210130174618833\",\"origin\":\"Searching\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Try searching for a few more tiddlers you've created, both with keywords found in the title and keywords found in the body text.\"},\"Ex:SearchingInTransclusions\":{\"title\":\"Ex:SearchingInTransclusions\",\"created\":\"20200604020710211\",\"length\":\"s\",\"modified\":\"20241015001534018\",\"origin\":\"Field Transclusions\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"In an [[exercise|Ex:JohnDoeSearch]] in the previous chapter, we observed that tiddlers referenced in fields did not appear in search. Now, however, in [[Ex:JaneDataTransclusion]], we transcluded the `manager` field directly into the JaneDoe tiddler. Try searching for some of the text in that field again (e.g., `ChrisSmith`). Has anything changed?\"},\"Ex:SearchingInTransclusions/answer\":{\"title\":\"Ex:SearchingInTransclusions/answer\",\"created\":\"20200604020731329\",\"modified\":\"20240924123143148\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"No, nothing has changed! Search only looks in the physical `title` and `text` fields of the tiddler. Transcluded content is not actually part of the text field of a tiddler -- TiddlyWiki only shows it there when you look at the tiddler -- so it doesn't show up in search, either.\\n\\nIf you search for //the transclusion itself// -- like, the part that looks like `{{JaneDoe}}` -- then you //will// find that, because that text is physically located within the `JaneDoe` tiddler's text field. (But if you type the braces into the ordinary search bar, it doesn't like special characters and won't find anything. Type just `JaneDoe` and you'll find that any tiddler that transcludes `JaneDoe` shows up.)\"},\"Ex:SelectiveButtonDisplay\":{\"title\":\"Ex:SelectiveButtonDisplay\",\"created\":\"20200822192549292\",\"length\":\"m\",\"modified\":\"20210130174623441\",\"origin\":\"Creating Tiddlers With Predefined Fields\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"You may have noticed, as you completed the above exercise, that the list of items that have the page controls tag is quite a lot longer than the buttons that currently appear on the toolbar. Explore your wiki to figure out how the buttons are selectively shown or hidden.\"},\"Ex:SelectiveButtonDisplay/answer\":{\"title\":\"Ex:SelectiveButtonDisplay/answer\",\"created\":\"20200822192613762\",\"modified\":\"20200822192625562\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"The template `$:/core/ui/PageTemplate/pagecontrols` is responsible for actually rendering these controls. In here, you'll find, among other lines:\\n\\n```html\\n\\\\define config-title()\\n$:/config/PageControlButtons/Visibility/$(listItem)$\\n\\\\end\\n[...]\\n<$set name=\\\"hidden\\\" value=<<config-title>>>\\n<$list filter=\\\"[<hidden>!text[hide]]\\\" storyview=\\\"pop\\\" variable=\\\"ignore\\\">\\n[...]\\n```\\n\\nThus, if the tiddler `$:/config/PageControlButtons/Visibility/NameOfYourButtonTiddler` has content of `hide`, the button isn't transcluded onto the toolbar. Toggling the checkbox next to your button on the ''Tools'' tab of the sidebar will change the contents of this tiddler, thus hiding or showing it.\"},\"Ex:SelfTransclusion\":{\"title\":\"Ex:SelfTransclusion\",\"created\":\"20200604022607997\",\"length\":\"s\",\"modified\":\"20210130174634327\",\"origin\":\"Field Transclusions\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"What happens if you transclude a tiddler into itself?\"},\"Ex:SelfTransclusion/answer\":{\"title\":\"Ex:SelfTransclusion/answer\",\"created\":\"20200604022634202\",\"modified\":\"20210409201530771\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"A large red banner appears that says “Recursive transclusion error in transclude widget.” (If you're in preview mode creating a new tiddler, the error won't appear until you save the tiddler under some conditions.) This is a rather cryptic error message, but if you remember what it means, the cause of the error is usually obvious once you start looking.\\n\\nAs we move forward into [[templates|Templates and the Current Tiddler]], you will sometimes see this error on a template -- in that case, it does not necessarily mean you did anything wrong. More to come.\"},\"Ex:SetLetReplacement\":{\"title\":\"Ex:SetLetReplacement\",\"complete\":\"\",\"created\":\"20210206220327975\",\"length\":\"m\",\"modified\":\"20220103170539532\",\"origin\":\"Miscellaneous Widgets\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Locate several places in your sample wiki where you have used `$set` widgets and replace them with equivalent `$let` widgets.\"},\"Ex:SidebarCurrentTiddler\":{\"title\":\"Ex:SidebarCurrentTiddler\",\"created\":\"20200718044814594\",\"length\":\"s\",\"modified\":\"20241010131834375\",\"origin\":\"Adding to the Sidebar\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"You might be tempted to use `[tag<currentTiddler>]` within the `tabs` macro call on the `$:/yourname/Views` tiddler, so that if you ever change the name of the tiddler you don't have to remember to update the filter. Try this. What happens? Why do you think this happened?\"},\"Ex:SidebarCurrentTiddler/answer\":{\"title\":\"Ex:SidebarCurrentTiddler/answer\",\"created\":\"20200718044834605\",\"modified\":\"20200718044844812\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"No tabs show up at all, because there is no `currentTiddler` value defined in the sidebar! If you think about it, this makes good sense -- the sidebar is not rendered in the context of any particular tiddler.\"},\"Ex:Slicing\":{\"title\":\"Ex:Slicing\",\"complete\":\"\",\"created\":\"20210206165636992\",\"length\":\"M\",\"modified\":\"20210313143622961\",\"origin\":\"Slicing Up Content\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Locate some old notes you've taken, or simply consider a topic or problem you've been thinking about recently. What are the important nouns in this topic? How would you divide it into tiddlers, what fields would they have, and how would they relate to each other? You can stub out a few tiddlers in your sample wiki, or simply sketch an outline of the tiddlers on a sheet of paper.\"},\"Ex:SlicingInGtw\":{\"title\":\"Ex:SlicingInGtw\",\"complete\":\"\",\"created\":\"20210206170109287\",\"length\":\"m\",\"modified\":\"20210409133737082\",\"origin\":\"Slicing Up Content\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Edit a few sections and tiddlers in the //Grok TiddlyWiki// wiki to get a feel for how it's divided into tiddlers and what fields are present on these tiddlers. Tiddlers are transcluded into other tiddlers using a syntax involving `{{double curly braces}}`; don't worry if you see things in the source that don't make sense yet.\"},\"Ex:SpacedVariable\":{\"title\":\"Ex:SpacedVariable\",\"created\":\"20201121235458843\",\"length\":\"s\",\"modified\":\"20210130174630853\",\"origin\":\"Variables\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"What happens if you put a space in a variable name?\"},\"Ex:SpacedVariable/answer\":{\"title\":\"Ex:SpacedVariable/answer\",\"created\":\"20201121235528457\",\"modified\":\"20240928203524404\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"It becomes impossible to transclude (if you write `<<some variable>>`, nothing will appear). This is because words after the first space in the angle brackets are treated as //parameters// rather than as part of the name of the variable. This will make sense in a moment when we talk about [[Procedures]].\\n\\nYou might wonder if you could say `<<\\\"the eis\\\">>` to refer to a variable name containing a space, by analogy to the way you can include multiple words in the value of an [[HTML attribute|HTML]], but this isn't valid syntax.\"},\"Ex:StretchText\":{\"title\":\"Ex:StretchText\",\"created\":\"20210120030944524\",\"length\":\"h\",\"modified\":\"20241010131136104\",\"origin\":\"Supplemental Exercises\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"//StretchText//, generally attributed to [[Ted Nelson|https://en.wikipedia.org/wiki/Ted_Nelson]], is a form of hypertext in which links, or summary snippets, can be expanded in place: in other words, you can “stretch” parts of the text that you want to see in more detail to zoom in on them. Implement stretch-text in TiddlyWiki using a template or procedure that allows you to expand and contract a tiddler serving as the “next level down”.\\n\\nYou can find an example and a TiddlyWiki implementation as the TiddlyStretch plugin in my [[list of cynical laws|https://mosmu.se/#LawOfCynicism]].\"},\"Ex:StylesheetExperiments\":{\"title\":\"Ex:StylesheetExperiments\",\"created\":\"20201123000903120\",\"length\":\"M\",\"modified\":\"20210130175016371\",\"origin\":\"Supplemental Exercises\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"If you know a little bit of CSS, read about [[Stylesheets]] in TiddlyWiki and make some design changes to your wiki, like changing the text color or the shape of some buttons.\"},\"Ex:TagColorGrouping\":{\"title\":\"Ex:TagColorGrouping\",\"created\":\"20201123000633554\",\"length\":\"m\",\"modified\":\"20210130175017576\",\"origin\":\"Supplemental Exercises\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Modify the display of tags in the `Tags` section of the `More` sidebar tab so that they are grouped by color.\"},\"Ex:TagColoring\":{\"title\":\"Ex:TagColoring\",\"created\":\"20200608014124293\",\"length\":\"s\",\"modified\":\"20210130174636052\",\"origin\":\"Classifying Tags\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Set the tags corresponding to tiddler types (`Contact`, `Journal`, `Meeting`, and `Project`) to solid red (`#ff0000`) and give them a tag icon (`$:/core/images/tag-button`).\"},\"Ex:TagMetadataStorage\":{\"title\":\"Ex:TagMetadataStorage\",\"created\":\"20200608014154433\",\"length\":\"s\",\"modified\":\"20210130174636491\",\"origin\":\"Classifying Tags\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"How do you think the color and icon of tags are stored?\"},\"Ex:TagMetadataStorage/answer\":{\"title\":\"Ex:TagMetadataStorage/answer\",\"created\":\"20200608014214783\",\"modified\":\"20200608014226194\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Remember that everything's a tiddler? Open the tiddler of one of the tags you've colored and take a look.\"},\"Ex:TagStyleRule\":{\"title\":\"Ex:TagStyleRule\",\"created\":\"20240927010702719\",\"length\":\"m\",\"modified\":\"20240927010756543\",\"origin\":\"Stylesheets\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Create a rule in a global stylesheet that makes some class of tiddlers (perhaps a couple of specific titles, or tiddlers with a particular tag) display in a smaller font.\"},\"Ex:TelephoneLink\":{\"title\":\"Ex:TelephoneLink\",\"created\":\"20210131040745037\",\"length\":\"m\",\"modified\":\"20240923221740808\",\"origin\":\"Macros\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Suppose we want to create a link for a contact which, when clicked on a smartphone, calls the contact. This can be accomplished with a link to a URL like `tel:888-555-1234`. Create such a link and add it to the `ContactInformationTemplate`.\\n\\nUse text substitution in a macro to build the link -- do not use backticks or filters.\\n\\n//Tip:// If you want to use a `[[double square brackets]]` link rather than an `a` HTML element, you need to use `ext`, like this:\\n\\n```html\\n[ext[tel:888-555-1234]]\\n```\\n\\nThat's because `tel:888-555-1234` by itself would be a valid name for a tiddler, too, so if TiddlyWiki isn't told it's an external link, it will assume it's an internal one. See the //External Links// heading [[here in the TiddlyWiki documentation |https://tiddlywiki.com/#Linking%20in%20WikiText]] for more information.\"},\"Ex:TelephoneLinkBrokenSolution\":{\"title\":\"Ex:TelephoneLinkBrokenSolution\",\"created\":\"20240923221211699\",\"length\":\"s\",\"modified\":\"20240923221237308\",\"origin\":\"Macros\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Why doesn't this solution to the previous exercise work, given that macros perform text substitution?\\n\\n```html\\n\\\\define phonelink() [ext[Call {{!!title}}|tel:{{!!phone}}]]\\n<<phonelink>>\\n```\"},\"Ex:TelephoneLinkBrokenSolution/answer\":{\"title\":\"Ex:TelephoneLinkBrokenSolution/answer\",\"created\":\"20240923221241933\",\"modified\":\"20240923221246651\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Text substitution applies only to parameters and variables, and then only ones that use `$special syntax$`. The two transclusions here are ordinary [[field transclusions|Transclusions]].\"},\"Ex:TelephoneLink/answer\":{\"title\":\"Ex:TelephoneLink/answer\",\"created\":\"20210131040820380\",\"length\":\"m\",\"modified\":\"20241016130646565\",\"origin\":\"Macros\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"The key issue here is passing the value of `!!phone` into the macro. You might be tempted to use a parameter `phonenum`, like this:\\n\\n```html\\n\\\\define phonelink(phonenum) tel:$phonenum$\\n<a href=<<phonelink {{!!phone}}>>>Call {{!!title}}</a>\\n```\\n\\n...but unfortunately `<<phonelink {{!!phone}}>>` doesn't do what we want here -- TiddlyWiki does not parse other transclusions inside `<<variable transclusions>>`. (It's valid syntax, but it will just pass the literal text `{{!!phone}}` to the macro.)\\n\\nOne option is to put the entire link within the macro, which allows you to use the `$transclude` widget to pass transcluded values as parameters:\\n\\n```html\\n\\\\define phonelink(phonenum) [ext[Call $name$|tel:$phonenum$]]\\n<$transclude $variable=\\\"phonelink\\\" name={{!!title}} phonenum={{!!phone}}/>\\n```\\n\\nAnother popular (and more flexible) option is to access the values needed as //variables//, rather than as parameters:\\n\\n```html\\n\\\\define phonelink() tel:$(phonenum)$\\n<$let phonenum={{!!phone}}>\\n  <a href=<<phonelink>>>Call {{!!title}}</a>\\n</$let>\\n```\\n\\nThis problem is not limited to macros; it can come up occasionally with procedures as well. Setting a variable is often a useful workaround.\"},\"Ex:TicketTrackingLink\":{\"title\":\"Ex:TicketTrackingLink\",\"created\":\"20200603220219912\",\"length\":\"m\",\"modified\":\"20240911124934638\",\"origin\":\"The Finer Points of Procedures\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Write a procedure called `ticketLink` that takes one parameter, called `ticketId`, and creates a link whose text is `Ticket #{ID}`, where `{ID}` represents the ID of the ticket, and which links to the ticket. Assume that the URL of a ticket in the company's ticket-tracking system is `https://tix.example.com/ticket/{ID}`.\\n\\nTest this procedure by putting it at the top of the `OnboardingProcess` tiddler and calling it at the bottom of the tiddler with the ticket number `245188`.\"},\"Ex:TicketTrackingLink/answer\":{\"title\":\"Ex:TicketTrackingLink/answer\",\"created\":\"20200603220926651\",\"modified\":\"20240929014355652\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"{{Sn:TicketLinkProcedure||MagicSnippet}}\"},\"Ex:TicketTrackingTemplate\":{\"title\":\"Ex:TicketTrackingTemplate\",\"complete\":\"\",\"created\":\"20200605153857006\",\"length\":\"m\",\"modified\":\"20241010130950573\",\"origin\":\"Templates and the Current Tiddler\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"In the [[TicketTrackingLink|Ex:TicketTrackingLink]] exercise, we created a procedure that outputs a link to a ticket in the company's ticket-tracking system and placed it in the `OnboardingProcess` tiddler. Create a template based on this procedure, called `TicketNumberLink`, which displays the link to a project's ticket when it's used as a template for any tiddler that has the `ticketnum` field populated. Transclude this template in the text of the `OnboardingProcess` project to show its ticket number.\\n\\n//Tip:// It may be helpful to get everything working within the `OnboardingProcess` tiddler first, then excise the relevant parts into a separate template tiddler -- this way, if something doesn't work, you have a better idea of what part isn't right.\"},\"Ex:TicketTrackingTemplate/answer\":{\"title\":\"Ex:TicketTrackingTemplate/answer\",\"created\":\"20200605153922962\",\"modified\":\"20240925232044467\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"In the `TicketNumberLink` tiddler:\\n\\n```html\\n\\\\procedure ticketLink(ticketId)\\n<a href=`https://tix.example.com/ticket/$(ticketId)$`>Ticket <<ticketId>></a>\\n\\\\end\\n\\n<$transclude $variable=\\\"ticketLink\\\" ticketId={{!!ticketnum}} />\\n```\\n\\nIn the `OnboardingProcess` tiddler:\\n\\n```html\\n{{||TicketNumberLink}}\\n```\"},\"Ex:TiddlersContainingWikiTitle\":{\"title\":\"Ex:TiddlersContainingWikiTitle\",\"complete\":\"\",\"created\":\"20201122165557588\",\"length\":\"m\",\"modified\":\"20210409214506156\",\"origin\":\"Filters and Transclusions\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Create a list of all tiddlers that contain the title of the wiki.\\n\\n* The current title of the wiki can be found in the tiddler named `$:/SiteTitle`.\\n* The `search` filter operator is used to find tiddlers that contain some arbitrary text.\"},\"Ex:TiddlersContainingWikiTitle/answer\":{\"title\":\"Ex:TiddlersContainingWikiTitle/answer\",\"created\":\"20201122165626034\",\"modified\":\"20240925234443416\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"```html\\n<ul>\\n  <$list filter=\\\"[search{$:/SiteTitle}]\\\">\\n    <li><$link to=<<currentTiddler>>><<currentTiddler>></$link></li>\\n  </$list>\\n</ul>\\n```\\n\\nNow might be a good time to point out that there's a faster way to create a bulleted list of links to tiddlers that match a filter. I didn't tell you about this {{Ltc:ListLinksProcedure||LieToChildrenTemplate}} earlier so you would have to learn to use the more general `$list` widget, but now that you've learned, the `list-links` built-in procedure is a handy shortcut. We can rewrite the above as simply:\\n\\n```html\\n<<list-links \\\"[search{$:/SiteTitle}]\\\">>\\n```\\n\\nAlso note that creating a link to the current tiddler with text of the current tiddler's title can be reduced to just:\\n\\n```html\\n<$link />\\n```\"},\"Ex:TocAddition\":{\"title\":\"Ex:TocAddition\",\"created\":\"20200603195508407\",\"length\":\"s\",\"modified\":\"20210131175911237\",\"origin\":\"Creating Hierarchies with a Table of Contents\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Make up and create another meeting under one of the other subcategories, either `OnboardingPeople` or `OnboardingTraining`. Be sure to include at least one participant and a time as we did when we [[set up the initial meeting|Meeting Tiddlers]]. Check to make sure that it shows up in the table of contents.\"},\"Ex:TocCaptions\":{\"title\":\"Ex:TocCaptions\",\"created\":\"20200603195939227\",\"length\":\"s\",\"modified\":\"20210409134418366\",\"origin\":\"Creating Hierarchies with a Table of Contents\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Having the word `Onboarding` appear repeatedly in a table of contents within the `OnboardingProcess` tiddler seems a little silly, especially when those top-level tiddlers don't have any useful content of their own. We'd really like to be able to give them names that make sense in this context, without having to make the title of the tiddler something vague like “HR” that would be ambiguous in the context of the entire wiki.\\n\\nFortunately for us, the table-of-contents functionality looks for a field called `caption` and uses that instead of the title if it exists. Add appropriate caption fields to each of the three top-level items displayed in the table of contents to pretty up the list.\"},\"Ex:TocInternalExternalNav\":{\"title\":\"Ex:TocInternalExternalNav\",\"complete\":\"\",\"created\":\"20200603195801747\",\"length\":\"m\",\"modified\":\"20210321012406640\",\"origin\":\"Creating Hierarchies with a Table of Contents\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"There are two more (rarely used) kinds of tables of contents, `toc-tabbed-internal-nav` and `toc-tabbed-external-nav`. Try these out. Can you figure out the difference between them?\"},\"Ex:TocInternalExternalNav/answer\":{\"title\":\"Ex:TocInternalExternalNav/answer\",\"created\":\"20200603195826629\",\"length\":\"m\",\"modified\":\"20200603195917940\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"The difference is that the `internal` version opens internal links within the tabbed display, whereas the `external` version opens them in a separate tiddler in the story river.\"},\"Ex:TranscludeWikipediaLink\":{\"title\":\"Ex:TranscludeWikipediaLink\",\"created\":\"20241001113555763\",\"length\":\"m\",\"modified\":\"20241001113954079\",\"origin\":\"Parameterizing Field Transclusions\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Create a `WikipediaLink` tiddler equivalent of the procedure. It should take `articleName` and `text` parameters and generate a Wikipedia link when transcluded.\"},\"Ex:TranscludeWikipediaLink/answer\":{\"title\":\"Ex:TranscludeWikipediaLink/answer\",\"created\":\"20241001113650270\",\"modified\":\"20241001113943615\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"In the `WikipediaLink` tiddler:\\n\\n```html\\n\\\\parameters(articleName, text)\\n<a href=`https://en.wikipedia.org/wiki/$(articleName)$`><<text>></a>\\n```\\n\\nTo create a link:\\n\\n```html\\n{{WikipediaLink|List of lists of lists|A very silly article}}\\n```\"},\"Ex:TranscludedProcedureScope\":{\"title\":\"Ex:TranscludedProcedureScope\",\"complete\":\"\",\"created\":\"20200605160614741\",\"length\":\"m\",\"modified\":\"20240929005137954\",\"origin\":\"Templates and the Current Tiddler\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"In [[The Finer Points of Procedures]], we learned that the scope of a procedure is until the end of the tiddler. But what about when we transclude a tiddler containing a procedure into another tiddler?\"},\"Ex:TranscludedProcedureScope/answer\":{\"title\":\"Ex:TranscludedProcedureScope/answer\",\"created\":\"20200605160659838\",\"modified\":\"20240929005136264\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"To test this, you could place a procedure in a tiddler, transclude that procedure in another tiddler, and see if you can call the procedure. If you do this, you'll find that your `<<procedure call>>` doesn't produce any output, which is what happens when the procedure is not defined (we saw this in an [[earlier exercise|Ex:MacroPosition]]).\\n\\nWe can conclude from this experiment that the procedure goes out of scope at the end of the transclusion. It makes no difference whether the tiddler containing the procedure was transcluded via a template or not.\\n\\nThere are ways we can make procedures available in other tiddlers, but transcluding the tiddler containing the procedure is not one of them.\"},\"Ex:UnclosedProcedureCall\":{\"title\":\"Ex:UnclosedProcedureCall\",\"created\":\"20201231041607192\",\"length\":\"m\",\"modified\":\"20240929004839284\",\"origin\":\"The Finer Points of Procedures\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Take the example //The $transclude widget can take variables as parameters// and modify it so that the `$transclude` tags are unclosed (no `/` before the `>`). What happens? Why do you think this happened?\"},\"Ex:UnclosedProcedureCall/answer\":{\"title\":\"Ex:UnclosedProcedureCall/answer\",\"created\":\"20201231041636952\",\"modified\":\"20240929004848811\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Any content anywhere after the first `$transclude` tag in the tiddler disappears! This happens because the `$transclude` widget is not a void element, so it needs to have a closing tag. In the absence of an actual closing tag, TiddlyWiki pretends there is a matching closing tag at the very end of the tiddler. However, this causes the remainder of the tiddler to be part of the content of the `$transclude` widget, and any content in a `$transclude` widget is rendered only if the transclusion fails for some reason (e.g., the procedure you tried to call doesn't exist). This is a common typo, so watch out for that slash.\\n\\nIf this discussion didn't make sense, consider reviewing the [[HTML]] section.\"},\"Ex:UpdatingDisclaimer\":{\"title\":\"Ex:UpdatingDisclaimer\",\"created\":\"20200603200939184\",\"length\":\"s\",\"modified\":\"20240616142450663\",\"origin\":\"Variables\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Suppose that corporate decides it's time to update the disclaimer, and henceforth all documents need to say “doesn't” instead of “does not.” Update the tiddler to make this change. Notice that, with the use of a variable, you need only make the change in one place, even if you included the disclaimer in hundreds of places.\"},\"Ex:VariableAfterSet\":{\"title\":\"Ex:VariableAfterSet\",\"created\":\"20201121235545353\",\"length\":\"s\",\"modified\":\"20240616142508315\",\"origin\":\"Variables\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"What happens if you refer to a variable after the `</$set>` or `</$let>`?\"},\"Ex:VariableAfterSet/answer\":{\"title\":\"Ex:VariableAfterSet/answer\",\"created\":\"20201121235610144\",\"modified\":\"20240616142516867\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Nothing shows up. After the `</$set>` or `</$let>`, it's as if the variable never had a value.\"},\"Ex:VariableTransclusion\":{\"title\":\"Ex:VariableTransclusion\",\"created\":\"20201122031933154\",\"length\":\"s\",\"modified\":\"20240925230109150\",\"origin\":\"Field Transclusions\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"What happens if you set a variable in one tiddler, and transclude a tiddler that references that variable within the scope of the `$set` or `$let` widget? You can start with a Tiddler 1 that looks something like this:\\n\\n```html\\n<$let myVariable=\\\"test\\\">\\n    {{Tiddler 2}}\\n</$let>\\n```\"},\"Ex:VariableTransclusion/answer\":{\"title\":\"Ex:VariableTransclusion/answer\",\"created\":\"20201122031957511\",\"modified\":\"20240928210036151\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"The variable reference is accessible within the transcluded tiddler -- the scope is not limited to the tiddler in which the variable is set, but also applies to any transclusions that happen within the `$let` widget. In other words, if you place this in Tiddler 2:\\n\\n```html\\n<<myVariable>>\\n```\\n\\nThen when viewing Tiddler 1, `test` appears, even though `myVariable` was not physically defined in Tiddler 2.\\n\\nThis “bleed-over” proves quite useful in many situations, especially ones that involve templates (a concept we'll discuss in the [[next section|Templates and the Current Tiddler]]).\"},\"Ex:VeryOrdinaryDay\":{\"title\":\"Ex:VeryOrdinaryDay\",\"created\":\"20200718012126754\",\"length\":\"m\",\"modified\":\"20240924002556671\",\"origin\":\"Data Tiddlers\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"The `TodaysHoliday` tiddler has a problem: if today isn't a holiday, it says “It's today!”. While true, that sounds a little silly, doesn't it? Change the tiddler so that if today is not a holiday, it instead says, “Sadly, it's a very ordinary day today.”\\n\\n//Tip//: An attribute to the `$list` widget called `emptyMessage` may come in handy.\"},\"Ex:VeryOrdinaryDay/answer\":{\"title\":\"Ex:VeryOrdinaryDay/answer\",\"created\":\"20200718012215079\",\"modified\":\"20241001021043179\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"The most obvious approach is to use a [[conditional expression|Conditional Expressions]]. In this example, we set the variable `holiday` so we don't have to write the same filter twice, but you could also use a [[function|Functions]], or simply run it twice (it won't be much slower, just uglier):\\n\\n{{Sn:OrdinaryDay||MagicSnippet}}\\n\\nHowever, a more concise approach is to use the `$list` widget with the `emptyMessage` parameter, which is rendered if the filter returns no results:\\n\\n{{Sn:OrdinaryDayList||MagicSnippet}}\"},\"Ex:ViewSource\":{\"title\":\"Ex:ViewSource\",\"complete\":\"\",\"created\":\"20201125002209220\",\"length\":\"m\",\"modified\":\"20240829125126485\",\"origin\":\"HTML\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Try right-clicking on the background of this web page and choosing //View Page Source//. This will show the HTML code behind the page. Scroll through some of it and see if you can find some tags and attributes, like we discussed above.\\n\\nIn addition to HTML, you will find some //JavaScript// (a programming language for web browsers that uses a lot of {curly braces}), some //CSS// (a language that defines the colors, spacing, and fonts used on the site), some TiddlyWiki wikitext, and probably a few other mysterious things. When you see something you don't understand, just keep scrolling -- you're not meant to understand it all, just to get a feel for how a website's HTML looks.\\n\\nFor fun, go try this on a couple of other websites, too.\"},\"Ex:ViewTemplateExplicitHide\":{\"title\":\"Ex:ViewTemplateExplicitHide\",\"created\":\"20210207214325266\",\"length\":\"m\",\"modified\":\"20210207214315159\",\"origin\":\"Hiding and Showing Things\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Change the ViewTemplate tiddler that displays the contact information template so that it does not display if the `hide-contactinfo` field on the contact tiddler has the value `yes`. Use a `$list` widget.\"},\"Ex:ViewTemplateExplicitHideReveal\":{\"title\":\"Ex:ViewTemplateExplicitHideReveal\",\"created\":\"20210207214347738\",\"length\":\"m\",\"modified\":\"20210207214506421\",\"origin\":\"Hiding and Showing Things\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Repeat the [[previous exercise|Ex:ViewTemplateExplicitHide]], but use a `$reveal` widget instead of a `$list` widget.\"},\"Ex:ViewTemplateExplicitHideReveal/answer\":{\"title\":\"Ex:ViewTemplateExplicitHideReveal/answer\",\"created\":\"20210207214601805\",\"modified\":\"20210207214502838\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"```html\\n<$reveal state=\\\"!!hide-contactinfo\\\" type=\\\"nomatch\\\" text=\\\"yes\\\">\\n  …the rest of the template\\n</$reveal>\\n```\\n\"},\"Ex:ViewTemplateExplicitHide/answer\":{\"title\":\"Ex:ViewTemplateExplicitHide/answer\",\"created\":\"20210207214430861\",\"modified\":\"20210207214334658\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"```html\\n<$list filter=\\\"[all[current]!hide-contactinfo[yes]]\\\">\\n  …the rest of the template\\n</$list>\\n```\\n\"},\"Ex:ViewsOnSidebar\":{\"title\":\"Ex:ViewsOnSidebar\",\"created\":\"20200718044634233\",\"length\":\"m\",\"modified\":\"20210130174651666\",\"origin\":\"Adding to the Sidebar\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Place the new `$:/yourname/Views` tiddler onto the sidebar between the `Recent` and `Tools` tabs.\\n\\n//Hint//: You'll have to figure out how TiddlyWiki picks up tabs on the sidebar. A little bit of detective work right within your wiki should be sufficient; we've seen all the relevant mechanisms by now.\"},\"Ex:ViewsOnSidebar/answer\":{\"title\":\"Ex:ViewsOnSidebar/answer\",\"created\":\"20200718044652683\",\"modified\":\"20240926004949378\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Tag the tiddler with `$:/tags/SideBar`, then set its `list-before` field to `$:/core/ui/SideBar/Tools`, or its `list-after` field to `$:/core/ui/SideBar/Recent`.\\n\\nYou can find what tag to use by poking around in `$:/tags` and seeing what looks promising, or by searching for one of the other tabs (e.g., `Recent`) in the ''Shadows'' tab of Advanced Search, finding the shadow tiddler that handles that tab, and seeing what it's tagged.\\n\\nAnother option is to look at the handy [[System Tags|https://tiddlywiki.com/#SystemTags]] page in the documentation, which lists out every tag built in to TiddlyWiki and its function.\"},\"Ex:WikiStatistics\":{\"title\":\"Ex:WikiStatistics\",\"created\":\"20201122040301117\",\"length\":\"M\",\"modified\":\"20210130174643190\",\"origin\":\"Filters and Transclusions\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Create a tiddler called `WikiStatistics` that shows the following pieces of information in a bulleted list:\\n\\n* How many contacts are in the wiki.\\n* How many unique tiddlers are linked from meetings. (It will be unique without having to do anything special, so don't panic if you think you don't know how to make it unique.)\\n* What percentage of non-system tiddlers in the wiki are contacts, to three digits of precision (e.g., 10.2%, or 1.55%).\\n\\nTo complete the last one, you'll need to review the list of Mathematics Operators on the [[filter operators|https://tiddlywiki.com#Filter%20Operators]] manual page.\"},\"Ex:WikiStatistics/answer\":{\"title\":\"Ex:WikiStatistics/answer\",\"created\":\"20201122040339373\",\"modified\":\"20240926000644195\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"```html\\n<ul>\\n  <li>There are <$text text={{{ [tag[Contact]count[]] }}}/> people in this wiki.</li>\\n  <li>There are <$text text={{{ [tag[Meeting]links[]count[]] }}}/> tiddlers linked from meetings.</li>\\n  <$let totalTiddlers={{{ [!is[system]count[]] }}}>\\n    <li><$text text={{{ [tag[Contact]count[]divide<totalTiddlers>multiply[100]precision[3]] }}}/>% of all non-system tiddlers in the wiki are contacts.</li>\\n  </$let>\\n</ul>\\n```\\n\\nNote the use of an HTML list. If we tried to do the list in pure wikitext with `*`, we would have been unable to place the third bullet point in the same list as the first two, as the `$let` widget coming in between causes TiddlyWiki to forget that a list was in progress. We could have put the `$let` widget around the //entire// list, but then it would have been harder to understand what we were doing since the first part of the calculation would have been physically separated from the second part. Always prioritize readability in your wikitext!\"},\"Ex:WikifiedQuotation\":{\"title\":\"Ex:WikifiedQuotation\",\"created\":\"20240923230027918\",\"length\":\"m\",\"modified\":\"20240923230457162\",\"origin\":\"Wikification\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"In this snippet, we had to quote the value of `text` in the `$wikify` widget (using triple quotes, since the text we were quoting contained single quotes). What goes wrong if we don't quote it? Why do you think this happens?\\n\\n{{Sn:AttributeParameterSubstitutionWikified||MagicSnippet}}\"},\"Ex:WikifiedQuotation/answer\":{\"title\":\"Ex:WikifiedQuotation/answer\",\"created\":\"20240923230137940\",\"modified\":\"20240923231204674\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"The problem that occurs if we remove the quotation marks is that the parameter `text` is no longer included in the output, we see only `Text: `.\\n\\nTo understand why, consider for a moment what the `$wikify` widget does: It takes the text presented to it in the `text` parameter and wikifies it. When we have quoted the value of `text`, it gets exactly the wikitext we specified, namely the text `Text: ` and then a procedure call. The widget makes this procedure call and gets the value `Text: <<text>>`. It sees there is still wikitext to wikify, and does so again in the same context, where `text` is still defined as a variable due to being a parameter of the procedure. It gets the value of the `text` variable, which is `test text`, sees there is no remaining wikitext to wikify, and sets the variable `wikitext` to the result, which is `Text: test text`, as we want.\\n\\nNow what about if we haven't quoted the value of `text`? Now, before the `$wikify` widget gets to it at all, TiddlyWiki will evaluate the value of `<<myText \\\"test text\\\">>`. When TiddlyWiki evaluates the procedure call, it gets the literal text `Test: <<text>>`. Because the wikitext being evaluated is the value of an attribute, TiddlyWiki does not attempt to wikify this again. Instead it stops and passes this text in to the `$wikify` widget. Now the `$wikify` widget tries to wikify this string. But the variable `text` is no longer defined, because the `$wikify` widget is a different context -- it was only defined during the evaluation of the initial procedure call (which was not repeated enough times to get the value of the `text` variable, since it was the value of an attribute)! Since `text` now has no value, the `$wikify` widget treats it as empty and puts just `Text: ` in the value of the `wikitext` variable, and we get the incorrect result.\\n\\nThis quirk is not specific to procedure calls -- macros using `<<__parameters as variables__>>` have the same problem. It does not, however, happen with text substitution, since in that case the //initial// macro call results in immediate replacement of the placeholders with their parameters -- there's nothing to wikify.\"},\"Ex:WikifyWikipediaLink\":{\"title\":\"Ex:WikifyWikipediaLink\",\"created\":\"20210208004244560\",\"length\":\"s\",\"modified\":\"20240923231713049\",\"origin\":\"Wikification\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Add the following snippet to a new tiddler:\\n\\n```html\\n\\\\define wikipediaLink(articleName)\\nhttps://en.wikipedia.org/wiki/$articleName$\\n\\\\end\\n\\n<$transclude $variable=\\\"wikipediaLink\\\" articleName={{!!wikipedia-article}}/>\\n```\\n\\nAlter this snippet so the contents of the `wikipedia-article` field on the current tiddler can be a transclusion of a different tiddler field. (As it stands, the transclusion will render, but not as part of a link, since the transclusion within the `wikipedia-article` field is only seen //after// being returned from the `wikipediaLink` macro.)\"},\"Ex:WikifyWikipediaLink/answer\":{\"title\":\"Ex:WikifyWikipediaLink/answer\",\"created\":\"20210208004312948\",\"modified\":\"20240923231727744\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"```html\\n\\\\define wikipediaLink(articleName)\\nhttps://en.wikipedia.org/wiki/$articleName$\\n\\\\end\\n\\n<$wikify name=\\\"article\\\" text={{!!wikipedia-article}}>\\n  <$transclude $variable=\\\"wikipediaLink\\\" articleName=<<article>>/>\\n</$wikify>\\n```\"},\"Ex:WikipediaLinkSnippet\":{\"title\":\"Ex:WikipediaLinkSnippet\",\"created\":\"20200718205147878\",\"length\":\"m\",\"modified\":\"20241017003810994\",\"origin\":\"Stamps\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Create a snippet //Link to Wikipedia article// that inserts a call to the `wikipediaLink` global procedure. Specifically, it should use the prefix/suffix feature mentioned in the previous paragraph so that if you highlight `Aardvark`, you get `<<wikipediaLink \\\"Aardvark\\\" linktext>>`.\"},\"Ex:WikipediaLinkSnippet/answer\":{\"title\":\"Ex:WikipediaLinkSnippet/answer\",\"created\":\"20200718205253237\",\"modified\":\"20210418141917530\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"You need three tiddlers.\\n\\n* `WikipediaLinkSnippet`: tagged `$:/tags/TextEditor/Snippet` and with a caption `Link to Wikipedia article`. No content.\\n* `WikipediaLinkSnippet/prefix`: body text `<<wikipediaLink \\\"`\\n* `WikipediaLinkSnippet/suffix`: body text `\\\" linktext>>`\"},\"Ex:WikipediaLinkTemplate\":{\"title\":\"Ex:WikipediaLinkTemplate\",\"created\":\"20201122165908150\",\"length\":\"m\",\"modified\":\"20240926002852845\",\"origin\":\"Filters and Transclusions\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Make the solution of the [[previous exercise|Ex:WikipediaLinkWithoutMacro]] into a separate `WikipediaLinkTemplate` tiddler that can be transcluded, so that it can be used for creating links to more things than just aardvarks. As we learned in [[Ex:VariableTransclusion]], variable values will carry across transclusion boundaries, so refer to the value of a variable called `articleName` to decide what article to link to.\\n\\nWhile you're at it, make this template more robust by getting the value `https://en.wikipedia.org/wiki/` from another tiddler; this way, we can reference the base URL of Wikipedia from other places, and only have to update it in one place if it changes.\"},\"Ex:WikipediaLinkTemplate/answer\":{\"title\":\"Ex:WikipediaLinkTemplate/answer\",\"created\":\"20201122165936723\",\"modified\":\"20240926002830406\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"First, create a tiddler called `WikipediaMetadata` and set its `url` field to `https://en.wikipedia.org/wiki/`. (You could also make a tiddler containing only the URL, in the `text` field, and create other tiddlers if you needed to maintain other information about Wikipedia; it's up to you.)\\n\\nThen in `WikipediaLinkTemplate`:\\n\\n```html\\n<a class=\\\"tc-tiddlylink-external\\\" href={{{ [{WikipediaMetadata!!url}addsuffix<articleName>] }}}><<articleName>></a>\\n```\\n\\nAnd to use this tiddler:\\n\\n```html\\n<$let articleName=\\\"Aardvark\\\">\\n  {{WikipediaLinkTemplate}}\\n</$let>\\n```\\n\\nNotice that treating the `WikipediaLinkTemplate` as a template by placing `||` prior to its name in the transclusion is not necessary, as it does not access any of the fields of the current tiddler.\"},\"Ex:WikipediaLinkWithoutProcedure\":{\"title\":\"Ex:WikipediaLinkWithoutProcedure\",\"created\":\"20201122165712594\",\"length\":\"s\",\"modified\":\"20240929005319360\",\"origin\":\"Filters and Transclusions\",\"tags\":\"Exercise\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"In [[Ex:ProcedureAdjacency]] back in [[Using Variables as Attributes]], we found that this attempt to use a simple variable to compose a Wikipedia link didn't work:\\n\\n```html\\n<$let wikipedia=\\\"https://en.wikipedia.org/wiki/\\\">\\n  <<wikipedia>>Aardvark\\n</$let>\\n```\\n\\nFix this example by replacing the `<<wikipedia>>Aardvark` line with an `a` element using a `{{{ filtered transclusion }}}`.\\n\\n//Tip//: The filter operator `addsuffix` will come in handy.\"},\"Ex:WikipediaLinkWithoutProcedure/answer\":{\"title\":\"Ex:WikipediaLinkWithoutProcedure/answer\",\"created\":\"20201122165740509\",\"modified\":\"20240929005315658\",\"tags\":\"Answer\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"```html\\n<$let wikipedia=\\\"https://en.wikipedia.org/wiki/\\\">\\n    <a href={{{ [<wikipedia>addsuffix[Aardvark]] }}}>Aardvark</a>\\n</$let>\\n```\"},\"Exercise Browser\":{\"title\":\"Exercise Browser\",\"created\":\"20210116160956282\",\"modified\":\"20210408142524454\",\"tags\":\"Index\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\define tableBody()\\n      <tr>\\n        <td><$checkbox field=\\\"complete\\\" checked=\\\"yes\\\" unchecked=\\\"\\\" default=\\\"\\\"/></td>\\n        <td><$link to={{!!title}}/></td>\\n        <td><$link to={{!!origin}}/></td>\\n        <td>({{!!length}})</td>\\n        <td>\\n\\n        {{!!text}}\\n\\n        </td>\\n      </tr>\\n\\\\end\\n\\\\define noSearchFilt() [search:origin:literal,anchored{$:/temp/SelectedSection}]\\n\\\\define searchFilt() [search{$:/temp/ExerciseBrowserFilter}search:origin:literal,anchored{$:/temp/SelectedSection}]\\n\\n<div style=\\\"float: right;\\\">\\n  <$text text={{{ [all[tiddlers+shadows]tag[Exercise]complete[yes]count[]]  }}}/> / <$text text={{{ [all[tiddlers+shadows]tag[Exercise]count[]] }}}/> exercises completed.\\n</div>\\n\\n<$set name=\\\"selectorFilter\\\" value=\\\"[all[tiddlers+shadows]tag[Exercise]each[origin]get[origin]sort[]]\\\">\\n\\n<table class=\\\"gtw-form\\\">\\n  <tr>\\n    <th>Find in text</th>\\n    <td><$edit-text tag=\\\"input\\\" type=\\\"text\\\" tiddler=\\\"$:/temp/ExerciseBrowserFilter\\\" default=\\\"\\\"/></td>\\n  </tr>\\n  <tr>\\n    <th>Section</th>\\n    <td>{{$:/sib/Navigator/SectionSelector}}</td>\\n  </tr>\\n  <tr>\\n    <th>Show</th>\\n    <td><$radio tiddler=\\\"$:/config/sobjornstad/GrokTiddlyWiki/ExerciseBrowserState\\\" field=\\\"complete\\\" value=\\\"yes\\\">&nbsp;Complete</$radio>&emsp;<$radio tiddler=\\\"$:/config/sobjornstad/GrokTiddlyWiki/ExerciseBrowserState\\\" field=\\\"complete\\\" value=\\\"^$\\\">&nbsp;Incomplete</$radio>&emsp;<$radio tiddler=\\\"$:/config/sobjornstad/GrokTiddlyWiki/ExerciseBrowserState\\\" field=\\\"complete\\\" value=\\\".*\\\">&nbsp;All</$radio></td>\\n  </tr>\\n</table>\\n\\n</$set>\\n\\nThe following table shows all exercises in this book. Click the checkbox to the left to mark an exercise as complete.\\n\\n<$set name=mySubfilt value={{{ [[$:/temp/ExerciseBrowserFilter]has[text]then<searchFilt>else<noSearchFilt>] }}}>\\n  <table class=\\\"gtw-exercise-browser\\\">\\n    <col style=\\\"width: 2em;\\\">\\n    <col style=\\\"width: 15%;\\\">\\n    <col style=\\\"width: 15%;\\\">\\n    <col style=\\\"width: 4.5em;\\\">\\n    <col style=\\\"width: 70%;\\\">\\n    <tr>\\n      <th/>\\n      <th>Exercise</th>\\n      <th>Section</th>\\n      <th>Length</th>\\n      <th>Text</th>\\n    </tr>\\n    <$list filter=\\\"[all[tiddlers+shadows]tag[Exercise]regexp:complete{$:/config/sobjornstad/GrokTiddlyWiki/ExerciseBrowserState!!complete}subfilter<mySubfilt>]\\\">\\n      <<tableBody>>\\n    </$list>\\n  </table>\\n</$set>\"},\"ExerciseTemplate\":{\"title\":\"ExerciseTemplate\",\"complete\":\"\",\"created\":\"20200603025843918\",\"modified\":\"20210819205442275\",\"tags\":\"Template\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\define when-empty() <$list filter=\\\"[all[current]addsuffix[/answer]is[tiddler]] [all[current]addsuffix[/answer]is[shadow]]\\\"><$link to=<<currentTiddler>>>go to answer</$link></$list>\\n\\n<div class={{{ [all[current]complete[yes]then[gtw-exercise-complete]else[]] +[addsuffix[ gtw-bordered-element]] }}}>\\n  <span class=\\\"gtw-exercise-intro\\\">Exercise</span>: ({{!!length}}) [<$link to={{!!title}}>{{!!title}}</$link>]\\n  {{||$:/sib/Exercise/CompletionCheckbox}}\\n\\n  <$transclude mode=\\\"block\\\" />\\n\\n  <$list filter=\\\"[<renderingStatic>!match[yes]]\\\" variable=_ emptyMessage=<<when-empty>>>\\n\\n    <$list filter=\\\"[<currentTiddler>addsuffix[/answer]get[title]]\\\" variable=\\\"trash\\\">\\n\\n    <$reveal stateTitle=\\\"$:/temp/exerciseAnswerState\\\"\\n           stateIndex=<<currentTiddler>>\\n           type=\\\"match\\\"\\n           text=\\\"hide\\\"\\n           default=\\\"hide\\\">\\n      <$button setTitle=\\\"$:/temp/exerciseAnswerState\\\"\\n               setIndex=<<currentTiddler>>\\n               setTo=\\\"show\\\"\\n               class=\\\"tc-btn-invisible tc-tiddlylink\\\">\\n        {{$:/core/images/unfold-button}} show answer\\n      </$button>\\n    </$reveal>\\n\\n    <$reveal stateTitle=\\\"$:/temp/exerciseAnswerState\\\"\\n           stateIndex=<<currentTiddler>>\\n           type=\\\"match\\\"\\n           text=\\\"show\\\"\\n           default=\\\"hide\\\">\\n\\n      -----\\n\\n      <$button setTitle=\\\"$:/temp/exerciseAnswerState\\\"\\n               setIndex=<<currentTiddler>>\\n               setTo=\\\"hide\\\"\\n               class=\\\"tc-btn-invisible tc-tiddlylink\\\">\\n        {{$:/core/images/fold-button}} hide answer\\n      </$button>\\n      [{{{ [<currentTiddler>addsuffix[/answer]] }}}]\\n\\n      <$transclude tiddler={{{ [<currentTiddler>addsuffix[/answer]] }}} mode=\\\"block\\\" />\\n    </$reveal>\\n\\n    </$list>\\n  </$list>\\n</div>\\n\\n<style>\\n.gtw-exercise-intro {\\n  font-weight: bold;\\n  color: <<color primary>>;\\n}\\n\\n.gtw-exercise-complete {\\n  background-color: <<color completed-exercise>>;\\n}\\n</style>\"},\"Field Transclusions\":{\"title\":\"Field Transclusions\",\"created\":\"20200530170328830\",\"description\":\"Field transclusions work much like variable transclusions, but their value is tied to a field of a tiddler.\",\"modified\":\"20241016120601826\",\"parent\":\"Transclusion\",\"tags\":\"Section Concept\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\" ''Field transclusions'' are much like variable or procedure transclusions, but their value comes from the contents of ''a field of another tiddler in your wiki''.\\n\\nIf we write `{{JaneDoe!!phone}}`, the contents of the `phone` field of the JaneDoe tiddler -- namely, Jane's phone number -- will appear in the output. Let's start a tiddler called `PhoneNumbers` in our example wiki and try that:\\n\\n```html\\n* JaneDoe -- {{JaneDoe!!phone}}\\n```\\n\\nYou should see:\\n\\n* JaneDoe -- 888-555-1234\\n\\nEither the left or the right side of the reference can be left off. Just `{{JaneDoe}}` refers to the `text` field of the `JaneDoe` tiddler, while just `{{!!phone}}` refers to the `phone` field of the current tiddler.\\n\\nAs soon as you update a field of a tiddler, any open tiddlers or parts of the interface that transclude that field will be automatically re-rendered -- just like with the results of a filter, or the formulas in a spreadsheet. Because of the [[draft mechanism|Browsing Your Tiddlers]], though, if you're editing a tiddler within the story river, you have to save that tiddler before the changes appear – while you edit a tiddler in the story river, you're not actually editing that tiddler itself, but rather a draft copy of it, and your changes only go into the actual tiddler when you save.\\n\\nJust like you can use the value of a variable or the result of a procedure call as an attribute of a widget, you can use the value of a field transclusion as an attribute of a widget. For example, suppose we had a field on the current tiddler called `wikipedia-reference` that contained the name of a Wikipedia article it was based on, and we wanted to create a link to it using the `wikipediaLink` procedure:\\n\\n```html\\n<$transclude $variable=\\\"wikipediaLink\\\" article={{!!wikipedia-reference}} />\\n```\\n\\nNotice the similarity in form between the three wikitext methods we've encountered for referring to other content:\\n\\n* `[[double square brackets]]` -- to link to content\\n* `<<double angle brackets>>` -- to transclude content from a variable or procedure\\n* `{{double curly braces}}` -- to transclude content from a tiddler field\\n\\nDirectly transcluding entire tiddlers within other tiddlers, like `{{My Other Tiddler}}`, is uncommon in most wikis; linking is usually a more useful way of relating ideas. However, field transclusion is invaluable in combination with filters for creating dynamic lists, tables, and other content. In fact, the whole interface of TiddlyWiki is actually created by transcluding a bunch of special tiddlers! Field transclusion becomes even more useful once you understand //templates//, which we'll cover in the [[next section|Templates and the Current Tiddler]].\\n\\n!! A note on terminology\\n\\nIn non-technical contexts, people sometimes use the term //transclusion// by itself to refer specifically to a field transclusion. //Grok TiddlyWiki// used to do this too, but with the introduction of new features in recent versions of TiddlyWiki that have made all kinds of transclusion more like each other (e.g., the [[parameterization of tiddlers|Parameterizing Field Transclusions]]), it now seems better to instead use //transclusion// to mean any or all kinds of transclusion, and explicitly say //field transclusion// when we mean that. It's possible there may be a few traces of the old way still hanging out throughout the book -- please use the //send feedback// link to let me know if you spot one!\\n\\n!! The `$transclude` widget\\n\\nIn the previous section, [[The Finer Points of Procedures]] we mentioned that you can use the `$transclude` widget with the `$variable` parameter to call a procedure (transclude the value of the procedure/variable). You can use the `$transclude` widget to do field transclusion as well, using its `$tiddler` and `$field` parameters. {{Ltc:BracesTranscludeSame||LieToChildrenTemplate}}:\\n\\n```html\\n* {{JaneDoe!!phone}}\\n* <$transclude $tiddler=\\\"JaneDoe\\\" $field=\\\"phone\\\"/>\\n```\\n\\nYou can leave out one or both of the parameters if appropriate. If not supplied, `$tiddler` defaults to the current tiddler and `$field` defaults to `text`.\\n\\n\\n!! Exercises\\n\\n{{Ex:JaneDataTransclusion||ExerciseTemplate}}\\n{{Ex:FudgeTransclusion||ExerciseTemplate}}\\n{{Ex:SearchingInTransclusions||ExerciseTemplate}}\\n{{Ex:LinkingInTransclusions||ExerciseTemplate}}\\n{{Ex:MultipleTransclusion||ExerciseTemplate}}\\n{{Ex:SelfTransclusion||ExerciseTemplate}}\\n{{Ex:CircularTransclusion||ExerciseTemplate}}\\n{{Ex:JaneManagerPhone||ExerciseTemplate}}\\n{{Ex:VariableTransclusion||ExerciseTemplate}}\\n\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\"},\"Fields\":{\"title\":\"Fields\",\"created\":\"20200530170241199\",\"description\":\"Tiddlers are made up of fields.\",\"modified\":\"20210504015139005\",\"parent\":\"The Shape of TiddlyWiki\",\"tags\":\"Section Concept\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"[[Tiddlers]] are made up of ''fields''. Each field has a //name//, which describes what information it stores, and a //value//, which contains the actual information. For example, the field named `description` might have a value of `This tiddler discusses fields in TiddlyWiki`.\\n\\nThe most important fields of every tiddler are the ''title'' and the ''text''; the title is how you reference the tiddler from elsewhere in the wiki, while the text contains the actual content, written in a markup language called [[wikitext|Wikitext]] (more on that in the next section). Other built-in fields include the tiddler's tags (more on those [[in a few moments|Tags]] too), the user who last edited the tiddler, and the times the tiddler was created and last modified.\\n\\nIn addition to the built-in fields, you can ''add your own fields'' to any tiddler on the fly, should you wish to. For instance, you might add fields to a tiddler containing meeting notes to define what time the meeting happened and who attended. Storing this information in separate fields, rather than directly within the text of the tiddler, lets you retrieve specifically that information for use in another part of the wiki, or search and filter based on it.\\n\\nHere are this tiddler's fields as an example (not including the `text` field, since that would cause the example to include itself!). Field names are in the left column, while their values are in the right column. Don't worry if you don't understand the meaning or significance of all these fields yet.\\n\\n{{||$:/core/ui/TiddlerInfo/Fields}}\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\"},\"Filing and Organizing\":{\"title\":\"Filing and Organizing\",\"caption\":\"2: Filing and Organizing\",\"created\":\"20200603003811441\",\"description\":\"In which we learn how to create and organize tiddlers in ways that make them easy to find and reuse later.\",\"list\":\"Searching [[Browsing Your Tiddlers]] [[Tiddler Titles]] [[Naming Conventions]] [[Slicing Up Content]] [[Creating Hierarchies with a Table of Contents]] [[Ordering Tiddlers]] [[Creating Evergreen Notes]]\",\"modified\":\"20240907020406135\",\"parent\":\"Outline\",\"tags\":\"Chapter\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"With only a few tiddlers, finding things is no big deal. But if you're serious enough about organizing information to be interested in TiddlyWiki, you're likely planning to have a lot of content, so you'll need something better than reading through the list of recently changed items.\\n\\nIt's important to remember that while TiddlyWiki has excellent functionality for searching and querying tiddlers, it's a ''garbage-in, garbage-out'' tool: its ability to locate ideas and find connections between them is only as good as your commitment to understanding what information you're putting in, how you might want to use it, and how you should organize it. TiddlyWiki is your partner in understanding your notes and your ideas, not a magic box that spits insights back at you after you follow a prescriptive set of steps. We already discussed this mindset in some detail in the previous chapter, but as we look at the mechanisms for finding things in this chapter, we'll keep coming back to the habits you need to make them work well.\\n\\n!! In this chapter\\n\\n{{||ChapterOutlineTemplate}}\"},\"Filtering and Formatting\":{\"title\":\"Filtering and Formatting\",\"caption\":\"3: Filtering and Formatting\",\"created\":\"20201125195211013\",\"description\":\"In which we learn how to use filters to answer questions about our notes, like “What are the email addresses of all the people who went to X meeting?”, or “At what meetings attended by Jane did we discuss X concept?”. We'll also dig into HTML and widgets, which we can combine with filters to create tiddlers that use complex formatting and update automatically when other tiddlers are changed.\",\"list\":\"Filters [[Using Filter Expressions]] [[Anatomy of Filter Steps]] [[Common Filter Operators]] HTML Widgets [[Your First Dynamic List]] Comments [[When Things Go Wrong]]\",\"modified\":\"20241013005857941\",\"parent\":\"Outline\",\"tags\":\"Chapter\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"One of the things TiddlyWiki does best is selecting tiddlers that match certain criteria and remixing them into different forms. This chapter explores these capabilities in two phases.\\n\\n# We'll learn how to write ''filters'' to choose tiddlers that match almost any criteria you can think of.\\n# We'll take a deeper dive into wikitext by learning the basics of the formatting language ''HTML'' and its TiddlyWiki extensions, which we will continue to use throughout the rest of the book.\\n\\nAt the end, we'll bring these topics together by creating formatted lists of tiddlers that automatically update to match the results of a filter, and we'll discuss some troubleshooting skills to be used when these features don't work as expected.\\n\\n!! In this chapter\\n\\n{{||ChapterOutlineTemplate}}\"},\"Filters and Transclusions\":{\"title\":\"Filters and Transclusions\",\"created\":\"20200604030325277\",\"description\":\"TiddlyWiki can transclude the output of a filter, or transclude a variable or field into a filter.\",\"modified\":\"20241016121821885\",\"parent\":\"Transclusion\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Filters and transclusions interact in two useful ways:\\n\\n* We can ''transclude the result of a filter''.\\n* We can ''transclude the value of a variable or tiddler field into a filter''.\\n\\n!! Transcluding the result of a filter\\n\\nAs we know, we can transclude the `text` field of a tiddler by placing its title in `{{double curly braces}}`. We can transclude the result of a filter expression by placing it in `{{{triple curly braces}}}`; this is sometimes called a ''filtered transclusion''. Here's a filtered transclusion of the names of the alphabetically first five sections in this book:\\n\\n{{Sn:ChapterFilterTransclusion||MagicSnippet}}\\n\\n(The `all[tiddlers+shadows]` step is required here and in many live examples to&nbsp;come because of the way //Grok TiddlyWiki// is packaged; in your own wiki, you wouldn't need this step. If you're too curious to wait for the explanation, jump ahead to [[Shadow Tiddlers]].)\\n\\nThe spaces directly inside the curly braces are not required, but they're highly recommended: if you leave them out, there are so many brackets next to each other that it is nearly impossible to tell whether you've inserted the right number of them.\\n\\nLet's open up the `MeetingList` tiddler in our example wiki and create a list of meetings using a similar filter:\\n\\n```html\\n{{{ [tag[Meeting]] }}}\\n```\\n\\nYou'll want to put a blank line above and below this line -- otherwise, all the titles will be run together (this is the [[block-versus-inline-mode thing|Block Mode and Inline Mode]] again).\\n\\nThis is a really quick-and-dirty way of creating a list which can come in handy occasionally, but this syntax is most commonly used when we want to use a filter to create or manipulate some text and include it somewhere, either directly in the body of a tiddler or as an attribute of a widget or HTML tag. For instance, suppose we want to display a count of how many meetings we currently have notes on:\\n\\n```html\\nThere are {{{ [tag[Meeting]count[]] }}} meetings in this wiki.\\n```\\n\\nIf you tweak the filter in your wiki to match this, you'll notice something a little odd, though -- supposing your wiki currently has 2 meetings, 2 is a //link//, to a nonexistent tiddler called `2`. What's up with that?\\n\\nWell, since filters are mostly designed to work with tiddler titles, when you get the output of a filter, TiddlyWiki assumes each item in the output is a tiddler, so it tries to be helpful and link it. Certain filter operators, however -- like `count[]`, or `get[]` -- will break this assumption. Fortunately, if you're fussy about having pointless links show up, overriding the default is easy -- we simply use the `$text` widget, which tells TiddlyWiki that we want something to be treated as plain text rather than wikitext:\\n\\n```html\\nThere are <$text text={{{ [tag[Meeting]count[]] }}} /> meetings in this wiki.\\n```\\n\\n\\n!!! Only the first output tiddler will be transcluded into an attribute\\n\\nYou might be tempted to extrapolate the above example to create a list of meetings that aren't links, like this:\\n\\n```html\\n<$text text={{{ [tag[Meeting]] }}}/>\\n```\\n\\nHowever, if you try this, you'll find that only one meeting shows up. That's because when you transclude the result of a filter expression as a value of an attribute, unlike when you place it directly in wikitext, ''only the first output tiddler is kept''.\\n\\nThe rationale for this is simply that it's rarely useful to do anything else. If TiddlyWiki passed a list of meetings directly to the `$text` widget, you would just get a long string of meeting names separated by spaces. If you actually want to list all the meetings as text, or as a bulleted list of text names, you would use a `$list` widget instead so you could specify what each item should look like. With the actual behavior, if a filter accidentally returns more than one item, at least the attribute will get a value that actually represents a real output tiddler, rather than a made-up value that combines several of them.\\n\\nNevertheless, it's important to be aware of this behavior, or you may find yourself very confused on occasion.\\n\\n\\n!!! Transcluding inside the value of an attribute\\n\\nIn [[Using Variables as Attributes]], we learned that you can combine variables and constant text into the value of an attribute using the //substituted attribute value// syntax, like this:\\n\\n```html\\n<$widget attribute=`text and $(variable)$`/>\\n```\\n\\nSimilarly, you can combine the result of a filter and constant text, by replacing the parentheses with braces and the variable name with a filter expression:\\n\\n```html\\n<$widget attribute=`text and ${ [filter-expression[]] }$`/>\\n```\\n\\n\\n!! Transcluding things into a filter\\n\\nThe [[dynamic lists|Your First Dynamic List]] we've created so far are nice, but they've had a significant limitation: no part of the filter can change unless we go in and edit it. Often, we might like to be able to ''make part of the filter a value that changes'', like a field or a variable.\\n\\nLet's think back to the [[exercise|Ex:JaneManagerPhone]] where we included Jane's manager's phone number in the `JaneDoe` tiddler (we've since moved this bit onto the `ContactInformationTemplate`). Suppose that instead of the phone number of the person's manager, we want to list the names and phone numbers of all people listed in the `family` field.\\n\\nAt first, this seems pretty straightforward:\\n\\n```html\\n<ul>\\n  <$list filter=\\\"some filter\\\">\\n    <li>{{!!title}}: {{!!phone}}</li>\\n  </$list>\\n</ul>\\n```\\n\\nBut what do we put as the filter to retrieve the contents of the `family` field? It's tempting to try `[all[current]get[family]]`, but that retrieves the entire text of the `family` field as a single input tiddler, which means it won't work properly if there is more than one family member in the list.\\n\\nWe can use the `enlist` filter operator to turn a tiddler list into a series of input tiddlers within the filter expression, but we have to pass it the tiddler list as a parameter, so we can't use `get[]`. And remember that we need to put the tiddler list in the `family` field of the //current tiddler// into that parameter -- we can't directly name the tiddler (e.g., `JaneDoe`), since this snippet would then only work in Jane's tiddler.\\n\\nTo achieve this, we can ''replace the square brackets around the parameter'' with `{curly braces}`, and place a [[field transclusion|Field Transclusions]] inside:\\n\\n```html\\n<ul>\\n  <$list filter=\\\"[enlist{!!family}]\\\">\\n    <li>{{!!title}}: {{!!phone}}</li>\\n  </$list>\\n</ul>\\n```\\n\\nNotice that there is only ''one set of curly braces'' in the filter expression, rather than two, just like there is only one set of square brackets in their place if you're providing a value that doesn't change.\\n\\nSimilarly, if the value we wanted to use was in a variable rather than a field, we could use single angle brackets:\\n\\n```html\\n<ul>\\n  <$let familyfield={{!!family}}>\\n    <$list filter=\\\"[enlist<familyfield>]\\\">\\n      <li>{{!!title}}: {{!!phone}}</li>\\n    </$list>\\n  </$set>\\n</ul>\\n```\\n\\nYou can also ''transclude the result of procedure calls with parameters'' using this syntax. However, this might not work quite the way you hope, because, just like if you were using this procedure call as the value of an attribute, wikitext won't be processed inside the filter, so you may end up with unexpanded variable transclusions in the filter pipeline:\\n\\n{{Sn:ProcedureCallTransclusion||MagicSnippet}}\\n\\nIn <<gtw.link-chapter-number \\\"Macros, Wikification, and Widgets\\\">>, we'll learn how [[Macros]] and [[Wikification]] can make this syntax consistently useful.\\n\\nCurly braces or angle brackets can be used by themselves, not preceded by an operator, to directly introduce an arbitrary value into the filter pipeline. This is the equivalent of specifying a literal title with square brackets:\\n\\n{{Sn:DirectAngleBrace||MagicSnippet}}\\n\\nSometimes a filter parameter that is transcluded into the filter with `{braces}` or `<angle brackets>` is called a ''soft parameter'', in contrast to an unchanging ''hard parameter'' specified with `[square brackets]`.\\n\\n\\n!!! Side note\\n\\nActually, if we weren't trying to use the above example as a general example, there's an even easier way to make the family list:\\n\\n```html\\n<ul>\\n  <$list filter={{!!family}}>\\n    <li>{{!!title}}: {{!!phone}}</li>\\n  </$list>\\n</ul>\\n```\\n\\nThat may look weird right now, but when we get to [[Multi-Run Filters]] in the next chapter, you'll understand why this works. For now, this is more a curiosity than anything else; it certainly won't work in all situations in which you might want to substitute a field or variable value into a filter.\\n\\n\\n!! Exercises\\n\\n{{Ex:TiddlersContainingWikiTitle||ExerciseTemplate}}\\n{{Ex:AllFamilyInformation||ExerciseTemplate}}\\n{{Ex:WikipediaLinkWithoutProcedure||ExerciseTemplate}}\\n{{Ex:WikipediaLinkTemplate||ExerciseTemplate}}\\n{{Ex:DefaultToField||ExerciseTemplate}}\\n{{Ex:WikiStatistics||ExerciseTemplate}}\\n\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\\n\"},\"Filters\":{\"title\":\"Filters\",\"created\":\"20200530170321923\",\"description\":\"Filters are a lightweight query language used primarily to select tiddlers.\",\"modified\":\"20210409151506904\",\"parent\":\"Filtering and Formatting\",\"tags\":\"Concept Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"It's time to introduce our sixth [[basic TiddlyWiki concept|Concept]]: the ''filter''.\\n\\nTiddlyWiki filters are a lightweight query language used primarily to select tiddlers (they have a few other tricks up their sleeve, like doing math). If you're familiar with Excel or another spreadsheet application, TiddlyWiki filters are kind of like formulas -- while you could have a useful wiki without filters, filters provide a kind of general-purpose glue that lets you avoid a lot of manual work.\\n\\nYou can do ad-hoc searches with filters. You can also use them to embed dynamic lists of tiddlers or content into other tiddlers. Like Excel does with formulas, TiddlyWiki is constantly checking and recalculating the contents of these lists, so as soon as you create or change a tiddler that matches, the contents of your list will update. This is where the real magic of TiddlyWiki starts to show up.\\n\\nYou can read about the syntax of filters in the following two sections, [[Using Filter Expressions]] and [[Anatomy of Filter Steps]], and see some basic filter techniques in [[Common Filter Operators]].\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\"},\"Front Matter\":{\"title\":\"Front Matter\",\"caption\":\"Front Matter\",\"created\":\"20200605170912534\",\"description\":\"In which we examine why you would want to use TiddlyWiki, why you would want to learn it from this book, and how the book can teach you TiddlyWiki.\",\"list\":\"[[Welcome to Grok TiddlyWiki]] [[Why TiddlyWiki?]] [[Philosophy of Grok TiddlyWiki]] [[How to Use This Book]]\",\"modified\":\"20241013010937514\",\"parent\":\"Outline\",\"tags\":\"Chapter\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"//Grok TiddlyWiki//’s front matter explains why you should care about TiddlyWiki, why you should care about this book, and how you can best use the book. If that sounds important, read on; if it sounds boring, feel free to skip ahead to the first chapter, [[The Shape of TiddlyWiki|The Shape of TiddlyWiki]].\\n\\n!! In this chapter\\n\\n{{||ChapterOutlineTemplate}}\"},\"Functions\":{\"title\":\"Functions\",\"created\":\"20240831204317959\",\"description\":\"Functions allow you to break down filter expressions into simpler parts and reuse them in other filter expressions.\",\"modified\":\"20241008024942547\",\"parent\":\"More Organizational Tools\",\"tags\":\"Section Concept\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"[[Variables]] and [[Procedures]] allow us to write a small chunk of wikitext in one place, give it a name that concisely describes what it is, and use it in multiple places. For the same reason that TiddlyWiki supports variables and procedures when writing complicated wikitext, it supports ''functions'' when writing complicated filters. A function is a special kind of variable that contains a [[filter expression|Using Filter Expressions]].\\n\\nLike a procedure, a function can have parameters. Parameters passed to a function are available as variables within the function's filter expression, just like parameters passed to a procedure are available as variables within the body of the procedure.\\n\\nUnlike a procedure, a function evaluates the filter expression within it and produces output tiddlers when called, rather than rendering its contents as wikitext.\\n\\nThe syntax for basic function definitions and calls will be very familiar, because it's identical to that for procedures except that the definition uses the word `function` instead of `procedure`:\\n\\n{{Sn:MultiplyByTwoFunction||MagicSnippet}}\\n\\nYou can also use the `$transclude` widget to call a function, exactly like you use it to call a procedure.\\n\\nSince filters are typically only a single line, most function definitions will only need one line and so can omit the `\\\\end`. However, if you have a very complex filter, line breaks between [[runs|Multi-Run Filters]] are allowed and can make the function easier to read.\\n\\n\\n!! Using a function in a filter\\n\\nOccasionally, calling a single function by itself can be useful. However, functions are typically most useful when used //inside other filters// to build up more complex filter pipelines that can still be easily read and understood.\\n\\nLike a procedure, you can call a function within a filter pipeline using the `<angle bracket>` syntax:\\n\\n{{Sn:MultiplyByTwoInBraces||MagicSnippet}}\\n\\nYou can also call a function using the ''`function`'' [[filter operator|Anatomy of Filter Steps]]. This operator's first parameter is the name of the function, and subsequent parameters are passed through to that function:\\n\\n{{Sn:MultiplyByTwoFunctionOperator||MagicSnippet}}\\n\\nRecall that filtering on a field is so common that you can omit the `field:` part from the `field:fieldname` [[operator|Common Filter Operators]] and just say `fieldname`, as long as the field name does not conflict with a built-in operator. You can use a similar shortcut for function names, ''treating the function name like a filter operator'', but with one extra restriction: the function name must contain a dot (`.`).\\n\\nTaking advantage of this syntax can be as simple as prefixing your function names with a single `.`. (Of course, the `.` can go anywhere in the name, if it makes more sense somewhere else.)\\n\\n{{Sn:MultiplyByTwoFunctionDottedCall||MagicSnippet}}\\n\\n\\n!! Accessing input tiddlers\\n\\nSo far, our function has ignored its input tiddlers (instead injecting one of its parameters into the start of the filter pipeline), and we've only tried to call it at the start of a filter pipeline. However, functions are fully able to access their input tiddlers, just like any other filter operator. Let's change our test filter so that it operates on its input tiddlers instead:\\n\\n{{Sn:MultiplyInputByTwoFunction||MagicSnippet}}\\n\\nIt's not possible to choose the input tiddlers of a function called with the `<<variable transclusion syntax>>`. The input tiddlers will always be all tiddlers in your wiki.\\n\\n\\n!! Nesting functions\\n\\nYou can ''use functions inside other functions''. This makes it possible to build up complicated processes or formulas while giving each part a name.\\n\\nAs an example, here are some carefully decomposed functions for calculating the area and circumference of a circle with a given radius. In the example, we've also used several `$list`s to loop over the different circle sizes and measurements we want to use, so we only have to call each function once. (Review the [[conditional procedure|Ex:ConditionalProcedureContinued]] exercise if you don't remember how this works.) In real life, the amount of decomposition of the formulas shown here is probably overkill -- since the formulas are straightforward, you might even find this makes it harder to understand what's going on.\\n\\n{{Sn:CircleMathNestingExample||MagicSnippet}}\\n\\n\\n!! Exercises\\n\\n{{Ex:CircleMathRearrangement||ExerciseTemplate}}\\n{{Ex:ExtractFunctions||ExerciseTemplate}}\\n{{Ex:CStartTiddlers||ExerciseTemplate}}\\n{{Ex:MultiplyByTwoTwoWays||ExerciseTemplate}}\\n{{Ex:LocalCallFunctions||ExerciseTemplate}}\\n\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\"},\"Getting Help\":{\"title\":\"Getting Help\",\"created\":\"20200822204627346\",\"description\":\"Where to look and who to ask for help on TiddlyWiki if you can't figure something out yourself.\",\"modified\":\"20241017011651217\",\"parent\":\"Resources\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"The best place to get help on TiddlyWiki is the TiddlyWiki Discourse forums, [[Talk TiddlyWiki|https://talk.tiddlywiki.org]]. If you are ever not sure how to accomplish something, searching the forum is quite likely to find either a drop-in solution or the insight you need to solve the problem yourself. If you can't find anything relevant, you can start a new thread -- people are invariably welcoming and helpful.\\n\\nWhen starting a new thread about [[a problem you're experiencing|When Things Go Wrong]], be sure to [[ask a good question|https://medium.com/@gordon_zhu/how-to-be-great-at-asking-questions-e37be04d0603]]. Not only will taking the time to write a good question show your respect for other people's time, making it more likely you get a useful response, but you'll learn more, leave a thread in the archives that will be more likely to help others in the future, and possibly even [[solve your problem while writing the question|https://en.wikipedia.org/wiki/Rubber_duck_debugging]].\\n\\nBesides technical questions about how to use TiddlyWiki, the forum is also a great place to discuss philosophical and practical questions about TiddlyWiki.\\n\\nYou also shouldn't miss:\\n\\n* The [[documentation|https://tiddlywiki.com/]] (enough said)\\n* The [[dev wiki|https://tiddlywiki.com/dev/]], an addendum to the documentation with information on things like creating plugins and writing JavaScript modules for TiddlyWiki\\n* The [[TiddlyWiki Google group|https://groups.google.com/g/tiddlywiki]] was the primary forum for many years, and the archives there still contain much useful information.\\n* [[Standard Nomenclature|https://anthonymuscio.github.io/#Standard%20Nomenclature]], an exhaustive list of all the brackets and quotes and other mysterious syntax of [[wikitext|Wikitext]]. It's likely to be overwhelming for beginners, but once you've worked through most of this book, it may be quite helpful. It should be noted that, as of this writing, this resource hasn't been updated to include some of the newer features in 5.3.0 – for instance, it doesn't list the syntax for [[parameterized field transclusions|Parameterizing Field Transclusions]]. (//Grok TiddlyWiki//'s internal [[Wikitext Reference]] is less overwhelming but lacks some of the detail available in this resource.)\\n* [[Those Pesky Brackets|https://pesky-brackets.tiddlyhost.com]], another resource on syntax that focuses on the functions of brackets, braces, and quotation marks. It is much more verbose and detailed than Standard Nomenclature.\\n\\nWhat about LLMs like ChatGPT? While I am largely an LLM booster and I frequently write code with them, as of late 2024, they're usually not effective ways to solve TiddlyWiki problems – there just isn't enough TiddlyWiki wikitext out there in the wild yet for them to have internalized how it works. The majority of the time, you'll find wikitext generated by LLMs looks superficially plausible but actually doesn't do what you asked for or even uses invalid syntax. Hopefully this will change in the near future!\"},\"Getting Technical\":{\"title\":\"Getting Technical\",\"caption\":\"9: Getting Technical\",\"created\":\"20200822193159541\",\"description\":\"In which software developers and other computer geeks can learn how to extend and interact with TiddlyWiki using JavaScript, CSS, and external programs.\",\"list\":\"[[JavaScript Macros]] Stylesheets [[Creating Plugins]] [[Writing Shell Scripts Against a TiddlyWiki]]\",\"modified\":\"20240907020330451\",\"parent\":\"Outline\",\"tags\":\"Chapter\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"This chapter differs from the others in the book in that it discusses how TiddlyWiki ''integrates with other technologies'' -- JavaScript, CSS, shell scripts, and so on. You may not have the technical knowledge or previous experience to benefit from some or all of these sections, so they are totally optional and not a necessary part of broad TiddlyWiki expertise, but if some of them look interesting and in line with your other skills, feel free to explore!\\n\\n!! In this chapter\\n\\n{{||ChapterOutlineTemplate}}\"},\"Getting the Current Tiddler Right on Drafts\":{\"title\":\"Getting the Current Tiddler Right on Drafts\",\"created\":\"20210206181426380\",\"description\":\"The side-by-side preview won't display correctly when the current tiddler is used in certain ways, but you can work around it.\",\"modified\":\"20240926215713504\",\"parent\":\"Tips and Tricks\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"It's likely that you will often include content that depends on the value of the current tiddler in your tiddlers. This can sometimes get you in trouble if you're trying to see that content in the side-by-side preview while editing a tiddler. Specifically, the preview works fine if referring to fields on the current tiddler (since those will also be fields on the [[draft tiddler|Browsing Your Tiddlers]]), but it doesn't work if the current tiddler's title is used to retrieve content from somewhere else (since the tiddlers you aren't editing won't have their content change because you're editing a draft).\\n\\nFor instance, imagine we are looking at a contact tiddler and we want to find all tiddlers that have a `family` list field containing the current contact. We might say:\\n\\n```html\\n<<list-links \\\"[contains:family<currentTiddler>]\\\">>\\n```\\n\\nThis will display OK on the standard [[ViewTemplate|The View Template]] while viewing the tiddler, but will show no output in the preview when editing the tiddler, because the current tiddler at that point is actually called something like “Draft of My Contact”.\\n\\nIf this gets annoying enough to be worth fixing, there is an easy fix: we just need to check if the current tiddler is a draft tiddler, and if it is, ''set the current tiddler to the tiddler this is a draft of'' instead. The original tiddler can be found in the `draft.of` field of the draft.\\n\\n```html\\n<$tiddler tiddler={{{ [all[current]is[draft]then{!!draft.of}else<currentTiddler>] }}}>\\n    <<list-links \\\"[contains:family<currentTiddler>]\\\">>\\n</$tiddler>\\n```\\n\\n(Recall: the `then` operator outputs its parameter if the input is non-empty, while the `else` operator outputs its parameter if the input is empty.)\\n\\nNotice that with the pattern above, if you are relying on both the name of the current tiddler //and// the values of its fields, your changes to the fields won't appear until you save since the current tiddler is now changed to the original rather than the draft. If that's a problem, you can always set a variable other than `currentTiddler` to the value of the original tiddler, and use `currentTiddler` when referring to fields and the other variable when referring to the name.\\n\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\"},\"HTML\":{\"title\":\"HTML\",\"created\":\"20201124235605503\",\"description\":\"HTML is a simple formatting language used to describe web pages, including TiddlyWikis. We can go “down a level” from wikitext to HTML when we need a bit more control over presentation.\",\"modified\":\"20241015031713751\",\"parent\":\"Filtering and Formatting\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"''HTML'' (which stands for //Hypertext Markup Language//, but nobody calls it that) is a markup language that underlies all web pages and a substantial number of desktop and mobile applications, including TiddlyWiki. Your web browser reads HTML code to determine what to display on the screen.\\n\\nIf you're a web developer or otherwise familiar with HTML already, you can skim this section, but it's still worth reading through it – it will highlight how wikitext and HTML work together, as well as how TiddlyWiki may differ slightly from the HTML standards you usually work with (for instance, different versions of HTML treat self-closing and void tags differently).\\n\\n\\n!! HTML and wikitext\\n\\nHTML is not a difficult language, but it is somewhat verbose, so in TiddlyWiki we usually write our tiddlers in the lighter-weight and more convenient [[wikitext|Wikitext]] syntax instead. TiddlyWiki then converts the wikitext to HTML for us prior to handing it to the browser to display. However, when building more complicated formatting or dynamic tiddlers, it's often necessary, or sometimes just easier, to go a layer down and work directly in HTML.\\n\\nWe don't have to choose whether to use HTML or wikitext in a given tiddler. In fact, wikitext is almost a perfect superset of HTML -- that is, valid HTML is also valid wikitext. (If you're familiar with HTML, there are a couple of exceptions; you can only use tags that are valid in the `<body>` section of an HTML document, and whitespace is meaningful in wikitext in a few ways that it isn't in HTML.)\\n\\nLet's suppose that we have a simple bulleted list written in wikitext:\\n\\n{{Sn:HtmlWikitextList||MagicSnippet}}\\n\\nLet's further suppose that for some reason, we don't like the wikitext syntax. Instead, we can write the same bulleted list in HTML:\\n\\n{{Sn:HtmlHtmlList||MagicSnippet}}\\n\\nAs you can see, the output of the two snippets is identical.\\n\\n\\n!! HTML tags\\n\\n`<ul>`, `<li>`, `</ul>`, and `</li>` are called ''tags''. There are many different tags, each of which marks a section of text or other HTML markup as having some specific function. For example, `ul` creates an ''unordered list'' (//unordered// meaning that it isn't numbered), while `li` identifies each ''list item'' in the list. {{Ltc:TagsComeInPairs||LieToChildrenTemplate}}; the start of a section of formatting is marked with an ''opening tag'' (`<ul>`), and the end is marked with a ''closing tag'' (`</ul>`), distinguished from an opening tag by the use of a forward slash before the name of the tag.\\n\\nBe careful not to use a //backslash// for a closing tag -- it won't work, and it may screw up the formatting for the remainder of the tiddler. The backslash `\\\\` slants the opposite way from the forward slash `/`. On a US keyboard, the forward slash is in the lower-right on the same key as the question mark; the backslash is on an extra-long key above the enter key. If you have trouble remembering which is which, imagine the two slashes forming a hill which you climb over in reading order from left to right: `/\\\\`. After you go up the hill and you're going //back down// the hill, that's the //back//slash.\\n\\nThe characters `<` and `>`, in the context of HTML tags, are usually called ''angle brackets'' (not “less than” and “greater than”).\\n\\nIf you're reading HTML out loud, you can pronounce the tags “open” and “close” plus the contents of the tag. So `<li>` is “open ell eye” and `</li>` is “close ell eye”.\\n\\n\\n!! Elements and content\\n\\nThe part of an HTML document between an opening tag and its matching closing tag, including the tags themselves, is called an ''element''. So the first //`li` element// in the example above is `<li>Item 1</li>`.\\n\\nThe ''content'' (sometimes called the ''body'') of an element is the part between its opening and closing tags, excluding the tags. So the content of the `<ul>` element in the example above is the two `<li>` elements, and the content of the first `<li>` element is the text `Item 1`.\\n\\n\\n!! HTML attributes\\n\\nHTML elements can have one or more ''attributes''. An attribute is found inside the opening tag of its element and looks like this:\\n\\n{{Sn:HtmlOrangeList||MagicSnippet}}\\n\\nIn this example, `style` is an attribute of the `ul` element, and its ''value'' `color: orange;` gives some more details about how we want to format the list (namely, that the text should be orange).\\n\\nIf we want more than one attribute, we simply put more of them inside the tag, separated from the other attributes by a space:\\n\\n```html\\n<ul class=\\\"mylist\\\" style=\\\"color: orange;\\\">\\n```\\n\\nYou can leave out the quotes around the value if and only if it doesn't contain any spaces or special characters. So this is OK:\\n\\n```html\\n<ul class=mylist>\\n```\\n\\nBut this is wrong:\\n\\n```html\\n<ul style=color: orange;>\\n```\\n\\nIf in doubt, just put in the quotes. Some people consider it better style to include them in all circumstances anyway.\\n\\n\\n!! Finer points\\n\\n{{$:/plugins/sobjornstad/TakeAway/ContextualHelp/DetailsWidget}}\\n\\n<$details summary=\\\"Self-closing tags\\\">\\n\\nIf you don't want to put any content in an element, you can close it immediately. For example, the following creates a bullet point with no associated text:\\n\\n{{Sn:HtmlNonSelfClosing||MagicSnippet}}\\n\\nThis is irritating to type when you work with HTML all day, though, so the folks who developed HTML added this shorthand notation:\\n\\n{{Sn:HtmlSelfClosing||MagicSnippet}}\\n\\n`<li />` is called a ''self-closing tag''. The space before the slash is optional; many people find it easier to read with the space.\\n\\n\\n</$details><$details summary=\\\"Void elements\\\">\\n\\nEarlier we said tags always come in pairs, but this isn't quite true. Certain elements have only an opening tag and no closing tag, because they cannot have any content. These are called ''void elements''. For example, the `<br>` element creates a line break (i.e., the text following the `<br>` tag starts on a new line). It wouldn't make any sense for a line break to have content, so you don't close that element. There is no such thing as a `</br>` tag.\\n\\nThe void elements are as follows:\\n\\n```html\\n<area>, <base>, <br>, <col>, <command>, <embed>, <hr>, <img>, <input>, <keygen>, <link>, <meta>, <param>, <source>, <track>, <wbr>\\n```\\n\\nIn practice, you don't need to carefully memorize which elements are void when using TiddlyWiki. If you accidentally use a self-closing tag for a void element, nothing bad will happen, and if you accidentally use a full closing tag for a void element, the tag will literally appear in the output (try it with `</br>`), at which point you can correct it and go on your merry way. However, it's helpful to be aware that such things as void elements exist so you know what's going on when a tag like `</br>` suddenly appears in your output.\\n\\n\\n</$details><$details summary=\\\"Nested elements\\\">\\n\\nElements can be ''nested'' (placed inside each other) to an arbitrary depth. Not all elements make sense placed inside each other, but many of them do. For instance, to create a multi-level list, you simply place a `<ul>` element inside an `<li>` element:\\n\\n{{Sn:HtmlCorrectlyNestedList||MagicSnippet}}\\n\\nTags need to be closed in the opposite order they were opened. For instance, if you accidentally write the following instead of the previous example, the part of the page after the list is likely to look weird:\\n\\n{{Sn:HtmlIncorrectlyNestedList||MagicSnippet}}\\n\\n(You might not see the issue right away -- if so, examine the snippet carefully until you find it. As you work more with HTML, your eyes will start to light on the mistakes much faster.)\\n\\n\\n</$details><$details summary=\\\"Whitespace\\\">\\n\\nIn general, whitespace in HTML does not matter. Specifically, ''any number of spaces, tabs, or newlines are treated exactly the same as one space''. You can even add extra spaces in some spots, like before the closing angle bracket at the end of a tag. So we could just as easily write:\\n\\n{{Sn:HtmlNoWhitespace||MagicSnippet}}\\n\\nOr:\\n\\n{{Sn:HtmlWackoWhitespace||MagicSnippet}}\\n\\nHowever, it is hopefully obvious that both of these “styles” are bad form, as they're much harder to read. The standard is to start a new line after each opening tag that encloses an element too large to fit comfortably on a single line, and optionally indent a consistent number of spaces (usually 2 or 4) when doing so. Otherwise, avoid extra whitespace. I've done this in the real examples so far in this section and will continue to do it for the rest of the book.\\n\\nNow, the statement that whitespace doesn't make a difference isn't //entirely// true in TiddlyWiki. Blank lines are significant in wikitext -- specifically, to start a new paragraph, you leave at least one blank line. For this reason, if you're mixing wikitext and HTML, there are some situations where the number of newlines you enter matters. We'll talk about this more in <<gtw.link-chapter-number \\\"Macros, Wikification, and Widgets\\\">>, in [[Block Mode and Inline Mode]]. For now, if something isn't displaying the way you expect in a mixed-wikitext-and-HTML situation, try ''adding or removing blank lines'' around the thing that isn't displaying the way you expect.\\n\\n\\n</$details>\\n\\n!! HTML is generous\\n\\nIt's worth noting that unlike many other formatting or programming languages, browsers and other tools that read HTML will “be generous in what they accept” -- that is, they will ''try to guess what you meant'' even if your HTML isn't written correctly. Most of the time they do a very good job at this; for example, if you forget to close a tag, close tags in the wrong order, or forget a quotation mark somewhere, most of the page will almost certainly still be readable, and it may even appear as if nothing is wrong at all.\\n\\nHowever, this same generosity can be a source of frustration when the browser guesses wrong and the page doesn't look the way you expect it to, since it will not produce a detailed error message like other languages will. If your HTML output doesn't look right, go back and take a close look to make sure you didn't make any typos and each opening tag has a matching closing tag in the correct location. The mistake will ordinarily be at the point where the page first starts looking weird.\\n\\n\\n!! Resources\\n\\nIn general, the hardest part of HTML is knowing what tags and attributes to use; we learned almost everything else there is to know about HTML above. We'll be introducing most of the tags you need to be familiar with over the remainder of this book. If you ever don't remember what tag to use, you can try Google-searching something like `HTML tags for bulleted list`, or W3Schools has a popular [[reference guide|https://www.w3schools.com/tags/default.asp]] listing all standard HTML tags.\\n\\n!! Exercises\\n\\n{{Ex:ViewSource||ExerciseTemplate}}\\n{{Ex:GoogleLink||ExerciseTemplate}}\\n{{Ex:ImageHtml||ExerciseTemplate}}\\n\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\"},\"Hiding and Showing Things\":{\"title\":\"Hiding and Showing Things\",\"created\":\"20210120034946005\",\"description\":\"There are many ways to conditionally hide and show wikitext or set values; here's a broad summary.\",\"modified\":\"20241013004618524\",\"parent\":\"Tips and Tricks\",\"showtest\":\"\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"A very common need when developing things in wikitext is to ''show content only in certain circumstances''. The most obvious way to do this is with [[Conditional Expressions]]. But there are other options too, which may sometimes be more concise or convenient.\\n\\n!! The `$list` widget + a filter\\n\\nThe `$list` widget can be used to show content either one or zero times. Conditional expressions are a relatively recent addition to TiddlyWiki -- before they existed, this was the primary mechanism for showing and hiding content depending on a filter, so you'll still see this frequently in the TiddlyWiki core and throughout various plugins and wikis. Let's review how this works, as it's a versatile but unintuitive technique.\\n\\nThe contents of a `$list` widget are rendered once for each element in its associated filter. If we can ensure that the filter we use ''returns either one or zero output tiddlers'', we can use it to control showing or hiding some content.\\n\\nLet's suppose we'd like to display a transclusion of the template `ProjectTableOfContents` at the bottom of all project tiddlers, but only if the tiddler `$:/config/ShowProjectTocs` is set to `yes`. We might start with placing this on a tiddler tagged with `$:/tags/ViewTemplate`:\\n\\n```html\\n<ul>\\n<$list filter=\\\"[{$:/config/ShowProjectTocs}match[yes]]\\\">\\n    <$list filter=\\\"[all[current]tag[Project]]\\\">\\n        {{||ProjectTableOfContents}}\\n    </$list>\\n</$list>\\n</ul>\\n```\\n\\nThere's a big problem with this snippet, though, which you'll notice if you create a `ProjectTableOfContents` template and try it in your wiki: the current tiddler is messed up by the outer `$list` widget, so the inner `$list` widget never finds anything (unless you happen to have a tiddler called `yes` tagged `Project`, in which case it will always display the template with the content appropriate to the `yes` tiddler!). Fortunately, there's an easy fix: add `variable=_` to the outer widget, so that it doesn't alter the `currentTiddler` variable. (`_` is a concise, easy-to-type variable name that is commonly understood to mean you don't care about and are not using the value, but TiddlyWiki doesn't care what you name it -- you could just as easily call the variable `trash` or `not-used` or `idontcare` if you prefer.)\\n\\nHere's an improved version:\\n\\n```html\\n<ul>\\n<$list filter=\\\"[{$:/config/ShowProjectTocs}match[yes]]\\\" variable=_>\\n  <$list filter=\\\"[all[current]tag[Project]]\\\">\\n    {{||ProjectTableOfContents}}\\n  </$list>\\n</$list>\\n</ul>\\n```\\n\\nIf you're not comparing against a single tiddler, whether the current tiddler or a hard-coded one like `$:/config/ShowProjectTocs`, you won't be able to guarantee that there is only one match. In this case, you need to use the `first[]` operator to avoid having the contents of the widget unexpectedly repeat a bunch of times. For instance, you might want to know if any tiddlers in the wiki have been modified in the last N days (using the [[days operator|https://tiddlywiki.com/#days%20Operator]]). You might try something like this:\\n\\n{{Sn:NumDaysBack||MagicSnippet}}\\n\\nThat didn't work so well! Try adding the `first[]` operator to the snippet to correct it.\\n\\nAlso notice the use of the `emptyMessage` attribute of the `$list` widget above. This is analogous to `<% else %>` in a conditional expression -- it's displayed if there are zero results for the filter, and thereby saves us from having to create a second `$list` widget with the opposite condition. If you want to include a large amount of text in the empty condition, you can place it in a procedure and call the procedure as the value of this attribute (but at this point, switching to a conditional expression is probably more useful).\\n\\n!! The `$reveal` widget\\n\\nA method we haven't seen yet is the `$reveal` widget. With the advent of conditional expressions, this is rarely an attractive choice anymore, but let's quickly explore how it works, as you may also run across this widget in older wikitext. `$reveal` shows or hides content based on ''whether a specific field matches a specific value''. Here's the basic syntax:\\n\\n{{Sn:RevealWidgetTest||MagicSnippet}}\\n\\nIn addition to `match`, as shown above, `type` can be set to `nomatch` to invert the match (`match` and `nomatch` widgets are often used in pairs to show one thing if something is true and another if it's not). There are also options to allow the widget to be used to compare numeric values (e.g., only show if a field value is greater than 5); check up the documentation for details.\\n\\nThe `$reveal` widget has one major limitation worth noting: unlike the `$list` widget or a conditional expression, it ''creates a new `div` or `span`'' HTML element to wrap the revealed content in. This means you can end up with corrupted output if you use it in certain contexts where one of those elements doesn't belong, for example inside a table (notice the column header is the wrong width when expanded -- you might need to switch to the “Wikitext” tab to see this):\\n\\n{{Sn:BrokenRevealTable||MagicSnippet}}\\n\\n\\n!! `$set` with a filter\\n\\nSometimes you don't need to include entirely different content in a tiddler depending on a condition, you just need to ''set a variable to a different value''. Adding `filter` and `emptyValue` parameters to the `$set` widget allows you to set the value of a variable to one of two values, the normal `value` if the filter has more than 0 results, and `emptyValue` if it has 0:\\n\\n{{Sn:SetYourName||MagicSnippet}}\\n\\n\\n!! Fallbacks\\n\\nA number of widgets will ''display their content if they find no matches'', eliminating the need to use a special expression or widget at all.\\n\\n!!! `$transclude` fallbacks\\n\\nYou can use the content of a `$transclude` widget as a fallback if the field doesn't exist.\\n\\n{{Sn:TranscludeFallback||MagicSnippet}}\\n\\nIf you are [[filling any slots|Parameterizing Field Transclusions]] within the body of the transclude widget, place the fallback inside a slot called `ts-missing` instead of directly within the body.\\n\\n!!! `$view` fallbacks\\n\\nThe `$view` widget is much like the `$transclude` widget but displays the field contents in different formats, like dates or URL-encoded text, rather than wikifying them. It supports fallbacks exactly the same way as `$transclude` does:\\n\\n{{Sn:ViewFallback||MagicSnippet}}\\n\\n\\n!! Exercises\\n\\n{{Ex:ViewTemplateExplicitHide||ExerciseTemplate}}\\n{{Ex:ViewTemplateExplicitHideReveal||ExerciseTemplate}}\\n{{Ex:BacklinksConditionalDisplay||ExerciseTemplate}}\\n{{Ex:EmptyAtField||ExerciseTemplate}}\\n{{Ex:ConditionalSetAt||ExerciseTemplate}}\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\"},\"How to Use This Book\":{\"title\":\"How to Use This Book\",\"created\":\"20200605170324446\",\"description\":\"How the book plans to do it, if you cooperate.\",\"modified\":\"20241019230721972\",\"parent\":\"Front Matter\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"//Grok TiddlyWiki// is a TiddlyWiki itself and incorporates a few interface features and learning tools that may be new to you. The system is hopefully intuitive enough that you can figure most of it out on your own, but if you prefer to get an overview of it first, or if you get confused by something, the resources in this section will help.\\n\\n!! Video tour\\n\\nThe [[Grok TiddlyWiki Tour|https://www.youtube.com/watch?v=vUkNxbaNHcY]] demonstrates how to navigate around //Grok TiddlyWiki// and use exercises, live examples, and takeaways. If you're in a hurry or videos aren't your thing, the text below contains all the same information.\\n\\nThe video was recorded with the first edition of GTW, so the chapters and sections will be a little different than the ones you see currently, but the features and interface are the same.\\n\\n<iframe style=\\\"width: 100%;\\\" height=\\\"300\\\" src=\\\"https://www.youtube.com/embed/vUkNxbaNHcY\\\" title=\\\"YouTube video player\\\" frameborder=\\\"0\\\" allow=\\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\\" allowfullscreen></iframe>\\n\\n\\n!! Reading and navigating\\n\\n{{$:/plugins/sobjornstad/TakeAway/ContextualHelp/DetailsWidget}}\\n\\n<$details summary=\\\"Typographical conventions\\\">\\n\\n* [[Internal links|How to Use This Book]] take you to another section in the book. [[External links|https://google.com]] take you to a website outside of //Grok TiddlyWiki// (external links open in a new browser tab).\\n* ''Bold type'' is used to call out important terms and points that you may wish to skim the text for.\\n* //Italics// identify things you select on the screen and terms that may be unfamiliar but are not particularly important.\\n* `Monospaced text` indicates something you type into TiddlyWiki (most often [[wikitext|Wikitext]]).\\n* A {{Ltc:ExampleLtc||LieToChildrenTemplate}} indicates that the statement being made is not completely accurate. Normally, this is done because the full truth is more confusing than helpful at this moment, but if you're on a second reading or would just like to dive in deeper, click the link to get the complete story.\\n\\n</$details><$details summary=\\\"Structure and navigation\\\">\\n\\n* The book is organized into ''chapters'' and ''sections''.\\n* You can find a ''hierarchical overview with summaries of each section'' in the [[Outline]], which you can access at any time by clicking //outline// in the right sidebar underneath the title, //Grok TiddlyWiki// (the sidebar is found at the top of the page if your screen is too narrow to fit the content and the sidebar side-by-side).\\n* When you click on an internal link, you will navigate to the new section, but the section you were previously in stays open. The ''Open'' tab of the sidebar will let you see all the sections you have open and flip between them, much like tabs in your web browser. You can drag and drop the open sections to reorder them.\\n* The ''Bookmarks'' tab of the sidebar contains any sections you have bookmarked. Bookmark or unbookmark any section by clicking the bookmark button <<textual-button \\\"star-filled\\\">> at the top of the section. As with the //Open// tab, you can drag and drop bookmarks to reorder them.\\n* The ''Contents'' tab of the sidebar contains an abbreviated version of the outline, if you already know what you're looking for.\\n* From the footer of each section, you can ''navigate forwards, backwards, or up a level''. You can also find a list of ''related material'' in the footer; click //show related topics//.\\n* When you open //Grok TiddlyWiki//, any sections that you had open when you stopped reading will reopen, provided that you [[saved your changes|Downloading Grok TiddlyWiki]].\\n\\n</$details><$details summary=\\\"Tools\\\">\\n\\nUnderneath the title and the navigation links (home, outline, exercises, takeaways, donate), you'll see several more buttons. Here's what they do:\\n\\n* <<textual-button \\\"close-all-button\\\">> -- ''Close all sections'' you have open.\\n* <<textual-button \\\"permaview-button\\\">> -- ''copy a //permaview//'', or a link that freezes all your open sections, to your clipboard. If you later click on or paste this link into your browser, you'll be brought back exactly where you were at the time you clicked this button.\\n* <<textual-button \\\"storyview-zoomin\\\">> -- ''change the //story view//''. If you are familiar with TiddlyWiki and would like the [[story river|The TiddlyWiki Interface]] to display more than one section at once, you can switch to the //classic// storyview. The default in //Grok TiddlyWiki// is //zoomin//.\\n* <<textual-button \\\"palette\\\">> -- toggle between ''light and dark mode''.\\n* <<textual-button \\\"save-button\\\">> -- ''save a copy'' of the wiki to your hard drive. Learn more in [[Downloading Grok TiddlyWiki]].\\n* <<textual-button \\\"down-arrow\\\">> -- ''see the rest'' of TiddlyWiki's options.\\n\\n</$details>\\n\\n\\n!! The Trinity of //Grok TiddlyWiki//\\n\\n//Book// is a somewhat misleading way to describe //Grok TiddlyWiki//. GTW is really an interactive learning environment for TiddlyWiki that bundles three complementary modes of learning into one TiddlyWiki:\\n\\n* It ''explains concepts'' using English text and code examples.\\n* It ''assigns exercises'' that help you apply and practice what you've learned.\\n* It ''presents takeaways'', questions about key terms, concepts, or skills, for review as you continue through the book, to help you retain what you've learned over a longer period of time.\\n\\nClick on each mode below for a description of what it entails.\\n\\n<$details summary=\\\"Explanations\\\">\\n\\n//Grok TiddlyWiki// is organized into chapters and sections. Each chapter covers a broad range of related topics, while each section covers one feature of TiddlyWiki, pattern of TiddlyWiki use, or organizational principle. Many sections will take as little as five minutes to read, but others ask you to follow along and do things in TiddlyWiki as you read, and still others are about unfamiliar concepts and may need several readings, so these will take longer. In most cases, the text is followed by exercises and/or takeaways (see below).\\n\\nDespite TiddlyWiki's emphasis on enabling nonlinear thinking, a linear mode of presentation is better for building understanding where it doesn't already exist, so this book is ''designed to be worked through from start to finish''; the sections build on each other, and it may be hard to do some of the later exercises without having done the previous ones. Even if you already know the basics of TiddlyWiki, starting from <<gtw.link-chapter-number \\\"The Shape of TiddlyWiki\\\">> shouldn't be a huge sacrifice. The first parts will go fast if you already know them well, but you may pick up some useful terms, concepts, and features that you haven't run across yet.\\n\\nAlthough I have made some concessions in the interest of placing related material together, the chapters generally go in increasing order of complexity and decreasing order of utility, so you can stop for a while whenever you feel you've learned what you need to know for the time being. If you do need to skip ahead, or you come back to the book later to use it as a reference, I try to link back to previous material required to understand each section, when practical. In addition to appearing throughout the text, all of the links found in a section are aggregated under the //show related topics// link in the footer.\\n\\n\\n</$details><$details summary=\\\"Exercises\\\">\\n\\nThe only way to fully understand what you learn about software is by using it, and if you don't understand what you've learned, you won't remember it either. Thus, for this book to be useful, you'll need to do some ''hands-on exercises''. In some sections of the book, particularly the earlier ones where you don't have much experience of TiddlyWiki yet, you'll be asked to open up your wiki and follow along with the text to see what happens; in others, a concept will first be fully explained, then at the end of the section you'll be asked to use what you've learned to make some changes to your wiki or fix some problems.\\n\\nYou should plan to do ''most or all of the exercises'' to cement your understanding. The exercises are not fun, optional diversions! Aside from the importance of hands-on exercises in developing understanding, some of the exercises guide you into discovering something important about TiddlyWiki on your own, then add additional context and explanation in the answer to the exercise. These insights may or may not be discussed again later in the book, so you'll likely miss some important points if you skip all the exercises.\\n\\nExercises have a letter next to them to indicate about how long I'm guessing they'll take you:\\n\\n* (s), for //seconds// -- from a few seconds to 2 minutes (<$text text={{{ [all[tiddlers+shadows]tag[Exercise]field:length[s]!field:origin[Supplemental Exercises]count[]] }}}/> total)\\n* (m), for //minutes// -- from 2 minutes to 15 minutes (<$text text={{{ [all[tiddlers+shadows]tag[Exercise]field:length[m]!field:origin[Supplemental Exercises]count[]] }}}/> total)\\n* (M), for //minutes//, but bigger -- from 15 minutes to 40 minutes (<$text text={{{ [all[tiddlers+shadows]tag[Exercise]field:length[M]!field:origin[Supplemental Exercises]count[]] }}}/> total)\\n* (h), for //hours// -- 40 minutes or more, up to a couple of hours (only supplemental exercises are this long)\\n\\nOf course, these estimates are not guarantees -- depending on your past experience with tools similar to TiddlyWiki, you might take longer or shorter than average for most exercises, and like when solving a math problem, you might happen to work something difficult out on the first try, or struggle with something for 20 minutes that would have been instantly obvious to you on a different day.\\n\\nIf there are both exercises and takeaways in a given section, you should usually ''do the exercises before proceeding to the takeaways'', as some of the takeaways may check knowledge you won't have until you complete the exercises. (We'll talk about takeaways in a moment.) The headings are always presented in this order, so as long as you don't try to skip ahead, you'll be fine.\\n\\nSome exercises, and some parts of the text, include ''code snippets'' that you are supposed to copy into your own wiki. If you're completely new to TiddlyWiki, I recommend //retyping// these snippets rather than using the copy-paste functionality on your computer. This isn't a hard requirement, but you will get the hang of the [[syntax of the snippets|Wikitext]] faster if you do.\\n\\nWhen you're done with an exercise, you can tick the //Complete// box in the upper-right. This will change its color to make it easy to see what you've completed, as well as mark it off your list in the [[Exercise Browser]], where you can search through all exercises in the book and see a list of the ones you haven't yet completed. (Click //exercises// under the //Grok TiddlyWiki// title to go here at any time.)\\n\\nA number of longer exercises are provided in the [[Supplemental Exercises]] chapter at the end of the book, if you get through most or all of the book and want to try some more guided exercises rather than jumping into implementing your own wikis immediately. You are not expected to do these unless you want to, and they are not included in the exercise counts above.\\n\\nHere's an exercise to try:\\n\\n{{Ex:SampleExercise||ExerciseTemplate}}\\n\\n</$details><$details summary=\\\"Takeaways\\\">\\n\\nWhy are tools like TiddlyWiki often intimidating to newcomers and difficult to learn? One of the biggest reasons is that they present a ''vast array of new terms and concepts''. If you jump into the documentation with no experience, it may well look like complete gibberish. Even when it's partly comprehensible, you'll be spending your mental energy trying to remember the basics, rather than understanding the new ideas presented by what you're reading.\\n\\nHowever, these terms and concepts rarely challenge learners in themselves. Each concept is easy enough to understand at the beginning, at least when the concepts are introduced in an appropriate order and explained in detail, as happens in any decent textbook. When a large number of them appear over a short period of time, though, each concept is quickly forgotten, creating a treadmill of forgetting where learners must keep running just to relearn what they've already ostensibly learned, never mind picking up the new material.\\n\\nThis suggests a way to make learning much easier: all we need to do is ''stop that process of forgetting''. That might sound like a silly claim -- anything sounds easy when you leave out the most important part -- but it turns out there's a straightforward, scientifically backed study method called //spaced repetition// that can virtually eliminate forgetting for any ideas you choose. A spaced-repetition algorithm produces 95% recall for as long as you want; all you have to do is regularly spend a small amount of time reviewing the items the algorithm presents to you. Yet although spaced repetition is extremely powerful, taking advantage of it is often a complex skill in itself and a big time sink when learning a new topic: since most books and learning resources don't use it, learners must understand how to extract the knowledge from the text into spaced-repetition prompts and spend extra time doing so.\\n\\nEnter [[TakeAway|TakeAway Help]], a native TiddlyWiki [[mnemonic medium|https://numinous.productions/ttft/#introducing-mnemonic-medium]] which is making its debut in this book. In a TakeAway-enabled book, most sections end with a heading called //Takeaways//. Instead of you having to identify and rephrase all the important concepts, the author does it for you, extracting the ideas presented in the section into a form that can be efficiently reviewed. (If the author passes over ideas you'd like to remember or phrases them in a way you don't appreciate, you can also edit the author's takeaways or add your own.)\\n\\nTakeaways are prompts in one of two formats:\\n\\n* A ''question-and-answer pair'' (e.g., //What letter does the word “tiddler” start with?// / “t”).\\n* A ''cloze deletion'', or fill-in-the-blank prompt (e.g., //The word “tiddler” starts with the letter {…}.//).\\n\\nTakeaways serve two purposes. First, they allow you to immediately ''check your understanding'' of the concepts to be sure you're reading actively; we've all had the experience of reading a section and then discovering we have no idea what it said. Just think about the answer to each takeaway and click //show answer// to confirm you got it right.\\n\\nSecond, TakeAway will help you ''build long-term understanding'' and prevent you from backsliding by suggesting you periodically review the takeaways you've previously encountered; a banner notification will appear in the book when it's time to review. TakeAway tracks how well you remember each takeaway and uses that information to decide when to show it again. All you have to do is open the text periodically and review the takeaways, and you'll remember the concepts. (For maximum retention and the easiest study sessions, it's best to review as close to daily as possible, but if you miss some days here and there, things will still work fine.)\\n\\nTakeaways mean that it's safe to take a break from working through the text for a while, and you will forget very little of the knowledge you've gained so far -- provided that you continue to open the text and review the takeaways every day or two, which should only take you a few minutes at most. Even if you don't review for a while, you'll be able to pick up what you've forgotten faster by reviewing the takeaways.\\n\\nIf you're already familiar with spaced repetition and prefer using [[Anki|https://apps.ankiweb.net]] to review, an Anki add-on that imports takeaways from the book is also available; see [[the appropriate section of the TakeAway help|TakeAway Help/Studying with Anki]] for how to set that up.\\n\\nHere's a takeaway to try:\\n\\n<div class=\\\"mm-takeaway-example\\\">\\n  {{Ta:20210117001839027||$:/plugins/sobjornstad/TakeAway/TakeawayListItem}}\\n</div>\\n\\n</$details>\\n\\n\\n!! Live examples\\n\\n{{Live Examples}}\\n\\n{{Sn:JaneDoeJournalStart||MagicSnippet}}\\n\\n\\n!! Sending feedback\\n\\n//Grok TiddlyWiki// can always be improved, and I hope to publish new versions regularly. If you find a typo or factual error, something doesn't make sense to you or doesn't display correctly on your device, or you have any other questions or suggestions, use the //send feedback// <<textual-button \\\"mail\\\">> link at the bottom of any section or when reviewing any takeaway to email me with an automatic reference to the section or takeaway. If you provide your email address, I will do my best to get back to you.\\n\\nAlternatively, you can use the information on my [[contact page|https://sorenbjornstad.com/contact/]] to get in touch directly.\\n\"},\"Images and Attachments\":{\"title\":\"Images and Attachments\",\"created\":\"20200716024459314\",\"description\":\"Content other than wikitext can be embedded into a TiddlyWiki, or stored outside of it and referenced in a variety of ways.\",\"modified\":\"20241016125526700\",\"parent\":\"More Organizational Tools\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"So far, we've written an awful lot of formatted text. What about including images or other files in the wiki?\\n\\nThis is, perhaps unexpectedly, one of the more troublesome aspects of TiddlyWiki, which is why we've left it until now. Let's talk about how we do it and what concerns we'll have to think about.\\n\\n\\n!! Importing files\\n\\nThis part is slick. Want a file to be part of your TiddlyWiki? Just ''drag and drop it'' out of your computer's file manager onto the TiddlyWiki window. A banner will appear at the top of the screen that says “Drop here.” When you drop the file, a special tiddler called `$:/Import` will appear. Click ''Import'', and a new tiddler is created containing the content. `$:/Import` will show a link to the newly added tiddler.\\n\\nThis works for text, images, PDFs, and even binary files (though this last option is usually a bad idea, as TiddlyWiki can lock up if you try to open the tiddler for a large binary file, and you won't be able to read it anyway). You can import multiple files at once by dragging multiple files; you'll have the chance to review and uncheck any that you don't want before you import.\\n\\nYou can also ''copy content between TiddlyWikis'' this way. For instance, if you wanted a copy of the [[Classifying Tags]] section in your wiki, you could simply grab that link and drag and drop it right onto your wiki window (for this to consistently work, both the source and the destination wiki should be open in the same web browser, e.g., Chrome).\\n\\nIf it's easier than dragging and dropping, you can also click the <<textual-button \\\"import-button\\\">> ''Import'' button on the ''Tools'' tab of the sidebar to select a file to import.\\n\\nGo ahead and import a file or two into your wiki, including at least one image so we can take a look at that below.\\n\\n\\n!! Putting images in your tiddlers\\n\\nOnce you have an image in your wiki, you probably want to know how to include it in a tiddler. Let's create a new tiddler called `ImageTest` for this purpose.\\n\\nThe easiest way to include it is to simply [[transclude|Field Transclusions]] it. So if the image tiddler is called `image.png`, use `{{image.png}}`.\\n\\nFor more control over the image, you can use a special link syntax, <nobr><code>[img&nbsp;[image.png]]</code></nobr> (notice the space before the second `[` -- this is not important yet, but is required when including attributes, as described in the next sentence). In between the `img` and the opening square bracket, you can include `width=200` and/or `height=200` attributes to size the image, replacing `200` with however many pixels you want to use for the image. Unlike most places in wikitext syntax, it's also possible to transclude a field or variable containing the size, e.g.:\\n\\n```html\\n[img width={{MyFavoriteImageWidth}} [image.png]]\\n```\\n\\nThe [[widget|Widgets]] equivalent of this syntax is `$image` (see [[documentation|https://tiddlywiki.com/#ImageWidget]]).\\n\\n\\n!! Putting PDFs in your tiddlers\\n\\nAnother common type of file to embed in your wiki is a PDF. You can't set the size a PDF displays at, but you can transclude a PDF tiddler, like `{{mydocument.pdf}}`, and a mini-embedded PDF viewer will appear at that point in the tiddler. Be aware this can slow down the loading of the tiddler since your browser has to load the entire PDF before it can finish displaying the tiddler, so be careful not to put it somewhere that might get loaded or re-loaded frequently, like on your wiki's front page or in the sidebar.\\n\\n\\n!! Directly adding images to your tiddlers\\n\\nAbove we discussed how importing images works when you import the image first and then create a tiddler that displays it. But often you'll be editing a tiddler and only then realize you need to import an image. In this case, you can ''drag and drop the image directly into the editor'' or paste it from the clipboard. In either case, a small popup will appear (you may need to scroll down to see it in some cases) offering to import the image. When you accept, it will both import the image and insert `[img [image.png]]` into the tiddler you're editing, where //image.png// is the name of the imported image tiddler.\\n\\nAside from this automatic insertion of appropriate wikitext markup, directly adding an image to a tiddler works exactly like importing it on its own and then referencing it from within a tiddler later.\\n\\n\\n!! The problem with TiddlyWiki attachments\\n\\nHere's the essential problem with all this: in single-file TiddlyWikis, ''anything you attach to your wiki gets embedded in the file''. That's no big deal if you only add a few small images or documents to your wiki, but if you start adding tens or dozens of large images, that file will balloon in size. That's a big problem for at least two reasons:\\n\\n* If your wiki is stored on the web, e.g., at TiddlyHost, every time you open it, you have to download the entire file, which may take quite a while depending on the speed of your internet connection.\\n* With [[many savers|Options for Saving and Hosting Your Wiki]], every time TiddlyWiki saves, it makes a new copy of the file for backup purposes. If your wiki is 100 MB, and you save your wiki just 20 times, you're now using 2 GB of space on your hard drive. You can reduce the number of backups saved by various means, but that only hides the problem for longer; eventually your wiki is still going to get really big.\\n\\n(For the curious, text is so much smaller than images that serious difficulties are unlikely. You would have to write over 16 million average-length words of English, or 32,000 densely filled pages, to reach 100 MB of text. If you write 3 pages every day, it will still take you 30 years to write that much.)\\n\\n\\n!! Possible solutions\\n\\n{{$:/plugins/sobjornstad/TakeAway/ContextualHelp/DetailsWidget}}\\n\\n<$details summary=\\\"Using Node.js\\\">\\n\\nIf you're technical enough to know a little bit about running a web server, or just a lot about JavaScript or Node.js, you can ''use a folder wiki'' instead of a single-file wiki, which eliminates the file-size problem because the attachments are stored as separate files and don't have to be rewritten unless they're changed. If you don't have any particular reason to prefer single-file TiddlyWiki, this is likely your best option.\\n\\nTake a look at the [[Options for Saving and Hosting Your Wiki]] appendix for details.\\n\\nIf you're editing the wiki over a network (i.e., not from the computer on which you're running the server), this method might still be slow if you have a lot of images, since all of the images will still be sent to your browser when you open the wiki. To avoid this, you can configure the server to [[lazy-load|https://tiddlywiki.com/#LazyLoading]] the images.\\n\\n</$details><$details summary=\\\"Linking to external content\\\">\\n\\nOne way to avoid the issue is to ''link to content stored elsewhere'' instead of putting it in your wiki at all. For instance, you can display an image stored on the web using the `img` syntax:\\n\\n```html\\n[img [https://example.com/url/of/my/image.png]]\\n```\\n\\nSimilarly, you could link to a PDF instead of transcluding it.\\n\\nIf you're keeping your wiki on your computer and using a compatible saver (this rules out TiddlyHost), you can also link to files ''on your computer'' by placing them in a folder next to your TiddlyWiki. Say that your wiki is on a Windows computer at `C:\\\\Users\\\\Soren\\\\Documents\\\\TiddlyWiki\\\\tw.html`. You could create a folder called `C:\\\\Users\\\\Soren\\\\Documents\\\\TiddlyWiki\\\\attachments`. Then, when you want to have a file available for linking from TiddlyWiki, put it in this folder and display an image or link to a PDF like this:\\n\\n```html\\n[img [attachments/myimage.png]]\\n[ext[See my PDF|attachments/mydocument.pdf]]\\n```\\n\\nNotice the `ext`, and the lack of a space before the `[`. This stands for //external// and is required so TiddlyWiki can distinguish between a missing tiddler called `attachments/mydocument.pdf` and a file with that name. TiddlyWiki can safely assume that a link to something beginning with `https://` or `file://` is intended to be external, but with a path relative to the wiki like this one, it's not so clear. (In the case of `img`, you don't have to specify: TiddlyWiki uses a tiddler with the provided name if it exists, and if it doesn't it tries treating it as an external path on your computer's filesystem.)\\n\\n</$details><$details summary=\\\"_canonical_uri\\\">\\n\\nOften, you might be fine storing the content external to your wiki, but you'd really like to be able to ''treat it as a normal tiddler'' -- for instance, so you can transclude a PDF into another tiddler, or filter your images by certain criteria. You can improve on the approach above using a special field called `_canonical_uri` on a tiddler. (Notice that this is spelled `uri`, not `url` -- the difference between a URI and a URL is technical and irrelevant for our purposes, but getting the field name wrong will have very relevant results!)\\n\\nHere's how it works. Start by creating the folder and files mentioned in that section. Then, in TiddlyWiki, create a new tiddler and give it the name and fields that you would like. Instead of filling in the `text` field, however, create a field called `_canonical_uri` and paste in the path, like `attachments/mydocument.pdf`. (You can also provide a URL to content on the web, if you like.) When you add the field, a notice will appear that you can't edit the content in TiddlyWiki because it's stored outside the wiki.\\n\\nIt's important you get the ''MIME type'' right (that's the little box labeled //Type// right underneath the content). If you don't, your content won't show up when you save the tiddler. If TiddlyWiki doesn't fill something appropriate in, you can pick from the drop-down for image or text types, or type `application/pdf` for a PDF.\\n\\nWhen you save the tiddler, you should see the content appear. At this point, it will behave just like any other tiddler, except that you can't edit the content from within TW and it will stop working if the content is moved.\\n\\n</$details>\\n\\n!! Exercises\\n\\n{{Ex:ContactInformationPicture||ExerciseTemplate}}\\n{{Ex:CanonicalUri||ExerciseTemplate}}\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\\n\"},\"Installing TiddlyWiki\":{\"title\":\"Installing TiddlyWiki\",\"created\":\"20200530172429726\",\"description\":\"How to get TiddlyWiki set up on your computer.\",\"modified\":\"20241013020740586\",\"parent\":\"The Shape of TiddlyWiki\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"TiddlyWiki, while having many virtues, is tricky to get started with. That's partly because it can do pretty much anything, so it's not always obvious what to do with it once you have it. Working through this book should resolve that issue.\\n\\nIt's also because there is a ridiculous array of options for what software to use with TiddlyWiki:\\n\\n[img[savers-oh-no.png]]\\n\\nI know, right: you already decided to use TiddlyWiki, which is the software; why do you have to choose other software to use it with? Basically, because TiddlyWiki isn't a centralized service, there are many different places you can store your wiki. You can keep it on your computer, make it accessible from a web server you own, keep it on Dropbox, keep it in a GitHub repository, keep it on your phone, engrave it on a special spy pocketknife with a Bluetooth-enabled laser cutter…and to transfer the changes from your browser to where your wiki is stored, each of these methods has its own associated plugin or browser extension or third-party web service account or downloaded tool. These tools are called //savers//.\\n\\nI know your eyes are glazing over and you're questioning your choices in life, so for now, I'm going to pick a saver for you, and we'll pretend the rest don't exist for now. [[TiddlyHost|https://tiddlyhost.com/]] is a {{Ltc:FreeTiddlyHost||LieToChildrenTemplate}} web service maintained by the TiddlyWiki community that makes setting up TiddlyWiki quick and easy. TiddlyHost is by no means the best option for everyone -- in particular, you might prefer to keep your wiki locally or on some web space you own, instead of entrusting it to a third party, and it can be somewhat difficult to make regular backups unless you pay for the pro version of TiddlyHost -- so if you like, once you've gotten comfortable with TiddlyWiki, you can [[look into the other options|Options for Saving and Hosting Your Wiki]] for saving.\\n\\n(//Note:// If you have some experience with TiddlyWiki already and have another saver that you prefer, or you don't think TiddlyHost will work for you for whatever reason, feel free to use [[a different saver|Options for Saving and Hosting Your Wiki]] instead. The rest of this book will rarely talk about TiddlyHost, and the saver you are using is rarely relevant at all as long as it's successfully saving your changes.)\\n\\n!! Signing up for an account\\n\\nVisit https://tiddlyhost.com/, click the green //Sign Up// button, and fill out the form. You'll be prompted to open an email and click on a link to confirm your registration.\\n\\n!! Creating a wiki\\n\\nOnce you've created an account and gotten logged in, click the //Create site// button at the bottom of the page. Then pick a name (TiddlyHost will pick a random one for you, which you can accept for your test wiki if you like), a wiki type (use the default //TiddlyWiki (self-contained)// option for now) and an access level (//Private// probably makes the most sense for your test wiki, but you can share it with the world if you want to). Finally, click //Create//. No need to worry about the other options for now!\\n\\n[img[create-th-site.png]]\\n\\nYou should now be able to click on your wiki's name to open it.\\n\\n!! Backups\\n\\nBefore we proceed, just one more thing. You probably won't care much if you lose your sample wiki. But if you're keeping real thoughts and ideas and notes in TiddlyWiki, ''you //must// back up your wiki regularly''. This is not an optional good practice or something you can do later “when you get around to it.” If you accidentally delete a bunch of content in TiddlyWiki, your hard drive crashes, or your computer gets confused and saves your wiki incorrectly, and you don't have a backup, everything will be gone forever. That might not seem like a big deal right now, but once you've been using TiddlyWiki for a while, losing your wiki is the digital equivalent of having your house burn to the ground. And while disasters that cause your entire TiddlyWiki to be lost are uncommon, if you use your wiki for years, that small chance adds up. If you never make backups, over a lifetime you're more likely to have a major data loss event than not.\\n\\nIf you want to get started learning TiddlyWiki before developing a backup strategy, that's OK -- but if you don't already have everything on your hard drive backed up on a regular schedule, go put it on your to-do list or your calendar right now to come up with a backup strategy. Then you can come back and continue with the book. If you don't know anything about backups, you can check out my [[blog post|https://controlaltbackspace.org/backup/]] about developing a strategy. Compared to losing data, it is easy, fast, and cheap!\\n\\nIf you're using TiddlyHost, you'll want to periodically use the //Download// option next to your wiki to make a copy on your computer, and then back up your computer.\\n\\n[img[download-in-tiddlyhost.png]]\\n\\nWhen you've opened your new wiki and have the `GettingStarted` page looking back at you, proceed to the next section.\\n\"},\"JavaScript Macros\":{\"title\":\"JavaScript Macros\",\"created\":\"20200719033806080\",\"description\":\"Macros can execute JavaScript code rather than evaluating wikitext.\",\"modified\":\"20240927005331126\",\"parent\":\"Getting Technical\",\"prerequisite\":\"Basic knowledge of JavaScript\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"(''Prerequisite'' for this section: {{!!prerequisite}}.)\\n\\nIf you want to do something that's just a little bit out of reach of a wikitext procedure or macro, you can also write macros in [[JavaScript|https://en.wikipedia.org/wiki/JavaScript]]. It's important that your macro execute quickly and have no side effects, as TiddlyWiki may repeatedly rerender the page containing the macro and call your JavaScript function in the process, just as it would with a wikitext macro. JavaScript macros also cannot access the browser DOM, since they may run server-side if you're serving your wiki with Node.js.\\n\\nThe process of creating a JavaScript macro is [[documented on the TiddlyWiki Dev wiki|https://tiddlywiki.com/dev/index.html#JavaScript Macros]], although not particularly well. Let's suppose that we want a macro that ''rounds timestamps to the nearest 15 minutes''. First, we write a JavaScript function that takes arguments matching those of the macro and returns the wikitext we want to output. You can test this function in any JavaScript development environment you like, including something as simple as your browser devtools. You'll end up with a single function, like this:\\n\\n```javascript\\nfunction(parameter) {\\n  /* do some stuff */\\n  return \\\"my return value\\\";\\n}\\n```\\n\\nThen, we create a tiddler with type `application/javascript` and a field `module-type` set to `macro`. Drop in the following template snippet, then update the documentation comments and `exports.name` and `exports.params` variables as appropriate and assign your function to `exports.run`.\\n\\n```javascript\\n/*\\\\\\ntitle: YOUR MACRO NAME\\ntype: application/javascript\\nmodule-type: macro\\n\\nDESCRIPTION OF YOUR MACRO\\n\\\\*/\\n(function(){\\n\\\"use strict\\\";\\n\\nexports.name = \\\"YOUR MACRO NAME\\\";\\nexports.params = [\\n  {name: \\\"YOUR FIRST PARAMETER NAME\\\"}\\n  /* repeat for additional parameters */\\n];\\nexports.run = /* INSERT YOUR FUNCTION HERE... */;\\n\\n})();\\n```\\n\\nWhen you change a JavaScript macro, you must ''reload the entire wiki'' for the changes to take effect, as TiddlyWiki doesn't dynamically reload JavaScript. It won't tell you to do so -- this can be very puzzling if you aren't aware it's necessary!\\n\\nAfter reloading the wiki, assuming you did everything right, your macro will be available for use in any tiddler just like any other global macro.\\n\\n\\n!! Exercises\\n\\n{{Ex:RoundtimeMacro||ExerciseTemplate}}\\n\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\\n\"},\"Journal Tiddlers\":{\"title\":\"Journal Tiddlers\",\"created\":\"20200530202215791\",\"description\":\"How to create journal tiddlers and use basic wikitext formatting features.\",\"modified\":\"20241013022052075\",\"parent\":\"The Shape of TiddlyWiki\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Now that we have the software installed and our wiki created, we've learned about a few basic TiddlyWiki concepts, and we know what kind of wiki we're trying to build, we're ready to get started!\\n\\nLet's begin by setting up the TiddlyWiki journal functionality to handle our work diary requirement. We're in luck here, because TiddlyWiki has built-in ''journal'' functionality to create a new tiddler with the current date in its title. As we create journal tiddlers, we'll take a look at some of the most popular [[wikitext|Wikitext]] formatting.\\n\\n!! Journal settings\\n\\nPop open your <<textual-button \\\"options-button\\\">> [[control panel|Tweaking Your Settings]] again and go to the //Info/Basics// tab.\\n\\n!!! Titling\\n\\nScroll down to //Title of new journal tiddlers//. I [[dislike the default date format|https://thetechnicalgeekery.com/2013/06/yyyy-mm-dd-the-best-way-to-write-dates/]] (//23rd May 2024//) because it causes journal tiddlers to sort in an unhelpful order in many views. The YYYY-MM-DD format (//2024-05-23//), in contrast, will sort nicely in chronological order in any lists it may end up in without requiring any special treatment. I also find it helpful to toss the day of the week in the title after the date (not before it, or you break the sort again!).\\n\\nThe incantation to make this format happen is `YYYY-0MM-0DD DDD`, so fill that in the //Title of new journal tiddlers// field. If you prefer a different format, you can find details in the [[DateFormat|https://tiddlywiki.com/#DateFormat]] section of the TiddlyWiki documentation.\\n\\n!!! Starting text\\n\\nYou might like to start out your day's journal entry with some basic structure reminding you what you should fill in. You can fill in the //Text for new journal tiddlers// field to accomplish this. Let's do:\\n\\n{{Sn:JournalStartingText||MagicSnippet}}\\n\\nThe `!!` is the wikitext syntax for a top-level section heading, while the `*`'s create a list.\\n\\n//Note//: In //Grok TiddlyWiki//, heading 2 (`!!`) has been customized to show a horizontal line under the title, as you can see in the preview above. You won't find this line in a default TiddlyWiki. This custom styling is configured via [[Stylesheets]] (but those are way ahead of our current TiddlyWiki knowledge, so don't worry about them for now).\\n\\n!!! Tags\\n\\nBy default, journal tiddlers are tagged with //Journal//, which is already what we want, so we'll leave //Tags for new journal tiddlers// at its default value.\\n\\n!! Creating a new journal tiddler\\n\\nYou can find the new-journal button <<textual-button \\\"new-journal-button\\\">> under the //Tools// tab in the sidebar. This is an out-of-the-way place for something we're going to be clicking at least once a day, though, so let's tick the check box next to the button. This will place it on the [[page toolbar|The TiddlyWiki Interface]] at the top of the sidebar, right next to the normal new-tiddler button.\\n\\nIf you now click on the new-journal button, you will see a new tiddler open up for editing, with its title already set to today's date and its text set to the starting text we set above. Go ahead and play around: write in some sample content and try the editor buttons to see what kind of formatting markup you can insert.\\n\\nCan't tell if you did the markup right? There is a live ''side-by-side preview'' function, which you'll likely want to have open most of if not all of the time unless you're working on an unusually small screen, but the discoverability is terrible. The button is second from the right on the editor toolbar, and it looks like a jagged mouth <<textual-button \\\"preview-closed\\\">>; you'll see after clicking it that it's supposed to be a closed eye to contrast with the open eye <<textual-button \\\"preview-open\\\">>. Alternatively, you can press Alt+P while editing (your cursor has to be in the text field for this shortcut to work). Most buttons in the editor toolbar have similar keyboard shortcuts, which you can find by hovering over them.\\n\\nIf you have a small screen and need more space to see the editor and the preview side by side, you can click the double right chevron <<textual-button \\\"chevron-right\\\">> way in the upper-right corner of the screen to hide the sidebar temporarily (click the button again to put it back). You can also hide your web browser's toolbars and interface by pressing F11 (or Command+Shift+F on a Mac), which is nice if you want to focus on what you're writing or you need a bit more vertical space.\\n\\nWhen you're done, click the check mark <<textual-button \\\"done-button\\\">> in the upper-right corner of the tiddler to accept the changes and admire your handiwork. Note, however, that //this does not save your wiki itself//. To permanently commit your changes to TiddlyHost, you need to click the save changes button <<textual-button \\\"save-button-dynamic\\\">> on the page toolbar, which changes into a red target when there are changes to be saved. (If you dislike the need to manually save, note that this is a limitation of TiddlyHost, not TiddlyWiki itself -- many [[other savers|Options for Saving and Hosting Your Wiki]] are capable of saving automatically.)\\n\\n{{Ex:BasicWikitext||ExerciseTemplate}}\\n\\n!! Finding closed tiddlers\\n\\nBefore we move on, let me point out that if you close a tiddler by clicking the <<textual-button \\\"close-button\\\">> in the upper-right corner, it may not be immediately obvious how to open it again! For now, as we don't have many tiddlers, going to the `Recent` tab in the sidebar and scanning the list for the appropriate tiddler should be enough to get you back to any tiddler you've closed.\\n\\nWe'll talk more about the various options for finding and browsing tiddlers in chapters 2 and 3, [[Filing and Organizing]] and [[Filtering and Formatting]]. If we had to call out the top three features that differentiate TiddlyWiki from other note-taking systems, the flexibility of the search and filtering system would likely be on the list, so there's plenty to talk about here.\\n\\n{{Ex:CloseAndReopen||ExerciseTemplate}}\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\"},\"Knowledge Tiddlers\":{\"title\":\"Knowledge Tiddlers\",\"created\":\"20200531022953084\",\"description\":\"How to organize information that doesn't fall into a clear category, and why such information should be pulled out into separate units of information and related to others.\",\"modified\":\"20210504022221627\",\"parent\":\"The Shape of TiddlyWiki\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"We've almost made it through all of the types of tiddlers we identified in [[Structuring Our Wiki]]. The remaining type we listed out is the non-type: what we called the ''knowledge tiddler''. Studying the amorphous nature of knowledge tiddlers will lead us to some important insights about organizing information which we'll build on in the next chapter, [[Filing and Organizing]].\\n\\n!! Creating missing tiddlers\\n\\nWe already have a knowledge tiddler that we need to create. Remember how back when we were [[working on Jane's tiddler|Contact Tiddlers]], we decided that the employee information system was a concept that should be called out with a link? Let's start a knowledge tiddler about the employee information system.\\n\\nHow should we create this tiddler? As with everything in TiddlyWiki, we have several options. If we have a good memory, we might simply recall that we need to create a tiddler called `EmployeeInformationSystem`, and in that case we could just click the <<textual-button \\\"new-button\\\">> new tiddler button and write it up. Alternatively, we could go back to Jane's tiddler, where there will be an italicized link indicating it doesn't exist, click on it, and edit from there. However, let's try a new method. TiddlyWiki actually keeps track of what tiddlers have been linked to but don't exist, so we can check periodically and create any that seem important. These tiddlers that are linked to but have not been created are called ''missing tiddlers''.\\n\\nClick into the //More// tab in the sidebar, then //Missing//. You should see `EmployeeInformationSystem` listed. If you click on it, you'll see a pop-up similar to what you get when you click on a tag: above the line is the missing tiddler itself, and underneath are all the tiddlers that link to it. This is a nifty way to figure out what a missing tiddler is supposed to be about if you can't quite remember from the title -- often seeing the places where you mentioned it will be sufficient to jog your memory.\\n\\n!! Describing the Employee Information System\\n\\nLet's click on `EmployeeInformationSystem` and edit it. We could start with some notes about the system:\\n\\n{{Sn:EmployeeInformationSystemExample||MagicSnippet}}\\n\\nWait…remember how we're supposed to consider if there are any concepts that need links? Have a read and see if you can identify some things that might deserve links and separate tiddlers! Then continue below.\\n\\n* The ''Really Annoying Five-Factor Authentication Process'' (RAFFAP) is probably the most obvious candidate here. Perhaps we don't have all that much to say about it, but we would likely at least want to maintain a link to the company documentation on it.\\n* It could be worth creating tiddlers for ''the process of retrieving pay stubs or requesting vacation'' -- particularly the latter, since there are probably a number of further considerations involved in taking vacation (e.g., having your boss and/or teammates approve your plans). If you don't know much about the process yet, you could simply leave the tiddler missing and fill it in when you learn more, or if you don't like leaving missing tiddlers, drop in a sentence that says “Vacation time is requested in the EmployeeInformationSystem.”\\n* The ''company cafeteria'' is certainly a concept, but unless you're one of those people who keep exhaustive spreadsheets about everything, it's unlikely you want to take notes on it, so it won't need a tiddler. Similarly, ''coffee, tea, and pastries'' are concepts, but presumably nothing more needs to be said about them here, and you have no need to correlate mentions of tea across all of your work notes.\\n\\nFor the moment, for the sake of not getting sidetracked, let's leave all of them unlinked.\\n\\n\\n!! Classifying the Employee Information System\\n\\nHere's a million-dollar question: how exactly does the EIS relate to our OnboardingProcess project? Is it a //part// of the project? Is it just related to the project? This is an important question because it determines whether we should ''tag'' the EIS with OnboardingProcess, or merely ''link'' them together.\\n\\nI'm personally inclined to say that ''the EIS is merely related to the project'': we're presumably going to find use for the EIS in many contexts outside our company onboarding, and it has no particular relationship to the project except that we were shown how to use it as part of the project. However, this isn't necessarily a transferable rule even for any pair of a project and an application associated with that project. If our project was to purchase and set up a label printer, we'd have a strong case for considering the label-printing software part of that project, even though it could be used outside of that project in the future -- it's an integral part of the project, compared to the EIS, which is an incidental part of being onboarded.\\n\\nFortunately, making the wrong decision here is hardly going to be fatal. These questions are not meant to give the impression that you have to immediately know the “right” answer every time -- they're meant to get you thinking about the different options and why you might choose one over another. Once you've been using TiddlyWiki for a while, you'll probably just go, “Hmm. I think I'm going to use a tag here,” and then do it, and never think about it again unless it proves to be confusing or problematic for some reason. It's much like learning a new language: at first you have to stop from time to time and think really hard if you want to get your grammar right, but if you keep practicing, soon enough it flows out naturally, even if you might still mix something up once in a while.\\n\\nSo, if we've decided on a link, let's add a sentence to the end of the tiddler's text:\\n\\n```html\\nJaneDoe taught me about the EIS in our EmployeeProfileSetupMeeting.\\n```\\n\\nThis will nicely tie together all the relevant pieces of information for us.\\n\\n!! Tags\\n\\nSince this is a knowledge tiddler, it doesn't have a tag identifying exactly what type of information it is like the others did. However, it might still be nice to classify it: this is a software application, so let's tag it with `Application`.\\n\\nIt's important not to create a blizzard of tags -- the more tags you have, the harder it is to scan through them and figure out what they are and what other tiddlers you might want to apply them to -- so before creating a new tag, it's good to make sure you can ''identify a situation in which you would actually use that tag''. Here's the use case we could identify for Applications:\\n\\n> From time to time, we may wish to see a list of the tools we have available at our disposal, if we get stuck on a problem or we know there's an app that does what we need but just can't quite remember what it's called or where to look for it.\\n\\n(In many cases, it's helpful to put a little blurb like this one in the tag tiddler itself, so if you ever forget where the tag should be applied, you can look it up. Feel free to do this in your example wiki if you want to.)\\n\\nAccording to this rule, we wouldn't tag the EIS tiddler `Coffee`, because we agreed there's no benefit to tracking where we talk about coffee in this wiki, or `TrainedByJaneDoe`, because (a) it's difficult to imagine any situation in which we would need to know what applications Jane trained us to use, and (b) we have already linked this tiddler to Jane's tiddler and thus can easily get a list of applications Jane is associated with, which is likely to be more than enough to gather this data in the unlikely event we need it, even if we have to sort out a few applications that are related to Jane in some other way. (We'll learn how you would go about seeing a list of exactly the tiddlers that link to or from Jane's tiddler and are applications in chapter 3, when we talk about [[filters|Filters]].)\\n\\nWe might, however, have a case for tagging this tiddler `ThingsThatAreHarderOnTuesdays`, if that proves to be a common category at the company, since we might want to use that information to plan our weeks!\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\\n\"},\"LieToChildrenTemplate\":{\"title\":\"LieToChildrenTemplate\",\"created\":\"20210110042143124\",\"modified\":\"20210130022017337\",\"tags\":\"Template\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\whitespace trim\\n\\n<$link class=\\\"ltc-link\\\" tooltip=\\\"\\\"\\\"This is a “lie to children”: it is not strictly accurate, but will give you sufficient understanding for now. Click if you want to know the full truth.\\\"\\\"\\\" to={{!!title}}>{{!!description}}</$link>\"},\"Links\":{\"title\":\"Links\",\"created\":\"20200530170256021\",\"description\":\"Links tell TiddlyWiki what ideas (tiddlers) in your wiki are related to each other.\",\"modified\":\"20241016121347059\",\"parent\":\"The Shape of TiddlyWiki\",\"tags\":\"Concept Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"''Links'' between [[tiddlers|Tiddlers]] are the most basic way to make your way around a TiddlyWiki and relate ideas to each other.\\n\\nLinks may be created within a tiddler by surrounding the name of the tiddler to link to with `[[double square brackets]]`.\\n\\nIf you want the displayed text to be different than the target of the link (i.e., where you'll go when you click on it), you can write `[[link text|TargetTiddlerName]]` (that's a //pipe// `|` character separating the two parts of the link, found above the enter key on a US keyboard).\\n\\nHere's an example of these two kinds of links. {{Live Examples}}\\n\\n{{Sn:TweakingYourSettings||MagicSnippet}}\\n\\n!! Links define relationships\\n\\nAs you likely expect from your past experience of links, clicking on a link to another tiddler opens that tiddler (usually as a new item in the [[story river|The TiddlyWiki Interface]]). In addition to this obvious function, however, TiddlyWiki links also ''define relationships between tiddlers'' and let you search based on these relationships. For instance, you can get a list of all tiddlers that link //to// a particular tiddler (these are called //backlinks//, and often allow you to find relationships between ideas you wouldn't have realized were related otherwise). Or you can get a list of all the people you linked to anywhere in your notes on a particular conference. This is a powerful idea that plays a large part in [[making TiddlyWiki human-shaped|Why TiddlyWiki?]]: our brains think most naturally in terms of links and relationships between things, not in hierarchies and attributes.\\n\\nAs an example, here are the backlinks of this //Links// section, i.e., the other sections in the book that link here. In <<gtw.link-chapter-number \\\"Filtering and Formatting\\\">>, you'll learn how to query your wiki like this, as well as how to turn the results into lists that update automatically, like this one.\\n\\n<<list-links \\\"[[$:/plugins/sobjornstad/GrokTiddlyWiki]plugintiddlers[]] :filter[links[]match<currentTiddler>] -[[Wr:Links]]\\\">>\\n\\nYou can link to tiddlers that don't exist yet. These links will be displayed in italics to indicate their target doesn't exist, and following the link will prompt you to create it. Tiddlers that have been linked to but don't exist yet are called ''missing'', and you can get a list of all missing tiddlers if you'd like to see what you wanted to talk about but haven't written yet (we'll see how in [[Browsing Your Tiddlers]]).\\n\\n!! External links\\n\\nIn addition to the //internal// links we've discussed so far (ones that point to other tiddlers in the same wiki), you can include ''external links'' (ones that point to URLs on the web or your computer). External links are created the same way as internal ones, except the link target is a URL rather than a tiddler name. Alternatively, if you want the URL itself to be the link text, you can just paste the URL into your wikitext and it will automatically be turned into a link. You can tell an external link from an internal one because external links are underlined, while internal links are only in a different color (compare the following example with the previous one).\\n\\n{{Sn:LinkToGoogle||MagicSnippet}}\\n\\nSince the targets of external links aren't part of TiddlyWiki, you don't get backlinks or link-based searches for external links.\\n\\nExternal links will always open in a new tab or window so that you don't lose your place in the wiki.\\n\\n!! CamelCase links\\n\\nWikis have a long history of automatically turning phrases written in CamelCase, with no space between words and each word capitalized, into links to pages with that title. You can turn on this style of linking on the [[Settings tab of the control panel|Tweaking Your Settings]]. (In versions of TiddlyWiki prior to 5.3.0, CamelCase linking was enabled by default.)\\n\\nSee the [[CamelCase]] appendix for more details on CamelCase.\\n\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\"},\"Live Examples\":{\"title\":\"Live Examples\",\"created\":\"20210117002226847\",\"modified\":\"20210321010956034\",\"tags\":\"Fragment\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"You'll see live examples like this one periodically throughout the book -- the left side shows the [[wikitext|Wikitext]], i.e., what you would type in when editing a tiddler, while the right side shows what the result looks like when viewing the tiddler. You can also click the //Wikitext// or //Output// tab to see the left or right side alone, if you'd like a little more horizontal space to read a long line. Finally, you can click the //Edit// tab to change the snippet and see how TiddlyWiki reacts. (If you edit the snippet, a link to restore the original text will appear in the upper-right, so you can experiment without fear.)\"},\"Looking Under the Hood\":{\"title\":\"Looking Under the Hood\",\"caption\":\"7: Looking Under the Hood\",\"created\":\"20200717225720913\",\"description\":\"In which we follow the implications of everything being a tiddler to their conclusions: TiddlyWiki can be extensively customized with little more than the tools we've already learned.\",\"list\":\"[[System Tiddlers]] Plugins [[Shadow Tiddlers]] [[The View Template]] [[Adding to the Sidebar]] Stamps [[Creating a List of Links and Backlinks]] [[Buttons and Input Widgets]] [[Creating Tiddlers With Predefined Fields]] [[Overriding Built-In Widgets]]\",\"modified\":\"20240928021953928\",\"parent\":\"Outline\",\"tags\":\"Chapter\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Everything we've learned about tiddlers so far ''can also be applied to the functionality of TiddlyWiki itself'', because everything's a tiddler!  After completing this chapter, you'll be able to customize TiddlyWiki's interface and behavior in a variety of useful ways, such as by adding buttons to the toolbars, placing predefined content on tiddlers matching some criteria, and creating new forms and interface elements.\\n\\nWe'll start by looking at [[system tiddlers|System Tiddlers]], [[plugins|Plugins]], and [[shadow tiddlers|Shadow Tiddlers]], which are extensions to the normal understanding of [[tiddlers|Tiddlers]]. Then we'll see how mechanisms built into TiddlyWiki allow us to edit parts of TiddlyWiki's interface and link our own entirely new tiddlers into it -- whether that's the [[sidebar|Adding to the Sidebar]], [[tiddlers in the story river|The View Template]], or [[buttons on a toolbar|Buttons and Input Widgets]]. And we'll work through several example customizations so you can see how these features can be used in real life.\\n\\n!! In this chapter\\n\\n{{||ChapterOutlineTemplate}}\"},\"Ltc:AllListsAllTiddlers\":{\"title\":\"Ltc:AllListsAllTiddlers\",\"created\":\"20210131163920553\",\"description\":\"all of your tiddlers\",\"modified\":\"20210409123355214\",\"tags\":\"Lie\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Actually, neither [[System Tiddlers]] nor [[Shadow Tiddlers]] -- which in a small wiki will be //most// of the tiddlers -- appear in the ''All'' list. But those won't contain any of your content unless you intentionally put it into such tiddlers, so you don't need to worry about them for now.\"},\"Ltc:AllTiddlersInTheLeft\":{\"title\":\"Ltc:AllTiddlersInTheLeft\",\"created\":\"20210110042100375\",\"description\":\"all tiddlers in the wiki\",\"modified\":\"20210110161959248\",\"tags\":\"Lie\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"//{{!!description}}//: Actually, it is only all non-[[shadow tiddlers|Shadow Tiddlers]]. Hit the link for details on shadow tiddlers and how you can include shadow tiddlers in the pipeline as well.\"},\"Ltc:BlockAndInlineMode\":{\"title\":\"Ltc:BlockAndInlineMode\",\"created\":\"20210116183316696\",\"description\":\"elements are rendered in either block mode or inline mode\",\"modified\":\"20210116214206949\",\"tags\":\"Lie\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"This sentence contains a whole host of inaccuracies. In HTML, there are a number of possible display modes besides block and inline, such as `inline-block`, `flex`, and so on. Further, HTML doesn't generally call them “modes” -- you're more likely to see “layouts” or “contexts” depending on exactly what is being discussed. But as we'll see, this is convenient terminology to use with TiddlyWiki because the wikitext parser actually does have “modes,” so it will be good enough for this discussion.\"},\"Ltc:BracesTranscludeSame\":{\"title\":\"Ltc:BracesTranscludeSame\",\"created\":\"20240928024455998\",\"description\":\"These are the same thing\",\"modified\":\"20240928024607093\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Actually, there's a small but important difference between these two syntaxes, unlike most wikitext/widget pairs: the `$transclude` widget does not change the current tiddler, while `{{braces}}` do. We'll come back to this in the next section, when we've learned more about the current tiddler.\"},\"Ltc:CoreCodeTiddlers\":{\"title\":\"Ltc:CoreCodeTiddlers\",\"created\":\"20210116232945883\",\"description\":\"even the core code of TiddlyWiki itself\",\"modified\":\"20210207060523909\",\"tags\":\"Lie\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"While almost all of the core code of TiddlyWiki is stored in tiddlers, there is a small [[component|https://tiddlywiki.com/dev/#Microkernel]] called the //microkernel// that is not. This component is needed to “bootstrap” TiddlyWiki to the point that it is capable of reading the rest of its code from tiddlers.\"},\"Ltc:CurrentTiddlerDefinition\":{\"title\":\"Ltc:CurrentTiddlerDefinition\",\"created\":\"20210207221248517\",\"description\":\"accurate definition of the current tiddler\",\"modified\":\"20210207221316374\",\"tags\":\"Lie\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Actually, properly setting the current tiddler also involves setting some variables to the names of CSS classes, as discussed in the section on the `$tiddler` widget in [[Miscellaneous Widgets]]. However, in virtually all cases you can get away with simply setting the value of the `currentTiddler` variable.\"},\"Ltc:EverySetting\":{\"title\":\"Ltc:EverySetting\",\"created\":\"20210121003205119\",\"description\":\"every setting in the control panel has a tiddler here holding your choice of value\",\"modified\":\"20210206213445145\",\"tags\":\"Lie\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Actually, a handful are so important that they have values right under `$:/`, such as [[$:/SiteTitle]]. And you or a plugin author could add items to the control panel that don't store configuration in `$:/config`.\"},\"Ltc:ExampleLtc\":{\"title\":\"Ltc:ExampleLtc\",\"created\":\"20210116232539412\",\"description\":\"dashed underline\",\"modified\":\"20210321143816951\",\"tags\":\"Lie\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"There's no actual lie here. Normally, you would find a description of why what I said was inaccurate, and perhaps a pointer to where you can learn the exact truth.\"},\"Ltc:FreeTiddlyHost\":{\"title\":\"Ltc:FreeTiddlyHost\",\"created\":\"20240829033444069\",\"description\":\"free\",\"modified\":\"20240829033724081\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"TiddlyHost is really a freemium service -- you can pay for a premium account if you like. This is primarily a way to give back to the community, though; the only important thing you get by paying is revision history (which is nice, but you can always back up your wiki manually instead).\\n\\nTiddlyWiki itself is completely free, and using the free version of TiddlyHost will not limit what you can do with your TiddlyWiki itself in any way.\"},\"Ltc:GmtUtc\":{\"title\":\"Ltc:GmtUtc\",\"created\":\"20210323235617632\",\"description\":\"Greenwich Mean Time\",\"modified\":\"20241017014818747\",\"tags\":\"Lie\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Actually, GMT and UTC are not quite the same thing. You probably do //not// want to bother with the difference, because it is completely irrelevant for most purposes, but if you're feeling pedantic or curious about time zones:\\n\\n* ''UTC'' (//Coordinated Universal Time//, and yes I know [[those letters are out of order|https://en.wikipedia.org/wiki/Coordinated_Universal_Time#Etymology]]) is a [[time standard|https://en.wikipedia.org/wiki/Coordinated_Universal_Time]] by which other time zones are compared. The standard is kept based on atomic measurements, but is periodically adjusted by inserting [[leap seconds|https://en.wikipedia.org/wiki/Leap_second]], to keep it close to UT1, with the goal of preventing them from drifting more than a second apart. The correct way to describe the US Eastern time zone, not on Daylight Saving Time, for comparative purposes, is “UTC minus 5 hours”.\\n* ''UT1'' is [[another time standard|https://en.wikipedia.org/wiki/Universal_Time#Versions]] based on the progress of the Earth's motion around the Sun. UT1 is relevant here because for many purposes, like navigation, people consider //it//, rather than “UTC”, the reference for “GMT”.\\n* ''GMT'' is also the [[name of a time zone|https://en.wikipedia.org/wiki/Greenwich_Mean_Time]] which has an offset of UTC+0. Prior to the introduction of the UTC standard, it was the normal means of measuring time zone offsets.\\n\\nConfused yet? Good.\"},\"Ltc:JsonSupport\":{\"title\":\"Ltc:JsonSupport\",\"created\":\"20241008121325813\",\"description\":\"are supported\",\"modified\":\"20241008122028816\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"TiddlyWiki does internally know how to handle more complex JSON. There is a set of filter operators such as <a href=\\\"https://tiddlywiki.com/#jsonget%20Operator\\\" class=\\\"tc-tiddlylink-external\\\">`jsonget`</a> that you can use to work with it. However, you'll need to use filters to work with such JSON; the data tiddler syntax will not work.\"},\"Ltc:ListLinksProcedure\":{\"title\":\"Ltc:ListLinksProcedure\",\"created\":\"20240925234017207\",\"description\":\"procedure\",\"modified\":\"20240925234323502\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Yet again, it's actually a [[macro|Macros]].\"},\"Ltc:MostRecentHundred\":{\"title\":\"Ltc:MostRecentHundred\",\"created\":\"20210409122941649\",\"description\":\"the most recent 100 tiddlers you edited\",\"modified\":\"20210409123258096\",\"tags\":\"Lie\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Actually, TiddlyWiki selects entire days on which tiddlers were edited, one by one, stopping when it has selected a total of at least 100 tiddlers. This means that, if you count, there are usually slightly more than 100. For instance, suppose that TiddlyWiki has selected 98 tiddlers so far and reaches August 12, on which 4 tiddlers were edited. Since TiddlyWiki will always include all edits for any day it selects, the list will end up with 102 tiddlers in it.\"},\"Ltc:NowProcedure\":{\"title\":\"Ltc:NowProcedure\",\"created\":\"20240924000524807\",\"description\":\"procedure\",\"modified\":\"20240924000557333\",\"tags\":\"Lie\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"`now` is actually a [[macro|Macros]], not a procedure.\"},\"Ltc:PrependsGlobals\":{\"title\":\"Ltc:PrependsGlobals\",\"created\":\"20240907040652083\",\"description\":\"When TiddlyWiki displays a tiddler, it looks through all tiddlers tagged [[$:/tags/Global]], gathers the procedures they contain, and prepends them to the wikitext of the tiddler being displayed.\",\"modified\":\"20240907041408724\",\"tags\":\"Lie\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"In reality, this happens as part of various internal [[templates|Templates and the Current Tiddler]] used to render your wiki, rather than immediately before rendering each tiddler. We'll learn much more about this in chapter 7, [[Looking Under the Hood]], and a bit more at the end of the section.\"},\"Ltc:ProcedureBodyRendered\":{\"title\":\"Ltc:ProcedureBodyRendered\",\"created\":\"20240616165224649\",\"description\":\"It will render this wikitext\",\"modified\":\"20240928204733107\",\"tags\":\"Lie\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"There's a very important exception: if the procedure call is used as the value of a widget or HTML element's attribute, TiddlyWiki doesn't render anything or substitute any variables, it uses the procedure body literally, with any transclusions -- including transclusions of the parameters of the procedure -- inside it intact. We'll explore the consequences of this later.\"},\"Ltc:SpanInlineMode\":{\"title\":\"Ltc:SpanInlineMode\",\"created\":\"20210116175307438\",\"description\":\"are ordinarily rendered in inline mode\",\"modified\":\"20210121003920030\",\"tags\":\"Lie\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"It would be more correct to say that `<div>` elements //participate in a block formatting context//, while `<span>` elements //participate in an inline formatting context//. The context is how each element itself is laid out with respect to its neighbors. But the element's content is laid out in a different context, which means it might not use the same layout mode! For instance, `<span>` elements may contain elements which will be laid out in a block context, despite themselves being laid out in an inline context (this is generally not a good idea, but it does work).\\n\\nYou can see this in the following example, where a paragraph (a block element) is nested inside of a span (an inline element) which also contains some raw text. The span containing the paragraph is shown in orange for clarity:\\n\\n{{Sn:BlockInlineContextLtc||MagicSnippet}}\\n\\nThis is unlikely to be something you need to worry about when writing in wikitext, though, unless you are trying to create complex custom [[stylesheets|Stylesheets]] to format your tiddlers.\"},\"Ltc:TabsProcedure\":{\"title\":\"Ltc:TabsProcedure\",\"created\":\"20240923234949881\",\"description\":\"procedure\",\"modified\":\"20240925031859355\",\"tags\":\"Lie\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"`tabs` is actually a macro, not a procedure. The distinction is unimportant at the moment; we'll talk more about [[macros|Macros]] in <<gtw.link-chapter-number \\\"Macros, Wikification, and Widgets\\\">>.\"},\"Ltc:TagsComeInPairs\":{\"title\":\"Ltc:TagsComeInPairs\",\"created\":\"20210124035422845\",\"description\":\"Tags always come in pairs\",\"modified\":\"20210124035402745\",\"tags\":\"Lie\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"A few HTML tags, called //void tags//, don't come in pairs. We'll talk about void tags later in the section.\"},\"Ltc:TempNotSaved\":{\"title\":\"Ltc:TempNotSaved\",\"created\":\"20210418152518443\",\"description\":\"are not saved with your wiki\",\"modified\":\"20210418152628904\",\"tags\":\"Lie\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Actually, it depends on [[what saver|Options for Saving and Hosting Your Wiki]] you are using -- some savers won't discard temporary tiddlers. But you should always assume that they'll go away, to avoid creating a wiki that only works with some savers.\"},\"Ltc:TiddlerDoingTransclusion\":{\"title\":\"Ltc:TiddlerDoingTransclusion\",\"created\":\"20210206174218963\",\"description\":\"in the tiddler doing the transclusion\",\"modified\":\"20210206174246923\",\"tags\":\"Lie\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Actually, as we'll see later in the section, a template can be made to refer to information in any tiddler you like. The tiddler containing the reference information is chosen at the time the transclusion is requested, and it defaults to the tiddler doing the transclusion.\"},\"Ltc:TwoWaysToConcatenate\":{\"title\":\"Ltc:TwoWaysToConcatenate\",\"created\":\"20210818124538866\",\"description\":\"two ways\",\"modified\":\"20210818125040615\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"You could also use a `$wikify` widget, as explained in [[Wikification]]:\\n\\n{{Sn:WikifyConcatenation||MagicSnippet}}\\n\\nThis works because TiddlyWiki acts like `{{!!title}}.png` is directly within the text of a tiddler when you use the `$wikify` widget, and as we'll see in another example further along in the section, putting a transclusion adjacent to constant text works fine in running text.\\n\\nHowever, the `$wikify` widget unnecessarily complicates things here, and it tends to be slower than solutions that don't use it, so it's not normally a good solution for simple problems like this one.\"},\"Ltc:WidgetsExtension\":{\"title\":\"Ltc:WidgetsExtension\",\"created\":\"20210116201528646\",\"description\":\"are a TiddlyWiki extension\",\"modified\":\"20241015031926020\",\"tags\":\"Lie\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Actually, widgets have a more complex role in the rendering of pages than I'm letting on when I claim that wikitext is a superset of HTML and that widgets are an extension to HTML. When a tiddler is being rendered, everything in its wikitext is transformed into underlying widgets, including HTML that you've embedded in your wikitext. Once this //widget tree// has been built, TiddlyWiki can convert it back to the HTML that causes the page to display in your web browser. `$widget`s in pages aren't an extra feature added to wikitext, but a means of directly creating a widget in TiddlyWiki's underlying representation of the page, rather than allowing wikitext or HTML to be transformed into a widget by TiddlyWiki.\\n\\nYou can read more about this in the [[Widgets|https://tiddlywiki.com/dev/#Widgets]] section of the TiddlyWikiDev wiki.\\n\\n[[Custom Widgets]] are an additional complication, in that they are actually procedures (which generate wikitext widgets) underneath.\\n\\nUnless you dig into the JavaScript code underlying TiddlyWiki, this is not a detail you need to concern yourself with.\"},\"Macros, Wikification, and Widgets\":{\"title\":\"Macros, Wikification, and Widgets\",\"caption\":\"6: Macros, Wikification, and Widgets\",\"created\":\"20240907014711777\",\"description\":\"In which we learn the details of how TiddlyWiki processes wikitext, to help ourselves better understand how transclusion works and work around some difficulties we experienced in the Transclusion chapter.\",\"list\":\"Macros Wikification [[Block Mode and Inline Mode]] [[Custom Widgets]] [[Choosing a Type of Transclusion]] [[Updated Summary of Transclusion Syntax]]\",\"modified\":\"20241013010241449\",\"parent\":\"Outline\",\"tags\":\"Chapter\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"In <<gtw.link-chapter-number \\\"Transclusion\\\">>, we learned all about how you can transclude wikitext into other wikitext. The details of reusing such a complicated medium as wikitext can be complex, though, so transclusions don't always behave exactly as you might expect at first. There are good reasons for these unexpected behaviors, but to fully understand them and never be confused, you need to learn a few technical details. That is the focus of this chapter.\\n\\nWe'll also learn about ''macros'', an older form of procedures that have some unexpected tricky gotchas (that's why they go in this chapter), and ''custom widgets'', a form of procedure that you can call like a widget.\\n\\nThis should be a relatively quick chapter, and then we'll be ready to [[look under the hood|Looking Under the Hood]] and see how to customize TiddlyWiki in almost arbitrary ways using the tools we've learned!\\n\\n!! In this chapter\\n\\n{{||ChapterOutlineTemplate}}\"},\"Macros\":{\"title\":\"Macros\",\"created\":\"20200603011212616\",\"description\":\"Macros are an older version of procedures that handle their parameters differently.\",\"modified\":\"20241016130309100\",\"parent\":\"Macros, Wikification, and Widgets\",\"tags\":\"Section Concept\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"''Macros'', like [[Variables]], [[Procedures]], and [[Functions]], are a mechanism for reusing wikitext in different places. And like procedures and functions, they're really a special type of variable. They're most closely related to procedures: they're used to specify text which is mostly constant but changes in a small part or two. Indeed, they behave exactly like procedures in almost all ways, with one very important exception: they handle their parameters completely differently.\\n\\nOnce upon a time, macros were the //only// way to create a variable with some parts that changed -- procedures didn't exist at all. Nowadays, it is usually best to use procedures rather than macros. There are two reasons for this: first, the way macros handle their parameters tends to be much more difficult to understand than the way procedures do (this is why we've put off learning about macros until much later). Second, the way macros handle their parameters can cause subtle bugs when tiddler titles or fields contain certain characters, and it is difficult to impossible to defend against them. (We'll see one example of this in an exercise at the end of this section; see [[Macro Pitfalls|https://tiddlywiki.com/#Macro%20Pitfalls]] in the TiddlyWiki documentation for more.)\\n\\nNevertheless, there are times when using a macro can make something that would otherwise be quite awkward extremely easy, and if you explore older wikis, plugins, or the TiddlyWiki core, you will have to understand macros to follow the wikitext there, so learning how they work is important no matter what.\\n\\nMacro definitions work just like procedure and function definitions; they use the pragma `\\\\define`. For example, we can say:\\n\\n{{Sn:BrokenWikipediaLinkMacro||MagicSnippet}}\\n\\nBut wait -- why is the link missing from the output?\\n\\n\\n!! Macro parameter handling\\n\\nWhen you call a procedure, the values of its parameters are exposed as variables. But when you call a macro, the values of its parameters are not directly exposed as variables with that name. Instead you use one of two special syntaxes to get the values of its parameters:\\n\\n* `<<__parameter__>>` -- when you use this syntax, the parameter is treated ''as a variable'', like in a procedure. The difference is that you have to use this more verbose syntax. (Inside a filter expression, the syntax is `<__parameter__>`: the underscores stay doubled while the angle brackets get demoted to singles.)\\n* `$parameter$` -- when you use this syntax, the parameter is ''incorporated into the body of the macro'' by //text substitution//. We'll talk more about what this means in a moment.\\n\\nWhile you'll see the `<<__parameter__>>` syntax frequently in older wikitext, nowadays if you're using a macro rather than a procedure, it's probably because you wanted the text substitution behavior and only macros support that, so you probably won't use this syntax yourself too often. Nevertheless, it's good form to choose it instead of `$parameter$` anytime that either would work fine, because you'll avoid exposing yourself to a number of gotchas possible only with text substitution.\\n\\n\\n!! Text substitution\\n\\nArmed with the new syntax, we can fix our example to work as a macro:\\n\\n{{Sn:FixedWikipediaLinkMacro||MagicSnippet}}\\n\\nTake another look at that example. Notice something odd in the body of the macro? Right, we didn't use the substituted attribute value [[backtick syntax|Using Variables as Attributes]] for the `href` attribute to combine `articleName` with the rest of the URL. Instead, we just quoted it normally -- yet we got the correct result.\\n\\nThat's because the `$bare dollar signs$` syntax performs ''text substitution''. This is the key difference between macros and procedures. In a procedure, all variable references are processed as normal wikitext, just like they would be outside a procedure. But in a macro, when you call the macro, TiddlyWiki momentarily ''stops processing wikitext'' and first substitutes the macro's parameters into the text of the macro. This is completely unaware of TiddlyWiki syntax in any way and operates before rendering wikitext -- you can think of it like automatically copying and pasting the value of the parameter over the `$placeholder$` in the macro. Only after text substitution is completed does the content of the macro get rendered as wikitext in its original context.\\n\\nTo see how this works, let's try defining `wikipediaLink` by using a wikitext link instead of a widget. This will completely fail for a procedure, because putting variable/parameter references inside wikitext links is invalid syntax, but will work totally fine for a macro, because the replacement happens before we start caring about syntax:\\n\\n{{Sn:WikipediaLinkProcVsMacro||MagicSnippet}}\\n\\nYou may occasionally see text substitution called //textual substitution// or just //substitution//; we will use the term //text substitution// throughout this book.\\n\\n\\n!! Text substitution with variables\\n\\nWithin a macro, you can also perform text substitution on a variable that is not a parameter of the macro using the `$(parenthesized dollar signs)$` syntax. You may notice this syntax is familiar -- it's the same syntax used within [[substituted attribute values|Using Variables as Attributes]] to combine variables with other text -- and it does exactly the same thing (performs text substitution using the value of the variable). But in a macro, you can do this anywhere, not just within backticks.\\n\\nYou might be asking, why would we want to use a variable rather than a parameter to change the behavior of a macro? Generally, if we have the choice, we don't; it's clearer what information the macro is using when we use parameters, and it's not a good thing when macros do something surprising. (See the [[Principle of Least Astonishment|https://en.wikipedia.org/wiki/Principle_of_least_astonishment]].) However, there are some cases where it saves us a lot of trouble – the first exercise will be an example of that. (Hint, hint.)\\n\\n\\n!! The `$macrocall` widget\\n\\nCalling a macro works just like calling a procedure -- you can do it with `<<angle brackets>>` or with the `$variable` attribute of the `$transclude` widget.\\n\\nIn older versions of TiddlyWiki, before procedures existed, you called macros with the ''`$macrocall` widget'' rather than the `$transclude` widget. These two syntaxes are equivalent (in fact, you can even call procedures with the `$macrocall` widget if you want to):\\n\\n```html\\n<$transclude $variable=\\\"mymacro\\\" param=\\\"value\\\"/>\\n<$macrocall $name=\\\"mymacro\\\" param=\\\"value\\\"/>\\n```\\n\\nIt's recommended that you use the new `$transclude` syntax for both macros and procedures, but you'll see the `$macrocall` widget in a lot of old wikitext, so it's good to be aware of.\\n\\n\\n!! Exercises\\n\\n{{Ex:TelephoneLink||ExerciseTemplate}}\\n{{Ex:TelephoneLinkBrokenSolution||ExerciseTemplate}}\\n{{Ex:FilteredTelephoneLink||ExerciseTemplate}}\\n{{Ex:BypassSecurityWithTextSubstitution||ExerciseTemplate}}\\n{{Ex:PreserveSecurityWithTextSubstitution||ExerciseTemplate}}\\n{{Ex:RecastProceduresAsMacros||ExerciseTemplate}}\\n\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\"},\"MagicSnippet\":{\"title\":\"MagicSnippet\",\"created\":\"20201231200111052\",\"modified\":\"20210819204041169\",\"tags\":\"Template\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\define deltid() <$action-deletetiddler $tiddler=<<currentTiddler>>/>\\n\\n<$list filter=\\\"[<renderingStatic>!match[yes]]\\\" variable=_ emptyMessage={{$:/sib/Snippet/MagicSideBySide}}>\\n\\n<div style=\\\"float: right; margin-top:10px; font-size:14px;\\\">\\n<$list filter=\\\"[is[shadow]field:title<currentTiddler>]\\\">\\nmodified by you (<$button class=\\\"tc-btn-invisible tc-tiddlylink\\\" actions=<<deltid>>>restore original</$button>)&nbsp;·\\n</$list>\\n<$button message=\\\"tm-copy-to-clipboard\\\" param={{!!text}} class=\\\"tc-btn-invisible tc-tiddlylink\\\">copy wikitext to clipboard</$button>\\n\\n</div>\\n<<tabs \\\"$:/sib/Snippet/TiddlerAsWikitext $:/sib/Snippet/TiddlerAsRendered $:/sib/Snippet/MagicSideBySide $:/sib/Snippet/MagicEditor\\\" default:\\\"$:/sib/Snippet/MagicSideBySide\\\" class:\\\"sib-magic-bottom-border\\\">>\\n\\n</$list>\"},\"Meeting Tiddlers\":{\"title\":\"Meeting Tiddlers\",\"created\":\"20200531011856906\",\"description\":\"How to take notes on meetings, excising existing notes and using TiddlyWiki's timestamp format to identify when the meeting happened.\",\"modified\":\"20241010130131304\",\"parent\":\"The Shape of TiddlyWiki\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"The next tiddler type to consider is the ''meeting''. If you stop and think about it, we probably already have a meeting, we just haven't created a tiddler for it yet: Jane met with our fearless wiki-writing protagonist to help her set up her computer, according to the journal entry we wrote. So let's create a meeting tiddler.\\n\\n!! Excising a meeting\\n\\nIt's common in TiddlyWiki to write something in a tiddler and then realize it should be its own smaller tiddler. In fact, it's so common there's a special button on the edit toolbar for this operation, called ''excising''. Let's excise the line about Jane welcoming our protagonist from our journal entry. To do this, edit the journal tiddler, select the sentence, and click the appropriate button <<textual-button \\\"excise\\\">> on the editor toolbar (just a little bit to the right of the heading icons). Let's call the new tiddler `EmployeeProfileSetupMeeting`.\\n\\nYou can see there's a choice for what we want to replace the excised text with: link, transclusion, or macro. Transclusions and macros are kind of fancy, so let's stick with the basic and easy-to-understand link for now; we'll explore [[transclusions|Field Transclusions]] and [[macros|Macros]] in detail later on. Click //Perform excision//, and the selected text will be replaced with a link. Save the tiddler and click the link, and we're looking at our new meeting tiddler, containing the text we originally selected.\\n\\n\\n!! Adding metadata\\n\\nLet's edit our new meeting tiddler and give it a tag of `Meeting`, to start with. We're also going to want to add some other metadata: we said in our requirements that we wanted to be able to find meeting notes based on (1) when the meeting happened and (2) who attended.\\n\\nLet's start with ''who attended''. We have at least two obvious options here. One is to simply make sure that we link to everyone involved in the meeting somewhere within the text of the tiddler. Another is to explicitly list out the participants in a field. The former option is probably easier, but you're more likely to forget someone, and you won't be able to distinguish between people who were //at// the meeting and people who were merely //discussed// at the meeting. Let's be a bit more precise and create a field, called `participants`, and set its value to `JaneDoe`. (We'd be more precise to add ourselves too; but most people do not often take notes on meetings they're not at, so this likely isn't necessary unless you frequently receive meeting notes from others that you'd like to import into your wiki.)\\n\\nThe other way we wanted to be able to slice our meetings is by ''when they happened''. One straightforward way to handle this would be to use the created time on the tiddler, which TiddlyWiki fills in automatically whenever you create one. However, this means that if we start our meeting notes prior to the meeting (to stub out an agenda if we're running the meeting), or fill them in afterwards (because we didn't have our laptop at the meeting), the time will be wrong. So for the sake of demonstration, let's create our own date/time field.\\n\\n{{Datetime Format}}\\n\\nThis can be a little irritating to work with, but there are several ways we can make it easier: plugins are available that can create a special date/time picker we can include on our meeting tiddlers, or we can autofill the time when we create the tiddler, thus making it easier to make any minor adjustments necessary. Let's do it manually for the moment so you learn how it works. (In an [[exercise|Ex:NewMeetingButton]] in chapter 5, we'll improve this using the autofill approach.) Create a new field called `at`, work out your current date and time in TiddlyWiki's date format, as described in the preceding paragraph, fill that in as the value of the `at` field, and click the ''add'' button.\\n\\nTo check your work, paste the following magic snippet into the text of the tiddler and have a peek at the live preview, which should show the date you've entered in a nice human-readable format. We'll learn what exactly this snippet does in [[Working with Dates]].\\n\\n{{Sn:MagicDateSnippet||BasicSnippet}}\\n\\nSave this tiddler, and we've got our first meeting.\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\"},\"Metadata\":{\"text\":\"{\\n\\t\\\"version\\\": \\\"2.0.0\\\",\\n\\t\\\"tw-version\\\": \\\"5.3.5\\\",\\n\\t\\\"project-url\\\": \\\"https://groktiddlywiki.com\\\"\\n}\\n\",\"type\":\"application/json\",\"created\":\"20210130180352000\",\"modified\":\"20241019233613624\",\"tags\":\"\",\"title\":\"Metadata\"},\"Miscellaneous Widgets\":{\"created\":\"20210206180940598\",\"text\":\"A handful of widgets are frequently useful but haven't been needed much or at all in this book thus far. Here is a quick introduction to each of them. For a full listing of all widgets, visit the [[appropriate page of the TiddlyWiki documentation|https://tiddlywiki.com/#Widgets]].\\n\\n\\n!! `$count`\\n\\nThis is a shorter way of displaying the number of tiddlers that match a filter.\\n\\n{{Sn:CountWidget||MagicSnippet}}\\n\\n\\n!! `$tiddler`\\n\\nSeveral times in passing, we've mentioned that the `$tiddler` widget is a friendly way of setting the current tiddler. In truth, it actually does a little more than just setting the `currentTiddler` variable would, by [[setting some variables to CSS classes appropriate to the new current tiddler|https://tiddlywiki.com/#TiddlerWidget]]. This is more esoterica than anything else, but on occasion having these correct might be important or useful.\\n\\n{{Sn:TiddlerWidget||MagicSnippet}}\\n\\n\\n!! `$radio`\\n\\nThis allows you to create a ''radio button''. Radio buttons work much like the `$edit-text` widget and the `$checkbox` widget. You use them by listing several values the user can choose from in separate `$radio` widgets, and TiddlyWiki will decide which one to show as selected based on the value of the bound field.\\n\\nThe `tiddler` attribute defaults to the current tiddler, and the `field` attribute to `text`, but either can be set to something else if desired. Below, we bind our radio buttons to the `text` field of a temporary tiddler.\\n\\n{{Sn:RadioExample||MagicSnippet}}\\n\\nNote the use of `&nbsp;` and `&ensp;` to handle spacing. These are called [[HTML entities|https://developer.mozilla.org/en-US/docs/Glossary/Entity]], a way of writing characters that don't have keys on the keyboard or have special meaning in HTML. The former is a //non-breaking space// (the same width as a normal space, but the browser will prefer not to put a line break there, unless there is no other way to make the line fit on the screen), and the latter is an //en space// (longer than a normal space, the width of a lowercase //n//). A more flexible way to handle the spacing between the buttons would be using [[CSS rules|Stylesheets]], but spaces are simpler and often good enough.\\n\\n\\n!! `$select`\\n\\nWhen you have more than a couple choices, you may wish to present them as a ''drop-down menu'' rather than as radio buttons. Let's rewrite the radio-buttons example to use a drop-down instead:\\n\\n{{Sn:SelectExample||MagicSnippet}}\\n\\nSometimes you might want to populate the drop-down menu dynamically, rather than listing out a number of options. This is easy to do with a `$list` widget:\\n\\n{{Sn:DynamicSelectExample||MagicSnippet}}\\n\\nYou can do something similar for radio buttons if you like, but it's more typical to use a drop-down when you aren't sure in advance what items will be in the list -- if at some point in the future there are unexpectedly 200 items rendering as radio buttons, your tiddler might be pretty hard to use!\\n\\n!! `$vars`\\n\\n`$vars` normally isn't useful anymore, but you are likely to encounter it in older wikitext, so it's good to know about. It's exactly the same thing as the `$let` widget, except  that it doesn't allow later variables named within the widget to refer to earlier ones. (That is, in a `$let` widget each variable is set before evaluating the value of the next attribute, but in a `$vars` widget no new variables are set until the body of the widget begins.)\\n\\n\\n!! Exercises\\n\\n{{Ex:SetLetReplacement||ExerciseTemplate}}\\n{{Ex:CountWidgetReplacement||ExerciseTemplate}}\\n{{Ex:FamilyRadioButton||ExerciseTemplate}}\\n{{Ex:ContactCard||ExerciseTemplate}}\\n\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\",\"type\":\"text/vnd.tiddlywiki\",\"title\":\"Miscellaneous Widgets\",\"tags\":\"Section\",\"modified\":\"20241017010346729\",\"parent\":\"Tips and Tricks\",\"description\":\"A handful of widgets are frequently useful but haven't been needed or discussed in detail in this book thus far. \"},\"More Organizational Tools\":{\"title\":\"More Organizational Tools\",\"caption\":\"5: More Organizational Tools\",\"created\":\"20200607150802909\",\"description\":\"In which we cover miscellaneous TiddlyWiki features that didn't fit in any of the previous chapters, including advanced filters, images, and tabs.\",\"list\":\"[[Multi-Run Filters]] Functions [[Much More Than You Wanted to Know About Scopes]] [[Classifying Tags]] [[Images and Attachments]] Tabs [[Data Tiddlers]]\",\"modified\":\"20241016123120969\",\"parent\":\"Outline\",\"tags\":\"Chapter\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"At this point, we've seen most of the key concepts in TiddlyWiki. Some more technical and finicky ones remain for full mastery of TiddlyWiki, but before we worry about those, we're going to loop back to fill in a few gaps that we left for the sake of not spending too long on any single topic earlier.\\n\\nThis chapter has two parts. First we'll learn more about ''writing more complicated filters'', as well as splitting filters up into smaller chunks to make them easier to understand. Then we'll cover a bunch of ''small, simple ideas that don't fit anywhere else'', but are worth knowing about: managing scopes, giving tags classifications, attaching images and files to your wiki, putting information in tabs within a tiddler, and storing small nuggets of data together in data tiddlers.\\n\\n!! In this chapter\\n\\n{{||ChapterOutlineTemplate}}\"},\"Much More Than You Wanted to Know About Scopes\":{\"title\":\"Much More Than You Wanted to Know About Scopes\",\"created\":\"20200718014509693\",\"description\":\"Procedures and functions can be made available to all tiddlers in the wiki, or to some subset of tiddlers. The names of such procedures should be managed carefully to avoid conflicts.\",\"modified\":\"20241017013848716\",\"parent\":\"More Organizational Tools\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"So far, the scope of every [[variable|Variables]], [[procedure|Procedures]], or [[function|Functions]] we've written has been, at most, a single tiddler. That is, we can only refer to it within the same tiddler where we defined it. But often, we write a procedure that does something we need ''throughout our wiki''. If we had to copy and paste that procedure throughout many tiddlers, that would defeat the point; if we didn't mind copying and pasting, we wouldn't need a procedure in the first place! \\n\\n(For brevity, throughout the rest of this tiddler, we'll just talk about “procedures.” But unless otherwise noted, everything said in this section applies equally to functions, and for that matter [[macros|Macros]], which we haven't seen yet.)\\n\\nIt follows that we need some way to make a procedure accessible in multiple tiddlers -- that is, in the ''global scope''. (A procedure that's not in the global scope, but is accessible only within a single tiddler, is said to be in the ''local scope''.)\\n\\nThe mechanism is the `$:/tags/Global` tag. {{Ltc:PrependsGlobals||LieToChildrenTemplate}} Therefore, they're available for use in every tiddler.\\n\\n\\n!! Using global procedures\\n\\nCalling a procedure in the global scope works exactly the same way as calling any other procedure.\\n\\nWhen writing global procedures, it's normally best to put them in tiddlers that don't contain anything else, then tag these tiddlers `$:/tags/Global`. It's fine to put multiple global procedures in one tiddler, although if you want to be really tidy, putting each one in its own tiddler does have its benefits. In particular, you can do nifty things like add fields of metadata to their tiddlers and create automatic documentation; see [[an example in my Mosaic Muse wiki|https://mosmu.se/#%24%3A%2Fsib%2FDocumentation]].\\n\\n\\n!! Prefixing names\\n\\nYou might be wondering, why bother with local scopes at all? Why not just put every procedure in the global scope and not have to think about scopes?\\n\\nThe short answer is that the broader a scope you use, the more likely that you accidentally give two different things in different places the same name without realizing it. Name collisions create weird and difficult-to-track-down issues because TiddlyWiki no longer has any way to know which definition you want to use, so it has to pick one arbitrarily, and now a procedure call you thought would do one thing does something entirely different.\\n\\nThis may seem like a trivial problem that would rarely come up, but it happens surprisingly often, especially once you start sharing procedures with others. In particular, names you create and names someone else creates in a [[plugin|Plugins]] (or names two people created in two plugins that you're trying to use in the same wiki) can collide, a situation which is far more annoying to resolve than a collision you created yourself -- here you didn't write the procedures that are causing the collisions, and you probably had no idea they even existed in your wiki, so the cause of the problem won't be obvious at first.\\n\\nSo the first good practice to avoid name collisions is to ''only make a procedure global if you actually need to use it in multiple tiddlers''. We say you want to avoid //polluting the global scope// by putting things in it that don't need to be there. (Procedures you have no use for in the global scope are like trash. Some trash is inevitable, but you want it contained in an appropriate trash can, not randomly scattered across the street.)\\n\\nOf course, while limiting what you put in the global scope makes accidental name collisions much less likely, it doesn't make them impossible. So a second good practice is to ''prefix the names of your global procedures'' with something that nobody else is likely to use (for instance, your initials, or the name of your wiki). It's relatively likely that someone else would name a procedure `process-tiddlers`, for instance,  since there are many TiddlyWiki-related contexts in which such a name could make sense, but quite unlikely that someone else would name a procedure `bobwiki.process-tiddlers`. (Even if you're unlucky enough for someone else to use the prefix `bobwiki` in some content that you put in your wiki, the chance that they used both the same prefix //and// the same procedure name is much smaller.)\\n\\nOf course, the downside of adding a prefix is that it means additional typing every time you want to use a procedure, so many people prefer short prefixes. For instance, the TiddlyWiki core uses prefixes like `tc` for CSS classes (“tiddly-class”) and `tv` for variables (“tiddly-variable”). For things you plan to use extremely commonly, you might prefer to choose an evocative and uncommon name with no prefix.\\n\\nYou can use one prefix for your whole wiki, or several prefixes that separate your procedures into categories -- whatever helps you organize best. If you [[write plugins|Creating Plugins]], it's a good idea to use a prefix specific to that plugin, and be especially careful not to choose one someone else might choose by mistake.\\n\\nIn TiddlyWiki we typically use either a `-` or a `.` to separate a prefix and the rest of the name of the procedure, as in the example above. `-` is conventional for CSS classes and variable/procedure names, but if you're using a [[function|Functions]] or [[custom widget|Custom Widgets]], a `.` may make more sense given that you will need to include one anyway if you want to refer to it in certain ways.\\n\\n\\n!! Nested scopes\\n\\nThe two good practices above leave one important problem unsolved: oftentimes a procedure A needs to refer to sub-procedures B and C, and while we need A to be global, we don't need B and C to be global. Since `$:/tags/Global` applies to an entire tiddler, when we make A global, if we have B and C in the same tiddler as A, they automatically become global as well. We could put B and C in a different tiddler, but then we'd have to make that other tiddler accessible within A to be able to use B and C (e.g., by tagging B and C's tiddler `$:/tags/Global`), which would make them global all over again!\\n\\nThere are two useful ways to address this problem.\\n\\nFirst, you can put definitions of procedures //inside of// other procedures, or definitions of functions inside of procedures. (You can't put anything inside a function, because there is no syntax you can use to identify which part of the body of a function is a filter and which is something else.) When a procedure or function is inside another, ''only the outermost procedure actually gets a name in the surrounding scope'' -- the nested procedures or functions have their scope limited to the outer procedure and are invisible everywhere else.\\n\\nThe syntax looks like this:\\n\\n```\\n\\\\procedure global-proc()\\n  \\\\procedure subproc(tiddler)\\n    ...render something with it\\n  \\\\end subproc\\n  \\\\function subfunction() [prefix[X]]\\n\\n  <$list filter=\\\"[function[subfunction]]\\\">\\n    <$transclude\\n      $variable=<<subproc1>>\\n      tiddler=<<currentTiddler>>\\n    />\\n  </$list>\\n\\\\end global-proc\\n```\\n\\nFor the most part, you just literally put the inner pragmas inside the outer one, but do notice that you need to ''repeat the name of the procedure or function you're closing'' after `\\\\end`, so that TiddlyWiki knows which one is ending. (You can do this whenever you want, even if there aren't nested scopes, but you //must// do it if there is nesting.) There's no limit to how many levels deep you can nest procedures, though in practice more than three levels will probably be difficult to understand!\\n\\nSecond, if nesting doesn't work (perhaps because you need to use the sub-procedures in several procedures that you want to be global, rather than just one), you can ''use a prefix'' for the local procedures. You might use an empty prefix (`.`) or a `local.` prefix, for instance. As long as nobody expects a procedure in that prefix to work globally, this is very safe, because a procedure defined within the scope of a single tiddler takes precedence over a procedure in the global scope (recall the [[nested scopes exercise|Ex:NestedSets]] way back when we first learned about variables). So even if you have 17 different tiddlers that each define a globally available procedure `local.x`, within each of those tiddlers, `local.x` will still mean whatever it was defined to be within that tiddler. Of course, if you try to call `local.x` in some other tiddler that doesn't have its own definition of `local.x`, all bets are off -- just about anything might happen!\\n\\nRemember that you only need to worry about any of this when you're inside a tiddler with the tag `$:/tags/Global`. Other tiddlers don't put anything in the global scope, so if you're writing a procedure that will be limited to a single tiddler, you can use any names you want without worrying about polluting the global scope.\\n\\n\\n!! More specific scopes\\n\\nWith the aid of prefixes, you can get along just fine using just tiddler scopes and the global scope. For completeness, though, we should point out that it's possible to choose scopes for a procedure that are broader than a single tiddler, but narrower than the global scope, and if you want to be particularly tidy about your scopes, you may find these techniques useful.\\n\\nThere are two additional system tags, `$:/tags/Global/View`, and `$:/tags/Global/View/Body`, which allow you to make some procedure //almost// but not quite global. The first makes it available when rendering all parts of [[the view template|The View Template]] (thus every tiddler), but not within other parts of the interface such as the sidebar. The second additionally restricts it to the //body// of the view template, not any of the other elements like the title or any custom templates you might add. This effectively makes it available within the wikitext of all your content tiddlers, but nowhere else. (We'll talk more about [[the view template|The View Template]] in chapter 7.)\\n\\nYou can also use the ''`\\\\import` pragma'' in any tiddler to explicitly include procedures from some other tiddler in that tiddler. This way, you could, for example, include a set of procedures in three specific tiddlers, but no others (though note that if one of those tiddlers X transcludes other tiddlers after doing the `\\\\import`, the imported procedures will be available within that transclusion as well, just like they would be if they'd been actually within X's wikitext). `\\\\import` takes a filter as an argument, so to import procedures from all tiddlers tagged `MyAwesomePrivateProcedures`, you would put the following at the top of a tiddler:\\n\\n```html\\n\\\\import [tag[MyAwesomePrivateProcedures]]\\n```\\n\\nWe said earlier that when TiddlyWiki renders a tiddler, it prepends the tiddler's wikitext with all global procedure definitions -- but that this was not quite true. We can now explain how it actually works: TiddlyWiki imports the global procedures using the `\\\\import` pragma on the //page template// (`$:/core/ui/PageTemplate`), which is responsible for [[transcluding|Transclusion]] all other parts of the wiki that appear on screen at any given time. It uses similar pragmas on the view template and the body of the view template for the other system tags.\\n\\n\\n!! The legacy macro tag\\n\\nIn older versions of TiddlyWiki, we made things global by tagging them `$:/tags/Macro` rather than `$:/tags/Global`. This was always a somewhat poorly chosen name, and is an even worse one now that procedures and functions exist alongside [[macros|Macros]], so you should not use this tag for any new procedures, functions, or macros you want to make global. However, this tag still works (it does the same thing as `$:/tags/Global`), and you'll still see it used for many parts of the TiddlyWiki core and in many plugins, so you should remember what it does.\\n\\n\\n!! Exercises\\n\\n{{Ex:MakeGlobalProcedures||ExerciseTemplate}}\\n{{Ex:ImportScopes||ExerciseTemplate}}\\n{{Ex:ReadingDefaultGlobals||ExerciseTemplate}}\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\"},\"Multi-Run Filters\":{\"title\":\"Multi-Run Filters\",\"created\":\"20200715220657649\",\"description\":\"Filters can be made more complex and powerful by including more than one run.\",\"modified\":\"20241016123714639\",\"parent\":\"More Organizational Tools\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"The last time we discussed filters in depth, back in the [[Finding Things|Filing and Organizing]] chapter, we learned that there is such a thing as a [[filter run|Using Filter Expressions]], indicated by those outer square brackets, and that you can have more than one filter run in a filter. So what does having more than one run do for us?\\n\\nEssentially, it lets us build up more complicated logic. With a single run, we can only find tiddlers that match //all// of a set of conditions. With multiple runs, we can combine AND, OR, and NOT conditions as much as we like, although due to the “pipeline” nature of filters, the logic works a little differently than the conventional Boolean logic used in Excel or a typical programming language.\\n\\n\\n!! Creating OR conditions\\n\\nLet's imagine we want to find all tiddlers which are ''either meetings or journal entries''. If we limit ourselves to a single run, it's easy to find tiddlers which have //both// tags by using two steps in the run: `[tag[Journal]tag[Meeting]]`. But the only way we can find ones that have //either// tag without using multiple runs is to run two filters and manually combine the results in our heads. That's no good at all!\\n\\nFortunately, all we have to do is ''create two runs'' by putting the filter steps in different outer sets of square brackets:\\n\\n```html\\n[tag[Journal]] [tag[Meeting]]\\n```\\n\\nTiddlyWiki will process each of these runs separately, gathering first all the tiddlers that are tagged //Journal// and then all the tiddlers that are tagged //Meeting//, and combine the results. Unless we add an additional sort step or the same tiddler has both tags (more on that in a moment), all of the tiddlers tagged //Journal// will come before all the tiddlers tagged //Meeting//.\\n\\nWe can, of course, add additional steps to either of the filter runs. For instance, maybe we want to see all journal entries, along with only the meetings that included Jane:\\n\\n```html\\n[tag[Journal]] [tag[Meeting]contains:participants[JaneDoe]]\\n```\\n\\nPutting spaces between filter runs is optional but can help to make filters more readable. (Don't put spaces between filter //steps//, though: as noted in [[Using Filter Expressions]], your filter won't work as expected if you do that.)\\n\\nAnother extremely common OR condition is a simple ''list of tiddlers''. For instance, imagine we want to get tiddlers A, B, and C:\\n\\n```html\\n[[A]] [[B]] [[C]]\\n```\\n\\nOr, since the names A, B, and C don't have spaces in them, we can just say:\\n\\n```html\\nA B C\\n```\\n\\nYou may notice that this is exactly the same format as a [[tiddler list|Ordering Tiddlers]]. This, incidentally, is why, in a note at the end of [[Filters and Transclusions]], we were able to set the `filter` attribute of a list to simply the `{{!!family}}` list field and have it work like a filter.\\n\\nDon't, however, take this to mean that tiddler lists and filters are the same thing. While a tiddler list is a valid filter, most filters are not valid tiddler lists; you can't, for example, use a filter run like `[tag[Contact]]` as an element of a tiddler list and expect it to work.\\n\\n\\n!! Dominant appending\\n\\nYou might wonder what happens if the same tiddler comes up in multiple filter runs. Let's try it. Start with this filter:\\n\\n```html\\n[tag[Meeting]]\\n```\\n\\nYou should see several meetings. Now try adding tiddlers that are tagged `OnboardingHr`, since we have at least one meeting that's part of that project:\\n\\n```html\\n[tag[Meeting]] [tag[OnboardingHr]]\\n```\\n\\nYou should notice several things. First, no duplicate entries were created. But second, the //order// changed. Why's that?\\n\\nThink about how TiddlyWiki works //within// filter runs for a moment. It starts with the leftmost filter step, then passes the output of that step to the next step to the right, which does something with that output and produces its own output, and so on until we reach the end of the filter run.\\n\\nTiddlyWiki does something similar with filter runs. The output of the first filter run doesn't affect the input of the second filter run -- the second filter run gets a fresh set of input tiddlers -- but TiddlyWiki does execute each filter run in order from left to right and combine the results as it finishes each. It's the way it combines the results that can get tricky.\\n\\nWe'll call the output of the filter run that's currently being executed the //current run// and the set of output produced from combining all of the previous filter runs the //accumulated results//. (The accumulated results can be empty -- for instance, if this is the first filter run, or if all previous filter runs returned no results.)\\n\\nWhen a run finishes, TiddlyWiki ''dominantly appends'' the output from the current run to the accumulated results. During a dominant append, if the item doesn't exist in the list of accumulated results already, it goes at the end of the list, as you would expect. However, if the item already exists in the accumulated results, it is actually //removed// from the list in its current position and then added back at the end. This is why you saw the order of the list change -- an item that wasn't already the last item in the accumulated results was shifted to the end because it also showed up in the second run.\\n\\n\\n!! Run prefixes\\n\\nDominant appending is the default way to combine multiple runs. But you can change this behavior by placing the character `=`, `+`, `-`, or `~` (or the equivalent named prefixes `:all`, `:and`, `:except`, and `:else`), directly in front of the second filter run, e.g., `[tag[Journal]] =[tag[Meeting]]`. These work as follows:\\n\\n; `=` or `:all`\\n: Just ''slap the results of the runs together'', rather than performing deduplication by dominantly appending; `A B C` and `B C D` results in `A B C B C D`, rather than the default of `A B C D`.\\n\\n; `+` or `:and`\\n: A few paragraphs up, we said each filter run gets its own input. That's not quite true; actually, each filter run gets its own input //unless// you put a `+` in front of it, in which case ''its input is the accumulated results and its output replaces everything output so far''. You can usually accomplish the same thing by just combining the filter runs together into one run (e.g., `[tag[Meeting]] +[tag[Journal]]` is an overly complex way to say `[tag[Meeting]tag[Journal]]`), but sometimes you'll want to do something like OR together the results of several filter runs and then AND their results with another run.\\n\\n; `-` or `:except`\\n: ''Remove items in this run'' from the accumulated results, if they were present (Boolean NOT condition).\\n\\n; `~` or `:else`\\n: ''If the list of accumulated results is currently empty'', execute this run and make its output the accumulated results. Otherwise, ignore the run completely.\\n\\nThe prefix ''`:or`'' is equivalent to no prefix.\\n\\nThere are a number of other prefixes, added in more recent versions, that are only available in the named variants. They're a little harder to understand, and they're less often necessary. You can skip them for now if you like, and if we need one in the exercises throughout the rest of //Grok TiddlyWiki//, instructions will be provided in the exercise. But they're still quite useful, so you might want to come back on your own and explore them in the future!\\n\\n<$details summary=\\\"More named prefixes\\\">\\n\\n; `:cascade`\\n: Evaluate this filter run, which should return a series of other //filters//. Then evaluate those filters in turn on the input, and output the results of the first filter which has a value. This is used with the [[cascade|https://tiddlywiki.com/#Cascades]] customization mechanism; we won't cover cascades in detail in //Grok TiddlyWiki//, but once you've worked your way through the book they should be easy to pick up from the documentation.\\n\\n; `:filter`\\n: Evaluate the filter run on each tiddler in the accumulated results and ''output elements where the filter expression does not evaluate to an empty list''. This differs from `+` in that `+` makes the output of its run the accumulated results. `:filter` doesn't use the output of its run at all, except to check whether it's non-empty.\\n\\n; `:intersection`\\n: Like `+`, but ''the second filter run is evaluated completely before being ANDed''. The TiddlyWiki documentation gives this example: if you are trying to see what tags two tiddlers have in common, you might say `[[Tiddler 1]tags[]] +[[Tiddler 2]tags[]]`; but this wouldn't work because `[[Tiddler 2]]` is a constructor and will wipe out anything from the first filter run. `:intersection` evaluates the two filter runs in isolation, so that the ANDing takes place on the sets of tags once they've been expanded.\\n\\n; `:map`\\n: Apply this filter run to each item in the accumulated results in turn, and ''replace each item in the accumulated results with the output of the mapped filter run''.\\n\\n; `:reduce`\\n: ''Flatten the accumulated results into a single value'' by applying this filter run to each tiddler in the accumulated results in turn. Within this inner filter run, a variable `accumulator` contains the single value produced by the previous execution of the filter run. The output of the last input tiddler becomes the run's output.\\n\\n; `:sort`\\n: Apply this filter run to each tiddler in the accumulated results in turn, and ''sort the accumulated results by the key produced by this filter expression''. That is, the filter run followed by `:sort` transforms each input into the form needed for sorting. This is the same thing as the `sortsub` operator, but it's often easier to use because you don't have to define a separate variable containing the sort filter.\\n\\n; `:then` and `:else`\\n: These work just like the `then` and `else` [[filter operators|Common Filter Operators]], except they apply to an entire run rather than an individual tiddler in the filter pipeline: if there's at least one tiddler in the accumulated results, the accumulated results are replaced with the results of the `:then` run, and if the accumulated results were empty, so with the `:else` run.\\n\\nYou can read more about these run prefixes [[in the documentation|https://tiddlywiki.com/#Filter%20Expression]].\\n\\n</$details>\\n\\n\\n\\n!! Exercises\\n\\n{{Ex:JaneMeetingMultirun||ExerciseTemplate}}\\n{{Ex:FudgeWithoutJane||ExerciseTemplate}}\\n{{Ex:RedATags||ExerciseTemplate}}\\n\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\"},\"Naming Conventions\":{\"title\":\"Naming Conventions\",\"created\":\"20200603181515580\",\"description\":\"//Naming conventions// are rules about how sets of things should be named. Creating your own conventions will make it easier to create titles and easier to find tiddlers later.\",\"modified\":\"20210504023207883\",\"parent\":\"Filing and Organizing\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"//Naming conventions// are rules about how sets of things should be named. Creating your own conventions will make it easier to create titles and easier to find tiddlers later.\\n\\n\\n!! Coding tiddler names\\n\\nSometimes it's helpful to include a bit of additional information in a title by convention. For instance, in my personal reading notes, I suffix the names of sources with the year of publication, and I prefix the names of people and organizations with `Mr`, `Ms`, or `The`. This makes it quick and easy to identify whether a tiddler I'm looking at is about an idea, a source, or a person.\\n\\nOf course, I could get the same information by looking at the tags, fields, and text of each tiddler. But to do that, I would have to open each of the tiddlers, or create some extra tooling to see those values in a convenient format. Unless you intentionally hide it, it's rare to not be able to see the //title// of a tiddler, so if you have a simple piece of information you frequently need to see, it makes sense to include it in the title.\\n\\n\\n!! Capitalization\\n\\nTiddlyWiki titles are, irritatingly, ''case-sensitive'' -- you can create tiddlers called `Apple Computer` and `Apple computer`, and TiddlyWiki considers them different things. As such, it's a good idea to make sure you always capitalize things consistently, or you may end up creating duplicate tiddlers by mistake.\\n\\nSome languages use Title Case, Where All Words Are Capitalized Except a Few Little Ones. Others prefer to capitalize only nouns in the phrase, or only the first letter. It doesn't matter what you pick, but pick a standard and always use it for your tiddler titles.\\n\\nIf you're using CamelCase titles, that point is moot, but several additional considerations come up:\\n\\n* It's useful to ''normalize the capitalization'' of weird things like acronyms: for instance, it's not `WritingInHTML` but `WritingInHtml`.\\n* Some people make single-word titles into CamelCase by ''capitalizing a letter in the middle'' (e.g., writing `ApPle` instead of `Apple`). Aside from being pretty ugly, this can be dangerous since you might pick a different letter to capitalize the next time and not notice that you already have a similar tiddler; this is one of the main arguments for avoiding CamelCase altogether. Even if I'm using CamelCase titles for most tiddlers in a wiki, I prefer to dispense with the CamelCase and use extra brackets around any link where the title is naturally only one word.\\n\\nSome people like to capitalize tags differently than content tiddlers (for instance, tags are all lowercase). I dislike this approach since [[tags really are tiddlers too|Tags]], but if it's helpful for you, go for it.\\n\\n\\n!! Plurals\\n\\nAnother way you can end up creating duplicate tiddlers by mistake is to write one of the titles in the singular and the other in the plural. This is especially common with tags. For this reason, I like to always ''write all nouns in the singular''. So instead of tagging tiddlers with `CoffeeOptions`, we would tag them with `CoffeeOption`. This isn't as ungrammatical as it may look at first glance, since each tiddler with the tag is a single coffee option. If you prefer, you could just as easily choose to make all nouns plural, but it's best to pick one and stick with it.\\n\\n\\n!! Namespacing\\n\\nIf you have a lot of tiddlers of the same type or on the same topic, you might want to ''begin all of their titles the same way''. For instance, we might begin all tiddlers related to the onboarding project with `Onboarding`. Often, people will separate portions of the tiddler name with a slash (`/`) or a colon (`:`), e.g., `Onboarding/People` or `Onboarding:People`.\\n\\nAs another example, in this book's wiki, all of the exercise tiddlers begin with `Ex:`, the code snippet tiddlers begin with `Sn:`, and the takeaway tiddlers begin with `Ta:`.\\n\\nThe advantages are that the related tiddlers then sort together in alphabetical listings, you immediately know that you thought of them as a unit even without looking at any fields other than the title (see //Conventions//, above), and it feels nice and clean. The disadvantage is that you end up thinking more hierarchically, which isn't always desirable: it now seems like this tiddler is //part// of this single, specific other thing, and less related to anything else it may be linked or otherwise connected to. Your titles may also look a little less pretty.\\n\\n\\n!! Exercises\\n\\n{{Ex:NamingConventionImagination||ExerciseTemplate}}\\n{{Ex:ProblematicTiddlerNames||ExerciseTemplate}}\\n\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\"},\"On Notes\":{\"title\":\"On Notes\",\"created\":\"20201121224639134\",\"description\":\"More on how to take notes and organize ideas in a tiddly style.\",\"modified\":\"20240614034732308\",\"parent\":\"Resources\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"A few useful resources on notes, particularly evergreen-style notes:\\n\\n* //How to Take Smart Notes//, Sönke Ahrens\\n** This book discusses Niklas Luhmann's //Zettelkasten// system and how you can use it to research and study.\\n* [[How to Make a Complete Map of Every Thought You Think|https://users.speakeasy.net/~lion/nb/book.pdf]], Lion Kimbro\\n** Ebook about using a series of three-ring binders to take notes on and organize all your thoughts. Focuses on mind-maps, hierarchical subject divisions, and indexes as the organizing principles. It is very stream-of-consciousness, so will probably not appeal to someone who wants a straightforward treatment of note-taking techniques, but if you like seeing how other people operate their note-taking practices and thinking through system design, you might appreciate it more this way.\\n\\nIf you're interested in Zettelkasten in particular, check out my [[bibliography|https://mosmu.se/#ZettelKastenBibliography]] on the topic.\"},\"Options for Saving and Hosting Your Wiki\":{\"title\":\"Options for Saving and Hosting Your Wiki\",\"created\":\"20201121231218670\",\"description\":\"The variety of ways you can save and store your wiki.\",\"modified\":\"20241017013021120\",\"parent\":\"Appendices\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"In [[Installing TiddlyWiki]], we decided to use TiddlyHost to save and manage our wiki. TiddlyHost is easy to set up and convenient to use. However, once you have the hang of TiddlyWiki, TiddlyHost may not be the best fit for you anymore. For instance, it requires you to entrust your data to a couple members of the TiddlyWiki community, and backing up requires manual actions. Or you might be frustrated with the limitations on [[Images and Attachments]] in a single-file wiki and want to store your wiki as a folder of individual tiddlers and host it on Node.js.\\n\\nIf you'd like to explore other options, you can find a list of all the available savers in the [[Getting Started|https://tiddlywiki.com/#GettingStarted]] tiddler on tiddlywiki.com. Several particularly interesting ones:\\n\\n* [[TiddlyDesktop|https://tiddlywiki.com/#Saving%20on%20TiddlyDesktop]] is a small standalone NW.js app that launches your file-based wiki in a separate TiddlyWiki window on your local computer.\\n* The [[GitHub saver|https://tiddlywiki.com/#Saving%20to%20a%20Git%20service]] allows you to save your changes to a public or private Git repository hosted on GitHub.\\n* [[Node.js|https://tiddlywiki.com/#Installing%20TiddlyWiki%20on%20Node.js]] is really TiddlyWiki's native platform, and the single-file versions a kind of package containing the elements needed to allow it to operate outside of Node. Accessing your TiddlyWiki directly through a server running on Node is the most powerful way to work with your wiki, but also requires some technical expertise to take advantage of.\\n* [[Timimi|https://tiddlywiki.com/#Timimi%3A%20WebExtension%20and%20Native%20Host%20by%20Riz]] is a combination browser add-on and desktop application that allows you to seamlessly save to your hard drive -- much like TiddlyDesktop, but you access your wiki from within a normal browser.\\n* [[Quine 2|https://tiddlywiki.com/#Saving%20on%20iPad%2FiPhone]] allows you to conveniently view and edit TiddlyWikis on an iOS device.\\n* [[Twexe|https://ihm4u.github.io/twexe/]] is a special kind of single-file wiki that can be directly run on Linux and Windows without launching a browser at all. It automatically modifies itself to contain your changes.\"},\"Ordering Tiddlers\":{\"title\":\"Ordering Tiddlers\",\"created\":\"20200608015232773\",\"description\":\"A set of tiddlers, such as those with a particular tag, can be given a specific order using a tiddler list.\",\"modified\":\"20240929005025424\",\"parent\":\"Filing and Organizing\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Sometimes a set of tiddlers has a particular //order//. For instance, this book is composed in TiddlyWiki with each section as a tiddler, and the sections should be read in a certain order. We need some way of telling TiddlyWiki what that order is.\\n\\nWe could simply create a tiddler that contained links to each of the tiddlers in order, but then we'd have to remember to manually change that tiddler every time we created a new one, and it wouldn't help TiddlyWiki display them in the correct order in [[tables of contents|Creating Hierarchies with a Table of Contents]] or tag pills. We need something more formal.\\n\\n\\n!! The tiddler list\\n\\nTiddlyWiki uses ''tiddler lists'', often called just //lists//, as a formal mechanism to order tiddlers. As you may recall, at its most basic, a list is simply a series of tiddler names written in a field, separated by spaces, or placed in double square brackets if the tiddler name itself contains a space. We first discussed the idea of a list way back in [[Contact Tiddlers]], when we created a `family` field on our contact tiddlers that was a list. The `participants` field on our meetings is also a list.\\n\\nOne list on each tiddler is particularly special to TiddlyWiki. This list is stored in the field called, appropriately enough, `list`. If this field is populated on a tiddler that's serving as a tag, TiddlyWiki will peek into it when it's displaying a tag pill or a [[table of contents|Creating Hierarchies with a Table of Contents]] and list the tagged tiddlers in the order they appear in the `list` field. (If there is no `list` field, the tagged tiddlers will be shown in alphabetical order by title.)\\n\\nTwo related fields are available as well, `list-before` and `list-after`. These fields are stored on //tagged// tiddlers rather than tagging tiddlers, and they allow you to modify how TiddlyWiki reads the `list` field without actually changing that field. For example, suppose we have tag tiddler T tagging tiddlers A, B, C, and D. The `list` field of tiddler T is `A B D`. If we populate the `list-before` field of tiddler C with `D`, then when we see a list of the tiddlers tagged by T, we'll see `A B C D`. On the other hand, if we populate the `list-after` field of tiddler C with `A`, we'll see `A C B D`.\\n\\nRight now, it is probably not obvious why you would ever do this rather than simply modify the `list` field. In most cases, it's indeed easier and clearer to change the `list` field. However, there may be some times when you prefer not to modify a tag tiddler -- for instance, if it's a [[shadow tiddler|Shadow Tiddlers]] that makes up part of TiddlyWiki's internals. We'll learn more about this in [[Chapter 6|Looking Under the Hood]].\\n\\n\\n!! Corner cases\\n\\nIf you like [[finding problems with everything you read|https://mosmu.se/#HackingPedantryAndScience]], you might have noticed a couple of possibilities not accounted for by the explanation above. Here's what happens in those:\\n\\n* If a tiddler is in more than one of `list`, `list-before`, and `list-after`, ''the last one in that ordering wins'' (i.e., `list-after` takes precedence over `list-before`, and `list-before` over `list`).\\n* If a tiddler is tagged by T but doesn't appear in T's `list` field and doesn't have a `list-before` or `list-after` field (i.e., ''no ordering information is available at all''), TiddlyWiki puts it after all tiddlers that do have ordering information. If there are multiple tiddlers with no ordering information, they appear in alphabetical order by title.\\n\\nSee [[Order of Tagged Tiddlers|https://tiddlywiki.com/#Order%20of%20Tagged%20Tiddlers]] in the TiddlyWiki documentation for even a couple more details that you probably don't need.\\n\\n\\n!! Changing the order of lists\\n\\nSo that's all well and good, but editing a `list` field to move things around sounds like a bit of a pain, doesn't it? Maybe it's all right if we have a couple of tiddlers that need ordering, but what if there are dozens? Editing a line of text that scrolls off the side of the screen isn't much fun.\\n\\nFortunately, TiddlyWiki offers us several ways to drag and drop tiddlers into the right order and automatically modify the `list` field to match. In fact, we've used one of these drag-and-drop views already: the //Open// tab in the sidebar. That one just happens to be reordering a list of open tiddlers rather than a list of tiddlers with a particular tag.\\n\\nThe easy way to reorder tiddlers with a particular tag is to find a tag pill for that tag, click on the pill, and drag and drop the entries in the list. If the tag tiddler doesn't currently have a `list` field, your first drag-and-drop will create it, with all the tiddlers in alphabetical order except the one you just moved.\\n\\nYou can also insert such a reorderable list anywhere you want using `list-links-draggable`:\\n\\n```html\\n<<list-links-draggable \\\"MyTiddler\\\">>\\n```\\n\\nThis will produce a bulleted list with links to each of the tiddlers listed in the `list` field of `MyTiddler`, and if you drag and drop them, the field will be updated, just like if you drag and drop tiddlers within the tag pill. (As with the various table-of-contents incantations [[in the previous section|Creating Hierarchies with a Table of Contents]], this is a built-in procedure, a statement that will make sense once we get to <<gtw.link-chapter-number \\\"Transclusion\\\">>.)\\n\\n____\\n\\n!! Exercises\\n\\n{{Ex:MeetingOrdering||ExerciseTemplate}}\\n{{Ex:MeetingOrderingByProcedure||ExerciseTemplate}}\\n{{Ex:OnboardingPeopleFirst||ExerciseTemplate}}\\n\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\"},\"Outline\":{\"title\":\"Outline\",\"created\":\"20210110054022717\",\"list\":\"[[Front Matter]] [[The Shape of TiddlyWiki]] [[Filing and Organizing]] [[Filtering and Formatting]] Transclusion [[More Organizational Tools]] [[Macros, Wikification, and Widgets]] [[Looking Under the Hood]] [[Tips and Tricks]] [[Getting Technical]] [[Supplemental Exercises]] Resources Appendices\",\"modified\":\"20240927011617864\",\"tags\":\"Index\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"This outline of //Grok TiddlyWiki// summarizes all the chapters and sections. Click a chapter or section to jump in.\\n\\nYou can also browse all [[exercises|Exercise Browser]], [[takeaways|Takeaway Browser]], or [[concepts|Concept]].\\n\\n<dl class=\\\"gtw-outline\\\">\\n  <$list filter=\\\"[list[Outline]]\\\">\\n  <div class=\\\"gtw-chapter-item\\\">\\n    <dt>\\n    <$link to={{!!title}}>\\n    <$view field=\\\"caption\\\">\\n      {{!!title}}\\n    </$view></$link>\\n    </dt>\\n    <dd>\\n      <div style=\\\"font-style: italic;\\\">\\n        {{!!description}}\\n      </div>\\n\\n    {{||ChapterOutlineTemplate}}\\n\\n    </dd>\\n  </div>\\n  </$list>\\n</dl>\\n\\n<style>\\ndl.gtw-outline {\\n  padding-left: 0;\\n}\\n\\ndl.gtw-outline dd ul {\\n  margin-left: 18px;\\n  padding-left: 0;\\n}\\n\\ndiv.gtw-chapter-item {\\n}\\n</style>\"},\"Overriding Built-In Widgets\":{\"title\":\"Overriding Built-In Widgets\",\"created\":\"20240928021442847\",\"description\":\"Write custom widgets that get transcluded in place of TiddlyWiki's built-in widgets.\",\"modified\":\"20241017004756313\",\"parent\":\"Looking Under the Hood\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"When we discussed [[Custom Widgets]] in <<gtw.link-chapter-number \\\"Macros, Wikification, and Widgets\\\">>, we talked about how you can create new widgets. But you can also ''replace a built-in widget'' with a custom widget. This obviously must be done with caution, since it can have effects that reach deep into the core code of TiddlyWiki, but it's a powerful feature that can be a very convenient way to add custom behaviors. To achieve this, we simply define a new `\\\\widget` with the same name as the one we want to override (in this case, you don't need, and indeed can't have, a `.` in the name of the custom widget, like you normally do).\\n\\nAs a silly example, suppose we want to completely inhibit internal linking. We can override the `$link` widget to ignore all of its parameters and only render the link text in the body of the widget:\\n\\n{{Sn:LinkInhibition||MagicSnippet}}\\n\\n!! Referencing the original widget\\n\\nIn most practical scenarios, we're not trying to replace an existing widget entirely -- rather, we want to ''wrap it in some other wikitext'' or change the values of its attributes in some systematic way. Therefore, we'll want to use some version of the original widget within the custom widget.\\n\\nHowever, if we just directly include a `$link` widget inside the definition of the `$link` widget, TiddlyWiki will try to transclude the custom widget within itself over and over again, recognize that it's stuck in an infinite loop, and give up on rendering the widget. We instead need to use the <a class=\\\"tc-tiddlylink-external\\\" href=\\\"https://tiddlywiki.com/#GenesisWidget\\\">`$genesis`</a> meta-widget, which creates another widget of an arbitrary type, to retrieve the original widget instead of our custom version.\\n\\nAs an example, here's something more useful we can do by overriding the `$link` widget: if a tiddler has a `description` field, add a tooltip showing the `description` field on the link's tooltip.\\n\\n{{Sn:LinkTooltipification||MagicSnippet}}\\n\\nThe `$type` parameter of the `$genesis` widget is the name of the widget we're trying to render. The `$remappable` parameter is the magic: setting this to `no` forces the original, built-in widget definition to be used, rather than our custom definition. Lastly, all parameters that don't start with dollar signs are passed as parameters to the newly created widget.\\n\\nTry hovering over the links above – you'll see the descriptions appear as tooltips!\\n\\n//Word to the wise//: When overriding a built-in widget, ''always test your changes within a single tiddler'' and make sure they work as expected prior to tagging the new version with `$:/tags/Global`. If you make a mistake and override a widget critical to TiddlyWiki's operation with a broken version, you may find yourself unable to get back into the editor to restore the default behavior! (If you //do// make such a mistake, you can manually edit the HTML file or tiddler file in a text editor to remove the faulty wikitext and restart TiddlyWiki – this will not cause permanent data loss, it'll just be annoying.)\\n\\n\\n!! Exercises\\n\\n{{Ex:LinkTooltipNonReplace||ExerciseTemplate}}\\n{{Ex:SaveOptionalParameters||ExerciseTemplate}}\\n{{Ex:EqualsPrefixNeeded||ExerciseTemplate}}\\n\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\"},\"Parameterizing Field Transclusions\":{\"title\":\"Parameterizing Field Transclusions\",\"created\":\"20240907015401704\",\"description\":\"Tiddler fields can have parameters, just like procedures can have parameters.\",\"modified\":\"20241016122222723\",\"parent\":\"Transclusion\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Just like [[procedures|Procedures]] can be given parameters, tiddler fields can be given parameters, giving a [[transclusion of that field|Field Transclusions]] some parts that change. To ''define the parameters of a field'', a `\\\\parameters` pragma is placed at the start of the field. This takes a parameter list that looks and works exactly like that of a procedure. The specified parameters are made available as variables when rendering the field.\\n\\nTo ''specify parameters when transcluding a tiddler'', place each parameter after a single `|` at the end of the usual transclusion syntax. For instance, suppose we write a snippet tiddler `Sn:Hi`:\\n\\n{{Sn:Hi||MagicSnippet}}\\n\\nThen we can say:\\n\\n{{Sn:HiTransclusion||MagicSnippet}}\\n\\nOf course, you can also do parameterized field transclusion with a `$transclude` widget. Just use the `$tiddler` attribute, and name each of the parameters, just like you would with the parameters of a procedure:\\n\\n{{Sn:HiTransclusionWidget||MagicSnippet}}\\n\\nUnlike procedure calls, the wikitext syntax for `{{field transclusions}}` doesn't allow you to use named parameters – you can only use positional parameters. However, this is easily overcome by using the `$transclude` widget instead of the wikitext syntax, as shown immediately above.\\n\\n\\n!!! Less common options\\n\\nWhile we typically only have reason to transclude the `text` field when working with parameterized transclusions, it's perfectly valid to ''give a different field parameters'' and transclude that. For instance, if we set the `description` field of `Sn:Hi` to <code><$view tiddler=\\\"Sn:Hi\\\" field=\\\"description\\\"/></code>:\\n\\n{{Sn:HiTransclusionDescription||MagicSnippet}}\\n\\nIt's also possible to ''combine template transclusion with parameters'', using the syntax `{{CurrentTiddler||TemplateTiddler|parameter1|parameter2}}`. You cannot directly combine this with transcluding a different field using `!!`, but you can work around that limitation by manually setting the `currentTiddler` variable and then performing the field transclusion.\\n\\n\\n!! The `$parameters` widget\\n\\nThe `\\\\parameters` pragma is actually a shortcut for a <a href=\\\"https://tiddlywiki.com/#ParametersWidget\\\" class=\\\"tc-tiddlylink-external\\\">`$parameters` widget</a>. The widget form has two extra features:\\n\\n* You can ''compute the default parameters dynamically'' (so, for instance, if you left off a parameter when calling the transclusion, it could be filled in by a filter expression or a different variable).\\n* You can ''retrieve parameters passed to ancestor transclusions'' (i.e., if you transclude a tiddler with parameters which transcludes another tiddler with different values of the same parameter, in that second tiddler you can retrieve the value which the first transclusion set).\\n\\nThese are rarely necessary, but if they would come in handy for you, check out the documentation.\\n\\n\\n!! Slots\\n\\nBelieve it or not, there is actually yet another way to pass content into a transcluded tiddler: ''slots''. Here, you use a `$slot` widget with an arbitrary name in the tiddler to be transcluded, instead of referencing a variable. Then, in the body of a `$transclude` widget transcluding that tiddler, you place the content for the slot in the body of a `$fill` widget referencing the same name.\\n\\nFirst we create a tiddler with a slot:\\n\\n{{Sn:SaidAThing||MagicSnippet}}\\n\\nAnd then we transclude it, filling the slot:\\n\\n{{Sn:SayAThing||MagicSnippet}}\\n\\nYou can include as many slots as you want; each will be filled by a separate `$fill` widget when it's transcluded (or remain blank, if no appropriate `$fill` widget is provided).\\n\\nSlots, unlike variables, ''do not carry over into nested transclusions''. That is, if you are in some wikitext that has a particular slot S filled and you transclude another field or variable, S's value will not be directly available inside that transclusion. However, you can use the `$depth` parameter to the `$slot` widget to access it. This is 1 by default; if you set it to a higher number, it will go up to the parent transclusion that number of times before looking for the slot. In our example, setting `$depth` to 2 will retrieve the value of S.\\n\\nThe benefit of using a slot rather than a parameter is that ''including long content with lots of formatting is much easier'', since you don't have to cram it into part of a `{{field transclusion}}` or the attribute of a `$transclude` widget. The syntax is still a little ugly though -- you're forced to use a `$transclude` widget rather than `{{braces}}`, plus you have to nest an extra `$fill` widget inside the `$transclude` widget. [[Custom Widgets]] wrap a single slot called `ts-raw` in more convenient syntax, and are often a better choice in such a situation.\\n\\nThe main drawback of using a slot rather than a parameter is that you cannot access its value inside a filter, which means you're limited to displaying its contents as wikitext, rather than changing it or making decisions based on its value.\\n\\nHere we saw how you can use slots within field transclusions, because they tend to feel most intuitive this way. But it's actually possible to use a slot inside any type of transclusion -- so this would work fine within a procedure as well.\\n\\n\\n!! Parameterized transclusions vs. procedures\\n\\nWhy use a transclusion with parameters (or slots) rather than a procedure? Well, there's no technical reason, really; it can accomplish exactly the same things. It's more about semantics. Sometimes it feels more natural to think about reusing wikitext in terms of calling a procedure (for instance, when you want to create a link to something or format a small chunk of text), and sometimes in terms of transcluding a tiddler (for instance, when including an icon in the current tiddler and specifying its color). We'll come back to this question in [[Choosing a Type of Transclusion]], in <<gtw.link-chapter-number \\\"Macros, Wikification, and Widgets\\\">>.\\n\\nParameterized transclusions are a recent addition to TiddlyWiki; for many years the only way to have parts in a transclusion that changed was to manually set variables to values before performing the transclusion (probably having to go look at the tiddler you were transcluding to remember what variable names to use). This means that most parameterized wikitext out there in the wild uses procedures (or, really, [[macros|Macros]] -- more on that later), less because they're actually better and more because they're the only thing we're used to. As more time goes by, the community will probably get a better idea of which options make the most sense where.\\n\\n\\n!! Exercises\\n\\n{{Ex:TranscludeWikipediaLink||ExerciseTemplate}}\\n{{Ex:ParameterizedCit||ExerciseTemplate}}\\n{{Ex:ConflictingStatements||ExerciseTemplate}}\\n\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\"},\"Philosophy of Grok TiddlyWiki\":{\"title\":\"Philosophy of Grok TiddlyWiki\",\"created\":\"20200531031717111\",\"description\":\"Why this book exists and what it aims to do.\",\"modified\":\"20241013012627351\",\"parent\":\"Front Matter\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"!! The role of this book\\n\\nThis book's mission is to ''teach you TiddlyWiki from start to finish''. You can start with a vague idea of what TiddlyWiki is and finish with the ability to create a wiki for any purpose that fits your brain and works exactly how you want it to.\\n\\nThis book is intended to be ''thorough'' and teach you to fully understand the concepts it covers. It's easy to use a tool like TiddlyWiki for months or years by copying and pasting snippets from the Web or trying random things until it works. While this random-stumbling-around-in-the-dark approach to problem-solving might allow you to accomplish your goal, you will get better only very slowly, and it will be frustrating every time, because you don't really understand what you're doing. This book will give you the terminology to think and talk about what you're doing and the insight into why things work the way they do that you need to easily solve new problems on your own.\\n\\nYou will not by any means learn everything there is to know about TiddlyWiki in this book. You would not want to work through a book that long! However, by the time you finish the book, you will ''be able to think like a TiddlyWiki user'' and be deeply comfortable with the most important TiddlyWiki features. You will also have the knowledge and skills you need to figure the rest out yourself as you need it, by consulting the technical documentation, exploring the innards of TiddlyWiki, and occasionally asking for help from the community.\\n\\nThis book will try to ''clear an easier path for you'' by making executive decisions on a few choices that tend to trip up new users, like what saver to use (in TiddlyWiki, you have to choose //how to save your wiki// before you can start using it -- yes, really). By the end of the book, you'll be in a better position to consider other options if the initial ones aren't right for you.\\n\\n\\n!! The method\\n\\nOver the course of the book, we will create a TiddlyWiki that can be used for keeping notes on an average office job, stopping to explain each choice and tool provided by TiddlyWiki along the way. We'll cover the basics as well as some moderately advanced customizations and custom logic. No “programming” in the traditional sense is necessary to customize TiddlyWiki: if you can use tools like Microsoft Excel or HTML, you can learn this part of TiddlyWiki. And if you don't know Excel or HTML, millions of “non-technical” people have gotten good at those, so don't worry. (If the idea of programming excites you instead of scaring you, you can write plugins in JavaScript too…although you may be shocked to find how rarely you need or want to go beyond the tools TiddlyWiki provides. You'll find more nerdy details in the [[Getting Technical|Getting Technical]] chapter.)\\n\\nTaking notes on an office job might be a boring topic to focus this book around, but it's a general, unspecialized need with plenty of tricky questions to deal with, and unlike many other topics I could have chosen, I think most people reading this book will have gotten close enough to an office job or something similar to understand what we're talking about.\\n\\nIn addition to reading the text, you'll do a series of ''exercises'' in your sample wiki, and you'll study ''takeaways'', short prompts intended to test and maintain your knowledge of material you've already seen. For more on these features, move on to the next section, [[How to Use This Book]].\"},\"Plugins\":{\"title\":\"Plugins\",\"created\":\"20200530170315795\",\"description\":\"Plugins are bundles of tiddlers that provide new functionality.\",\"modified\":\"20210418133307463\",\"parent\":\"Looking Under the Hood\",\"tags\":\"Concept Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"We've been talking about plugins occasionally throughout the book, so it's worth taking a moment to explain what exactly plugins are and how they work.\\n\\nPlugins are essentially just bundles of [[tiddlers|Tiddlers]]. They're typically composed of [[system tiddlers|System Tiddlers]] which contain some kind of code or interface element or tool, but in theory the tiddlers can be named anything and contain anything. To put this more formally, a plugin is a single tiddler that contains multiple “virtual” tiddlers, known as //shadow// tiddlers. We'll learn about how shadow tiddlers behave [[in the next section|Shadow Tiddlers]].\\n\\nYou can install a plugin by finding any link to it, usually on a plugin demo or documentation TiddlyWiki on the web, and ''dragging and dropping'' it into your wiki -- this copies the tiddler and therefore the plugin. Many “official” plugins can also be installed through the //Plugins// section of the Control Panel. (If you [[use TiddlyWiki on Node.JS|Options for Saving and Hosting Your Wiki]], you have [[some other options|https://tiddlywiki.com/#Installing%20custom%20plugins%20on%20Node.js]] as well that may make it easier to keep the plugins up to date.)\\n\\nIf you look at the ''Plugins'' section of the ''More'' tab in the sidebar, you'll see at least one plugin even in a clean install -- most of TiddlyWiki's core code is actually implemented as a plugin, [[$:/core]]. Clicking on a plugin in this view will show you a special tiddler that contains a little bit of information about the plugin as well as a list of all the bundled tiddlers it has installed into your wiki. Deleting the plugin tiddler will remove the plugin from your wiki, including all its shadow tiddlers (don't try this with core though!).\\n\\nThe [[Useful Plugins]] appendix lists some publicly available TiddlyWiki plugins that I find particularly useful.\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\"},\"Procedures\":{\"title\":\"Procedures\",\"created\":\"20240616143658865\",\"description\":\"Procedures extend the concept of variables by allowing portions of the value to change each time the procedure is referenced.\",\"modified\":\"20241016120103850\",\"parent\":\"Transclusion\",\"tags\":\"Section Concept\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Sometimes we want to use exactly the same text multiple times, and [[variables|Variables]] let us eliminate that repetition. But perhaps more often, we want to repeat some text which is //mostly// the same, but which ''varies in a small part or two''.\\n\\nIn [[Using Variables as Attributes]], we learned that you can combine a variable with other text using a substituted attribute value:\\n\\n```html\\n<a href=`$(wpBase)$/Aardvark`>Aardvarks</a>\\n```\\n\\nTechnically, one could argue that this allows us to repeat text which is mostly the same. But this is a mighty awkward way to write a link to a Wikipedia article! If we want our fancy wikitext to be easier than simply copying and pasting a new link from our web browser each time, we need a much more convenient way to write it.\\n\\n''Procedures'' provide this mechanism. A procedure is a special kind of variable with some bits that change depending on how you refer to it; the bits that change are called the procedure's ''parameters''. (As we'll learn later, anything we transclude can have parameters -- for instance, [[a tiddler can have parameters|Parameterizing Field Transclusions]].)\\n\\nTo transclude the value of a procedure (this is more commonly referred to as ''calling'' the procedure), we use the same double angle brackets that we would to transclude an ordinary variable, but we include the values of the parameters as well (this is called ''passing'' the parameters to the procedure). Specifically, we place them inside the double angle brackets after the procedure name, separated from the procedure name and from each other by a space.\\n\\nIf we write a `wikipediaLink` procedure, we can call it like this:\\n\\n```html\\nThe <<wikipediaLink Aardvark>> is a pig-like African mammal that eats ants and termites.\\n```\\n\\n\\n!! Defining a procedure\\n\\nOf course, before that wikitext will work, we have to tell TiddlyWiki what a `wikipediaLink` actually is. The syntax looks like this:\\n\\n```html\\n\\\\procedure wikipediaLink(articleName)\\n  <a href=`https://en.wikipedia.org/wiki/$(articleName)$`>\\n    <<articleName>>\\n  </a>\\n\\\\end\\n```\\n\\nPut all together, in action:\\n\\n{{Sn:InitialAardvarkWikipediaLink||MagicSnippet}}\\n\\nLet's get this example in your wiki so you can play with it: create a new tiddler called `WikipediaLinks` and type this snippet in. (Careful: the HTML closing tag `</a>` uses a //forward slash//, while `\\\\procedure` and `\\\\end` use a //backslash//. Review the [[HTML]] section if you can't remember which is which.) You should see the link appear, as it does in the preview above, and if you click on it, you'll land on the Wikipedia page about aardvarks.\\n\\n\\n!! Anatomy of a procedure\\n\\nThere's a lot of new syntax here, so let's take a closer look at what's going on. Our procedure started with this line:\\n\\n```html\\n\\\\procedure wikipediaLink(articleName)\\n```\\n\\nA word starting with a backslash at the beginning of a tiddler introduces a ''pragma'', which is a really fancy name for an instruction that comes at the top of a tiddler and changes the way TiddlyWiki reads the rest of the tiddler. Specifically, the `\\\\procedure` pragma tells TiddlyWiki that every time it sees a transclusion of `wikipediaLink`, it should follow the instructions in this procedure.\\n\\n`wikipediaLink`, of course, is the name of the procedure.\\n\\nThe part in parentheses, called the ''parameter list'', describes the parameters of the procedure. There can be any number of parameters. Here there is one parameter, `articleName`; in the [[next section|The Finer Points of Procedures]], we'll see an example with more than one parameter.\\n\\nEverything between the line beginning with `\\\\procedure` and the line beginning with `\\\\end` is called the ''body'' of the procedure:\\n\\n```html\\n  <a href=`https://en.wikipedia.org/wiki/$(articleName)$`>\\n    <<articleName>>\\n  </a>\\n```\\n\\nThe body of a procedure is like the value of a variable, with an additional feature: each parameter to the procedure becomes a variable within the body. This variable's name is the same as the parameter name, and its value is whatever was passed to the parameter. In this example, we're referring to the value of the parameter/variable `articleName` twice, once inside the substituted attribute value for the `href` attribute of the `a` tag, and once directly in the wikitext.\\n\\nLastly, there's the line:\\n\\n```html\\n\\\\end\\n```\\n\\nUnsurprisingly, this indicates that we've come to the end of the procedure. A procedure can go on for as many lines as we want it to, until we come to the `\\\\end`.\\n\\nThe whole hunk of wikitext we just discussed, from the beginning of the `\\\\procedure` to the end of the `\\\\end`, is called the ''definition'' of the `wikipediaLink` procedure.\\n\\n\\n!! How TiddlyWiki processes procedure calls\\n\\nWhen something doesn't work the way you expect, it's helpful to be able to “think like the computer” as you try to understand what you did wrong, so let's talk about what TiddlyWiki does when it encounters a `<<procedure call>>`.\\n\\nFirst, TiddlyWiki stops rendering the tiddler for a moment, looks at each of the parameters passed in the procedure call, and matches them up to the parameters in the parameter list, based on what order they come in. Then it ''sets a variable'' for each parameter, scoped to the procedure. In our example, it sets a variable `articleName` to the value `Aardvark`.\\n\\nWith the values of the variables set appropriately, TiddlyWiki will read the body of the procedure and see, in our example:\\n\\n```html\\n  <a href=`https://en.wikipedia.org/wiki/$(articleName)$`>\\n    <<articleName>>\\n  </a>\\n```\\n\\n{{Ltc:ProcedureBodyRendered||LieToChildrenTemplate}}, using the value of the `articleName` variable (namely, `Aardvark`) as required to do so.\\n\\nOnce the body of the procedure has been rendered, the `articleName` variable will go out of scope, TiddlyWiki will return to the rest of the tiddler after the procedure call, and rendering will continue.\\n\\n\\n!! Exercises\\n\\n{{Ex:PrettyWikipediaLink||ExerciseTemplate}}\\n{{Ex:EmptyProcedureCall||ExerciseTemplate}}\\n{{Ex:ProcedurePosition||ExerciseTemplate}}\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\"},\"Project Tiddlers\":{\"title\":\"Project Tiddlers\",\"created\":\"20200531014330950\",\"description\":\"How to organize meetings and knowledge into overarching projects.\",\"modified\":\"20241014124509540\",\"parent\":\"The Shape of TiddlyWiki\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Now for ''project tiddlers''. Let's create ourselves a project for completing the company onboarding process. Create a new tiddler (that's the <<textual-button \\\"new-button\\\">> button in the upper-right corner, if you forgot, or Alt+N if you have your hands on the keyboard already), name it `OnboardingProcess`, and tag it `Project`.\\n\\nWhat kind of information do we want to keep track of for projects? We might imagine including deadlines, stakeholders, approvals, and so on, but it's probably going to depend a bit on the project, and at this point we're too new to understand how the company operates and what processes our projects will move through, so let's refrain from adding fields until we know we need them. However, we do already know that every project we're assigned will have an entry in the company's ticket-tracking system with an associated ID number, so let's create a field called `ticketnum`. Our protagonist's onboarding is ticket number 245188, so put that in as the field value. Let's throw something in the body describing the project for good measure: how about `A project where we waste a bunch of perfectly good time learning all about this nice company.`.\\n\\n!! Project contents\\n\\nThere's our project tiddler, but it's missing something: the `EmployeeProfileSetupMeeting` [[we had with Jane|Meeting Tiddlers]] was definitely part of the company onboarding process. We need to relate these two tiddlers somehow. How should we do that? We have several sensible and straightforward options, along with many more silly ones. Here are the most obvious choices:\\n\\n# We could ''link to the meeting'' from the project tiddler.\\n# We could ''link to the project'' from the meeting tiddler.\\n# We could ''create a field'' called `project` on the meeting tiddler with a value of `OnboardingProcess`.\\n# We could ''tag the meeting'' with the project's title, `OnboardingProcess`.\\n\\nOption (1) works, but if you have a large project, your project tiddler might be primarily composed of links to tiddlers relating to the project. In general, it's usually better for tiddlers to indicate that they're a part of some whole, rather than the whole listing out all of its parts; it's easy in TiddlyWiki to identify all of the parts of a whole in any number of ways, but the reverse tends to be fussier. Further, it's irritating to have to open and edit the “whole” tiddler every time you add a “part” tiddler, and it's easier to forget to do that than to forget to add a “whole” reference to the “part” tiddler. (If you happen to know anything about [[relational database|https://en.wikipedia.org/wiki/Relational_database]] design, you'll see a clear parallel here. TiddlyWiki is in fact arguably a weird kind of relational database, though without rigid schemas.)\\n\\nOption (2) is a solid choice and particularly easy to implement, but links carry less information about what exactly the relationship between the two tiddlers is than tags or fields do. With a link, we just know they're related in some way. With a field or tag, we can know specifically that the meeting is part of the project -- rather than the project being part of the meeting, or the project being mentioned in the meeting as a horrific disaster that needs to be avoided in the next project.\\n\\nOption (3) provides the most information about the precise relationship between the two tiddlers. However, since you'll be creating your own custom field, you'll have to create your own customizations in TiddlyWiki to make the field do anything useful aside from showing up in the “fields” section of the Info tab, so this requires extra work. (We'll learn how to do this kind of thing starting in <<gtw.link-chapter-number \\\"Transclusion\\\">>.)\\n\\nOption (4) is easy, fast, and effective, and tags are understood as the primary means of creating hierarchies and memberships in various plugins and parts of TiddlyWiki's core. Additionally, you get the autocomplete functionality of tags when searching for a “whole” tiddler to attach your “part” tiddler to. This sounds like an obvious coup, but the disadvantage is that if you have a large wiki, you may end up cluttering up your tag space by using this mechanism for many different things -- that is, dozens or hundreds of tags will show up in your tag picker, making it harder to find the ones you want. There are a number of ways to mitigate this, such as [[color-coding them|Classifying Tags]] or adding prefixes to their names to describe their functions, but it's still a disadvantage, and some experienced users of TiddlyWiki prefer to use fields in many cases for this reason.\\n\\nLet's go with option (4) for this wiki: it's an important part of TiddlyWiki to understand, whether or not it turns out to be your preferred method, and it's a quick and easy way to get started.\\n\\nTo make the `EmployeeProfileSetupMeeting` a part of the `OnboardingProcess` project, then, simply edit the `EmployeeProfileSetupMeeting` tiddler and add a tag `OnboardingProcess`. To check your work, go back up to the `OnboardingProcess` tiddler, click the info button, and choose the //Tagging// tab; you'll see that `OnboardingProcess` is now tagging `EmployeeProfileSetupMeeting`. You can also see the relationship by clicking on the `OnboardingProcess` tag pill on the `EmployeeProfileSetupMeeting` tiddler; above the line you'll see the `OnboardingProcess` tiddler itself (the “whole” tiddler, or the “tag” tiddler), and below the line you'll see a list of everything tagged with that tag (currently, only `EmployeeProfileSetupMeeting`).\\n\\n\\n!! Exercises\\n\\n{{Ex:CarItems||ExerciseTemplate}}\\n\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\"},\"Public Wikis\":{\"title\":\"Public Wikis\",\"created\":\"20201121225056453\",\"description\":\"Some real TiddlyWikis you can explore for examples and inspiration.\",\"modified\":\"20240614035715409\",\"parent\":\"Resources\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"One of the best ways to learn about any system is to see examples of what others have done with it. Here are some interesting TiddlyWikis:\\n\\n* [[Mosaic Muse|https://mosmu.se]]:  shameless self-promotion, but this Zettelkasten-like system should be a nice complement to this book. I have several other wikis, but this is my largest public TiddlyWiki and where I do a lot of my TiddlyWiki-assisted thinking.\\n* [[Interactive Historical Atlas of the Disciplines|http://atlas-disciplines.unige.ch]], a beautiful catalog of the branches of science over time.\\n* The [[Community page|https://tiddlywiki.com#Community]] on tiddlywiki.com lists a number of wikis.\\n\\nIf you have a public TiddlyWiki you'd like to see on this list, click the //send feedback// link below and send over a URL and description.\\n\\nThe [[TiddlyWiki Links Aggregator|https://links.tiddlywiki.org/]] is a community-built collection of TiddlyWiki resources (it probably does not surprise you to learn it is built by compiling other people's TiddlyWikis into a TiddlyWiki). You can find some example wikis under the [[Example|https://links.tiddlywiki.org/#Topic%3A%20Example]] tag.\"},\"Qualification\":{\"title\":\"Qualification\",\"created\":\"20210206154042167\",\"description\":\"The `qualify` macro lets you avoid having state in one use of a template affect another use of a template.\",\"modified\":\"20220103170403292\",\"parent\":\"Tips and Tricks\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"When we write templates that rely on ''maintaining state'' (that is, values stored in fields somewhere that control the display of the template), we may run into a problem: if the template is displayed in multiple locations at once, the state can collide and cause changes in one location to apply to the other locations as well.\\n\\nThis will become more clear with an example. Put the following on a template called `SelectiveTemplate` in your example wiki:\\n\\n```html\\n<$let stateTiddlerName=\\\"$:/temp/IsOpen\\\">\\n  <$reveal state=<<stateTiddlerName>> type=\\\"match\\\" text=\\\"yes\\\">\\n      <$button set=<<stateTiddlerName>> setTo=\\\"no\\\">Close</$button>\\n\\n      Here is some information that can be selectively hidden and shown: This tiddler's name is {{!!title}}.\\n  </$reveal>\\n\\n  <$reveal state=<<stateTiddlerName>> type=\\\"nomatch\\\" text=\\\"yes\\\">\\n      <$button set=<<stateTiddlerName>> setTo=\\\"yes\\\">Open</$button>\\n  </$reveal>\\n</$let>\\n```\\n\\nLeaving the template tiddler open, add a template transclusion `{{||SelectiveTemplate}}` to some other tiddler. Now, click the //Open// button on one of the tiddlers. You'll see that the other tiddler's expandable section opens as well.\\n\\nThis makes sense, given that both `$reveal` widgets are bound to the same tiddler field. In a few cases, this might even be what we want. But in most cases, we'd probably like them to expand and contract separately.\\n\\nOne solution is to place the state in a field on the tiddler itself, using something like `set=\\\"!!isopen\\\"`. Sometimes, this is quite appropriate, but other times, editing the tiddler that is using a template is messy, or even doesn't work at all. The `qualify` macro provides a more robust method. Given a tiddler title, it adds a number to the end of that title that is guaranteed to be unique for each location the invocation of the `qualify` macro might be displayed within the story river (it even takes into account the fact that one tiddler might be recursively transcluded into multiple other tiddlers).\\n\\nWe can fix our example above using the `qualify` macro as follows:\\n\\n```html\\n<$let stateTiddlerName=<<qualify \\\"$:/temp/IsOpen\\\">>>\\n  <$reveal state=<<stateTiddlerName>> type=\\\"match\\\" text=\\\"yes\\\">\\n      <$button set=<<stateTiddlerName>> setTo=\\\"no\\\">Close</$button>\\n\\n      Here is some information that can be selectively hidden and shown: This tiddler's name is {{!!title}}.\\n  </$reveal>\\n\\n  <$reveal state=<<stateTiddlerName>> type=\\\"nomatch\\\" text=\\\"yes\\\">\\n      <$button set=<<stateTiddlerName>> setTo=\\\"yes\\\">Open</$button>\\n  </$reveal>\\n</$let>\\n```\\n\\nIf you go look in `$:/temp` after clicking on each of the buttons, you'll see several unique tiddlers that look like `IsOpen-148223948` or `IsOpen--723342025`, each of which contains a unique value describing whether the expandable section is open.\\n\\n\\n!! Exercises\\n\\n{{Ex:QualifyMultipleCalls||ExerciseTemplate}}\\n{{Ex:ContactRadioButtonQualification||ExerciseTemplate}}\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\"},\"Requirements for the Sample Wiki\":{\"title\":\"Requirements for the Sample Wiki\",\"created\":\"20200530170905243\",\"description\":\"What do we want the example wiki we're building in this book to be able to do?\",\"modified\":\"20210409021002777\",\"parent\":\"The Shape of TiddlyWiki\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Over the course of this book, we're going to be developing an example wiki. But before we start making anything, it's a good idea to be clear on what we're trying to accomplish. What do we want to be able to do with this example wiki?\\n\\nTo frame what we need to keep track of, let's suppose that we're just starting a new job in a new office -- that's probably the moment in an office worker's life when thorough notes are most obviously critical. (This is not to say there's a point at which you should stop taking notes. In fact, good notes, well-organized and continually updated, get more useful the longer you've been taking them and the more you have of them.)\\n\\nHere's what we want to do with our sample wiki.\\n\\n* Keep a simple ''reckoning of what we do'' on a day-to-day basis. \\n** By the way, if you don't keep a work diary in real life, you should consider starting: you can make it as simple or complex as you want, and the benefits have been well documented around the web.\\n* Keep track of ''people'' we meet, their ''contact information'', their ''managers'', anyone else at the company they're ''related to'', ''what they do'', and what ''projects they're involved in''.\\n** In the real world, you'll probably have an easily-accessed company directory integrated with your communications software that has some of this information in it, and you likely don't want to double up and include the information in TiddlyWiki, or you'll just have to update it manually if it changes in the directory. For purposes of demonstration, we'll pretend your employer is really backwards and doesn't have any kind of directory, but most likely you'll need to track only a subset of this information. (Unless you're a freelancer -- then you likely really will need to track large parts of it manually. Whether you should do this in TiddlyWiki instead of in a contacts app may be a difficult question, and we won't get into that here.)\\n* Gather notes on the ''progress of projects'' we're working on.\\n* Keep any ''information we learn'' about company processes and about domain knowledge related to the job (e.g., regulations, industry standards, terminology, software applications) in a form where we can find and update it later.\\n* ''Take notes at meetings'' and find them later, searching on when the meeting happened, who attended, or what the content was related to.\\n* ''Link easily to other resources'' our team uses, such as tasks in a team task manager or entries in a company wiki or knowledge base.\\n\\nYou might notice one important component of personal organization is missing from this list: task management. Some people like to handle tasks in TiddlyWiki and it's entirely possible to do so if you like, but personally I find managing tasks in TiddlyWiki quite finicky and really good software dedicated to managing a to-do list invaluable, so I stop my wiki notes at the project level.\"},\"Resources\":{\"title\":\"Resources\",\"caption\":\"Resources\",\"created\":\"20200822204446698\",\"description\":\"In which we discuss other places you can learn about TiddlyWiki, talk to others who use TiddlyWiki, and see examples of TiddlyWiki in action.\",\"list\":\"[[Getting Help]] [[On Notes]] [[Public Wikis]]\",\"modified\":\"20210207045845010\",\"parent\":\"Outline\",\"tags\":\"Chapter\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"{{||ChapterOutlineTemplate}}\"},\"Reviewing the Basics\":{\"title\":\"Reviewing the Basics\",\"created\":\"20200531142251622\",\"description\":\"Some final exercises to help you practice the basics.\",\"modified\":\"20210315154237956\",\"parent\":\"The Shape of TiddlyWiki\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"We've now worked our way through the majority of our initial set of requirements! We've created standard types of tiddlers for each of the things we said we wanted to keep track of, decided what kind of information we wanted to capture for each of them, and created a sample tiddler for each.\\n\\nThere are still some significant holes you're probably looking to fill. For instance, we haven't talked about how to ''find tiddlers that match particular criteria'', or indeed how to find tiddlers at all, and we could do with a clearer ''overview'' of all the notes belonging to a particular project or area. Many of the fields we created on tiddlers are kind of hard to use, and we have to manually add them to every tiddler. And there are a great number of other efficiency improvements and customizations we could benefit from.\\n\\nWe'll tackle these things starting in the next chapter, but first, let's do a few exercises to solidify what we've covered so far.\\n\\n{{Ex:RaffapKnowledgeTiddler||ExerciseTemplate}}\\n{{Ex:RaffapReflection||ExerciseTemplate}}\\n{{Ex:CamelCaseKnowledgeTiddlers||ExerciseTemplate}}\\n{{Ex:JaneDoeFamily||ExerciseTemplate}}\\n{{Ex:ManagerField||ExerciseTemplate}}\"},\"SavingProgress\":{\"title\":\"SavingProgress\",\"created\":\"20210123233814789\",\"modified\":\"20241009130356384\",\"tags\":\"Fragment\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"If you're currently viewing this page on the web at https://groktiddlywiki.com, you should make your own copy now.\\n\\n\\n!! Clone this wiki using TiddlyHost\\n\\nThe easiest way to manage your own copy of //Grok TiddlyWiki// is using [[TiddlyHost|https://tiddlyhost.com]] (see [[Installing TiddlyWiki]] for details). To clone your own copy of GTW into your TiddlyHost account, click on <<gtw-tiddlyhost-clone-link \\\"this clone link\\\">> and log in if required. Then give your site a name at the top (this can be anything; something like `sorens-grok-tiddlywiki` would make sense), choose //Private// access, and click //Create//.\\n\\nYou'll now be able to see your copy of //Grok TiddlyWiki// in your TiddlyHost account, next to the sample wiki you installed in [[Installing TiddlyWiki]]. In the future, whenever you go to work on learning TiddlyWiki, open the book from your TiddlyHost account rather than from https://groktiddlywiki.com.\\n\\nBe sure to save your changes when you close the book for a while; your browser will prompt you to do so when you close the tab if you forget.\\n\\n\\n!! Download a copy directly\\n\\nIf you prefer to use [[a saver other than TiddlyHost|Options for Saving and Hosting Your Wiki]], click the save icon at the end of this paragraph to download a copy of the wiki to your computer: {{$:/core/ui/Buttons/save-wiki}}\\n\\nThen configure the wiki with whatever saver you're using, as required.\\n\\n!! Copyright\\n\\nYou are free to modify the copy you've saved for your personal use, and to share unmodified copies with others, but not to redistribute modified versions or earn money from redistribution. See the [[copyright notice|Copyright]] for details.\\n\"},\"Searching\":{\"title\":\"Searching\",\"created\":\"20200603023508364\",\"description\":\"TiddlyWiki allows fast and convenient full-text searching, although it doesn't look in every field of every tiddler.\",\"modified\":\"20241014124719822\",\"parent\":\"Filing and Organizing\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Right now, we only have a handful of tiddlers. Earlier, we saw how to use the ''Recent'' list to find tiddlers that we've touched recently. But what happens when we know what we're looking for, but we have dozens or hundreds or thousands of tiddlers? Scrolling through the list of recently updated tiddlers isn't going to cut it anymore.\\n\\n!! Standard search\\n\\nProbably the most basic way of finding things on a computer is to do a ''full-text search''. Let's try that right now: close out of any tiddlers you have open and find Jane's tiddler. Click in the search box in the upper right and type `Jane`.\\n\\nYou'll see a drop-down separated into //Title matches// and //All matches//. As you can see, matches within the title of a tiddler are prioritized, but we can also see tiddlers where we referred to Jane anywhere in the text field. Click on `JaneDoe`, and the appropriate tiddler opens up.\\n\\nIt's a smart idea to try to include the keywords you're most likely to search for in the titles of your tiddlers. Since the title is so short, you will nearly always have many fewer title matches than body matches, making it easier to spot the one you're looking for.\\n\\nPressing Ctrl+Shift+F will focus the search box. After the search results pop open, you can use the up and down arrow keys to navigate through the results, and Enter to select the one you want to open.\\n\\n\\n!! Advanced search\\n\\nIf you click the magnifying glass icon <<textual-button \\\"advanced-search-button\\\">> to the right of the search box, you'll be taken to [[$:/AdvancedSearch]]. The only tab that will likely make sense to you right now is //Standard//, which does exactly the same thing as the search box in the sidebar. However, once you learn about [[System Tiddlers]], [[Shadow Tiddlers]], and [[Filters]], the respective tabs in this tiddler will be very handy, so keep advanced search in mind as you continue with TiddlyWiki.\\n\\n\\n!! Exercises\\n\\n{{Ex:SearchExploration||ExerciseTemplate}}\\n{{Ex:JohnDoeSearch||ExerciseTemplate}}\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\"},\"Send Feedback\":{\"title\":\"Send Feedback\",\"created\":\"20210102234130275\",\"modified\":\"20240727202228412\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\define getWikifyTarget() {{$(targetTiddler)$||$:/sib/DebugRenderTiddler}}\\n\\n<$let targetTiddler={{{ [{$:/temp/FeedbackCollector}get[target]] }}}>\\n\\n<table class=\\\"ta-feedback\\\">\\n  <tr>\\n    <th>Tiddler</th>\\n    <td>{{{ [{$:/temp/FeedbackCollector}get[target]] }}}<br>//<$text text={{{ [{$:/temp/FeedbackCollector}get[target]get[question]] }}}/>//</td>\\n    <td>You are sending feedback on this section.</td>\\n  </tr>\\n  <tr>\\n    <th>Email (optional)</th>\\n    <td><$edit-text tag=\\\"input\\\" tiddler={{$:/temp/FeedbackCollector}} field=\\\"email\\\"/></td>\\n    <td>If you would like the author to be able to contact you about your feedback.</td>\\n  </tr>\\n  <tr>\\n    <th>Comment</th>\\n    <td><$edit-text tag=\\\"textarea\\\" tiddler={{$:/temp/FeedbackCollector}} field=\\\"comment\\\"/></td>\\n    <td>What could be improved?</td>\\n  </tr>\\n  <tr>\\n    <th>Send tiddler</th>\\n    <td><$checkbox tiddler={{$:/temp/FeedbackCollector}} field=\\\"debug\\\" checked=\\\"yes\\\" unchecked=\\\"no\\\" default=\\\"no\\\"/></td>\\n    <td>To make understanding your feedback easier, we'll send along the contents of this section or takeaway, which will include any edits you've made to it.</td>\\n  </tr>\\n</table>\\n\\n<% if [{$:/temp/FeedbackCollector}get[comment]!is[blank]] %>\\n  <$wikify name=\\\"debuginfo\\\" output=\\\"text\\\" text=<<getWikifyTarget>>>\\n    <$button>\\n      <$action-sendfeedback\\n        tiddler=<<targetTiddler>>\\n        email={{{ [{$:/temp/FeedbackCollector}get[email]] }}}\\n        comment={{{ [{$:/temp/FeedbackCollector}get[comment]] }}}\\n        debuginfo=<<debuginfo>> />\\n      <$action-setfield $tiddler=\\\"$:/config/sobjornstad/GrokTiddlyWiki/Feedback/UserEmail\\\" $value={{{ [{$:/temp/FeedbackCollector}get[email]] }}}/>\\n      <$action-sendmessage $message=\\\"tm-close-tiddler\\\" $param=\\\"Send Feedback\\\"/>\\n      <$action-deletetiddler $tiddler={{$:/temp/FeedbackCollector}}/>\\n      <$action-deletetiddler $tiddler=\\\"$:/temp/FeedbackCollector\\\"/>\\n      Send\\n    </$button>\\n  </$wikify>\\n<% else %>\\n  //Please enter a comment.//\\n<% endif %>\\n\\n</$let>\\n\\n<style>\\n  table.ta-feedback tr td > textarea, table.ta-feedback tr td > input {\\n    width: 100%;\\n  }\\n\\n  table.ta-feedback th, table.ta-feedback tr {\\n    text-align: left;\\n    vertical-align: top;\\n  }\\n\\n  table.ta-feedback tr td:nth-child(3) {\\n    width: 30%;\\n  }\\n\\n  table.ta-feedback tr th {\\n    width: 130px;\\n  }\\n\\n  table.ta-feedback {\\n    width: 100%;\\n  }\\n</style>\"},\"Shadow Tiddlers\":{\"title\":\"Shadow Tiddlers\",\"created\":\"20200530170355218\",\"description\":\"Shadow tiddlers are tiddlers that are provided by plugins; they can be overridden if you want to customize a plugin.\",\"modified\":\"20241017003534585\",\"parent\":\"Looking Under the Hood\",\"tags\":\"Concept Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"We learned in the previous section that [[plugins|Plugins]] are special tiddlers that bundle together other tiddlers, and that these bundled tiddlers are called ''shadow tiddlers''.\\n\\nShadow tiddlers don't actually exist as tiddlers in your wiki. Instead, they're stored as part of the plugin tiddler. (To see how this works, go to the ''Plugins'' section of the ''More'' sidebar tab, select a plugin, and edit it. You'll see the text of numerous tiddlers embedded as [[JSON markup|Data Tiddlers]] within that single tiddler.) When TiddlyWiki is displaying your wiki, though, it largely pretends that these shadow tiddlers are normal tiddlers -- while it generally hides them from searches and filters, they'll show up in the Explorer tab, and you can open, transclude, and link to them as if they were normal tiddlers.\\n\\nThere's one very important exception, though: if your wiki also has a normal tiddler with the same name as the shadow tiddler, the shadow tiddler is completely ignored in favor of the normal one. The shadow tiddler is then said to be ''overridden''.\\n\\n!! Overriding shadow tiddlers\\n\\nHere's why this is useful: If you have a plugin (including the TiddlyWiki core, which, as we just saw in the [[Plugins]] section, is a plugin), sometimes you might want to make some minor changes to it -- say there's a typo in the user interface, or it prints text in red and that's hard to read on your screen and you would rather see it in orange. Rather than having to get a copy of the plugin's source code and rewrite the whole thing, you can simply ''override the relevant shadow tiddler''.\\n\\nFrom your perspective, to edit a shadow tiddler, you just find the relevant tiddler (usually in the ''Explorer'' view under the ''More'' sidebar tab, or using Advanced Search), then edit it and make your changes. When you do this, you'll get a dialog box informing you that you are about to edit a shadow tiddler. If you agree, behind the scenes, TiddlyWiki copies the shadow tiddler out of the plugin into a real tiddler in your wiki, so that when you save your changes they end up in a normal tiddler.\\n\\nIf you delete an overridden shadow tiddler, TiddlyWiki returns to using the version in the plugin. This is a nice way to start over if you ever mess up or want to restore the default behavior.\\n\\nWhen editing an overridden shadow tiddler, if you click the very rightmost drop-down button on the edit toolbar, there is an option called “differences from shadow (if any)”. If you also have the preview pane open, this will visually show what's been removed (in red) and added (in green) in comparison to the default version of the shadow tiddler stored in the plugin, which can be useful if you have to manually merge changes (see the section below), or if you don't remember anymore what you changed three months ago. Programmers call this view a //diff//.\\n\\n\\n!! The dangers of over-overriding\\n\\nBefore you get too excited about overriding shadow tiddlers, beware: if you override too many, ''it may become very difficult to upgrade your wiki and your plugins''. If a new version of the plugin changes the tiddler you overrode, you won't see those changes, since your overridden shadow tiddler prevents TiddlyWiki from ever looking at the plugin's new version. In this case, you may experience odd behavior, since the newly upgraded plugin relies on changes in that overridden tiddler that aren't active in your wiki, and you'll have to manually pick out the changes and merge together your two versions to fix the problem.\\n\\nDoing this for a handful of targeted shadow tiddlers is no big deal. But if you override large portions of your wiki, you're going to be in for a world of hurt! So it's worth taking a moment before editing a shadow tiddler to be sure there's no other way of making the changes you're looking for (perhaps there's actually a mechanism designed for customizing the thing you're trying to change). People discussing solutions on the TiddlyWiki forums will sometimes say things like, “No shadow tiddlers were harmed in this customization,” meaning nothing had to be overridden.\\n\\nMost configuration settings are also internally handled by overriding shadow tiddlers. There's generally no need to worry about doing this, since the core or plugin author will be aware that it's a configurable setting and won't change anything that would require you to merge your changes.\\n\\n\\n!! Finding shadow tiddlers\\n\\nAll shadow tiddlers are listed in the ''Shadows'' view under the ''More'' sidebar tab, and you can search for shadow tiddlers on the ''Shadows'' tab of Advanced Search.\\n\\nYou can identify shadow tiddlers in the ''Shadows'' view, the ''Explorer'' view, and the Shadows tab of Advanced Search because they're shown in a bold font. If you've overridden a shadow tiddler, it will show in a normal font. (//Grok TiddlyWiki// disables this mechanism because it uses shadow tiddlers for much of its content, so look in another wiki if you want to see how this works.)\\n\\nA filter for `[is[shadow]]` will bring up a list of ''only the overridden shadow tiddlers''; this can be useful if you want to see a list of your customizations in a given wiki, or if you upgrade your TiddlyWiki to the latest version, something's not working right, and you need to know what shadow tiddlers you might need to manually merge.\\n\\nBy default, filters do not match shadow tiddlers that have not been overridden. Up until now, we've been lying and saying that //all// the tiddlers in the wiki get put in the left end of a filter run. Actually, it is only all non-shadow tiddlers: the input of a filter run that doesn't start with an `all[something]` filter step is `all[tiddlers]`, which explicitly excludes shadow tiddlers (unless they have been overridden). If you want to see shadow tiddlers, both overridden and not overridden, start your filter run with `all[shadows]`. We actually witnessed this behavior in the exercise [[Ex:AlphabeticallyLastDescription]], all the way back in [[Common Filter Operators]], but we didn't have the context to explain it at the time.\\n\\nIf you want to really get //all// tiddlers, both shadow and non-shadow, start your filter run with `all[tiddlers+shadows]`. You will frequently see this step at the start of filter runs in live examples in //Grok TiddlyWiki//, since much of the content of the book is packaged as shadow tiddlers in the $:/plugins/sobjornstad/GrokTiddlyWiki plugin.\\n\\n(Note that the `+` in `tiddlers+shadows` is entirely unrelated to the `+` [[filter run prefix|Multi-Run Filters]] – the `all` operator interprets it in a special way. A filter run prefix would never be found inside a parameter.) \\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\"},\"Slicing Up Content\":{\"title\":\"Slicing Up Content\",\"created\":\"20210206155516669\",\"description\":\"We slice content up into tiddlers by modeling nouns related to our subject matter.\",\"modified\":\"20241014125711016\",\"parent\":\"Filing and Organizing\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"A large portion of the power of TiddlyWiki lies in its ability to reuse content in different contexts. The best way to create opportunities for reuse is to slice content up into tiddlers appropriately. The value of this kind of slicing will become much more obvious once you learn about [[filters|Filters]] in <<gtw.link-chapter-number \\\"Filtering and Formatting\\\">> and [[field transclusions|Field Transclusions]] in <<gtw.link-chapter-number \\\"Transclusion\\\">>. However, there is already value even when our only means of reusing content is [[linking to it|Links]], and it's a good idea to start thinking about these issues now regardless, so that you'll be prepared to integrate the ideas you learn in those chapters.\\n\\n\\n!! What makes an appropriately sliced tiddler?\\n\\nMany new users of TiddlyWiki start by creating what experienced users would consider monster tiddlers, containing pages-long bulleted lists, lots of headings and subheadings, and so on. As such, a good rule of thumb, when you're getting started, is to ''create more tiddlers than you think you should''. Another good rule of thumb is that ''a tiddler shouldn't get so large that it doesn't fit on your screen without scrolling'' (exactly how large this means the tiddler is of course depends a great deal on what kind of monitor you're using, but unless you are using a truly tiny monitor at low resolution, it's unlikely to suggest your tiddlers should be too small).\\n\\nHowever, while size does matter, it's not the critical factor in how content should be broken up into tiddlers. After all, if it were, TiddlyWiki could break our content up into lots of tiddlers all by itself, perhaps using one tiddler per paragraph or word, and save us some work. Dividing content into tiddlers really has more to do with conceptual boundaries than physical ones -- that is, the appearance of the text or other content on the screen isn't important, but rather how the objects and ideas described by the content relate to each other.\\n\\nWe will now benefit from a new metaphor for [[tiddlers|Tiddlers]]. Tiddlers serve as ''models of nouns'' -- people, things, ideas. Nouns have various properties or aspects; we represent this by adding fields, like //phone number//, //source//, //author//, //temperature//, and so on, to our tiddlers.\\n\\nSimple nouns may be sufficiently described by several of these fields. More complex ones likely also need some text that we write out to describe them -- but since TiddlyWiki can't understand and reuse the content in the text field as well as it can the content in our other custom fields, it's best to be sure that we can't store the information in a field before writing it in the text field. For instance, we shouldn't create a bulleted list like this in a tiddler describing a person:\\n\\n* ''Phone number:'' (212) 555-1234\\n* ''Email:'' alice@example.com\\n* ''Address'': …\\n\\nThis is all information we could easily place in fields, and then we would be able to refer to it from other tiddlers and in searches in the future.\\n\\nNouns also relate to other nouns. For instance, they might be ''part of another noun'' (tagged with that noun), ''similar to another noun'' (linked to that noun), or any number of other relationships (if the precise type of relationship is important, we can create a field named for that relationship, as we did in [[Contact Tiddlers]] for the contact's manager and family members).\\n\\nTiddlers can serve in several more complicated roles as well. They still model nouns, but those nouns do more than just store information about a thing:\\n\\n* They can ''gather together lists of other nouns'' that meet some criteria; in this way, they act like //sentences//, enumerating and expressing the relationships between other things. Their titles [[can then give the relationship a concise name|Tiddler Titles]]. We'll learn about this role in <<gtw.link-chapter-number \\\"Filtering and Formatting\\\">>, specifically when we [[create dynamic lists|Your First Dynamic List]].\\n* They can ''modify the way we see other tiddlers''; in this way, they act like //lenses//. We'll learn about this role in <<gtw.link-chapter-number \\\"Transclusion\\\">>, specifically in the section on [[templates|Templates and the Current Tiddler]].\\n* They can ''perform actions'' and modify other nouns; in this way, they act like //machines//. We'll learn about this role in <<gtw.link-chapter-number \\\"Looking Under the Hood\\\">> and <<gtw.link-chapter-number \\\"Tips and Tricks\\\">>.\\n\\nTo summarize, the key discipline of slicing up your tiddlers is to consider what noun(s) you're modeling, and ensure that only content related to each noun ends up in its tiddler, creating more tiddlers and relating them together as necessary to express more complex ideas.\\n\\n\\n!! What about slicing up wikis?\\n\\nOften people wonder if they should create one large wiki or lots of smaller wikis. As with most questions in life, the answer is “it depends.”\\n\\nCreating different wikis that have the same //function// is usually an antipattern. For instance, if you're a student, it's better not to create one wiki for your notes on your math class and another for your notes on your history class. It's not just possible but likely that you'll eventually find connections between your classes, and when you can [[link these completely different ideas together|https://mosmu.se/#DontPartitionKnowledge]], you begin to understand much more about both disciplines and are far more likely to come up with entirely new ideas.\\n\\nFurther, you gain little benefit from a TiddlyWiki perspective from splitting them up. Presumably the design of your wiki and the plugins you include in it will not differ tremendously based on the subject matter -- the much more important element is that you're taking notes on a class. (Sure, you might need to add a plugin for math notation when you're taking math notes, but it won't get in the way of your history notes. And if you want to be able to limit your searches to a single class, you can place a tag or field on each tiddler to identify the class it goes with.) Meanwhile, if you create multiple wikis, you'll have to go duplicate any awesome new customizations you come up with in all of them, making extra work for yourself.\\n\\nWhen you get to entirely different functions -- for instance, your class notes and a tool for managing your favorite recipes -- separate wikis may make more sense. Still, there is no hard and fast rule.\\n\\n\\n!! In //Grok TiddlyWiki//\\n\\nIn the //Grok TiddlyWiki// wiki, each chapter and section has a tiddler. Sections use the `parent` field to describe which chapter they're a part of; tags would work just as well here, but I wanted to keep the list of tags small and neat in this book. Each takeaway, live example, lie (link with a dashed underline), and exercise has its own tiddler. Answers to exercises have their own tiddler.\\n\\nYou can see that the book is neatly divided into its component parts and concepts by this model. Some of the section tiddlers are a little longer than I would consider ideal, but I felt keeping a one-to-one correspondence between tiddlers and sections of the book was more important than the size of those tiddlers, and if a section got too long, I looked to split up the section.\\n\\nYou might wonder how takeaways, exercises, examples, and lies appear within sections if they are separate tiddlers. This relies on [[transclusion|Field Transclusions]], which we'll learn about in <<gtw.link-chapter-number \\\"Transclusion\\\">>, and in some cases [[filters|Filters]], which we'll learn about in <<gtw.link-chapter-number \\\"Filtering and Formatting\\\">>.\\n\\n\\n!! In our sample wiki\\n\\nOffice notes are harder to slice up than books because the lines between the nouns involved are fuzzier; there often isn't one obvious place to split up a set of notes. Nevertheless, our tiddler types, which we discussed in [[Structuring Our Wiki]], are different classes of nouns. And as we started talking about [[knowledge tiddlers|Knowledge Tiddlers]], we worked to pull individual ideas into their own tiddlers. Fortunately, if it turns out a tiddler needs to be split up, or several tiddlers need to be combined, doing so is straightforward.\\n\\n\\n!! Exercises\\n\\n{{Ex:SlicingInGtw||ExerciseTemplate}}\\n{{Ex:Slicing||ExerciseTemplate}}\\n\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\\n\"},\"Sn:AardvarkChunkLink\":{\"title\":\"Sn:AardvarkChunkLink\",\"created\":\"20240925235448341\",\"modified\":\"20240925235521849\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$let wikipedia=\\\"https://en.wikipedia.org/wiki/\\\">\\n  <<wikipedia>>Aardvark\\n</$let>\"},\"Sn:AlphabeticallyLastFilter\":{\"title\":\"Sn:AlphabeticallyLastFilter\",\"created\":\"20210131164939148\",\"modified\":\"20210131164840963\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"{{{ [all[shadows]tag[$:/tags/EditorToolbar]get[description]split[{{]split[}}]get[text]!sort[]first[]] }}}\"},\"Sn:AlternatelyFixedCStartTiddlers\":{\"title\":\"Sn:AlternatelyFixedCStartTiddlers\",\"created\":\"20240831224029289\",\"modified\":\"20240831224046603\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\procedure tiddlers-starting-with-C() [all[shadows+tiddlers]prefix[C]]\\n\\n<$list filter=<<tiddlers-starting-with-C>>>\\n  <$link /><br>\\n</$list>\"},\"Sn:AnimalLinkText\":{\"title\":\"Sn:AnimalLinkText\",\"created\":\"20210116210305365\",\"modified\":\"20210327153631877\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\define wikipediaLink(articleName, linkText)\\n[[$linkText$|https://en.wikipedia.org/wiki/$articleName$]]\\n\\\\end\\n\\n\\\\define animalLinkText(initialLetter)\\nAn animal which begins with $initialLetter$\\n\\\\end\\n\\n* <$macrocall $name=\\\"wikipediaLink\\\" linkText=<<animalLinkText A>> articleName=\\\"Aardvark\\\" />\\n* <$macrocall $name=\\\"wikipediaLink\\\" linkText=<<animalLinkText B>> articleName=\\\"Bee\\\" />\\n* <$macrocall $name=\\\"wikipediaLink\\\" linkText=<<animalLinkText C>> articleName=\\\"Cow\\\" />\"},\"Sn:AtAtClass\":{\"title\":\"Sn:AtAtClass\",\"created\":\"20210116213810262\",\"modified\":\"20210116213859544\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<style>\\n.my-funny-class {\\n  background-color: blue;\\n  color: yellow;\\n  font-size: 150%;\\n  border: 3px dotted orange;\\n  text-align: right;\\n}\\n</style>\\n\\n@@.my-funny-class\\nHere is some funny-looking text.\\n@@\"},\"Sn:AtAtStyle\":{\"title\":\"Sn:AtAtStyle\",\"created\":\"20210116213756531\",\"modified\":\"20210116213706727\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"@@background-color: red;\\nHere is a red area.\\n@@\"},\"Sn:AttributeParameterSubstitution\":{\"title\":\"Sn:AttributeParameterSubstitution\",\"created\":\"20210502185915679\",\"modified\":\"20240923224451319\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\procedure myText(text) Text: <<text>>\\n\\n* ''OK:'' <<myText \\\"test text\\\">>\\n* ''Bad:'' <$text text=<<myText \\\"test text\\\">>/>\"},\"Sn:AttributeParameterSubstitutionMacro\":{\"title\":\"Sn:AttributeParameterSubstitutionMacro\",\"created\":\"20240923224605240\",\"modified\":\"20240923224629071\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\define myText(text) Text: $text$\\n\\n* ''OK:'' <<myText \\\"test text\\\">>\\n* ''Also OK:'' <$text text=<<myText \\\"test text\\\">>/>\"},\"Sn:AttributeParameterSubstitutionWikified\":{\"title\":\"Sn:AttributeParameterSubstitutionWikified\",\"created\":\"20240923224711347\",\"modified\":\"20240923225957225\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\procedure myText(text) Text: <<text>>\\n\\n''OK:'' <<myText \\\"test text\\\">>\\n\\n<$wikify name=\\\"wikitext\\\" text=\\\"\\\"\\\"<<myText \\\"test text\\\">>\\\"\\\"\\\">\\n\\n''Also OK:'' <$text text=<<wikitext>>/>\\n\\n</$wikify>\"},\"Sn:AuthorizationBypass\":{\"title\":\"Sn:AuthorizationBypass\",\"created\":\"20210207222708735\",\"modified\":\"20241016130804346\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\define checkAuthorization(password)\\n<% if [[$password$]match{$:/config/SecretPasswordExample}] %>\\n  The user is authorized.\\n<% endif %>\\n\\\\end\\n\\n<<checkAuthorization \\\"\\\">>\"},\"Sn:AuthorizationUnbypass\":{\"title\":\"Sn:AuthorizationUnbypass\",\"created\":\"20210207224335516\",\"modified\":\"20241016130910712\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\define checkAuthorization(password)\\n<% if [<__password__>match{$:/config/SecretPasswordExample}] %>\\n  The user is authorized.\\n<% endif %>\\n\\\\end\\n\\n<<checkAuthorization \\\"]\\\">>\"},\"Sn:BadImageTransclusions\":{\"title\":\"Sn:BadImageTransclusions\",\"created\":\"20210818031724336\",\"modified\":\"20210818122128913\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<!-- Set the current tiddler to this section, so it doesn't matter what tiddler the example snippet is stored in -->\\n<$tiddler tiddler=\\\"Constant strings cannot be combined with transclusions\\\">\\n\\n1\\n{{<<currentTiddler>>.png}}\\n\\n2\\n[img [<<currentTiddler>>.png]]\\n\\n3\\n[img [{{!!title}}.png]]\\n\\n4\\n<$image source={{!!title}}.png/>\\n\\n5\\n<$image source=\\\"{{!!title}}.png\\\"/>\\n\\n6\\n<$image source={{!!title}}\\\".png\\\"/>\\n\\n7\\n<img src=\\\"{{!!title}}.png\\\">\\n\\n</$tiddler>\"},\"Sn:BlockInlineComparison\":{\"title\":\"Sn:BlockInlineComparison\",\"created\":\"20210116172454679\",\"modified\":\"20210410142121440\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<div style=\\\"background-color: red;\\\">Element 1</div>\\n<div style=\\\"background-color: yellow;\\\">Element 2</div>\\n\\n<hr>\\n\\n<span style=\\\"background-color: red;\\\">Element 1</span>\\n<span style=\\\"background-color: yellow;\\\">Element 2</span>\"},\"Sn:BlockInlineContextLtc\":{\"title\":\"Sn:BlockInlineContextLtc\",\"created\":\"20210116175919244\",\"modified\":\"20210116175910453\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<span>Here's an adjacent span.</span>\\n<span style=\\\"color: orange;\\\">My first line, directly inside the span.\\n<p>Here is a paragraph nested inside of the span.</p>\\nHere is another line directly inside the span.</span>\\n<span>Here's an adjacent span.</span>\"},\"Sn:BoldItalicsWidget\":{\"title\":\"Sn:BoldItalicsWidget\",\"created\":\"20240901045923535\",\"modified\":\"20240901045939724\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\widget $format.bold-italics(text)\\n  ''//<<text>>//''\\n\\\\end\\n\\n<$format.bold-italics text=\\\"Test text\\\"/>\"},\"Sn:BoldItalicsWidgetBody\":{\"title\":\"Sn:BoldItalicsWidgetBody\",\"created\":\"20240901050231572\",\"modified\":\"20240901050321981\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\widget $format.bold-italics()\\n''//<$slot $name=\\\"ts-raw\\\" />//''\\n\\\\end\\n\\n<$format.bold-italics>\\nTest text\\n</$format.bold-italics>\"},\"Sn:BoldfaceTemplate\":{\"title\":\"Sn:BoldfaceTemplate\",\"created\":\"20210131144834836\",\"modified\":\"20210131144753826\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<strong><$transclude mode=\\\"block\\\"/></strong>\"},\"Sn:BrokenRevealTable\":{\"title\":\"Sn:BrokenRevealTable\",\"created\":\"20210123193535968\",\"modified\":\"20241012223544308\",\"showtest\":\"yes\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$checkbox field=\\\"showtest\\\" checked=\\\"yes\\\" unchecked=\\\"no\\\"> Show an extra column</$checkbox>\\n<table>\\n<tr>\\n  <th>Column 1</th>\\n  <$reveal state=\\\"!!showtest\\\" type=\\\"match\\\" text=\\\"yes\\\">\\n  <th>Extra column</th>\\n  </$reveal>\\n  <th>Column 2</th>\\n</tr>\\n<tr>\\n  <td>Data 1</td>\\n  <$reveal state=\\\"!!showtest\\\" type=\\\"match\\\" text=\\\"yes\\\">\\n  <td>Magic extra data</td>\\n  </$reveal>\\n  <td>Data 2</td>\\n</tr>\\n</table>\"},\"Sn:BrokenWikipediaLinkMacro\":{\"title\":\"Sn:BrokenWikipediaLinkMacro\",\"created\":\"20240911133929998\",\"modified\":\"20240911134001344\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\define wikipediaLink(articleName)\\n  <a href=`https://en.wikipedia.org/wiki/$(articleName)$`>\\n  <<articleName>></a>\\n\\\\end\\n\\nThe <<wikipediaLink Aardvark>> is a pig-like African mammal that eats ants and termites.\"},\"Sn:BuggyCStartTiddlers\":{\"title\":\"Sn:BuggyCStartTiddlers\",\"created\":\"20240831223141583\",\"modified\":\"20240831223148878\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\function tiddlers-starting-with-C() [all[shadows+tiddlers]prefix[C]]\\n\\n<$list filter=<<tiddlers-starting-with-C>>>\\n  <$link /><br>\\n</$list>\"},\"Sn:CaptionFieldTemplate\":{\"title\":\"Sn:CaptionFieldTemplate\",\"created\":\"20210314125223866\",\"modified\":\"20210314125233928\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"The caption of the current tiddler is “{{!!caption}}”.\"},\"Sn:ChapterFilterTransclusion\":{\"title\":\"Sn:ChapterFilterTransclusion\",\"created\":\"20210116211707689\",\"modified\":\"20210817230244878\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"{{{ [all[shadows+tiddlers]tag[Section]first[5]] }}}\"},\"Sn:CircleMathNestingExample\":{\"title\":\"Sn:CircleMathNestingExample\",\"created\":\"20240831215112634\",\"modified\":\"20241008115655149\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\procedure pi() 3.1415926\\n\\n\\\\function .square() [power[2]]\\n\\\\function .radius-to-area() [.square[]multiply<pi>]\\n\\\\function .radius-to-diameter() [multiply[2]]\\n\\\\function .radius-to-circumference() [.radius-to-diameter[]multiply<pi>]\\n\\n\\\\function circle-area(radius) [<radius>.radius-to-area[]fixed[2]]\\n\\\\function circle-circumference(radius) [<radius>.radius-to-circumference[]fixed[2]]\\n\\n<$list filter=\\\"1 2 3\\\" variable=\\\"r\\\">\\n  <li>\\n    Circle with radius <<r>>\\n    <ul>\\n      <$list filter=\\\"area circumference\\\" variable=\\\"measurement\\\">\\n        <$let\\n          funcName=`circle-$(measurement)$`\\n        >\\n          <li>\\n            <<measurement>>:\\n            <$transclude $variable=<<funcName>> radius=<<r>>/>\\n          </li>\\n        </$let>\\n      </$list>\\n    </ul>\\n  </li>\\n</$list>\"},\"Sn:CircleMathRearrangement\":{\"title\":\"Sn:CircleMathRearrangement\",\"created\":\"20240831222004624\",\"modified\":\"20241008115714561\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\function circle-area(radius) [<radius>.radius-to-area[]fixed[2]]\\n\\\\function circle-circumference(radius) [<radius>.radius-to-circumference[]fixed[2]]\\n\\n\\\\function .radius-to-area() [.square[]multiply<pi>]\\n\\\\function .radius-to-diameter() [multiply[2]]\\n\\\\function .radius-to-circumference() [.radius-to-diameter[]multiply[2]multiply<pi>]\\n\\n\\\\function .square() [power[2]]\\n\\n\\\\procedure pi() 3.1415926\\n\\n<$list filter=\\\"1 2 3\\\" variable=\\\"r\\\">\\n  <li>\\n    Circle with radius <<r>>\\n    <ul>\\n      <$list filter=\\\"area circumference\\\" variable=\\\"measurement\\\">\\n        <$let\\n          funcName=`circle-$(measurement)$`\\n        >\\n          <li>\\n            <<measurement>>:\\n            <$transclude $variable=<<funcName>> radius=<<r>>/>\\n          </li>\\n        </$let>\\n      </$list>\\n    </ul>\\n  </li>\\n</$list>\"},\"Sn:ConceptTabs\":{\"title\":\"Sn:ConceptTabs\",\"created\":\"20210103172939715\",\"modified\":\"20210410185433235\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<<tabs \\\"[all[shadows+tiddlers]tag[Concept]]\\\" \\\"Tiddlers\\\">>\"},\"Sn:ConditionalExpressionsExample\":{\"title\":\"Sn:ConditionalExpressionsExample\",\"created\":\"20240829224753084\",\"modified\":\"20241001021009843\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<% if [<storyTiddler>match[Conditional Expressions]] %>\\n  The title of the current tiddler is “Conditional Expressions”.\\n<% endif %>\\n\\n<% if [<storyTiddler>match[When Pigs Fly]] %>\\n  Pigs are flying – better watch out!\\n<% endif %>\"},\"Sn:CorrectAndIncorrectLists\":{\"title\":\"Sn:CorrectAndIncorrectLists\",\"created\":\"20210116184450150\",\"modified\":\"20210116190643884\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"A correct list:\\n\\n* Item 1\\n* Item 2\\n* Item 3\\n\\nText after the correct list.\\n\\nAn incorrect list:\\n* Item 1\\n* Item 2\\n* Item 3\\nText after the incorrect list.\"},\"Sn:CountWidget\":{\"title\":\"Sn:CountWidget\",\"created\":\"20210206210742073\",\"modified\":\"20210512022735796\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"There are <$text text={{{ [all[tiddlers+shadows]tag[Section]count[]] }}}/> sections in this book.\\n\\nThere are <$count filter=\\\"[all[tiddlers+shadows]tag[Section]]\\\"/> sections in this book.\"},\"Sn:DefaultProcedureParameterValues\":{\"title\":\"Sn:DefaultProcedureParameterValues\",\"created\":\"20210116205525709\",\"modified\":\"20240929013559111\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\procedure wikipediaLink(articleName, linkText:\\\"Wikipedia Link\\\")\\n  <a href=`https://en.wikipedia.org/wiki/$(articleName)$`>\\n  <<linkText>></a>\\n\\\\end\\n\\n<<wikipediaLink Aardvark>>\\n<<wikipediaLink Aardvark \\\"Wikipedia on aardvarks\\\">>\"},\"Sn:DirectAngleBrace\":{\"title\":\"Sn:DirectAngleBrace\",\"created\":\"20210120032534130\",\"modified\":\"20240925233808961\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"{{{ [[abc]addsuffix[def]] }}}\\n\\n<$let myVariable=\\\"abc\\\">\\n  {{{ [<myVariable>addsuffix[def]] }}}\\n</$let>\"},\"Sn:DynamicSelectExample\":{\"title\":\"Sn:DynamicSelectExample\",\"created\":\"20210206212711611\",\"modified\":\"20210817225459766\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Section: \\n<$select tiddler=\\\"$:/temp/SectionSelectorExample\\\" default=\\\"\\\">\\n  <option value=\\\"\\\">(choose a section)</option>\\n  <$list filter=\\\"[all[tiddlers+shadows]tag[Section]]\\\">\\n    <option value=<<currentTiddler>>>\\n      <<currentTiddler>>\\n    </option>\\n  </$list>\\n</$select>\\n\\n<$list filter=\\\"[{$:/temp/SectionSelectorExample}!is[blank]]\\\" variable=\\\"selectedTiddler\\\" emptyMessage=\\\"Please choose a section.\\\">\\n  The blurb of the section //<<selectedTiddler>>// is “<$transclude tiddler=<<selectedTiddler>> field=\\\"description\\\"/>”\\n</$list>\\n\"},\"Sn:EditableUserWhoClicked\":{\"title\":\"Sn:EditableUserWhoClicked\",\"created\":\"20210116212617639\",\"modified\":\"20210117010422482\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"userwhoclicked\":\"\",\"text\":\"<$edit-text tiddler=\\\"$:/temp/EditingUserName\\\" tag=\\\"input\\\" default=\\\"\\\"/>\\n<$button set=\\\"!!userwhoclicked\\\" setTo={{$:/temp/EditingUserName}}>Save User Who Clicked</$button>\\n\\nThe `userwhoclicked` field is set to \\\"{{!!userwhoclicked}}\\\".\"},\"Sn:EmployeeInformationSystemDisclaimer\":{\"title\":\"Sn:EmployeeInformationSystemDisclaimer\",\"created\":\"20210116203503331\",\"modified\":\"20210116203413436\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$set name=\\\"disclaimer\\\" value=\\\"(This paragraph does not represent the formal opinion of my company.)\\\">\\n\\nThe Employee Information System at this nice company allows employees to perform tasks such as:\\n\\n* update their names and other personal information (on the front page after signing in)\\n* view pay stubs (\\\"remuneration\\\" tab)\\n* request vacation dates (\\\"time off\\\" tab)\\n<<disclaimer>>\\n\\nYou need to use the Really Annoying Five-Factor Authentication Process to get into the Employee Information System if it is a Tuesday, unless you have also purchased coffee (tea or pastries do not count) in the company cafeteria earlier in the day. <<disclaimer>>\\n\\nJaneDoe taught me about the EIS in our EmployeeProfileSetupMeeting. <<disclaimer>>\\n\\n</$set>\"},\"Sn:EmployeeInformationSystemDisclaimerLet\":{\"title\":\"Sn:EmployeeInformationSystemDisclaimerLet\",\"created\":\"20240616141810468\",\"modified\":\"20240616143105143\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$let \\n  raffap=\\\"Really Annoying Five-Factor Authentication Process\\\"\\n  eis-drink=\\\"coffee\\\"\\n  disclaimer=\\\"(This paragraph does not represent the formal opinion of my company.)\\\"\\n>\\n\\nYou need to use the <<raffap>> to get into the EmployeeInformationSystem if it is a Tuesday, unless you have also purchased <<eis-drink>> (tea or pastries do not count) in the company cafeteria earlier in the day. <<disclaimer>>\\n\\n</$let>\"},\"Sn:EmployeeInformationSystemExample\":{\"title\":\"Sn:EmployeeInformationSystemExample\",\"created\":\"20210116192623958\",\"modified\":\"20210504022048490\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"The Employee Information System at this nice company allows employees to perform tasks such as:\\n\\n* update their names and other personal information (on the front page after signing in)\\n* view pay stubs (“remuneration” tab)\\n* request vacation dates (“time off” tab)\\n\\nYou need to use the Really Annoying Five-Factor Authentication Process to get into the Employee Information System if it is a Tuesday, unless you have also purchased coffee (tea or pastries do not count) in the company cafeteria earlier in the day.\"},\"Sn:ExternalLinkATag\":{\"title\":\"Sn:ExternalLinkATag\",\"created\":\"20240616145720038\",\"modified\":\"20240616145720038\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<a href=\\\"https://en.wikipedia.org/wiki/Aardvark\\\">\\n  https://en.wikipedia.org/wiki/Aardvark\\n</a>\\n\\n<a href=\\\"https://en.wikipedia.org/wiki/Aardvark\\\">Aardvark</a>\"},\"Sn:ExternalLinkMethods\":{\"title\":\"Sn:ExternalLinkMethods\",\"created\":\"20240616145706115\",\"modified\":\"20240616150019106\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<!-- We can just write the link directly in our wikitext. -->\\nhttps://en.wikipedia.org/wiki/Aardvark\\n\\n<!-- Or we can use the wikilink syntax, using the same target and text. -->\\n[[https://en.wikipedia.org/wiki/Aardvark]]\\n\\n<!-- Or we can use the wikilink syntax, using different target and text. -->\\n[[Aardvark|https://en.wikipedia.org/wiki/Aardvark]]\"},\"Sn:FixedCStartTiddlers\":{\"title\":\"Sn:FixedCStartTiddlers\",\"created\":\"20240831223151205\",\"modified\":\"20240831223209640\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\function tiddlers-starting-with-C() [all[shadows+tiddlers]prefix[C]]\\n\\n<$list filter=\\\"[function[tiddlers-starting-with-C]]\\\">\\n  <$link /><br>\\n</$list>\"},\"Sn:FixedWikipediaLinkMacro\":{\"title\":\"Sn:FixedWikipediaLinkMacro\",\"created\":\"20240913122718774\",\"modified\":\"20240913122751209\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\define wikipediaLink(articleName)\\n  <a href=\\\"https://en.wikipedia.org/wiki/$articleName$\\\">\\n  <<__articleName__>></a>\\n\\\\end\\n\\nThe <<wikipediaLink Aardvark>> is a pig-like African mammal that eats ants and termites.\"},\"Sn:GoodImageTransclusionFilter\":{\"title\":\"Sn:GoodImageTransclusionFilter\",\"created\":\"20210818121930067\",\"modified\":\"20210818122035251\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$tiddler tiddler=\\\"Constant strings cannot be combined with transclusions\\\">\\n<$image source={{{ [{!!title}addsuffix[.png]] }}}/>\\n</$tiddler>\"},\"Sn:Hi\":{\"title\":\"Sn:Hi\",\"created\":\"20240927112738084\",\"description\":\"\\\\parameters(interlocutor, speaker) <<speaker>> is talking to <<interlocutor>>\",\"modified\":\"20240927113359650\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\parameters(interlocutor, speaker)\\nHi <<interlocutor>>, I'm <<speaker>>!\"},\"Sn:HiTransclusion\":{\"title\":\"Sn:HiTransclusion\",\"created\":\"20240927112750106\",\"modified\":\"20240927112805077\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"{{Sn:Hi|Alice|Bob}}\"},\"Sn:HiTransclusionDescription\":{\"title\":\"Sn:HiTransclusionDescription\",\"created\":\"20240927113512688\",\"modified\":\"20240927113555142\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"{{Sn:Hi!!description|Alice|Bob}}\\n\\n<$transclude $tiddler=\\\"Sn:Hi\\\" $field=\\\"description\\\" interlocutor=\\\"Carol\\\" speaker=\\\"Daniel\\\"/>\"},\"Sn:HiTransclusionWidget\":{\"title\":\"Sn:HiTransclusionWidget\",\"created\":\"20240927112852642\",\"modified\":\"20240927112918342\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$transclude $tiddler=\\\"Sn:Hi\\\" interlocutor=\\\"Alice\\\" speaker=\\\"Bob\\\"/>\"},\"Sn:HtmlComments\":{\"title\":\"Sn:HtmlComments\",\"created\":\"20210117012121365\",\"modified\":\"20210117012853774\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<!-- This is a comment. -->\\n\\nHere's some ordinary text that appears in the output. On the other hand, the <!-- secret --> word doesn't show up.\\n\\n<!--\\nA comment can go on\\nfor multiple lines\\nif you like.\\n-->\\n\\n<!--\\nHTML and wikitext can be included in comments. It's ''easy as''\\n\\n<ul style=\\\"color: red;\\\">\\n  <li>one</li>\\n  <li>two</li>\\n  <li>three.</li>\\n</ul>\\n-->\\n\\nHere's an uncommented list:\\n\\n<!-- The * creates a wikitext list. -->\\n* four\\n* five\\n* six\"},\"Sn:HtmlCorrectlyNestedList\":{\"title\":\"Sn:HtmlCorrectlyNestedList\",\"created\":\"20210116193606277\",\"modified\":\"20210116193550029\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<ul>\\n  <li>Item 1\\n    <ul>\\n      <li>Subitem 1</li>\\n      <li>Subitem 2</li>\\n    </ul>\\n  </li>\\n</ul>\\n\\nSome later text.\"},\"Sn:HtmlHtmlList\":{\"title\":\"Sn:HtmlHtmlList\",\"created\":\"20210116193403174\",\"modified\":\"20210116193313361\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<ul>\\n  <li>Item 1</li>\\n  <li>Item 2</li>\\n</ul>\"},\"Sn:HtmlIncorrectlyNestedList\":{\"title\":\"Sn:HtmlIncorrectlyNestedList\",\"created\":\"20210116193620018\",\"modified\":\"20210116193557083\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<ul>\\n  <li>Item 1\\n    <ul>\\n      <li>Subitem 1</li>\\n      <li>Subitem 2</li>\\n    </li>\\n  </ul>\\n</ul>\\n\\nSome later text.\"},\"Sn:HtmlNoWhitespace\":{\"title\":\"Sn:HtmlNoWhitespace\",\"created\":\"20210116193722640\",\"modified\":\"20210116193632773\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<ul><li>Item 1<ul><li>Subitem 1</li><li>Subitem 2</li></ul></li></ul>\"},\"Sn:HtmlNonSelfClosing\":{\"title\":\"Sn:HtmlNonSelfClosing\",\"created\":\"20210116193523597\",\"modified\":\"20210116193433781\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<ul>\\n  <li>Item 1</li>\\n  <li></li>\\n</ul>\"},\"Sn:HtmlOrangeList\":{\"title\":\"Sn:HtmlOrangeList\",\"created\":\"20210116193454704\",\"modified\":\"20210116193404923\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<ul style=\\\"color: orange;\\\">\\n  <li>Item 1</li>\\n  <li>Item 2</li>\\n</ul>\"},\"Sn:HtmlSelfClosing\":{\"title\":\"Sn:HtmlSelfClosing\",\"created\":\"20210116193534717\",\"modified\":\"20210116193444901\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<ul>\\n  <li>Item 1</li>\\n  <li />\\n</ul>\"},\"Sn:HtmlTable\":{\"title\":\"Sn:HtmlTable\",\"created\":\"20210117010700104\",\"modified\":\"20210117010610097\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<table>\\n  <tr>\\n    <th>Header 1</th>\\n    <th>Header 2</th>\\n  </tr>\\n  <tr>\\n    <td>Cell 1</td>\\n    <td>Cell 2</td>\\n  </tr>\\n</table>\"},\"Sn:HtmlWackoWhitespace\":{\"title\":\"Sn:HtmlWackoWhitespace\",\"created\":\"20210116193744495\",\"modified\":\"20210116194420173\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"  <ul      >\\n\\n<li>Item 1<ul >\\n<li >Subitem     1</li>\\n\\n\\n  <li>\\n      Subitem 2</li></ul>\\n      </li>\\n\\n</ul>\"},\"Sn:HtmlWikitextList\":{\"title\":\"Sn:HtmlWikitextList\",\"created\":\"20210116193355900\",\"modified\":\"20210116193306134\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"* Item 1\\n* Item 2\"},\"Sn:ImageTransclusionName\":{\"title\":\"Sn:ImageTransclusionName\",\"created\":\"20210818121339333\",\"modified\":\"20210818122148124\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$tiddler tiddler=\\\"Constant strings cannot be combined with transclusions\\\">\\n\\nThe image should be called \\\"{{!!title}}.png\\\".\\n\\n</$tiddler>\"},\"Sn:IncludeMe\":{\"title\":\"Sn:IncludeMe\",\"caption\":\"Include me please!\",\"created\":\"20210131144740960\",\"modified\":\"20210131144657032\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Here is some text to be transcluded.\"},\"Sn:InitialAardvarkWikipediaLink\":{\"title\":\"Sn:InitialAardvarkWikipediaLink\",\"created\":\"20210116203723828\",\"modified\":\"20240616173607719\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\procedure wikipediaLink(articleName)\\n  <a href=`https://en.wikipedia.org/wiki/$(articleName)$`>\\n  <<articleName>></a>\\n\\\\end\\n\\nThe <<wikipediaLink Aardvark>> is a pig-like African mammal that eats ants and termites.\"},\"Sn:JaneDoeJournalStart\":{\"title\":\"Sn:JaneDoeJournalStart\",\"created\":\"20210116192522661\",\"modified\":\"20210123173018341\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"!! Journal\\n\\nJaneDoe welcomed me to the company and helped me set up my computer and employee profile.\"},\"Sn:JournalStartingText\":{\"title\":\"Sn:JournalStartingText\",\"created\":\"20210116011333187\",\"modified\":\"20210124182922088\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"!! Goals for the day\\n\\n* Goal 1\\n* Goal 2\\n* Goal 3\\n\\n!! Scheduled events\\n\\n!! Journal\"},\"Sn:LetPreviousVariableReferencing\":{\"title\":\"Sn:LetPreviousVariableReferencing\",\"created\":\"20220103165749710\",\"modified\":\"20220103165840926\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$let var1=\\\"one\\\" var2=<<var1>>>\\n  var2: <<var2>>\\n</$let>\"},\"Sn:LinkInhibition\":{\"title\":\"Sn:LinkInhibition\",\"created\":\"20240901050536401\",\"modified\":\"20240901051120928\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\widget $link()\\n  <$slot $name=\\\"ts-raw\\\">\\n\\\\end\\n\\n* <$link to=\\\"Links\\\">Link</$link> to a tiddler\\n* [[Links]] are a fundamental part of a TiddlyWiki.\"},\"Sn:LinkToGoogle\":{\"title\":\"Sn:LinkToGoogle\",\"created\":\"20210116234144219\",\"modified\":\"20210116234350895\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"* https://www.google.com\\n* [[Google|https://www.google.com]]\"},\"Sn:LinkTooltipification\":{\"title\":\"Sn:LinkTooltipification\",\"created\":\"20240901053749663\",\"modified\":\"20240901134932182\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\widget $link(to)\\n  <$let tip={{{ [<to>get[description]] }}}>\\n    <$genesis\\n      $type=\\\"$link\\\"\\n      $remappable=\\\"no\\\"\\n      to=<<to>>\\n      tooltip=<<tip>>\\n    >\\n      <$slot $name=\\\"ts-raw\\\"/>\\n    </$genesis>\\n  </$let>\\n\\\\end\\n\\n[[Links]] and [[Tags]] combine to organize [[Tiddlers]] within a wiki.\"},\"Sn:LinkTooltipificationNoOverwrite\":{\"title\":\"Sn:LinkTooltipificationNoOverwrite\",\"created\":\"20240901134445673\",\"modified\":\"20240901135132964\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\widget $link(to, tooltip:\\\"\\\")\\n  <$let tip={{{ [<tooltip>!is[blank]] ~[<to>get[description]] }}}>\\n    <$genesis\\n      $type=\\\"$link\\\"\\n      $remappable=\\\"no\\\"\\n      to=<<to>>\\n      tooltip=<<tip>>\\n    >\\n      <$slot $name=\\\"ts-raw\\\"/>\\n    </$genesis>\\n  </$let>\\n\\\\end\\n\\n[[Links]] and <$link to=Tags tooltip=\\\"I love tags!\\\">Tags</$link> combine to organize [[Tiddlers]] within a wiki.\"},\"Sn:MacroVariableTextSubstitution\":{\"title\":\"Sn:MacroVariableTextSubstitution\",\"created\":\"20210314124816942\",\"modified\":\"20240928195317583\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\define wikipediaLink() https://en.wikipedia.org/wiki/$(articleName)$\\n\\n<$let articleName=\\\"TiddlyWiki\\\">\\n  <<wikipediaLink>>\\n</$let>\"},\"Sn:MagicDateSnippet\":{\"title\":\"Sn:MagicDateSnippet\",\"created\":\"20210207001005874\",\"modified\":\"20210409024812722\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$view field=\\\"at\\\" format=\\\"date\\\" template=\\\"DD MMM YYYY hh12:0mm:0ss pm\\\"/>\"},\"Sn:MarksTheSpot\":{\"title\":\"Sn:MarksTheSpot\",\"created\":\"20210101173550409\",\"modified\":\"20210101173506420\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\define findX()\\nThe current value of X is \\\"<<X>>\\\".\\n\\\\end\\n\\n<$set name=X value=\\\"marks the spot\\\">\\n  <<findX>>\\n</$set>\"},\"Sn:MeetingParticipants\":{\"title\":\"Sn:MeetingParticipants\",\"created\":\"20201231200157939\",\"modified\":\"20201231200114825\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"| !Time|20200531013141000|\\n| !Participants|JaneDoe|\"},\"Sn:MetadataDateUpdated\":{\"title\":\"Sn:MetadataDateUpdated\",\"created\":\"20210207001648789\",\"modified\":\"20210207001547418\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$view tiddler=\\\"Metadata\\\" field=\\\"modified\\\" format=\\\"date\\\" template=\\\"DDD, MMM DDth, YYYY\\\"/>\"},\"Sn:MissingParameters\":{\"title\":\"Sn:MissingParameters\",\"created\":\"20240928184721952\",\"modified\":\"20240928184747658\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\procedure wikipediaLink(linkText, articleName)\\n  <a href=`https://en.wikipedia.org/wiki/$(articleName)$`>\\n  <<linkText>></a>\\n\\\\end\\n\\n<<wikipediaLink Aardvark>>\"},\"Sn:MultipleParameterProcedure\":{\"title\":\"Sn:MultipleParameterProcedure\",\"created\":\"20210116204256895\",\"modified\":\"20240929014105046\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\procedure wikipediaLink(articleName, linkText)\\n  <a href=`https://en.wikipedia.org/wiki/$(articleName)$`>\\n  <<linkText>></a>\\n\\\\end\\n\\n<<wikipediaLink Aardvark \\\"Wikipedia on Aardvarks\\\">>\"},\"Sn:MultiplyAnythingByTwo\":{\"title\":\"Sn:MultiplyAnythingByTwo\",\"created\":\"20240831225409031\",\"modified\":\"20240923213105264\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\function multiply-anything-by-two(??) ??\\n\\n* {{{ [[4]function[multiply-anything-by-two]] }}} should equal 8.\\n* {{{ [function[multiply-anything-by-two],[4]] }}} should equal 8.\"},\"Sn:MultiplyAnythingByTwoAnswer\":{\"title\":\"Sn:MultiplyAnythingByTwoAnswer\",\"created\":\"20240831225444967\",\"modified\":\"20241008120305581\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\function multiply-anything-by-two(number:\\\"\\\") [<number>!is[blank]multiply[2]] :else[multiply[2]]\\n\\n* {{{ [[4]function[multiply-anything-by-two]] }}} should equal 8.\\n* {{{ [function[multiply-anything-by-two],[4]] }}} should equal 8.\"},\"Sn:MultiplyByTwoFunction\":{\"title\":\"Sn:MultiplyByTwoFunction\",\"created\":\"20240831211615869\",\"modified\":\"20240831212534496\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\function multiply-by-two(number) [<number>multiply[2]]\\n\\n<<multiply-by-two 4>>\"},\"Sn:MultiplyByTwoFunctionDottedCall\":{\"title\":\"Sn:MultiplyByTwoFunctionDottedCall\",\"created\":\"20240831213009485\",\"modified\":\"20240831213109417\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\function .multiply-by-two(number) [<number>multiply[2]]\\n\\n{{{ [.multiply-by-two[4]] }}}\"},\"Sn:MultiplyByTwoFunctionOperator\":{\"title\":\"Sn:MultiplyByTwoFunctionOperator\",\"created\":\"20240831212641797\",\"modified\":\"20240831212702039\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\function multiply-by-two(number) [<number>multiply[2]]\\n\\n{{{ [function[multiply-by-two],[4]] }}}\"},\"Sn:MultiplyByTwoInBraces\":{\"title\":\"Sn:MultiplyByTwoInBraces\",\"created\":\"20240831212536605\",\"modified\":\"20240831212558262\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\function multiply-by-two(number) [<number>multiply[2]]\\n\\n{{{ [<multiply-by-two 4>] }}}\"},\"Sn:MultiplyInputByTwoFunction\":{\"title\":\"Sn:MultiplyInputByTwoFunction\",\"created\":\"20240831213356956\",\"modified\":\"20240831213758001\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\function .multiply-input-by-two() [multiply[2]]\\n\\n{{{ [enlist[1 2 3 4].multiply-input-by-two[]] }}}\"},\"Sn:NestedComments\":{\"title\":\"Sn:NestedComments\",\"created\":\"20210117012202295\",\"modified\":\"20210117012305859\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<!-- start of first comment\\n\\n<!-- an attempt at creating a comment within the comment -->\\n\\nbut the comment ends after the comment within the comment\\n-->\"},\"Sn:NewTiddlerActionWidget\":{\"title\":\"Sn:NewTiddlerActionWidget\",\"created\":\"20210116213436453\",\"modified\":\"20240926121258905\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\procedure newTiddlerActionWidget()\\n<$action-sendmessage\\n  $message=\\\"tm-new-tiddler\\\"\\n  title=\\\"My New Tiddler\\\"\\n  tags=\\\"[[My First Tag]] [[My Second Tag]]\\\" />\\n\\\\end\\n\\n<$button actions=<<newTiddlerActionWidget>>>New Tiddler</$button>\"},\"Sn:NewTiddlerActionWidgetText\":{\"title\":\"Sn:NewTiddlerActionWidgetText\",\"created\":\"20210116213457832\",\"modified\":\"20210116213407934\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$button>\\n  <$action-sendmessage\\n    $message=\\\"tm-new-tiddler\\\"\\n    title=\\\"My New Tiddler\\\"\\n    tags=\\\"[[My First Tag]] [[My Second Tag]]\\\" />\\n  New Tiddler\\n</$button>\"},\"Sn:NowTimestamp\":{\"title\":\"Sn:NowTimestamp\",\"created\":\"20210207002251317\",\"modified\":\"20240926221823386\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\function now-timestamp() [<now [UTC]YYYY0MM0DD0hh0mm0ssXXX>]\\n\\n<<now-timestamp>>\"},\"Sn:NowTimestampProcedure\":{\"title\":\"Sn:NowTimestampProcedure\",\"created\":\"20240926222836590\",\"modified\":\"20240926222946308\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\procedure now-timestamp() <<now [UTC]YYYY0MM0DD0hh0mm0ssXXX>>\\n\\n<<now-timestamp>>\"},\"Sn:NowTimestampProcedureAttribute\":{\"title\":\"Sn:NowTimestampProcedureAttribute\",\"created\":\"20240926222948898\",\"modified\":\"20240926224300555\",\"nowtime\":\"<<now [UTC]YYYY0MM0DD0hh0mm0ssXXX>>\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\procedure now-timestamp-proc() <<now [UTC]YYYY0MM0DD0hh0mm0ssXXX>>\\n\\\\function now-timestamp-func() [<now [UTC]YYYY0MM0DD0hh0mm0ssXXX>]\\n\\n<$button set=\\\"!!nowtime\\\" setTo=<<now-timestamp-proc>> >\\n  Set Reviewed Time (Badly)\\n</$button>\\n<$button set=\\\"!!nowtime\\\" setTo=<<now-timestamp-func>> >\\n  Set Reviewed Time (Properly)\\n</$button>\\n\\n* Time Now: {{!!nowtime}}\\n* Field Value: <$view field=\\\"nowtime\\\"/>\\n\"},\"Sn:NumDaysBack\":{\"title\":\"Sn:NumDaysBack\",\"created\":\"20210123192157236\",\"modified\":\"20240926220419721\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$let numDays=\\\"-500\\\">\\n<$list filter=\\\"[days<numDays>]\\\" emptyMessage=\\\"Nope.\\\">\\n  Yep.\\n</$list>\\n</$let>\"},\"Sn:OrdinaryDay\":{\"title\":\"Sn:OrdinaryDay\",\"created\":\"20240924002129077\",\"modified\":\"20240924002456273\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$let\\n  formattedToday=<<now \\\"0MM/0DD\\\">>\\n  holiday={{{ [[UsHolidays]getindex<formattedToday>] }}}\\n>\\n\\n<% if [<holiday>!is[blank]] %>\\n\\n  It's ''<<holiday>>'' today!\\n\\n<% else %>\\n\\n  Sadly, it's a very ordinary day today.\\n\\n<% endif %>\\n\\n</$let>\"},\"Sn:OrdinaryDayList\":{\"title\":\"Sn:OrdinaryDayList\",\"created\":\"20240924002224723\",\"modified\":\"20240929200706199\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$list filter=\\\"\\\"\\\"[[UsHolidays]getindex<now \\\"0MM/0DD\\\">]\\\"\\\"\\\" emptyMessage=\\\"Sadly, it's a very ordinary day today.\\\">\\n  It's ''<<currentTiddler>>'' today!\\n</$list>\"},\"Sn:OutsideLineOrOperator\":{\"title\":\"Sn:OutsideLineOrOperator\",\"created\":\"20240901042158508\",\"modified\":\"20240901042208715\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\procedure outside-line-starts() [[9]] [[0]]\\n\\\\function is-outside-line-or-operator() [split[]first[]] :intersection[enlist<outside-line-starts>]\\n\\\\function phone.outside-line-or-operator(number) [<number>] :filter[function[is-outside-line-or-operator]]\\n\\nWill dialing these numbers give you an outside line or an operator (number begins with a 9 or a 0, respectively)?\\n\\n* Yes: {{{ [phone.outside-line-or-operator[92223334444]] }}}\\n* No: {{{ [phone.outside-line-or-operator[2223334444]] }}}\"},\"Sn:ParameterlessProcedure\":{\"title\":\"Sn:ParameterlessProcedure\",\"created\":\"20210116204238244\",\"modified\":\"20240929014113123\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\procedure disclaimer()\\n(This paragraph does not represent the formal opinion of my company.)\\n\\\\end\\n\\nYou need to use the Really Annoying Five-Factor Authentication Process to get into the Employee Information System if it is a Tuesday, unless you have also purchased coffee (tea or pastries do not count) in the company cafeteria earlier in the day. <<disclaimer>>\"},\"Sn:ProcedureCallTransclusion\":{\"title\":\"Sn:ProcedureCallTransclusion\",\"created\":\"20210818205917912\",\"modified\":\"20240929013919836\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\procedure partial-name(suffix) Tiddler <<suffix>>\\n\\n{{{ [<partial-name \\\"Forty-Two\\\">] }}}\"},\"Sn:ProcedureParameterNames\":{\"title\":\"Sn:ProcedureParameterNames\",\"created\":\"20210116205418754\",\"modified\":\"20240929014004310\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\procedure wikipediaLink(articleName, linkText)\\n  <a href=`https://en.wikipedia.org/wiki/$(articleName)$`>\\n  <<linkText>></a>\\n\\\\end\\n\\n<<wikipediaLink linkText:\\\"Wikipedia on Aardvarks\\\" articleName:Aardvark>>\"},\"Sn:QuoteWithinQuotesProcedure\":{\"title\":\"Sn:QuoteWithinQuotesProcedure\",\"created\":\"20210116204322898\",\"modified\":\"20240929014123683\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\procedure wikipediaLink(articleName, linkText)\\n  <a href=`https://en.wikipedia.org/wiki/$(articleName)$`>\\n  <<linkText>></a>\\n\\\\end\\n\\n<<wikipediaLink Aardvark \\\"What is an \\\"aardvark\\\"?\\\">>\"},\"Sn:QuotedProcedureExpansion\":{\"title\":\"Sn:QuotedProcedureExpansion\",\"created\":\"20210116210438040\",\"modified\":\"20240929014243527\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\procedure wikipediaLink(articleName, linkText:\\\"Wikipedia Link\\\")\\n  <a href=`https://en.wikipedia.org/wiki/$(articleName)$`>\\n  <<linkText>></a>\\n\\\\end\\n\\n<$let\\n  article=\\\"Aardvark\\\"\\n  description=\\\"An animal\\\"\\n>\\n\\n* <$transclude $variable=\\\"wikipediaLink\\\" articleName=\\\"<<article>>\\\" linkText=\\\"<<description>>\\\" />\\n\\n</$let>\"},\"Sn:RadioExample\":{\"title\":\"Sn:RadioExample\",\"created\":\"20210206211525320\",\"modified\":\"20210817225402878\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"What do you want to look at?\\n\\n<$radio tiddler=\\\"$:/temp/RadioExample\\\" value=\\\"Exercise\\\">&nbsp;Exercises</$radio>&ensp;\\n<$radio tiddler=\\\"$:/temp/RadioExample\\\" value=\\\"Section\\\">&nbsp;Sections</$radio>&ensp;\\n<$radio tiddler=\\\"$:/temp/RadioExample\\\" value=\\\"Takeaway\\\">&nbsp;Takeaways</$radio>\\n\\n<<list-links \\\"[all[tiddlers+shadows]tag{$:/temp/RadioExample}first[5]]\\\">>\"},\"Sn:RevealWidgetTest\":{\"title\":\"Sn:RevealWidgetTest\",\"created\":\"20210123192959878\",\"modified\":\"20210123200233191\",\"showtest\":\"no\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$checkbox field=\\\"showtest\\\" checked=\\\"yes\\\" unchecked=\\\"no\\\"> Show the text</$checkbox>\\n\\n<$reveal state=\\\"!!showtest\\\" type=\\\"match\\\" text=\\\"yes\\\">\\n  Here is the text!\\n</$reveal>\"},\"Sn:ReversedOptParameters\":{\"title\":\"Sn:ReversedOptParameters\",\"created\":\"20240928184704511\",\"modified\":\"20240928184704511\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\procedure wikipediaLink(linkText:\\\"Wikipedia Link\\\", articleName)\\n  <a href=`https://en.wikipedia.org/wiki/$(articleName)$`>\\n  <<linkText>></a>\\n\\\\end\\n\\n<<wikipediaLink Aardvark>>\\n<<wikipediaLink \\\"Wikipedia on aardvarks\\\" Aardvark>>\"},\"Sn:RubberDucking\":{\"title\":\"Sn:RubberDucking\",\"created\":\"20210121000555417\",\"modified\":\"20210606031219939\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$list filter=\\\"[all[tiddlers+shadows]tag[Section]field;parent[Filtering and Formatting]sort[]get[description]\\\">\\n  <<currentTiddler>><br>\\n</$list>\"},\"Sn:RubberDuckingCorrected\":{\"title\":\"Sn:RubberDuckingCorrected\",\"created\":\"20210121000836750\",\"modified\":\"20210606031228949\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$list filter=\\\"[all[tiddlers+shadows]tag[Section]field:parent[Filtering and Formatting]get[description]sort[]]\\\">\\n  <<currentTiddler>><br>\\n</$list>\"},\"Sn:SaidAThing\":{\"title\":\"Sn:SaidAThing\",\"created\":\"20240927114133966\",\"modified\":\"20240927115435253\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\parameters(interlocutor, speaker)\\n\\n<<speaker>> says to <<interlocutor>>:\\n\\n<blockquote>\\n  <$slot $name=\\\"quote\\\" />\\n</blockquote>\\n\\n\"},\"Sn:SaveOptionalParametersSolution\":{\"title\":\"Sn:SaveOptionalParametersSolution\",\"created\":\"20240901145209499\",\"modified\":\"20240901145846008\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\function .rest-names() [<params-var>jsonindexes[]]\\n\\\\function .rest-values() [.rest-names[]] :map[<params-var>jsonget<currentTiddler>]\\n\\n\\\\widget $link()\\n  <$parameters\\n    to=\\\"\\\"\\n    tooltip=\\\"\\\"\\n    $params=\\\"params-var\\\"\\n  >\\n    <$let newtooltip={{{ [<tooltip>!is[blank]] ~[<to>get[description]] }}}>\\n      <$genesis\\n        $type=\\\"$link\\\"\\n        $remappable=\\\"no\\\"\\n        $names=\\\"[.rest-names[]] =tooltip\\\"\\n        $values=\\\"[.rest-values[]] =[<newtooltip>]\\\"\\n      >\\n        <$slot $name=\\\"ts-raw\\\"/>\\n      </$genesis>\\n    </$let>\\n  </$parameters>\\n\\\\end\\n\\n[[Links]] and <$link to=Tags tooltip=\\\"I love tags!\\\">Tags</$link> combine to organize [[Tiddlers]] within a wiki.\\n\\nHere's an example of a link using a parameter we didn't touch, `class`, which gets saved correctly:\\n\\n<$link to=\\\"Fields\\\" class=\\\"tc-tiddlylink-external\\\">I'm posing as external</$link>\"},\"Sn:SayAThing\":{\"title\":\"Sn:SayAThing\",\"created\":\"20240927114307999\",\"modified\":\"20240927115528433\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$transclude\\n  $tiddler=\\\"Sn:SaidAThing\\\"\\n  interlocutor=\\\"Alice\\\" \\n  speaker=\\\"Bob\\\"\\n>\\n  <$fill $name=\\\"quote\\\">\\n    Charlie told me, “[[There's a horse in aisle five|https://what-if.xkcd.com/34/]].”\\n  </$fill>\\n</$transclude>\"},\"Sn:SelectExample\":{\"title\":\"Sn:SelectExample\",\"created\":\"20210206212257711\",\"modified\":\"20210817225115804\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"What do you want to look at?\\n\\n<$select tiddler=\\\"$:/temp/SelectExample\\\" default=\\\"\\\">\\n  <option value=\\\"\\\">(choose an option)</option>\\n  <option value=\\\"Exercise\\\">Exercises</option>\\n  <option value=\\\"Section\\\">Sections</option>\\n  <option value=\\\"Takeaway\\\">Takeaways</option>\\n</$select>\\n\\n<<list-links \\\"[all[tiddlers+shadows]tag{$:/temp/SelectExample}first[5]]\\\">>\"},\"Sn:SetDisclaimer\":{\"title\":\"Sn:SetDisclaimer\",\"created\":\"20210116203350735\",\"modified\":\"20240616141318901\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$set\\n  name=\\\"disclaimer\\\"\\n  value=\\\"(This paragraph does not represent the formal opinion of my company.)\\\"\\n>\\n  …insert the text of your tiddler here\\n</$set>\\n\"},\"Sn:SetVsLet\":{\"title\":\"Sn:SetVsLet\",\"created\":\"20210206210503975\",\"modified\":\"20220103165651799\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$set name=\\\"var1\\\" value=\\\"one\\\">\\n<$set name=\\\"var2\\\" value=\\\"two\\\">\\n  <<var1>> <<var2>>\\n</$set>\\n</$set>\\n\\n<$let var1=\\\"one\\\" var2=\\\"two\\\">\\n  <<var1>> <<var2>>\\n</$let>\"},\"Sn:SetYourName\":{\"title\":\"Sn:SetYourName\",\"created\":\"20210123194135490\",\"modified\":\"20210123194041349\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Your name: <$edit-text tiddler=\\\"$:/temp/ExampleNameField\\\" tag=\\\"input\\\" default=\\\"\\\" />\\n\\n<$set name=\\\"username\\\" filter=\\\"[[$:/temp/ExampleNameField]get[text]]\\\" value={{$:/temp/ExampleNameField}} emptyValue=\\\"Nobody\\\">\\n  Hi <<username>>!\\n</$set>\"},\"Sn:SimpleProcedureCallWidget\":{\"title\":\"Sn:SimpleProcedureCallWidget\",\"created\":\"20210116205906718\",\"modified\":\"20240929014129823\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\procedure wikipediaLink(articleName, linkText)\\n  <a href=`https://en.wikipedia.org/wiki/$(articleName)$`>\\n  <<linkText>></a>\\n\\\\end\\n\\n<$transclude $variable=\\\"wikipediaLink\\\" linkText=\\\"Wikipedia on Aardvarks\\\" articleName=Aardvark />\"},\"Sn:SingleLineProcedure\":{\"title\":\"Sn:SingleLineProcedure\",\"created\":\"20210116205742608\",\"modified\":\"20240929014135147\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\procedure disclaimer() (This paragraph does not represent the formal opinion of my company.)\\n\\n<<disclaimer>>\"},\"Sn:StringConcatenationWithFilters\":{\"title\":\"Sn:StringConcatenationWithFilters\",\"created\":\"20210818122739980\",\"modified\":\"20210818123224153\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$set name=\\\"person\\\" value=\\\"Soren Bjornstad\\\">\\n<$set name=\\\"role\\\" value=\\\"author of Grok TiddlyWiki\\\">\\n\\n<$text text={{{ [<role>addsuffix[, ]addsuffix<person>addsuffix[.]addprefix[This example is approved by the ]] }}}/>\\n\\n</$set>\\n</$set>\"},\"Sn:TestVar12\":{\"title\":\"Sn:TestVar12\",\"created\":\"20210101165835117\",\"modified\":\"20240923223200566\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$let testVar1=\\\"XYZ\\\">\\n<$let testVar2=\\\"<<testVar1>>\\\">\\n  <<testVar2>>\\n</$let>\\n</$let>\"},\"Sn:TestVar122\":{\"title\":\"Sn:TestVar122\",\"created\":\"20210101165917055\",\"modified\":\"20240923223451243\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$let testVar1=\\\"XYZ\\\">\\n<$let testVar2=\\\"<<testVar1>>\\\">\\n  <$text text=<<testVar2>>/>\\n</$let>\\n</$let>\"},\"Sn:TextBeforeProcedure\":{\"title\":\"Sn:TextBeforeProcedure\",\"created\":\"20210116203958811\",\"modified\":\"20240929014330349\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Text before a procedure\\n\\n\\\\procedure wikipediaLink(articleName)\\n  <a href=`https://en.wikipedia.org/wiki/$(articleName)$`>\\n    Wikipedia: <<articleName>></a>\\n\\\\end\"},\"Sn:TicketLinkProcedure\":{\"title\":\"Sn:TicketLinkProcedure\",\"created\":\"20210116210221048\",\"modified\":\"20240929014349222\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\procedure ticketLink(ticketId)\\n<a href=`https://tix.example.com/ticket/$(ticketId)$`>Ticket <<ticketId>></a>\\n\\\\end\\n\\n<<ticketLink 245188>>\"},\"Sn:TiddlerWidget\":{\"title\":\"Sn:TiddlerWidget\",\"created\":\"20210206211117892\",\"modified\":\"20210206211016565\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$set name=\\\"currentTiddler\\\" value=\\\"New Current Tiddler\\\">\\n  <<currentTiddler>>\\n</$set>\\n\\n<$tiddler tiddler=\\\"New Current Tiddler\\\">\\n  <<currentTiddler>>\\n</$tiddler>\"},\"Sn:TranscludeFallback\":{\"title\":\"Sn:TranscludeFallback\",\"created\":\"20210123194558334\",\"modified\":\"20240926220606514\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$transclude $field=\\\"nonexistentfield\\\">\\n  The nonexistent field does not exist.\\n</$transclude>\"},\"Sn:TranscludedProcedureCallWidget\":{\"title\":\"Sn:TranscludedProcedureCallWidget\",\"created\":\"20210116210007489\",\"modified\":\"20240929014142165\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\procedure wikipediaLink(articleName, linkText:\\\"Wikipedia Link\\\")\\n  <a href=`https://en.wikipedia.org/wiki/$(articleName)$`>\\n  <<linkText>></a>\\n\\\\end\\n\\n<$let linktext=\\\"An animal\\\">\\n\\n* <$transclude $variable=\\\"wikipediaLink\\\" linkText=<<linktext>> articleName=\\\"Aardvark\\\" />\\n* <$transclude $variable=\\\"wikipediaLink\\\" linkText=<<linktext>> articleName=\\\"Bee\\\" />\\n* <$transclude $variable=\\\"wikipediaLink\\\" linkText=<<linktext>> articleName=\\\"Cow\\\" />\\n\\n</$let>\"},\"Sn:TripleDoublesProcedure\":{\"title\":\"Sn:TripleDoublesProcedure\",\"created\":\"20210116204445198\",\"modified\":\"20240929014146884\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\procedure wikipediaLink(articleName, linkText)\\n  <a href=`https://en.wikipedia.org/wiki/$(articleName)$`>\\n  <<linkText>></a>\\n\\\\end\\n\\n<<wikipediaLink Aardvark \\\"\\\"\\\"What is an \\\"aardvark\\\"?\\\"\\\"\\\">>\"},\"Sn:TweakingYourSettings\":{\"title\":\"Sn:TweakingYourSettings\",\"created\":\"20210116004917205\",\"modified\":\"20210116005922831\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"You can click each of these links to see that they go to the same place:\\n\\n* [[Tweaking Your Settings]]\\n* A page on [[tweaking settings|Tweaking Your Settings]]\"},\"Sn:UnclosedItalics\":{\"title\":\"Sn:UnclosedItalics\",\"created\":\"20210116173835903\",\"modified\":\"20210116173746153\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Here is my //first paragraph.\\n\\nHere is my second paragraph.\"},\"Sn:UsHolidaysTransclusion\":{\"title\":\"Sn:UsHolidaysTransclusion\",\"created\":\"20240924001658237\",\"modified\":\"20240924001844292\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"{{UsHolidays##07/04}}\\n\\n<$text text={{{ [[UsHolidays]getindex[07/04]] }}}/>\"},\"Sn:UserWhoClicked\":{\"title\":\"Sn:UserWhoClicked\",\"created\":\"20210116212538921\",\"modified\":\"20210117010338851\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$button set=\\\"!!userwhoclicked\\\" setTo=\\\"Soren\\\">\\n  Big Red Button\\n</$button>\\n\\nUser who clicked: \\\"{{!!userwhoclicked}}\\\"\"},\"Sn:ViewFallback\":{\"title\":\"Sn:ViewFallback\",\"adate\":\"\",\"created\":\"20210123195102822\",\"modified\":\"20210123200150412\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$button set=\\\"!!adate\\\" setTo={{!!created}}>Show Created Date</$button>\\n<$button set=\\\"!!adate\\\" setTo=\\\"\\\">Hide Created Date</$button>\\n\\n<$view field=\\\"adate\\\" format=\\\"date\\\" template=\\\"This tiddler was created on MMM DD, YYYY.\\\">\\n  The date is not currently set.\\n</$view>\"},\"Sn:WhenPigsFlyQuotation\":{\"title\":\"Sn:WhenPigsFlyQuotation\",\"created\":\"20240829230053105\",\"modified\":\"20241016122822459\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<% if \\\"[<storyTiddler>match[When Pigs Fly]]\\\" %>\\n  Pigs are flying – perhaps you made a syntax error?\\n<% endif %>\"},\"Sn:WidgetLink\":{\"title\":\"Sn:WidgetLink\",\"created\":\"20210116201351228\",\"modified\":\"20210116201329418\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$link to=\\\"Filters\\\">a link to the Filters section</$link>\"},\"Sn:WikifyConcatenation\":{\"title\":\"Sn:WikifyConcatenation\",\"created\":\"20210818124739448\",\"modified\":\"20210818124809470\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$tiddler tiddler=\\\"Constant strings cannot be combined with transclusions\\\">\\n  <$wikify name=\\\"myImageName\\\" text=\\\"{{!!title}}.png\\\">\\n    <$image source=<<myImageName>>/>\\n  </$wikify>\\n</$tiddler>\"},\"Sn:WikipediaAElement\":{\"title\":\"Sn:WikipediaAElement\",\"created\":\"20240616154018879\",\"modified\":\"20241007124457993\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$let wp=\\\"https://en.wikipedia.org\\\">\\n\\n  <a href=<<wp>> >Wikipedia</a>\\n\\n  <a href=<<wp>> >The free encyclopedia</a>\\n\\n</$let>\"},\"Sn:WikipediaBadWikitext\":{\"title\":\"Sn:WikipediaBadWikitext\",\"created\":\"20240616153356073\",\"modified\":\"20240616153356073\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$let wp=\\\"https://en.wikipedia.org\\\">\\n\\n  [[Wikipedia|<<wp>>]]\\n\\n  [[The free encyclopedia|<<wp>>]]\\n\\n</$let>\"},\"Sn:WikipediaCombinedVarSubst\":{\"title\":\"Sn:WikipediaCombinedVarSubst\",\"created\":\"20240616155405925\",\"modified\":\"20240616155405925\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$let wpBase=\\\"https://en.wikipedia.org/wiki\\\">\\n  <a href=\\\"<<wpBase>>/Aardvark\\\">Aardvarks</a>\\n</$let>\"},\"Sn:WikipediaCombinedVarSubst2\":{\"title\":\"Sn:WikipediaCombinedVarSubst2\",\"created\":\"20240616155419754\",\"modified\":\"20240616155419754\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$let wpBase=\\\"https://en.wikipedia.org/wiki\\\">\\n  <a href=<<wpBase>>\\\"/Aardvark\\\">Aardvarks</a>\\n</$let>\"},\"Sn:WikipediaLinkProcVsMacro\":{\"title\":\"Sn:WikipediaLinkProcVsMacro\",\"created\":\"20240913123414077\",\"modified\":\"20240913123546662\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\procedure wikipediaLinkProcedure(articleName)\\n[[<<articleName>>|https://en.wikipedia.org/wiki/<<articleName>>]]\\n\\\\end\\n\\n\\\\define wikipediaLinkMacro(articleName)\\n[[$articleName$|https://en.wikipedia.org/wiki/$articleName$]]\\n\\\\end\\n\\n<<wikipediaLinkProcedure Bear>>\\n<<wikipediaLinkMacro Bear>>\"},\"Sn:WikipediaSubAttrValue\":{\"title\":\"Sn:WikipediaSubAttrValue\",\"created\":\"20240616155014971\",\"modified\":\"20240616155014971\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$let wpBase=\\\"https://en.wikipedia.org/wiki\\\">\\n  <a href=`$(wpBase)$/Aardvark`>Aardvarks</a>\\n</$let>\"},\"Sn:WikipediaWikitext\":{\"title\":\"Sn:WikipediaWikitext\",\"created\":\"20240616152630822\",\"modified\":\"20240616153017137\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$let wp=\\\"[[link|https://en.wikipedia.org]]\\\">\\n\\n  Wikipedia: <<wp>>\\n\\n  The free encyclopedia: <<wp>>\\n\\n</$let>\"},\"Sn:WikitextBoldItalicBad\":{\"title\":\"Sn:WikitextBoldItalicBad\",\"created\":\"20210131045640394\",\"modified\":\"20210131045709108\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Here's how to do //''bold italics''// correctly.\\n\\nHere's the wrong way: //''bold italic//''.\\n\\nOops, now the rest of the tiddler is messed up!\"},\"Sn:WikitextBulletedList\":{\"title\":\"Sn:WikitextBulletedList\",\"created\":\"20210131050047576\",\"modified\":\"20210131045949776\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"* first item\\n* second item\\n** subitems use\\n** a second star\\n*** you\\n**** can\\n***** go\\n****** as deep as you like\\n* third item\"},\"Sn:WikitextCodeBlock\":{\"title\":\"Sn:WikitextCodeBlock\",\"created\":\"20210131143343463\",\"modified\":\"20210214171831138\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Let's say hello to the world in Python, without syntax highlighting:\\n\\n```\\nprint(\\\"Hello world!\\\")\\n```\\n\\nLet's add syntax highlighting by specifying a language (Highlight plugin must be installed):\\n\\n```python\\nprint(\\\"Hello world!\\\")\\n```\\n\\nHow about in JavaScript?\\n\\n```javascript\\nconsole.log(\\\"Hello world!\\\")\\n```\"},\"Sn:WikitextCombinedList\":{\"title\":\"Sn:WikitextCombinedList\",\"created\":\"20210131050132703\",\"modified\":\"20210207184510698\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"# Collect the following items:\\n#* cell phone\\n#* wallet\\n#* keys\\n#* notebook and pen\\n# Leave your house, locking the door behind you.\"},\"Sn:WikitextCurrentTransclusionTemplate\":{\"title\":\"Sn:WikitextCurrentTransclusionTemplate\",\"caption\":\"Transclude the [[current tiddler|Templates and the Current Tiddler]] through a template\",\"created\":\"20210314125101154\",\"modified\":\"20210314125222415\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"{{||Sn:CaptionFieldTemplate}}\"},\"Sn:WikitextDefinitionList\":{\"title\":\"Sn:WikitextDefinitionList\",\"created\":\"20210131152735293\",\"modified\":\"20210131152650260\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"; First term\\n: Here we would define the first term. The definition might be quite long, like this one, which we are making much longer than necessary to demonstrate a point, and if it is it will wrap onto the next line, maintaining its indentation.\\n\\n; Second term\\n: Second definition.\"},\"Sn:WikitextExtForce\":{\"title\":\"Sn:WikitextExtForce\",\"created\":\"20210131141859994\",\"modified\":\"20240928185237841\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"attachments/my_image.png\\n\\nThat didn't work. How about [[attachments/my_image.png]]?\\n\\nNope! Here's the right way: [ext[attachments/my_image.png]]\\n\\n(Note: this last link returns a 404 error, but it's the right syntax and would work if we had actually attached an image called `my_image.png` to this wiki.)\"},\"Sn:WikitextHeadings\":{\"title\":\"Sn:WikitextHeadings\",\"created\":\"20210131045414136\",\"modified\":\"20210131045316298\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"! Heading 1\\n!! Heading 2\\n!!! Heading 3\\n!!!! Heading 4\\n!!!!! Heading 5\\n!!!!!! Heading 6\"},\"Sn:WikitextHeadingsRolledIn\":{\"title\":\"Sn:WikitextHeadingsRolledIn\",\"created\":\"20210131045435619\",\"modified\":\"20210131045337785\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Here's an example of what not to do:\\n!! Heading 2\"},\"Sn:WikitextHorizontalRule\":{\"title\":\"Sn:WikitextHorizontalRule\",\"created\":\"20210131151946604\",\"modified\":\"20210131151848284\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Text before the line\\n\\n----------\\n\\nText after the line\"},\"Sn:WikitextHtmlInList\":{\"title\":\"Sn:WikitextHtmlInList\",\"created\":\"20210131050147881\",\"modified\":\"20210131050050051\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"* First item\\n* Second item <div>\\n\\n  <p>Here's a second paragraph.</p>\\n  <p>Here's a third paragraph.</p>\\n\\n</div>\\n* Third item\"},\"Sn:WikitextImageImgify\":{\"title\":\"Sn:WikitextImageImgify\",\"created\":\"20210131153332007\",\"modified\":\"20210131153447948\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"[img height=50 [anki-config-screenshot.png]]\"},\"Sn:WikitextImageTransclusion\":{\"title\":\"Sn:WikitextImageTransclusion\",\"created\":\"20210131153251089\",\"modified\":\"20210131153152744\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"{{anki-config-screenshot.png}}\"},\"Sn:WikitextInlineTextFormatting\":{\"title\":\"Sn:WikitextInlineTextFormatting\",\"created\":\"20210131045751508\",\"modified\":\"20210131140928496\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Here is some //italic text//.\\n\\nHere is some ''bold text''.\\n\\nHere is some `monospaced text`. `In here, further //TiddlyWiki markup// is ''ignored''.`\\n\\nHere is a ^^superscript^^ section.\\n\\nHere is a ,,subscript,, section.\\n\\nHere is a ~~struck-through~~ section.\\n\\nHere is an __underlined__ section.\\n\\nHere is some //''bold italic text''//.\\n\\nHere is some ''//__~~^^bold italic underlined superscripted struck-through^^~~__//'' text.\"},\"Sn:WikitextLink\":{\"title\":\"Sn:WikitextLink\",\"created\":\"20210116201345211\",\"modified\":\"20210116201339582\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"[[a link to the Filters section|Filters]]\"},\"Sn:WikitextLinksExample\":{\"title\":\"Sn:WikitextLinksExample\",\"created\":\"20210131141526918\",\"modified\":\"20210131150316213\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"You can read about links in the [[Links]] section.\\n\\nYou can [[read about links|Links]] if you want to learn more about them.\\n\\nIf you have questions that are not related to TiddlyWiki, let me point you to [[Google|https://google.com]], [[DuckDuckGo|https://duckduckgo.com]], or [[Wikipedia|https://en.wikipedia.org]]. (Or, if you prefer a language other than English, try visiting https://wikipedia.org and selecting a language.)\"},\"Sn:WikitextNumberedList\":{\"title\":\"Sn:WikitextNumberedList\",\"created\":\"20210131050100657\",\"modified\":\"20210207184440145\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"# one\\n# two\\n# three\\n## three and a half\\n## three and three-quarters\"},\"Sn:WikitextParameterTransclusion\":{\"title\":\"Sn:WikitextParameterTransclusion\",\"created\":\"20240928185732900\",\"modified\":\"20240928185749102\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\parameters(param1, param2)\\n\\nI have been passed parameters <<param1>> and <<param2>>.\"},\"Sn:WikitextPoetryMarkup\":{\"title\":\"Sn:WikitextPoetryMarkup\",\"created\":\"20210131152021052\",\"modified\":\"20210131155728546\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<<<\\n\\\"\\\"\\\"\\nTo keep your text in perfect lines,\\n&emsp; Just turn to triple quotes.\\nFor this fine feature, all great minds\\n&emsp; Give TiddlyWiki votes.\\n\\\"\\\"\\\"\\n<<< ---Soren (not that I'm proud of this stanza)\"},\"Sn:WikitextQuotes\":{\"title\":\"Sn:WikitextQuotes\",\"created\":\"20210131142943468\",\"modified\":\"20210131143308457\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"> This is a quote.\\n>> This is a quote within the quote.\\n> But I don't like what was said in the quote within the quote…\\n\\nThe quote ends when we start a new line that doesn't begin with `>`.\\n\\n<<<\\nThis is a quote. The quote\\n\\nwill continue until we close it.\\n\\n> It's also possible to nest quotes by using the line form within the block form.\\n\\n<<< ---You can put a citation here if you like.\\n\\nThe quote ends after the closing `<<<`.\\n\"},\"Sn:WikitextStyles\":{\"title\":\"Sn:WikitextStyles\",\"created\":\"20210131154145461\",\"modified\":\"20210202190728899\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"@@color:red;\\nHere is some red text.\\n@@\\n\\n<style>\\n.my-blue-bold-class {\\n  font-weight: bold;\\n  color: blue;\\n}\\n</style>\\n\\n@@.my-blue-bold-class\\nHere is some blue, bold text.\\n@@\"},\"Sn:WikitextTable\":{\"title\":\"Sn:WikitextTable\",\"created\":\"20210117010727707\",\"modified\":\"20210117010637701\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"|!Header 1|!Header 2|\\n|Cell 1|Cell 2|\"},\"Sn:WikitextTableAlignment\":{\"title\":\"Sn:WikitextTableAlignment\",\"created\":\"20210131144220852\",\"modified\":\"20210131144250305\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"|!Number| !A|!B|!C |\\n| 1|A1|B1|C1|\\n| 2 |A2|B2|C2|\\n|3 |A3|B3|C3|\"},\"Sn:WikitextTableReference\":{\"title\":\"Sn:WikitextTableReference\",\"created\":\"20210131144255671\",\"modified\":\"20210131144206831\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"|!Number|!A|!B|!C|\\n|1|A1|B1|C1|\\n|2|A2|B2|C2|\\n|3|A3|B3|C3|\"},\"Sn:WikitextTransclusionBasic\":{\"title\":\"Sn:WikitextTransclusionBasic\",\"created\":\"20210131145534681\",\"modified\":\"20210131150117161\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"{{Sn:IncludeMe}}\\n{{Sn:IncludeMe!!text}}\"},\"Sn:WikitextTransclusionData\":{\"title\":\"Sn:WikitextTransclusionData\",\"created\":\"20210131145622967\",\"modified\":\"20210131150218103\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"//Grok TiddlyWiki// version {{Metadata##version}}\"},\"Sn:WikitextTransclusionField\":{\"title\":\"Sn:WikitextTransclusionField\",\"created\":\"20210131145607043\",\"modified\":\"20210131145508786\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"{{Sn:IncludeMe!!caption}}\"},\"Sn:WikitextTransclusionFilter\":{\"title\":\"Sn:WikitextTransclusionFilter\",\"created\":\"20210131145649553\",\"modified\":\"20210521201836224\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"{{{ [all[tiddlers+shadows]!is[system]tag[Template]] }}}\"},\"Sn:WikitextTransclusionFilterTemplate\":{\"title\":\"Sn:WikitextTransclusionFilterTemplate\",\"created\":\"20210131145658933\",\"modified\":\"20210521201912850\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"{{{ [all[tiddlers+shadows]tag[Exercise]first[]] || Sn:BoldfaceTemplate }}}\"},\"Sn:WikitextTransclusionFunctionAngles\":{\"title\":\"Sn:WikitextTransclusionFunctionAngles\",\"created\":\"20240928194544290\",\"modified\":\"20240928194959337\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\function add.numLetters(myName) [<myName>split[]count[]addsuffix[ letters)]addprefix[ (]addprefix<myName>]\\n\\n<<add.numLetters \\\"Alice\\\">>\"},\"Sn:WikitextTransclusionFunctionDotOperator\":{\"title\":\"Sn:WikitextTransclusionFunctionDotOperator\",\"created\":\"20240928194937803\",\"modified\":\"20240928194945313\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\function add.numLetters(myName) [<myName>split[]count[]addsuffix[ letters)]addprefix[ (]addprefix<myName>]\\n\\n{{{ [add.numLetters[Charlie]] }}}\"},\"Sn:WikitextTransclusionFunctionFunction\":{\"title\":\"Sn:WikitextTransclusionFunctionFunction\",\"created\":\"20240928194931255\",\"modified\":\"20240928195004833\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\function add.numLetters(myName) [<myName>split[]count[]addsuffix[ letters)]addprefix[ (]addprefix<myName>]\\n\\n{{{ [function[add.numLetters],[Bob]] }}}\"},\"Sn:WikitextTransclusionMacro\":{\"title\":\"Sn:WikitextTransclusionMacro\",\"created\":\"20210131145717485\",\"modified\":\"20210314125402817\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\define mymacro(myName) Hi <<__myName__>>!\\n\\n<<mymacro Soren>>\"},\"Sn:WikitextTransclusionMacroSubst\":{\"title\":\"Sn:WikitextTransclusionMacroSubst\",\"created\":\"20210314125642771\",\"modified\":\"20210314125531595\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\define mymacro(myName) Hi $myName$!\\n\\n<<mymacro Soren>>\"},\"Sn:WikitextTransclusionProcedure\":{\"title\":\"Sn:WikitextTransclusionProcedure\",\"created\":\"20240928194521137\",\"modified\":\"20240928194536861\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\procedure myproc(myName) Hi <<myName>>!\\n\\n<<myproc Soren>>\"},\"Sn:WikitextTransclusionTemplate\":{\"title\":\"Sn:WikitextTransclusionTemplate\",\"created\":\"20210131145638915\",\"modified\":\"20240928185752034\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"{{Sn:IncludeMe||Sn:BoldfaceTemplate}}\"},\"Sn:WikitextTransclusionVariable\":{\"title\":\"Sn:WikitextTransclusionVariable\",\"created\":\"20210131145709035\",\"modified\":\"20240928194303789\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$let myvariable=\\\"Hello!\\\">\\n  <<myvariable>>\\n</$let>\"},\"Sn:WikitextTripleQuotes\":{\"title\":\"Sn:WikitextTripleQuotes\",\"created\":\"20210131152001903\",\"modified\":\"20210202190814050\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"To keep your text in perfect lines,\\nJust turn to triple quotes.\\nFor this fine feature, all great minds\\nGive TiddlyWiki votes.\\n\\n\\\"\\\"\\\"\\nTo keep your text in perfect lines,\\nJust turn to triple quotes.\\nFor this fine feature, all great minds\\nGive TiddlyWiki votes.\\n\\\"\\\"\\\"\"},\"Sn:WikitextWebImage\":{\"title\":\"Sn:WikitextWebImage\",\"created\":\"20210131153434996\",\"modified\":\"20210131153336667\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"[img width=200 [https://upload.wikimedia.org/wikipedia/commons/b/bb/Kittyply_edit1.jpg?download]]\"},\"Stamps\":{\"title\":\"Stamps\",\"created\":\"20200718203354489\",\"description\":\"Stamps allow quick insertion of commonly-used snippets of text into tiddlers while editing.\",\"modified\":\"20241017003823148\",\"parent\":\"Looking Under the Hood\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"''Stamps'' are snippets of wikitext that can be inserted into a tiddler at the click of a button, for use when transcluding some procedure or tiddler doesn't do the entire job. For instance, perhaps what you need to insert repeatedly actually //is// a procedure call, but it has a bunch of parameters which you can't remember well and you'd like to be able to insert a version with useful placeholder text.\\n\\nStamps are tiddlers (what else?) tagged `$:/tags/TextEditor/Snippet`. Such tiddlers appear on the <<textual-button \\\"stamp\\\">> stamp button on the edit toolbar under the name in their `caption` field, and clicking them inserts the text of the relevant snippet into the editor.\\n\\nIt's also possible to make a stamp take some selected text and add a prefix or suffix to it, rather than just inserting a chunk of new text. For this and more, see the [[documentation on stamps|https://tiddlywiki.com/#Using%20Stamp]].\\n\\n!! Exercises\\n\\n{{Ex:WikipediaLinkSnippet||ExerciseTemplate}}\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\"},\"Structuring Our Wiki\":{\"title\":\"Structuring Our Wiki\",\"created\":\"20200530175016785\",\"description\":\"How to translate what we want the wiki to do into TiddlyWiki concepts.\",\"modified\":\"20210504015735447\",\"parent\":\"The Shape of TiddlyWiki\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Now that we've [[identified the requirements|Requirements for the Sample Wiki]] for our sample wiki, and we understand the basic data model of TiddlyWiki, with [[tiddlers|Tiddlers]], [[fields|Fields]], [[wikitext|Wikitext]], [[links|Links]], and [[tags|Tags]], let's develop a broad outline of how we'll implement the requirements in TiddlyWiki. While it's easy enough to restructure a wiki if we need to, it still makes sense to get a clear idea of what we're trying to accomplish before we start, or we'll spend all our time restructuring instead of adding useful content.\\n\\nIt's helpful to be ''consistent'' when structuring a TiddlyWiki: if we want to be able to find all our meetings, for instance, it's probably a good idea to mark all of them as meetings in a consistent way (whether by linking to them from a central list of meetings, tagging them all with the same tag, putting `Meeting` in a `tiddler-type` field on all of them, or whatever). Prebuilt software for handling work notes would likely provide some built-in way to identify something as a meeting -- perhaps a “New Meeting” button that created a different type of note -- but in TiddlyWiki we have to make those decisions ourselves. (The upside, of course, is that we //get// to make these decisions based on what makes the most sense for us.)\\n\\nSo let's take another look at our requirements and figure out how, broadly, we want to structure the notes in our wiki. Specifically, let's identify some types of tiddlers. This is not a technical distinction that TiddlyWiki makes -- a tiddler is a tiddler is a tiddler -- but it's useful for a broad range of wiki use cases to classify tiddlers in some way based on what kind of content we store in them and how we use them.\\n\\n; Daily journal tiddlers\\n: Every day we'll create a new tiddler that summarizes what we did each day.\\n\\n; Contact tiddlers\\n: One for each person we meet and want to keep track of.\\n\\n; Meeting tiddlers\\n: These will be the central location that we work in during a meeting. If there's any information that needs to go into our permanent knowledge banks, though, we'll move that out into project or knowledge tiddlers (discussed momentarily) after the meeting, as it's usually tough to remember which meeting something was part of when you need to find it later.\\n\\n; Project tiddlers\\n: While we certainly won't have only //one// tiddler per project (tiddlers are supposed to be small, after all), these will serve as the central gathering point for all the information about a project.\\n\\n; Knowledge tiddlers\\n: Any information not described above that needs a home in the wiki will be a knowledge tiddler. Because almost anything can be a knowledge tiddler, knowledge tiddlers will likely be the hardest to keep organized. That said, because they are so unstructured, it will be easy to move the information they contain between tiddlers and split and join tiddlers as our understanding of the information and the structure we want to use evolves.\\n\\nNow we have to decide how to implement these classifications within TiddlyWiki. Tags are an easy and popular method, so let's use them here. We'll tag journal tiddlers `Journal`, contact tiddlers `Contact`, project tiddlers `Project`, and meeting tiddlers `Meeting`. We won't bother giving knowledge tiddlers a classification tag, since there are usually few situations in which we want to treat only those tiddlers separately, but you could create a `Knowledge` tag too if you preferred.\\n\\nWe'll also have to decide how to associate the different types of tiddlers with each other. Since tiddlers are small and focus on only one idea, it's critical to associate them with each other in a coherent and understandable way, or they'll get lost. We'll discuss how this will work for each type of tiddler as we get to it.\\n\\nIf you're not sure how I came up with these divisions or why I made them, that's OK -- you can just play along for now. Once you have a bit more experience with TiddlyWiki, we'll be returning to the reasons for and methods of dividing content into different tiddlers and different types of tiddlers, in [[Slicing Up Content]].\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\"},\"Stylesheets\":{\"title\":\"Stylesheets\",\"created\":\"20200822195432205\",\"description\":\"Every little bit of page formatting can be customized by adding CSS to your wiki.\",\"modified\":\"20241017011005537\",\"parent\":\"Getting Technical\",\"prerequisite\":\"Basic knowledge of CSS\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"TiddlyWiki has full support for ''CSS stylesheets'', both inline and as tiddlers. We saw this briefly in [[Creating a List of Links and Backlinks]]. Here are a few more details.\\n\\nThis section assumes you have basic knowledge of CSS. If you don't, and you would like to learn more about how to style your TiddlyWiki, a variety of good tutorials are available on the web.\\n\\n!! Inline stylesheets\\n\\nYou can use a `<style>` element to embed rules within the text of a tiddler. The style section can appear anywhere in the tiddler, but it's common practice to put it at the bottom.\\n\\nBe careful, however -- inline stylesheets are not restricted to that tiddler! If you place a broad rule such as `p { color: purple; }` in a tiddler, all paragraph text ''anywhere in the wiki'' will become purple whenever that tiddler is being transcluded in some visible part of the interface, including in other tiddlers and in the sidebar. For this reason, you should normally use a class name on all rules that you define this way, and [[make sure your class name has a unique prefix|Much More Than You Wanted to Know About Scopes]] so it doesn't accidentally conflict with something used elsewhere in the wiki.\\n\\nBecause of the lack of scoping, the rules in a given tiddler are guaranteed to apply to any tiddlers that transclude it (since transcluding the tiddler causes the stylesheet in it to be read and applied to the whole page); we took advantage of this in [[Creating a List of Links and Backlinks]].\\n\\n!! Styling and classes in wikitext\\n\\nYou can apply arbitrary styles or classes to regions of wikitext using the `@@` syntax, like this:\\n\\n{{Sn:AtAtStyle||MagicSnippet}}\\n\\n{{Sn:AtAtClass||MagicSnippet}}\\n\\nSee the [[documentation|https://tiddlywiki.com/#Styles%20and%20Classes%20in%20WikiText]] for more on this feature.\\n\\n\\n!! Stylesheets in tiddlers\\n\\nFor styles and stylesheets you want to use in more than a single template or tiddler, a more robust approach is to place them in ''tiddlers of their own''.\\n\\nTiddlers tagged `$:/tags/Stylesheet` will be incorporated in the global stylesheet and apply to all tiddlers in the wiki at all times. Any changes to such tiddlers take effect as soon as you save the tiddler.\\n\\nThere is a content type called `text/css`. This is natural for stylesheets, and if you have the [[syntax highlighting plugin|Useful Plugins]] installed, you get nice syntax highlighting when you view the tiddler, but be aware that choosing this content type takes away the ability you would otherwise have to use transclusions in your stylesheet. For instance, this is valid if and only if you have the content type of the tiddler set to wikitext:\\n\\n```css\\n.my-alert-class {\\n  background-color: <<colour alert-background>>;\\n}\\n```\\n\\n\\n!! The `data-tiddler-title` and `data-tags` attributes\\n\\nYou can apply rules to only specific tiddlers using the `data-tiddler-title` and `data-tags` data attributes, which TiddlyWiki automatically attaches to the containers each tiddler is rendered within in the story river. Note that this happens specifically when rendering a tiddler directly within the story river – if you transclude a tiddler which has a particular title and tags into another tiddler, no container with this attribute will be created.\\n\\nYou can access these attributes using the [[CSS attribute selector syntax|https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors]]. You could use this, for instance, to give certain tiddlers a different font:\\n\\n```css\\n[data-tags*=BadFont] {\\n  font-family: \\\"Comic Sans MS\\\", serif;\\n}\\n```\\n\\nHere it is live in my public wiki:\\n\\n[img[comic-sans.png]]\\n\\n\\n!! Exercises\\n\\n{{Ex:FunnyClass||ExerciseTemplate}}\\n{{Ex:ConditionalStyle||ExerciseTemplate}}\\n{{Ex:FunnyTextCheckbox||ExerciseTemplate}}\\n{{Ex:TagStyleRule||ExerciseTemplate}}\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\"},\"Summary of Transclusion Syntax\":{\"title\":\"Summary of Transclusion Syntax\",\"created\":\"20210320182859703\",\"description\":\"Review all the syntax used for reusing and relating content in TiddlyWiki.\",\"modified\":\"20241016122927636\",\"parent\":\"Transclusion\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"We learned about a lot of different ways of reusing and relating content in TiddlyWiki in this chapter, and when you've just learned all of them, it's often difficult to keep them straight. Let's review all the options and the syntax for each.\\n\\nWe'll be adding a handful of new tools to our toolbox in chapters<<gtw.link-chapter-number \\\"More Organizational Tools\\\" \\\"\\\">> and<<gtw.link-chapter-number \\\"Macros, Wikification, and Widgets\\\" \\\"\\\">>, so we'll have an updated version, [[Updated Summary of Transclusion Syntax]], at the end of chapter 6. You can also find a condensed version in the [[Wikitext Reference]], which also has some live examples you can play with.\\t\\n\\n{{CommonTransclusionSyntax|first}}\"},\"Supplemental Exercises\":{\"title\":\"Supplemental Exercises\",\"created\":\"20201122225852336\",\"description\":\"In which are offered some optional challenges to improve your TiddlyWiki skills, should you choose to accept them.\",\"list\":\"\",\"modified\":\"20240907015032646\",\"parent\":\"Outline\",\"tags\":\"Chapter\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"If you're looking for a challenge or some extra practice after finishing most or all of the book, here are some larger exercises you can try.\\n\\n{{Ex:TagColorGrouping||ExerciseTemplate}}\\n{{Ex:HostingOptions||ExerciseTemplate}}\\n{{Ex:MoreSidebarTabs||ExerciseTemplate}}\\n{{Ex:StylesheetExperiments||ExerciseTemplate}}\\n{{Ex:MailMerge||ExerciseTemplate}}\\n{{Ex:StretchText||ExerciseTemplate}}\\n{{Ex:NewWiki||ExerciseTemplate}}\"},\"Support Us\":{\"title\":\"Support Us\",\"created\":\"20210818143231603\",\"description\":\"If you've made it this far, please consider chipping in some money or time to help the open-source projects you're using.\",\"modified\":\"20241017013451102\",\"parent\":\"Appendices\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"If you've made it this far in //Grok TiddlyWiki// and expect to continue using and enjoying TiddlyWiki, please consider contributing financially to or helping out with the GTW and/or TiddlyWiki projects. Such open-source projects thrive when a wide variety of people get involved. Here are some options.\\n\\nFor GTW:\\n\\n* ''<a href={{$:/sib/DonationLink}}>Donate to the Grok TiddlyWiki project</a>'' to support me in keeping this book up to date.\\n* ''Provide feedback on the book''. In addition to using the //send feedback// link at the bottom of any section to provide targeted feedback on that section, you can send general thoughts on how the book has worked for you to `contact@sorenbjornstad.com`.\\n\\nFor TiddlyWiki itself:\\n\\n* ''Become a contributor to the TiddlyWiki organization'' or fund an ongoing project [[on OpenCollective|https://opencollective.com/tiddlywikidotorg]]. Such contributions help keep the project running smoothly, and they also give you a small stake in the community (if you fund a feature, for instance, your take on that feature will be prioritized).\\n* ''Share your new expertise'' on the [[TiddlyWiki forums|https://groups.google.com/g/tiddlywiki]].\\n* ''Share TiddlyWiki tools you create as plugins'' (see [[Creating Plugins]]) or, if you know some JavaScript, [[help out with the core development of TiddlyWiki|https://github.com/Jermolene/TiddlyWiki5]].\\n* ''Share TiddlyWiki with your friends''. The more users we have, the stronger and healthier the community.\"},\"System Tiddlers\":{\"title\":\"System Tiddlers\",\"created\":\"20200717225935255\",\"description\":\"Almost everything in TiddlyWiki is controlled by tiddlers; system tiddlers are those hidden “meta-tiddlers” that control the wiki rather than containing your actual content.\",\"modified\":\"20240928201045523\",\"parent\":\"Looking Under the Hood\",\"tags\":\"Section Concept\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Back at the very beginning of the book, in [[Tiddlers]], we learned that everything is a tiddler. And in [[Field Transclusions]], we mentioned in passing that the entire interface of TiddlyWiki is created by transcluding special tiddlers.\\n\\nThis means that, essentially, we can change //anything// in TiddlyWiki just by modifying these tiddlers, using the same tools we already know. (Only a tiny piece of TiddlyWiki, called the //microkernel//, can't be directly modified from within the wiki. But the only function of the microkernel is to load the JavaScript code and wikitext that is stored in tiddlers, so it's hard to imagine having a reason to customize it.) Completely changing the look and feel of TiddlyWiki and implementing custom JavaScript code are beyond the scope of this book, but in this chapter we will look at changing the sidebar, adding custom interface elements, and some more fun and useful things that will help you make any wiki you create with TiddlyWiki exactly fit your needs. Along the way, you'll also learn how you can poke around and discover how these tiddlers work, so you can make your own changes that we haven't talked about.\\n\\nIf your entire wiki is made up of these special tiddlers, you may be wondering why you don't see all of them in the list of tiddlers when you click the ''All'' section of the ''More'' tab in the sidebar of a new TiddlyWiki. The answer is that they're ''system tiddlers''. A system tiddler is a tiddler whose title begins with `$:/`. System tiddlers are hidden in search results and most tabs of the sidebar.\\n\\nAside from their names and the fact that tiddlers with those names are hidden from most views, there is nothing special or different about system tiddlers as compared to “normal” tiddlers.\\n\\nSystem tiddlers are ''organized into a hierarchy'' by giving them names with slashes separating each folder, much like a computer's file system.  For instance, the default height of the text box presented when you edit a tiddler is stored in a tiddler called [[$:/config/TextEditor/EditorHeight/Height]]. (It's worth noting that no actual object representing these “folders” is created within your wiki; your wiki is just one big pile of tiddlers, and some of them happen to have slashes in their names which TiddlyWiki uses to display them in a tree. But //folder// is a useful way to describe each level of the hierarchy.)\\n\\nImportant top-level folders in this hierarchy include:\\n\\n* `config` -- {{Ltc:EverySetting||LieToChildrenTemplate}} (there are other settings here that aren't displayed in the control panel as well)\\n* `core` -- most of the ''code of TiddlyWiki'', in both JavaScript and wikitext, is kept in here\\n* `language` -- contains ''translations'' for TiddlyWiki elements into your local language\\n* `palettes` -- contains ''tables from names to colors'' used to draw the interface\\n* `plugins` -- any ''plugins you've installed'' go here\\n* `state` -- contains temporary tiddlers that describe ''what you currently have open and selected'' in the user interface\\n* `tags` -- for the parts of TiddlyWiki's interface and functionality people most frequently want to ''add parts to'', TiddlyWiki provides these special tags; by adding the tag to a new tiddler, that tiddler appears in TiddlyWiki's interface\\n* `temp` -- contains miscellaneous ''temporary tiddlers''\\n* `themes` -- contains [[CSS|Stylesheets]] and configuration tweaks describing ''how to draw the interface''\\n\\nMany people like to create a top-level folder titled with their name or initials (e.g., I use `$:/sib`), so that when they create their own custom system tiddlers, they can see them all in the same place and remember what they've added. You don't have to make your custom tiddlers system tiddlers -- you could just make them normal tiddlers with whatever names you like -- but if you make them system tiddlers, you won't struggle to find them in among your wiki's content.\\n\\nYou can see a list of all system tiddlers in the ''System'' section of the ''More'' tab. However, the ''Explorer'' tab is usually a better way to look -- this will show them in a tree view.\\n\\nAs noted earlier, system tiddlers are not shown in the results provided by the standard search box. If you want to find one, perhaps so you can edit it or inspect how it works, you can search in system tiddlers using the ''System'' tab of Advanced Search. On the other hand, system tiddlers are //not// hidden from filters. Often this isn't noticeable at all since filters typically look for things with a particular tag or field or link, and system tiddlers typically do not share tags, field values, or links with non-system tiddlers. However, some filters, both those built into TiddlyWiki and ones you compose yourself, will need to use the `!is[system]` filter step to remove system tiddlers from the list.\\n\\nNote that neither Advanced Search, nor filters you may write, nor the ''System'' section of the ''More'' tab includes system tiddlers that are also [[shadow tiddlers|Shadow Tiddlers]] (we'll discuss those in a moment). To find those, you'll need to use the ''Shadows'' tab of either interface.\\n\\n!! Exercises\\n\\n{{Ex:CreateSystemTiddler||ExerciseTemplate}}\\n{{Ex:ExploreSystemTiddlers||ExerciseTemplate}}\\n\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\"},\"Ta:20200822211244880\":{\"title\":\"Ta:20200822211244880\",\"answer\":\"The tiddler.\",\"created\":\"20201228232338980\",\"modified\":\"20210408175114783\",\"origin\":\"Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"What is the basic unit of information in TiddlyWiki called?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20200822211313655\":{\"title\":\"Ta:20200822211313655\",\"created\":\"20201228235958360\",\"modified\":\"20210408175116252\",\"origin\":\"Tiddlers\",\"qtype\":\"remembercz\",\"question\":\"In TiddlyWiki, everything is {a tiddler}.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20200822211503713\":{\"title\":\"Ta:20200822211503713\",\"created\":\"20201229010008510\",\"modified\":\"20210408175215221\",\"origin\":\"Fields\",\"qtype\":\"remembercz\",\"question\":\"A tiddler is made up of a number of {fields}.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20200822211526055\":{\"title\":\"Ta:20200822211526055\",\"answer\":\"`title`\",\"created\":\"20201229025141722\",\"modified\":\"20210408175217518\",\"origin\":\"Fields\",\"qtype\":\"rememberq\",\"question\":\"What field of a tiddler do you use to reference it from elsewhere in the wiki?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20200822211552128\":{\"title\":\"Ta:20200822211552128\",\"answer\":\"`text`\",\"created\":\"20201229025209620\",\"modified\":\"20210408175219699\",\"origin\":\"Fields\",\"qtype\":\"rememberq\",\"question\":\"What is the name of the tiddler field that stores the tiddler's main content?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20200822211746148\":{\"title\":\"Ta:20200822211746148\",\"answer\":\"TiddlyWiki shows the link in //italics//.\",\"created\":\"20201229030154128\",\"modified\":\"20210408180628017\",\"origin\":\"Links\",\"qtype\":\"rememberq\",\"question\":\"How can you tell that a link points to a tiddler that does not yet exist?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20200822212240517\":{\"title\":\"Ta:20200822212240517\",\"answer\":\"`[[My Tiddler]]`\",\"created\":\"20201229030133218\",\"modified\":\"20210408180634486\",\"origin\":\"Links\",\"qtype\":\"rememberq\",\"question\":\"What is the wikitext syntax to link to a tiddler called `My Tiddler`?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20200822212544970\":{\"title\":\"Ta:20200822212544970\",\"created\":\"20201229030032630\",\"modified\":\"20210408180645964\",\"origin\":\"Links\",\"qtype\":\"remembercz\",\"question\":\"A phrase is in camel case when there are no {spaces} between words and the beginning of each word is {capitalized}.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201229025230862\":{\"title\":\"Ta:20201229025230862\",\"answer\":\"Separate fields allow you to easily retrieve exactly that information or search and filter based on it later.\",\"created\":\"20201229025238374\",\"modified\":\"20210408175242832\",\"origin\":\"Fields\",\"qtype\":\"rememberq\",\"question\":\"Why might you choose to separate information in a tiddler into multiple fields, rather than placing it all in the `text` field?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201229025804939\":{\"title\":\"Ta:20201229025804939\",\"answer\":\"e.g., the time of a meeting, a person's phone number, the year a book was published, the URL of source material\",\"created\":\"20201229025808136\",\"modified\":\"20210817221838586\",\"origin\":\"Fields\",\"qtype\":\"rememberq\",\"question\":\"Give an example of a piece of information you might put in a tiddler field (try to pick a new one).\",\"tags\":\"Takeaway\",\"tiddler\":\"$:/config/sobjornstad/TakeAway/ContextualHelp/seen/creative-question\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201229030304572\":{\"title\":\"Ta:20201229030304572\",\"created\":\"20201229030307210\",\"modified\":\"20210408175542446\",\"origin\":\"Wikitext\",\"qtype\":\"remembercz\",\"question\":\"The content of tiddlers is written in a markup language called {wikitext}.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201229030422254\":{\"title\":\"Ta:20201229030422254\",\"created\":\"20201229030425627\",\"modified\":\"20210409020134457\",\"origin\":\"Tags\",\"qtype\":\"remembercz\",\"question\":\"In TiddlyWiki, tags are a special kind of {link} to another tiddler.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201229030621143\":{\"title\":\"Ta:20201229030621143\",\"created\":\"20201229030636372\",\"modified\":\"20210408180647876\",\"origin\":\"Links\",\"qtype\":\"remembercz\",\"question\":\"The set of links to a specific tiddler from anywhere in the wiki are called that tiddler's {backlinks}.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201229030848490\":{\"title\":\"Ta:20201229030848490\",\"created\":\"20201229030857524\",\"modified\":\"20210409020136681\",\"origin\":\"Tags\",\"qtype\":\"remembercz\",\"question\":\"If the tiddler `Soren` has a tag `Person`, the tiddler `Person` is said to be {tagging} the tiddler `Soren`.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201229030953451\":{\"title\":\"Ta:20201229030953451\",\"answer\":\"The tag.\",\"created\":\"20201229030955602\",\"modified\":\"20210409020140135\",\"origin\":\"Tags\",\"qtype\":\"rememberq\",\"question\":\"What basic TiddlyWiki concept is used to define hierarchies of tiddlers?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201229031256513\":{\"title\":\"Ta:20201229031256513\",\"answer\":\"TiddlyWiki implements hierarchies using tags, where a tiddler's tags represent its parent(s) in a hierarchy, and a tiddler can have more than one tag.\",\"created\":\"20201229031258882\",\"modified\":\"20221015160918300\",\"origin\":\"Tags\",\"qtype\":\"rememberq\",\"question\":\"Explain why tiddlers can be in multiple places within one hierarchy.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201229031750518\":{\"title\":\"Ta:20201229031750518\",\"answer\":\"Click the //Recent// tab in the sidebar and select the appropriate tiddler.\",\"created\":\"20201229031755663\",\"modified\":\"20210409022716951\",\"origin\":\"Journal Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"How can you reopen tiddlers that you recently edited and then closed?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201229031836905\":{\"title\":\"Ta:20201229031836905\",\"answer\":\"`!! Section`\",\"created\":\"20201229031840712\",\"modified\":\"20210409022719872\",\"origin\":\"Journal Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"What is the wikitext syntax to create a second-level section heading called //Section//?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201229033207375\":{\"title\":\"Ta:20201229033207375\",\"answer\":\"`''bold text''`\",\"created\":\"20201229033208604\",\"modified\":\"20210409022729549\",\"origin\":\"Journal Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"What is the wikitext syntax for bold text?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201229033224063\":{\"title\":\"Ta:20201229033224063\",\"answer\":\"`//italic text//`\",\"created\":\"20201229033225366\",\"modified\":\"20210409022731715\",\"origin\":\"Journal Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"What is the wikitext syntax for italic text?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201229033500358\":{\"title\":\"Ta:20201229033500358\",\"answer\":\"Alt+P\",\"created\":\"20201229033503534\",\"modified\":\"20210409022733962\",\"origin\":\"Journal Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"What keyboard shortcut, while editing a tiddler, toggles the side-by-side preview function?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201229033547873\":{\"title\":\"Ta:20201229033547873\",\"answer\":\"In a tiddler's main text field.\",\"created\":\"20201229033553908\",\"modified\":\"20210418131957334\",\"origin\":\"Journal Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"For editor keyboard shortcuts to work, such as those that insert italic markup, where must your cursor be positioned?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201229033735626\":{\"title\":\"Ta:20201229033735626\",\"answer\":\"Turn on the side-by-side preview function.\",\"created\":\"20201229033737299\",\"modified\":\"20210409022751235\",\"origin\":\"Journal Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"If you're unsure whether your wikitext markup is correct, how can you quickly check it without saving the tiddler?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201229034152108\":{\"title\":\"Ta:20201229034152108\",\"answer\":\"Control+Enter\",\"created\":\"20201229034153231\",\"modified\":\"20210502173957172\",\"origin\":\"Contact Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"What editor keyboard shortcut saves the changes to a tiddler and exits edit mode?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201229034446872\":{\"title\":\"Ta:20201229034446872\",\"answer\":\"The contact tiddler will accumulate a list of backlinks that lets you easily find all references to the person.\",\"created\":\"20201229034449199\",\"modified\":\"20210409024225953\",\"origin\":\"Contact Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"Why is it a good idea to link to a contact tiddler when mentioning that person in your work notes, even if you are unlikely to want to jump to that tiddler?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201229034615019\":{\"title\":\"Ta:20201229034615019\",\"created\":\"20201229034616969\",\"modified\":\"20210409024230343\",\"origin\":\"Contact Tiddlers\",\"qtype\":\"remembercz\",\"question\":\"Linking is often a more effective way to build a list of references to a person, object, or concept than full-text search because search, unlike links, is subject to both {c1::false positive}s and {c1::false negative}s.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201229034751031\":{\"title\":\"Ta:20201229034751031\",\"answer\":\"If you felt the mention was not relevant in any other context, and you explicitly did not want the notes to appear in connection with that person.\",\"created\":\"20201229034755780\",\"modified\":\"20210409024239085\",\"origin\":\"Contact Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"Why might you choose //not// to link to a person's contact tiddler in some notes, even if you were mentioning them?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201229034858232\":{\"title\":\"Ta:20201229034858232\",\"answer\":\"When you find the phrase you searched for in a tiddler, but the tiddler is not relevant to what you were looking for (e.g., you searched for `Jane` and got a tiddler about another person //Janet//).\",\"created\":\"20201229034900398\",\"modified\":\"20210409024249243\",\"origin\":\"Contact Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"In the context of full-text search, what is a //false positive//?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201229035036108\":{\"title\":\"Ta:20201229035036108\",\"answer\":\"When the phrase you search for fails to retrieve a relevant tiddler (e.g., you searched for `Robert`, but in the tiddler you called him //Bob//).\",\"created\":\"20201229035037606\",\"modified\":\"20210409024258215\",\"origin\":\"Contact Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"In the context of full-text search, what is a //false negative//?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201229035422461\":{\"title\":\"Ta:20201229035422461\",\"answer\":\"e.g., searching for `Katherine` when you called her `Kate`, searching for `start here` when you wrote `begin here`\",\"created\":\"20201229035424934\",\"modified\":\"20210409024305263\",\"origin\":\"Contact Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"Give an example of a full-text search that yields a false negative, including both the phrase you search for and the reason it doesn't work (try to pick a new example).\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201229035537182\":{\"title\":\"Ta:20201229035537182\",\"created\":\"20201229035539375\",\"modified\":\"20210409024309050\",\"origin\":\"Contact Tiddlers\",\"qtype\":\"remembercz\",\"question\":\"TiddlyWiki's power is directly proportional to the amount of care you put into {linking together / relating} ideas.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201229035950796\":{\"title\":\"Ta:20201229035950796\",\"created\":\"20201229035952129\",\"modified\":\"20210409024323043\",\"origin\":\"Contact Tiddlers\",\"qtype\":\"remembercz\",\"question\":\"A //tiddler list// field consists of a series of {tiddler titles} separated by spaces.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201229040048702\":{\"title\":\"Ta:20201229040048702\",\"answer\":\"Surround it with double square brackets as if linking to it: `[[My Tiddler]]`.\",\"created\":\"20201229040049863\",\"modified\":\"20210409024425278\",\"origin\":\"Contact Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"How would you place a tiddler named `My Tiddler` in a list field, since it contains a space and tiddlers are separated by spaces in list fields?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201229040227672\":{\"title\":\"Ta:20201229040227672\",\"answer\":\"Click the info button on the tiddler's view toolbar, then the //Backlinks// tab.\",\"created\":\"20201229040228907\",\"modified\":\"20221015161223267\",\"origin\":\"Contact Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"When viewing a tiddler, where can you look to find a list of its backlinks in stock TiddlyWiki?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201229040301820\":{\"title\":\"Ta:20201229040301820\",\"answer\":\"Click the info button on the tiddler's view toolbar, then the //Fields// tab.\",\"created\":\"20201229040303487\",\"modified\":\"20211129232258577\",\"origin\":\"Contact Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"When viewing a tiddler, where can you look to find a list of its fields in stock TiddlyWiki?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201229041027133\":{\"title\":\"Ta:20201229041027133\",\"answer\":\"The //excise// button on the edit toolbar.\",\"created\":\"20201229041029939\",\"modified\":\"20210409024853859\",\"origin\":\"Meeting Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"When you are editing a tiddler and realize that a portion of its contents should be split into its own tiddler, what operation would you use?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201229041348365\":{\"title\":\"Ta:20201229041348365\",\"answer\":\"December 9, 2018. (You have to subtract five hours from the `01` part, since the timestamp is at UTC+0, which moves the calendar back a day.)\",\"created\":\"20201229041355152\",\"modified\":\"20210409024931341\",\"origin\":\"Meeting Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"In the UTC-5 timezone, what date does the TiddlyWiki timestamp `20181210015823551` represent?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201229041904213\":{\"title\":\"Ta:20201229041904213\",\"answer\":\"A link only records that the tiddlers are //related// in some unexplained way; because the field has a name, it can explain exactly how they are related.\",\"created\":\"20201229041909709\",\"modified\":\"20210409024937809\",\"origin\":\"Meeting Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"Why does listing related tiddlers in a field, such as `participants`, provide more information to TiddlyWiki than linking to them in a tiddler's text?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201229042226193\":{\"title\":\"Ta:20201229042226193\",\"created\":\"20201229042227539\",\"modified\":\"20210409025820846\",\"origin\":\"Project Tiddlers\",\"qtype\":\"remembercz\",\"question\":\"It's better for tiddlers to indicate that they're {c1::a part of a whole}, rather than the whole listing {c1::all of its parts}.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201229042909540\":{\"title\":\"Ta:20201229042909540\",\"created\":\"20201229042921599\",\"modified\":\"20210409030944660\",\"origin\":\"Knowledge Tiddlers\",\"qtype\":\"remembercz\",\"question\":\"A tiddler that does not exist but has links pointing to it is said to be {missing}.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201229042945472\":{\"title\":\"Ta:20201229042945472\",\"answer\":\"On the ''Missing'' section of the ''More'' sidebar tab.\",\"created\":\"20201229042946651\",\"modified\":\"20210409030953058\",\"origin\":\"Knowledge Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"Where in TiddlyWiki's stock interface can you find a list of missing tiddlers?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201229132641099\":{\"title\":\"Ta:20201229132641099\",\"created\":\"20201229132643999\",\"modified\":\"20210409030956315\",\"origin\":\"Knowledge Tiddlers\",\"qtype\":\"remembercz\",\"question\":\"Lean towards relating two tiddlers with a tag if one is {part of} the other, and towards relating them with a link if one is merely {related to} the other.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201229132721666\":{\"title\":\"Ta:20201229132721666\",\"answer\":\"The more tags you have, the longer it takes to determine what tags should be added to a tiddler.\",\"created\":\"20201229132742157\",\"modified\":\"20210409031002973\",\"origin\":\"Knowledge Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"Why is creating too many general-purpose tags problematic?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201229132913263\":{\"title\":\"Ta:20201229132913263\",\"created\":\"20201229132918926\",\"modified\":\"20210409031009431\",\"origin\":\"Knowledge Tiddlers\",\"qtype\":\"remembercz\",\"question\":\"Before adding a tag, make sure you can identify a situation where you would {use the tag} to find something or make a decision about the tiddler.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201229133430741\":{\"title\":\"Ta:20201229133430741\",\"answer\":\"Matches on the title appear at the top of search results, and there are many fewer of them than text matches.\",\"created\":\"20201229133432015\",\"modified\":\"20210409032154496\",\"origin\":\"Searching\",\"qtype\":\"rememberq\",\"question\":\"Why is it particularly helpful to include important keywords in the title of your tiddlers?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201229133511208\":{\"title\":\"Ta:20201229133511208\",\"answer\":\"Ctrl+Shift+F\",\"created\":\"20201229133512754\",\"modified\":\"20210502174021449\",\"origin\":\"Searching\",\"qtype\":\"rememberq\",\"question\":\"What keyboard shortcut puts the focus in the main search box?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201229133609019\":{\"title\":\"Ta:20201229133609019\",\"answer\":\"`title`, `text`, and `tags` only.\",\"created\":\"20201229133610094\",\"modified\":\"20240612040351388\",\"origin\":\"Searching\",\"qtype\":\"rememberq\",\"question\":\"Which fields of a tiddler does the main search box look in?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201229133709005\":{\"title\":\"Ta:20201229133709005\",\"answer\":\"TiddlyWiki's default search box only looks in the `title`, `text`, and `tags` fields.\",\"created\":\"20201229133710673\",\"modified\":\"20241013004828645\",\"origin\":\"Searching\",\"qtype\":\"rememberq\",\"question\":\"Why might a search for `lemons` not find a tiddler which has an `ingredients` field containing the word //lemons//?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201229150107986\":{\"title\":\"Ta:20201229150107986\",\"answer\":\"It is ambiguous; it could refer to several companies, a fruit, a computer…\",\"created\":\"20201229150109886\",\"modified\":\"20210409130116657\",\"origin\":\"Tiddler Titles\",\"qtype\":\"rememberq\",\"question\":\"Why is //Apple// likely a problematic title for a tiddler?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201229150153169\":{\"title\":\"Ta:20201229150153169\",\"created\":\"20201229150154649\",\"modified\":\"20210409130124011\",\"origin\":\"Tiddler Titles\",\"qtype\":\"remembercz\",\"question\":\"Tiddler titles are a form of {metacommentary}, a way of commenting on the claims or ideas in the tiddler and explaining what to think about them.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201229150514130\":{\"title\":\"Ta:20201229150514130\",\"answer\":\"You may accidentally create duplicate tiddlers on the same idea, since tiddler titles are case-sensitive.\",\"created\":\"20201229150516613\",\"modified\":\"20210409131327107\",\"origin\":\"Naming Conventions\",\"qtype\":\"rememberq\",\"question\":\"What confusion may result if you don't have consistent rules for how to capitalize the titles of tiddlers?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201229150834732\":{\"title\":\"Ta:20201229150834732\",\"answer\":\"If you don't, you might use a plural when a singular already exists (or vice versa) and create a duplicate tiddler.\",\"created\":\"20201229150836340\",\"modified\":\"20210409131329396\",\"origin\":\"Naming Conventions\",\"qtype\":\"rememberq\",\"question\":\"Why is it valuable to make all tiddler names that represent nouns singular, or all of them plural?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201229151002291\":{\"title\":\"Ta:20201229151002291\",\"created\":\"20201229151003687\",\"modified\":\"20210409125125233\",\"origin\":\"Browsing Your Tiddlers\",\"qtype\":\"remembercz\",\"question\":\"Tiddlers that are currently being edited are called {drafts}.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201229151054738\":{\"title\":\"Ta:20201229151054738\",\"created\":\"20201229151055958\",\"modified\":\"20210409125127348\",\"origin\":\"Browsing Your Tiddlers\",\"qtype\":\"remembercz\",\"question\":\"Tiddlers that have not been linked to in the text field of any other tiddler are called {orphans}.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201229151146289\":{\"title\":\"Ta:20201229151146289\",\"answer\":\"By dragging and dropping them on the //Open// tab of the sidebar.\",\"created\":\"20201229151149028\",\"modified\":\"20210409125129381\",\"origin\":\"Browsing Your Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"How can you reorder the tiddlers currently displayed in the story river?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201229151337744\":{\"title\":\"Ta:20201229151337744\",\"answer\":\"`text`\",\"created\":\"20201229151339841\",\"modified\":\"20210409125131967\",\"origin\":\"Browsing Your Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"To remove a tiddler from the list of orphans, another tiddler must link to it within what field?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201229151447515\":{\"title\":\"Ta:20201229151447515\",\"answer\":\"On the //More// tab of the sidebar.\",\"created\":\"20201229151450290\",\"modified\":\"20210418131733931\",\"origin\":\"Browsing Your Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"Most of the options for browsing lists of tiddlers in your wiki can be found where in TiddlyWiki's interface?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201229151542420\":{\"title\":\"Ta:20201229151542420\",\"answer\":\"A draft tiddler, which will house your changes until you save them.\",\"created\":\"20201229151543639\",\"modified\":\"20210409125201551\",\"origin\":\"Browsing Your Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"When you begin editing a tiddler, what kind of new tiddler is created?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201229151619186\":{\"title\":\"Ta:20201229151619186\",\"answer\":\"The draft tiddler containing the new version replaces the original tiddler (and the draft tiddler is deleted).\",\"created\":\"20201229151625095\",\"modified\":\"20210409125211638\",\"origin\":\"Browsing Your Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"What manipulations to tiddlers are carried out when you save (or //confirm//) changes to a tiddler?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201229151835493\":{\"title\":\"Ta:20201229151835493\",\"answer\":\"The tag.\",\"created\":\"20201229151838250\",\"modified\":\"20241010132155243\",\"origin\":\"Creating Hierarchies with a Table of Contents\",\"qtype\":\"rememberq\",\"question\":\"The built-in table-of-contents features in TiddlyWiki find hierarchies based on what TiddlyWiki concept?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201229152140871\":{\"title\":\"Ta:20201229152140871\",\"answer\":\"`<<toc \\\"TableOfContents\\\">>`\",\"created\":\"20201229152142692\",\"modified\":\"20240929214235195\",\"origin\":\"Creating Hierarchies with a Table of Contents\",\"qtype\":\"rememberq\",\"question\":\"What wikitext syntax displays a table of contents that shows all tiddlers in a non-expandable hierarchy, beginning at the tiddler `TableOfContents`?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201229152249751\":{\"title\":\"Ta:20201229152249751\",\"answer\":\"`<<toc-selective-expandable \\\"My Start Tiddler\\\">>`\",\"created\":\"20201229152256606\",\"modified\":\"20240929214236469\",\"origin\":\"Creating Hierarchies with a Table of Contents\",\"qtype\":\"rememberq\",\"question\":\"What wikitext syntax displays a table of contents that displays tiddlers in a collapsable and expandable hierarchy, beginning from the tiddler `My Start Tiddler`?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201229152529071\":{\"title\":\"Ta:20201229152529071\",\"answer\":\"e.g., steps in a project or procedure, an organization's management hierarchy\",\"created\":\"20201229152531292\",\"modified\":\"20240929214238614\",\"origin\":\"Creating Hierarchies with a Table of Contents\",\"qtype\":\"rememberq\",\"question\":\"Give an example of a time when you might want to use a table of contents to create a small hierarchy within a larger set of notes (try to pick a new one).\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201229152725707\":{\"title\":\"Ta:20201229152725707\",\"created\":\"20201229152726809\",\"modified\":\"20241010132237348\",\"origin\":\"Creating Hierarchies with a Table of Contents\",\"qtype\":\"remembercz\",\"question\":\"The TiddlyWiki table-of-contents features display the value of the {`caption`} field instead of the tiddler's title, if such a field exists.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201229152806403\":{\"title\":\"Ta:20201229152806403\",\"answer\":\"The `caption` field of the tiddler is set to `A tiddler I don't like very much`.\",\"created\":\"20201229152809724\",\"modified\":\"20240929214243413\",\"origin\":\"Creating Hierarchies with a Table of Contents\",\"qtype\":\"rememberq\",\"question\":\"A tiddler titled `MyFavoriteTiddler` appears in a table of contents as `A tiddler I don't like very much`. Why does the title not match?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201230162251323\":{\"title\":\"Ta:20201230162251323\",\"created\":\"20201230162255166\",\"modified\":\"20210409151510440\",\"origin\":\"Filters\",\"qtype\":\"remembercz\",\"question\":\"TiddlyWiki filters serve a similar function to {formulas} in Excel or other spreadsheet applications.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201230162420639\":{\"title\":\"Ta:20201230162420639\",\"answer\":\"To select tiddlers that match certain criteria.\",\"created\":\"20201230162424699\",\"modified\":\"20210409151512101\",\"origin\":\"Filters\",\"qtype\":\"rememberq\",\"question\":\"What is the primary purpose of filters?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201230162558911\":{\"title\":\"Ta:20201230162558911\",\"answer\":\"Nothing. TiddlyWiki is aware of when it needs to reprocess the filter, so any changes appear immediately.\",\"created\":\"20201230162600759\",\"modified\":\"20210409151516563\",\"origin\":\"Filters\",\"qtype\":\"rememberq\",\"question\":\"When you create a dynamic list that is populated by a filter, what must you do to update the list to match changes in the wiki?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201230162726228\":{\"title\":\"Ta:20201230162726228\",\"created\":\"20201230162727415\",\"modified\":\"20210409152332592\",\"origin\":\"Using Filter Expressions\",\"qtype\":\"remembercz\",\"question\":\"A filter expression consists of one or more filter {run}s.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201230162740192\":{\"title\":\"Ta:20201230162740192\",\"created\":\"20201230162741473\",\"modified\":\"20210418131919872\",\"origin\":\"Using Filter Expressions\",\"qtype\":\"remembercz\",\"question\":\"A filter run consists of one or more filter {step}s.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201230162912482\":{\"title\":\"Ta:20201230162912482\",\"created\":\"20201230162914568\",\"modified\":\"20210409152338772\",\"origin\":\"Using Filter Expressions\",\"qtype\":\"remembercz\",\"question\":\"A filter run can be thought of as a {pipeline} (logistics/transportation metaphor), where each step processes its input and produces new output.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201230163017337\":{\"title\":\"Ta:20201230163017337\",\"answer\":\"filter expression > filter run > filter step\",\"created\":\"20201230163018391\",\"modified\":\"20210418131923989\",\"origin\":\"Using Filter Expressions\",\"qtype\":\"rememberq\",\"question\":\"Put the following filter concepts in order from largest to smallest: filter step, filter expression, filter run.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201230163141646\":{\"title\":\"Ta:20201230163141646\",\"answer\":\"`[[My Tiddler]]` (`[title[My Tiddler]]` would also work, among other options; but that's longer.)\",\"created\":\"20201230163144011\",\"modified\":\"20210409152351114\",\"origin\":\"Using Filter Expressions\",\"qtype\":\"rememberq\",\"question\":\"What is the shortest filter expression that selects the single tiddler `My Tiddler`?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201230163214398\":{\"title\":\"Ta:20201230163214398\",\"answer\":\"`[tag[Project]]`\",\"created\":\"20201230163217137\",\"modified\":\"20210409152357141\",\"origin\":\"Using Filter Expressions\",\"qtype\":\"rememberq\",\"question\":\"What filter expression selects all tiddlers that are tagged `Project`?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201230163300801\":{\"title\":\"Ta:20201230163300801\",\"answer\":\"`!is[system]`\",\"created\":\"20201230163302373\",\"modified\":\"20210418131943487\",\"origin\":\"Using Filter Expressions\",\"qtype\":\"rememberq\",\"question\":\"What filter step removes all system tiddlers from consideration?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201230163348978\":{\"title\":\"Ta:20201230163348978\",\"answer\":\"It is a single filter step; to be a complete filter expression, it needs an outer set of square brackets, like `[tag[Contact]]`.\",\"created\":\"20201230163350480\",\"modified\":\"20210409152402448\",\"origin\":\"Using Filter Expressions\",\"qtype\":\"rememberq\",\"question\":\"Why does the filter expression `tag[Contact]` not work?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201230163426864\":{\"title\":\"Ta:20201230163426864\",\"answer\":\"The //Filter// tab of Advanced Search.\",\"created\":\"20201230163428701\",\"modified\":\"20210409152405956\",\"origin\":\"Using Filter Expressions\",\"qtype\":\"rememberq\",\"question\":\"In what part of TiddlyWiki's interface can you quickly test a filter expression?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201230163510268\":{\"title\":\"Ta:20201230163510268\",\"answer\":\"Ctrl+Shift+A\",\"created\":\"20201230163511287\",\"modified\":\"20210502174054995\",\"origin\":\"Using Filter Expressions\",\"qtype\":\"rememberq\",\"question\":\"What is the keyboard shortcut to open Advanced Search?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201230163559681\":{\"title\":\"Ta:20201230163559681\",\"answer\":\"You forgot the outermost pair of square brackets in your filter expression.\",\"created\":\"20201230163601291\",\"modified\":\"20210409152446159\",\"origin\":\"Using Filter Expressions\",\"qtype\":\"rememberq\",\"question\":\"What is the most common cause of the error message //Filter error: Missing [ in filter expression//?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201230205202610\":{\"title\":\"Ta:20201230205202610\",\"answer\":\"An operator, a suffix, and a parameter.\",\"created\":\"20201230205203754\",\"modified\":\"20210409161704704\",\"origin\":\"Anatomy of Filter Steps\",\"qtype\":\"rememberq\",\"question\":\"What three components make up a filter step?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201230205236409\":{\"title\":\"Ta:20201230205236409\",\"answer\":\"`field`\",\"created\":\"20201230205238685\",\"modified\":\"20210409161710002\",\"origin\":\"Anatomy of Filter Steps\",\"qtype\":\"rememberq\",\"question\":\"In the filter step `field:participants[Jane]`, what is the //operator//?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201230205247649\":{\"title\":\"Ta:20201230205247649\",\"answer\":\"`participants`\",\"created\":\"20201230205249605\",\"modified\":\"20210409161712058\",\"origin\":\"Anatomy of Filter Steps\",\"qtype\":\"rememberq\",\"question\":\"In the filter step `field:participants[Jane]`, what is the //suffix//?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201230205258398\":{\"title\":\"Ta:20201230205258398\",\"answer\":\"`Jane`\",\"created\":\"20201230205259591\",\"modified\":\"20210409161713518\",\"origin\":\"Anatomy of Filter Steps\",\"qtype\":\"rememberq\",\"question\":\"In the filter step `field:participants[Jane]`, what is the //parameter//?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201230205710487\":{\"title\":\"Ta:20201230205710487\",\"answer\":\"All (non-shadow) tiddlers in the wiki.\",\"created\":\"20201230205717399\",\"modified\":\"20210409161718488\",\"origin\":\"Anatomy of Filter Steps\",\"qtype\":\"rememberq\",\"question\":\"What are the input tiddlers to the filter step `tag[Person]` in the filter run `[tag[Person]]`?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201230210715030\":{\"title\":\"Ta:20201230210715030\",\"created\":\"20201230210717023\",\"modified\":\"20210409161720462\",\"origin\":\"Anatomy of Filter Steps\",\"qtype\":\"remembercz\",\"question\":\"A filter operator that ignores its input is called a {constructor}.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201230213137879\":{\"title\":\"Ta:20201230213137879\",\"answer\":\"`!`\",\"created\":\"20201230213139759\",\"modified\":\"20210418131744606\",\"origin\":\"Anatomy of Filter Steps\",\"qtype\":\"rememberq\",\"question\":\"What character can you place before a filter operator to negate its meaning?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201230213236939\":{\"title\":\"Ta:20201230213236939\",\"answer\":\"The first run returns all tiddlers that //are// system tiddlers; the second run returns all tiddlers that are //not// system tiddlers.\",\"created\":\"20201230213240799\",\"modified\":\"20210409161727539\",\"origin\":\"Anatomy of Filter Steps\",\"qtype\":\"rememberq\",\"question\":\"How do the results of the filter runs `[is[system]]` and `[!is[system]]` differ?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201230213542739\":{\"title\":\"Ta:20201230213542739\",\"answer\":\"All of the (non-shadow) tiddlers in the wiki.\",\"created\":\"20201230213543900\",\"modified\":\"20210409161733822\",\"origin\":\"Anatomy of Filter Steps\",\"qtype\":\"rememberq\",\"question\":\"If a filter run does not begin with a constructor, what are the input tiddlers of the first step in the run?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201230213928787\":{\"title\":\"Ta:20201230213928787\",\"answer\":\"The suffix is silently ignored.\",\"created\":\"20201230213930371\",\"modified\":\"20210409161738792\",\"origin\":\"Anatomy of Filter Steps\",\"qtype\":\"rememberq\",\"question\":\"What happens if you add a suffix to a filter operator that doesn't support suffixes?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201230234621972\":{\"title\":\"Ta:20201230234621972\",\"answer\":\"All tiddlers in the wiki that are tagged with both `NeedsUpdate` and `Person`.\",\"created\":\"20201230234625127\",\"modified\":\"20210409161746568\",\"origin\":\"Anatomy of Filter Steps\",\"qtype\":\"rememberq\",\"question\":\"What are the output tiddlers to the filter step `tag[Person]` in the filter run `[tag[NeedsUpdate]tag[Person]]`?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201230234833903\":{\"title\":\"Ta:20201230234833903\",\"answer\":\"`backlinks[]`\",\"created\":\"20201230234834948\",\"modified\":\"20210409165356187\",\"origin\":\"Common Filter Operators\",\"qtype\":\"rememberq\",\"question\":\"What filter operator outputs all the tiddlers that link to its input tiddlers?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201230234852880\":{\"title\":\"Ta:20201230234852880\",\"answer\":\"`links[]`\",\"created\":\"20201230234854277\",\"modified\":\"20210409165359148\",\"origin\":\"Common Filter Operators\",\"qtype\":\"rememberq\",\"question\":\"What filter operator outputs all the tiddlers that are linked within the `text` field of its input tiddlers?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201230234929251\":{\"title\":\"Ta:20201230234929251\",\"answer\":\"`tagging[]`\",\"created\":\"20201230234930237\",\"modified\":\"20210418131718689\",\"origin\":\"Common Filter Operators\",\"qtype\":\"rememberq\",\"question\":\"What filter operator outputs all tiddlers in the wiki that are //tagged by// one of its input tiddlers?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201230235140455\":{\"title\":\"Ta:20201230235140455\",\"answer\":\"`firstname[Margaret]`, or `field:firstname[Margaret]`\",\"created\":\"20201230235146110\",\"modified\":\"20210409165407469\",\"origin\":\"Common Filter Operators\",\"qtype\":\"rememberq\",\"question\":\"Write a filter step that finds all tiddlers which have a field `firstname` set to the exact value `Margaret`.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201230235250718\":{\"title\":\"Ta:20201230235250718\",\"answer\":\"`field:has[money]` (The short form `has[money]` doesn't work, because `has` is a built-in filter operator; this keeps only tiddlers that have a non-empty field called `money`.)\",\"created\":\"20201230235255697\",\"modified\":\"20210409165425911\",\"origin\":\"Common Filter Operators\",\"qtype\":\"rememberq\",\"question\":\"Write a filter step that finds all tiddlers which have a field `has` set to the exact value `money`.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201230235432908\":{\"title\":\"Ta:20201230235432908\",\"answer\":\"`contains:family[Tom Swift]`\",\"created\":\"20201230235434408\",\"modified\":\"20210409165434142\",\"origin\":\"Common Filter Operators\",\"qtype\":\"rememberq\",\"question\":\"Write a filter step that finds all tiddlers which have a list field `family` containing the tiddler `Tom Swift` (and possibly other tiddlers).\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201230235622890\":{\"title\":\"Ta:20201230235622890\",\"answer\":\"`[!has[caption]count[]]`\",\"created\":\"20201230235624237\",\"modified\":\"20240929214632858\",\"origin\":\"Common Filter Operators\",\"qtype\":\"rememberq\",\"question\":\"Write a filter expression that finds the number of tiddlers in the wiki which do //not// have a field called `caption`, or have one with no text in it.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201230235717132\":{\"title\":\"Ta:20201230235717132\",\"answer\":\"`[tag[Contact]sort[email]]`\",\"created\":\"20201230235719487\",\"modified\":\"20210409165449594\",\"origin\":\"Common Filter Operators\",\"qtype\":\"rememberq\",\"question\":\"Write a filter expression that outputs all tiddlers with the `Contact` tag, sorted alphabetically by their `email` field.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201230235837017\":{\"title\":\"Ta:20201230235837017\",\"answer\":\"`[[Awesome Tiddler]get[description]]` (or the long form, `[title[Awesome Tiddler]get[description]]`)\",\"created\":\"20201230235838368\",\"modified\":\"20210409165544862\",\"origin\":\"Common Filter Operators\",\"qtype\":\"rememberq\",\"question\":\"Write a filter expression with two steps that outputs the value of the `description` field on the tiddler named `Awesome Tiddler`.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231000114392\":{\"title\":\"Ta:20201231000114392\",\"created\":\"20201231000116390\",\"modified\":\"20210409171618308\",\"origin\":\"HTML\",\"qtype\":\"remembercz\",\"question\":\"{HTML} is a formatting language that underlies all web pages and a substantial number of desktop and mobile applications.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231000140638\":{\"title\":\"Ta:20201231000140638\",\"created\":\"20201231000143583\",\"modified\":\"20210409171619838\",\"origin\":\"HTML\",\"qtype\":\"remembercz\",\"question\":\"Wikitext is almost a perfect {superset} of HTML (mathematics term).\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231000237015\":{\"title\":\"Ta:20201231000237015\",\"answer\":\"Wikitext is much less verbose, so it is faster to type and easier to work with.\",\"created\":\"20201231000238971\",\"modified\":\"20210409171622300\",\"origin\":\"HTML\",\"qtype\":\"rememberq\",\"question\":\"Why do we usually use wikitext instead of HTML to write tiddlers?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231000307047\":{\"title\":\"Ta:20201231000307047\",\"created\":\"20201231000308534\",\"modified\":\"20210409171624612\",\"origin\":\"HTML\",\"qtype\":\"remembercz\",\"question\":\"The strings of text `<ul>` and `</li>` are examples of HTML {tag}s.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231000355989\":{\"title\":\"Ta:20201231000355989\",\"answer\":\"A closing tag has a forward slash (`/`) before the tag name.\",\"created\":\"20201231000402212\",\"modified\":\"20210409171628866\",\"origin\":\"HTML\",\"qtype\":\"rememberq\",\"question\":\"In HTML, what differentiates the syntax of an opening tag from that of a closing tag?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231000425840\":{\"title\":\"Ta:20201231000425840\",\"answer\":\"The first is a forward slash. The second is a backslash.\",\"created\":\"20201231000426933\",\"modified\":\"20210409171632225\",\"origin\":\"HTML\",\"qtype\":\"rememberq\",\"question\":\"Which of the following characters is a backslash, and which is a forward slash? `/` `\\\\`\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231000459394\":{\"title\":\"Ta:20201231000459394\",\"answer\":\"Angle brackets.\",\"created\":\"20201231000500589\",\"modified\":\"20210409171634161\",\"origin\":\"HTML\",\"qtype\":\"rememberq\",\"question\":\"In the context of HTML tags, what are the characters `<` and `>` collectively called?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231000531994\":{\"title\":\"Ta:20201231000531994\",\"created\":\"20201231000533307\",\"modified\":\"20210409171637271\",\"origin\":\"HTML\",\"qtype\":\"remembercz\",\"question\":\"The part of an HTML document between an opening tag and its matching closing tag, including the tags themselves, is called a/n {element}.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231000601245\":{\"title\":\"Ta:20201231000601245\",\"created\":\"20201231000603398\",\"modified\":\"20210409171639967\",\"origin\":\"HTML\",\"qtype\":\"remembercz\",\"question\":\"The part of an HTML document between an opening tag and its matching closing tag, //not// including the tags, is called the element's {content} (starts with C).\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231000723998\":{\"title\":\"Ta:20201231000723998\",\"answer\":\"E.g., `<li>`, `</ul>`, `<br>`, `<img>`, `</p>`\",\"created\":\"20201231000725371\",\"modified\":\"20210817221842301\",\"origin\":\"HTML\",\"qtype\":\"rememberq\",\"question\":\"Give an example of an HTML tag (try to pick a new one).\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231000803648\":{\"title\":\"Ta:20201231000803648\",\"answer\":\"An attribute.\",\"created\":\"20201231000805490\",\"modified\":\"20210409171653277\",\"origin\":\"HTML\",\"qtype\":\"rememberq\",\"question\":\"In the HTML element `<div style=\\\"text-align: center;\\\">Centered text!</div>`, what is the `style=\\\"text-align: center;\\\"` part called?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231000856730\":{\"title\":\"Ta:20201231000856730\",\"answer\":\"A space.\",\"created\":\"20201231000900234\",\"modified\":\"20210409171700461\",\"origin\":\"HTML\",\"qtype\":\"rememberq\",\"question\":\"Multiple HTML attributes on a single element are separated by what character of punctuation?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231000938714\":{\"title\":\"Ta:20201231000938714\",\"answer\":\"The value contains spaces or special characters.\",\"created\":\"20201231000939852\",\"modified\":\"20210409171704151\",\"origin\":\"HTML\",\"qtype\":\"rememberq\",\"question\":\"The values of HTML attributes must be placed within quotation marks when what is true?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231001012979\":{\"title\":\"Ta:20201231001012979\",\"answer\":\"Its opening tag.\",\"created\":\"20201231001014237\",\"modified\":\"20210409171706177\",\"origin\":\"HTML\",\"qtype\":\"rememberq\",\"question\":\"An attribute of an HTML element is found within what part of the element?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231001054308\":{\"title\":\"Ta:20201231001054308\",\"answer\":\"`<li></li>`\",\"created\":\"20201231001057693\",\"modified\":\"20210409171708623\",\"origin\":\"HTML\",\"qtype\":\"rememberq\",\"question\":\"The self-closing tag `<li />` is shorthand for what HTML?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231001143084\":{\"title\":\"Ta:20201231001143084\",\"answer\":\"There is a forward slash at the end of the opening tag, and no closing tag at all: `<tag />`\",\"created\":\"20201231001144780\",\"modified\":\"20210409171711532\",\"origin\":\"HTML\",\"qtype\":\"rememberq\",\"question\":\"In HTML, what syntax distinguishes a //self-closing tag// from a normal one?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231001229646\":{\"title\":\"Ta:20201231001229646\",\"created\":\"20201231001236890\",\"modified\":\"20210409171715214\",\"origin\":\"HTML\",\"qtype\":\"remembercz\",\"question\":\"In HTML, a //void element// is one that has only a/n {c1::opening tag} and no {c1::closing tag}.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231001318622\":{\"title\":\"Ta:20201231001318622\",\"answer\":\"The closing tag literally appears in the rendered output of the tiddler, like `</br>`.\",\"created\":\"20201231001320771\",\"modified\":\"20210409171720705\",\"origin\":\"HTML\",\"qtype\":\"rememberq\",\"question\":\"What happens if you use a closing tag for an HTML void element within a tiddler?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231001355790\":{\"title\":\"Ta:20201231001355790\",\"created\":\"20201231001356852\",\"modified\":\"20210409171723147\",\"origin\":\"HTML\",\"qtype\":\"remembercz\",\"question\":\"An HTML element placed inside another HTML element is said to be {nested} within the outer HTML element.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231001601903\":{\"title\":\"Ta:20201231001601903\",\"answer\":\"They are treated the same as a single space.\",\"created\":\"20201231001603282\",\"modified\":\"20210409171726531\",\"origin\":\"HTML\",\"qtype\":\"rememberq\",\"question\":\"In HTML, what special thing happens if you put multiple spaces or newlines in a row?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231001628667\":{\"title\":\"Ta:20201231001628667\",\"answer\":\"More than one newline in a row starts a new paragraph.\",\"created\":\"20201231001633860\",\"modified\":\"20210409171729533\",\"origin\":\"HTML\",\"qtype\":\"rememberq\",\"question\":\"What exception does TiddlyWiki add to the standard rules of HTML whitespace?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231001731208\":{\"title\":\"Ta:20201231001731208\",\"created\":\"20201231001732871\",\"modified\":\"20210409171734883\",\"origin\":\"HTML\",\"qtype\":\"remembercz\",\"question\":\"Tools that read HTML try to be {generous} in what they accept (philosophy for handling mistakes).\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231002107146\":{\"title\":\"Ta:20201231002107146\",\"answer\":\"The names of widget elements begin with a dollar sign (`$`), like `<$list>` or `<$link>`.\",\"created\":\"20201231002109497\",\"modified\":\"20210521202545528\",\"origin\":\"Widgets\",\"qtype\":\"rememberq\",\"question\":\"How can widgets be distinguished from HTML tags in wikitext?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231002126678\":{\"title\":\"Ta:20201231002126678\",\"answer\":\"HTML\",\"created\":\"20201231002128224\",\"modified\":\"20210409171831089\",\"origin\":\"Widgets\",\"qtype\":\"rememberq\",\"question\":\"Widgets are a TiddlyWiki extension to what language?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231002329965\":{\"title\":\"Ta:20201231002329965\",\"created\":\"20201231002331187\",\"modified\":\"20210409173100473\",\"origin\":\"Your First Dynamic List\",\"qtype\":\"remembercz\",\"question\":\"Dynamic lists use a {filter} (TiddlyWiki concept) to decide what items to include in the list.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231002445816\":{\"title\":\"Ta:20201231002445816\",\"answer\":\"The `$list` widget.\",\"created\":\"20201231002447038\",\"modified\":\"20210409173104856\",\"origin\":\"Your First Dynamic List\",\"qtype\":\"rememberq\",\"question\":\"What widget would you use to sequentially display each of the outputs of a filter?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231002544545\":{\"title\":\"Ta:20201231002544545\",\"answer\":\"`<<currentTiddler>>`\",\"created\":\"20201231002546410\",\"modified\":\"20210409173106630\",\"origin\":\"Your First Dynamic List\",\"qtype\":\"rememberq\",\"question\":\"Within the content of a `$list` widget, what placeholder represents the output of the filter that is currently being processed (by default)?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231002722578\":{\"title\":\"Ta:20201231002722578\",\"answer\":\"`<br>` (Note that `<br>` is a void tag, so it does not have a matching closing tag.)\",\"created\":\"20201231002723798\",\"modified\":\"20210409173110342\",\"origin\":\"Your First Dynamic List\",\"qtype\":\"rememberq\",\"question\":\"In HTML, what tag can you use to create an explicit line break?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231002959090\":{\"title\":\"Ta:20201231002959090\",\"answer\":\"E.g., listing all tiddlers with a specific tag, displaying the sections in the //More// tab of the sidebar, showing all to-do items whose start date is after today\",\"created\":\"20201231003001255\",\"modified\":\"20210418132016314\",\"origin\":\"Your First Dynamic List\",\"qtype\":\"rememberq\",\"question\":\"Give an example of a situation in which you might want to create a dynamic list of tiddlers (try to pick a new one).\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231003941730\":{\"title\":\"Ta:20201231003941730\",\"created\":\"20201231003942795\",\"modified\":\"20240929154500130\",\"origin\":\"Variables\",\"qtype\":\"remembercz\",\"question\":\"A variable is one way to define some wikitext in {c1::one} place and use it in {c1::many places}.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231004010457\":{\"title\":\"Ta:20201231004010457\",\"answer\":\"A name and a value.\",\"created\":\"20201231004011806\",\"modified\":\"20240929154452885\",\"origin\":\"Variables\",\"qtype\":\"rememberq\",\"question\":\"A variable has what two parts?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231004046232\":{\"title\":\"Ta:20201231004046232\",\"answer\":\"The `$set` widget.\",\"created\":\"20201231004049739\",\"modified\":\"20240929154433869\",\"origin\":\"Variables\",\"qtype\":\"rememberq\",\"question\":\"What widget, with `name` and `value` attributes, can be used to set a single variable (only) to an arbitrary value?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231004133545\":{\"title\":\"Ta:20201231004133545\",\"answer\":\"After the closing `</$set>` or `</$let>` tag.\",\"created\":\"20201231004134568\",\"modified\":\"20240929154528447\",\"origin\":\"Variables\",\"qtype\":\"rememberq\",\"question\":\"When you define a variable using a `$set` or `$let`widget, the variable's value ceases to be accessible at what point in your wikitext?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231004216217\":{\"title\":\"Ta:20201231004216217\",\"created\":\"20201231004217204\",\"modified\":\"20240929154421475\",\"origin\":\"Variables\",\"qtype\":\"remembercz\",\"question\":\"When a variable ceases to be accessible at a closing `</$set>` tag, the variable is said to have gone {out of scope}.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231004539860\":{\"title\":\"Ta:20201231004539860\",\"answer\":\"`<<myvar>>`\",\"created\":\"20201231004541137\",\"modified\":\"20240929154604314\",\"origin\":\"Variables\",\"qtype\":\"rememberq\",\"question\":\"What is the wikitext syntax to transclude the value of a variable named `myvar`?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231004651266\":{\"title\":\"Ta:20201231004651266\",\"answer\":\"If you have to change the value, you only have to change it in one place.\",\"created\":\"20201231004654224\",\"modified\":\"20240929154627513\",\"origin\":\"Variables\",\"qtype\":\"rememberq\",\"question\":\"What is the primary benefit of reducing repetition in wikitext using variables, compared to copying and pasting the wikitext?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231004826336\":{\"title\":\"Ta:20201231004826336\",\"answer\":\"The space.\",\"created\":\"20201231004828322\",\"modified\":\"20240929154412642\",\"origin\":\"Variables\",\"qtype\":\"rememberq\",\"question\":\"Variable names cannot contain what common character of text?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231004933477\":{\"title\":\"Ta:20201231004933477\",\"answer\":\"The variable transclusion evaluates to nothing (nothing at all is displayed where you place the transclusion).\",\"created\":\"20201231004934903\",\"modified\":\"20240929154647612\",\"origin\":\"Variables\",\"qtype\":\"rememberq\",\"question\":\"What happens if you refer to a variable that does not exist with wikitext like `<<nonexistentVariable>>`?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231005144733\":{\"title\":\"Ta:20201231005144733\",\"created\":\"20201231005147234\",\"modified\":\"20240929161706123\",\"origin\":\"Procedures\",\"qtype\":\"remembercz\",\"question\":\"Procedures, unlike variables, allow you to eliminate repetitive text where each occurrence of the repetitive text has some elements that {are different}.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231005245149\":{\"title\":\"Ta:20201231005245149\",\"created\":\"20201231005246431\",\"modified\":\"20240929161729227\",\"origin\":\"Procedures\",\"qtype\":\"remembercz\",\"question\":\"The parts of a procedure's output that change depending on how the procedure is called are known as {c1::parameters}.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231005359085\":{\"title\":\"Ta:20201231005359085\",\"answer\":\"A backslash, as in `\\\\procedure`.\",\"created\":\"20201231005400138\",\"modified\":\"20240929161744934\",\"origin\":\"Procedures\",\"qtype\":\"rememberq\",\"question\":\"A procedure definition begins with what character of punctuation?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231005417476\":{\"title\":\"Ta:20201231005417476\",\"created\":\"20201231005419435\",\"modified\":\"20241007222443111\",\"origin\":\"Procedures\",\"qtype\":\"remembercz\",\"question\":\"Using / transcluding a procedure is referred to as {calling} it.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231005612226\":{\"title\":\"Ta:20201231005612226\",\"answer\":\"`<<wikipediaLink Aardvark>>` (quotation marks around the value `Aardvark` are optional, since it contains no spaces)\",\"created\":\"20201231005613768\",\"modified\":\"20240929161841579\",\"origin\":\"Procedures\",\"qtype\":\"rememberq\",\"question\":\"What is the wikitext syntax to call the procedure `wikipediaLink` with the single parameter `Aardvark`?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231005732263\":{\"title\":\"Ta:20201231005732263\",\"created\":\"20201231005733763\",\"modified\":\"20240929161857606\",\"origin\":\"Procedures\",\"qtype\":\"remembercz\",\"question\":\"A declaration beginning with a backslash at the beginning of a tiddler that explains how TiddlyWiki should read the rest of the tiddler is called a {pragma}.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231005812772\":{\"title\":\"Ta:20201231005812772\",\"created\":\"20201231005815791\",\"modified\":\"20241007222456427\",\"origin\":\"Procedures\",\"qtype\":\"remembercz\",\"question\":\"In `\\\\procedure wikipediaLink(articleName)`, the part `(articleName)` is called the {parameter list} of the procedure.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231010010889\":{\"title\":\"Ta:20201231010010889\",\"answer\":\"With the text `\\\\end` on a separate line.\",\"created\":\"20201231010012028\",\"modified\":\"20241007222744983\",\"origin\":\"The Finer Points of Procedures\",\"qtype\":\"rememberq\",\"question\":\"A procedure definition that is more than one line long must be ended how?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231010504984\":{\"title\":\"Ta:20201231010504984\",\"answer\":\"As with a variable, nothing appears in the output where the wikitext referring to the procedure was.\",\"created\":\"20201231010507567\",\"modified\":\"20240929161948280\",\"origin\":\"Procedures\",\"qtype\":\"rememberq\",\"question\":\"What happens if you call a procedure that doesn't exist?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231010546414\":{\"title\":\"Ta:20201231010546414\",\"answer\":\"All pragmas must come at the top of a tiddler, before anything that is not a pragma.\",\"created\":\"20201231010548664\",\"modified\":\"20240929161959681\",\"origin\":\"Procedures\",\"qtype\":\"rememberq\",\"question\":\"What restriction is placed on the location of pragmas, such as `\\\\procedure`, within a tiddler?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231010627310\":{\"title\":\"Ta:20201231010627310\",\"answer\":\"That procedure definitions must come before all other text in the tiddler.\",\"created\":\"20201231010628288\",\"modified\":\"20240929162020362\",\"origin\":\"Procedures\",\"qtype\":\"rememberq\",\"question\":\"If you write a procedure definition and the definition literally appears in the output (i.e., you see `\\\\procedure something` in the rendered tiddler), what did you probably forget?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231012245335\":{\"title\":\"Ta:20201231012245335\",\"created\":\"20201231012246842\",\"modified\":\"20240929154408425\",\"origin\":\"Variables\",\"qtype\":\"remembercz\",\"question\":\"The two attributes used in the most basic form of the `$set` widget are {c1::`name`} and {c1::`value`}.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231035841287\":{\"title\":\"Ta:20201231035841287\",\"answer\":\"At the end of that tiddler.\",\"created\":\"20201231035843620\",\"modified\":\"20240929165524529\",\"origin\":\"The Finer Points of Procedures\",\"qtype\":\"rememberq\",\"question\":\"When does a procedure defined at the top of a tiddler go out of scope?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231035927292\":{\"title\":\"Ta:20201231035927292\",\"answer\":\"`\\\\procedure myProcedure()`\",\"created\":\"20201231035928615\",\"modified\":\"20240929165601618\",\"origin\":\"The Finer Points of Procedures\",\"qtype\":\"rememberq\",\"question\":\"What is the wikitext syntax to define a procedure `myProcedure` with no parameters?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231040040541\":{\"title\":\"Ta:20201231040040541\",\"answer\":\"`\\\\procedure myProcedure(a, b, c)`\",\"created\":\"20201231040041862\",\"modified\":\"20240929165552956\",\"origin\":\"The Finer Points of Procedures\",\"qtype\":\"rememberq\",\"question\":\"What is the wikitext syntax to define a single-line procedure `myProcedure` with three parameters, `a`, `b`, and `c`?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231040154144\":{\"title\":\"Ta:20201231040154144\",\"answer\":\"`<<myProcedure Aardvark \\\"Blue Baboon\\\">>`\",\"created\":\"20201231040155621\",\"modified\":\"20240929165617856\",\"origin\":\"The Finer Points of Procedures\",\"qtype\":\"rememberq\",\"question\":\"What is the wikitext syntax to call a procedure `myProcedure` with two parameters, `Aardvark` and `Blue Baboon`?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231040243184\":{\"title\":\"Ta:20201231040243184\",\"answer\":\"Place the parameter in triple double-quotes (“triple quotes”): `<<procedureName \\\"\\\"\\\"the \\\"parameter\\\" 'containing' quotes\\\"\\\"\\\">>`\",\"created\":\"20201231040248490\",\"modified\":\"20241012230544599\",\"origin\":\"The Finer Points of Procedures\",\"qtype\":\"rememberq\",\"question\":\"What is the simplest way to pass a parameter whose value contains both \\\"double quotes\\\" and 'single quotes' to a procedure?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231040441260\":{\"title\":\"Ta:20201231040441260\",\"answer\":\"`<<myProcedure y:\\\"2\\\" x:\\\"1\\\">>`\",\"created\":\"20201231040442487\",\"modified\":\"20240929165720331\",\"origin\":\"The Finer Points of Procedures\",\"qtype\":\"rememberq\",\"question\":\"Given a procedure defined with `\\\\procedure myProcedure(x, y)`, how can you use a double-angle-bracket procedure call `<<myProcedure>>` with x=\\\"1\\\" and y=\\\"2\\\", placing the parameter `y` //first// in the procedure call?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231040546593\":{\"title\":\"Ta:20201231040546593\",\"answer\":\"`\\\\procedure coloredText(text, color:\\\"red\\\")`\",\"created\":\"20201231040554973\",\"modified\":\"20240929165804474\",\"origin\":\"The Finer Points of Procedures\",\"qtype\":\"rememberq\",\"question\":\"How would you change the following procedure definition to supply a default value `red` for the parameter `color`?: `\\\\procedure coloredText(text, color)`\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231040746846\":{\"title\":\"Ta:20201231040746846\",\"answer\":\"The `$transclude` widget.\",\"created\":\"20201231040747801\",\"modified\":\"20241012230635329\",\"origin\":\"The Finer Points of Procedures\",\"qtype\":\"rememberq\",\"question\":\"What widget is used to call a procedure in modern TiddlyWiki?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231040803697\":{\"title\":\"Ta:20201231040803697\",\"answer\":\"`$variable` (note the dollar sign)\",\"created\":\"20201231040804979\",\"modified\":\"20240929165940744\",\"origin\":\"The Finer Points of Procedures\",\"qtype\":\"rememberq\",\"question\":\"What attribute of the `$transclude` widget is used to supply the name of a procedure to call/transclude?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231040925049\":{\"title\":\"Ta:20201231040925049\",\"answer\":\"`<$transclude $variable=\\\"wikipediaLink\\\" name=\\\"Aardvark\\\" />`\",\"created\":\"20201231040927890\",\"modified\":\"20240929165956713\",\"origin\":\"The Finer Points of Procedures\",\"qtype\":\"rememberq\",\"question\":\"Use a `$transclude` widget to achieve the same effect as the following wikitext: `<<wikipediaLink name:\\\"Aardvark\\\">>`\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231041222739\":{\"title\":\"Ta:20201231041222739\",\"answer\":\"The `variable` attribute needs a dollar sign, `$variable`, to distinguish it from a procedure parameter called `variable`.\",\"created\":\"20201231041224734\",\"modified\":\"20240929170035763\",\"origin\":\"The Finer Points of Procedures\",\"qtype\":\"rememberq\",\"question\":\"What is wrong with this procedure call?: `<$transclude variable=\\\"wikipediaLink\\\" articleTitle=\\\"Philosophy\\\"/>`\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231041935247\":{\"title\":\"Ta:20201231041935247\",\"answer\":\"There is no `/` before the `>`, so the remainder of the tiddler [[will be gobbled up|Ex:UnclosedProcedureCall]].\",\"created\":\"20201231041937385\",\"modified\":\"20241012230655006\",\"origin\":\"The Finer Points of Procedures\",\"qtype\":\"rememberq\",\"question\":\"What is wrong with this procedure call?: `<$transclude $variable=\\\"wikipediaLink\\\" articleTitle=\\\"Philosophy\\\">`\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231042152289\":{\"title\":\"Ta:20201231042152289\",\"answer\":\"When you need to pass transclusions of other things as the value of some of the parameters.\",\"created\":\"20201231042153726\",\"modified\":\"20240929170121246\",\"origin\":\"The Finer Points of Procedures\",\"qtype\":\"rememberq\",\"question\":\"When would you need to use a `$transclude` widget rather than the `<<double-angle-bracket>>` wikitext syntax?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231183319773\":{\"title\":\"Ta:20201231183319773\",\"created\":\"20201231183321606\",\"modified\":\"20240929170225186\",\"origin\":\"Field Transclusions\",\"qtype\":\"remembercz\",\"question\":\"The value of a field transclusion comes from a specified {field} of a tiddler.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231183458802\":{\"title\":\"Ta:20201231183458802\",\"answer\":\"`{{Book 2!!author}}`\",\"created\":\"20201231183501395\",\"modified\":\"20240929170229022\",\"origin\":\"Field Transclusions\",\"qtype\":\"rememberq\",\"question\":\"What wikitext syntax would you use to transclude the contents of the `author` field of the `Book 2` tiddler?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231183519255\":{\"title\":\"Ta:20201231183519255\",\"answer\":\"`{{!!description}}`\",\"created\":\"20201231183520841\",\"modified\":\"20240929170233598\",\"origin\":\"Field Transclusions\",\"qtype\":\"rememberq\",\"question\":\"What wikitext syntax would you use to transclude the `description` field of the current tiddler?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231183659048\":{\"title\":\"Ta:20201231183659048\",\"answer\":\"`text`\",\"created\":\"20201231183700864\",\"modified\":\"20240929170236864\",\"origin\":\"Field Transclusions\",\"qtype\":\"rememberq\",\"question\":\"When you transclude a tiddler without supplying a field name, like `{{IncludedTiddler}}`, what field is transcluded?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231183815120\":{\"title\":\"Ta:20201231183815120\",\"answer\":\"`<$transclude $variable=\\\"showRedText\\\" text={{!!warning}}/>`\",\"created\":\"20201231183816473\",\"modified\":\"20240929170250431\",\"origin\":\"Field Transclusions\",\"qtype\":\"rememberq\",\"question\":\"What wikitext syntax would you use to call a procedure named `showRedText` with a parameter `text` set to the value of the `warning` field of the current tiddler?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231184349915\":{\"title\":\"Ta:20201231184349915\",\"answer\":\"Search looks at a tiddler's wikitext, and a transcluded tiddler is not part of the wikitext of the tiddler transcluding it.\",\"created\":\"20201231184351104\",\"modified\":\"20240929170300968\",\"origin\":\"Field Transclusions\",\"qtype\":\"rememberq\",\"question\":\"Why is any text behind transclusions not considered when searching the contents of tiddlers?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231184452406\":{\"title\":\"Ta:20201231184452406\",\"created\":\"20201231184453729\",\"modified\":\"20240929170308675\",\"origin\":\"Field Transclusions\",\"qtype\":\"remembercz\",\"question\":\"A //hard link// is one that can be detected by {a superficial examination} of wikitext.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231184535007\":{\"title\":\"Ta:20201231184535007\",\"answer\":\"A hard link appears in the wikitext of a tiddler, while a soft link only appears in the tiddler when it's rendered (e.g., because it was transcluded into that tiddler).\",\"created\":\"20201231184536280\",\"modified\":\"20240929170311538\",\"origin\":\"Field Transclusions\",\"qtype\":\"rememberq\",\"question\":\"Explain the difference between a hard link and a soft link.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231184759654\":{\"title\":\"Ta:20201231184759654\",\"answer\":\"Using filters that inspect the relationships between tiddlers, such as `links[]`.\",\"created\":\"20201231184801879\",\"modified\":\"20240929170311065\",\"origin\":\"Field Transclusions\",\"qtype\":\"rememberq\",\"question\":\"A soft link does not appear when looking for links in what way?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231184943853\":{\"title\":\"Ta:20201231184943853\",\"answer\":\"Sometimes: this works fine as long as none of the tiddlers transclude one of the previous tiddlers in the stack of transcluded tiddlers (this forms an infinite loop and TiddlyWiki gives up on the transclusion).\",\"created\":\"20201231184947599\",\"modified\":\"20240929170315664\",\"origin\":\"Field Transclusions\",\"qtype\":\"rememberq\",\"question\":\"Always/Sometimes/Never: It is OK to transclude a tiddler that itself transcludes other tiddlers.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231185141418\":{\"title\":\"Ta:20201231185141418\",\"answer\":\"You accidentally transcluded a tiddler into itself, either directly or by creating a loop (e.g., tiddler A transcludes tiddler B, while tiddler B transcludes tiddler A).\",\"created\":\"20201231185144000\",\"modified\":\"20240929170320198\",\"origin\":\"Field Transclusions\",\"qtype\":\"rememberq\",\"question\":\"What does the error //Recursive transclusion error in transclude widget// suggest is wrong?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231185608799\":{\"title\":\"Ta:20201231185608799\",\"answer\":\"The current tiddler is changed to `JaneDoe`, the JaneDoe tiddler is rendered, and then the current tiddler returns to its previous value (most likely `ContactList`).\",\"created\":\"20201231185612842\",\"modified\":\"20240929170407175\",\"origin\":\"Templates and the Current Tiddler\",\"qtype\":\"rememberq\",\"question\":\"What happens to the current tiddler while TiddlyWiki reads the transclusion `{{JaneDoe}}` within the tiddler `ContactList`?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231185712575\":{\"title\":\"Ta:20201231185712575\",\"answer\":\"Nothing. The `||` causes TiddlyWiki to keep the current tiddler as `ContactList` while processing the transclusion.\",\"created\":\"20201231185715775\",\"modified\":\"20240929170408866\",\"origin\":\"Templates and the Current Tiddler\",\"qtype\":\"rememberq\",\"question\":\"What happens to the current tiddler while TiddlyWiki reads the transclusion `{{||JaneDoe}}` within the tiddler `ContactList`?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231185753892\":{\"title\":\"Ta:20201231185753892\",\"answer\":\"The current tiddler changes to `EmilyDoe`, the `JaneDoe` tiddler is rendered, and then the current tiddler returns to `ContactList`.\",\"created\":\"20201231185755191\",\"modified\":\"20240929170411295\",\"origin\":\"Templates and the Current Tiddler\",\"qtype\":\"rememberq\",\"question\":\"What happens to the current tiddler while TiddlyWiki reads the transclusion `{{EmilyDoe||JaneDoe}}` within the tiddler `ContactList`?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231185924193\":{\"title\":\"Ta:20201231185924193\",\"answer\":\"Transclude it, setting the current tiddler to a tiddler other than the template tiddler.\",\"created\":\"20201231185926952\",\"modified\":\"20240929170557135\",\"origin\":\"Templates and the Current Tiddler\",\"qtype\":\"rememberq\",\"question\":\"A tiddler is being used as a //template// when you do what with it?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231190051880\":{\"title\":\"Ta:20201231190051880\",\"answer\":\"`ContactInformationTemplate` (with `JaneDoe` as the current tiddler)\",\"created\":\"20201231190053870\",\"modified\":\"20240929170600422\",\"origin\":\"Templates and the Current Tiddler\",\"qtype\":\"rememberq\",\"question\":\"In the wikitext syntax `{{JaneDoe||ContactInformationTemplate}}`, which tiddler is being transcluded?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231190219699\":{\"title\":\"Ta:20201231190219699\",\"answer\":\"Some fields on the current tiddler.\",\"created\":\"20201231190222568\",\"modified\":\"20240929170602283\",\"origin\":\"Templates and the Current Tiddler\",\"qtype\":\"rememberq\",\"question\":\"For a template to be useful, it should transclude or refer to what?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231190320069\":{\"title\":\"Ta:20201231190320069\",\"answer\":\"Because the current tiddler is set to the template tiddler, but a template tiddler is designed to be rendered with a different current tiddler. The template tiddler likely does not have any of the fields the template was designed to refer to.\",\"created\":\"20201231190323429\",\"modified\":\"20240929170604257\",\"origin\":\"Templates and the Current Tiddler\",\"qtype\":\"rememberq\",\"question\":\"Why might a template tiddler display errors when you look at it in the story river?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231190848161\":{\"title\":\"Ta:20201231190848161\",\"answer\":\"The contents of the `$list` widget are rendered once for each output tiddler in the filter, with the current tiddler set to each output tiddler in turn.\",\"created\":\"20201231190849927\",\"modified\":\"20241012230717627\",\"origin\":\"Templates and the Current Tiddler\",\"qtype\":\"rememberq\",\"question\":\"How is the current tiddler affected by a `$list` widget (by default, unless you specify otherwise)?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231190945177\":{\"title\":\"Ta:20201231190945177\",\"answer\":\"`{{!!title}}`\",\"created\":\"20201231190946737\",\"modified\":\"20240929170610264\",\"origin\":\"Templates and the Current Tiddler\",\"qtype\":\"rememberq\",\"question\":\"What field transclusion is equivalent to the variable reference `<<currentTiddler>>`?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231191005319\":{\"title\":\"Ta:20201231191005319\",\"answer\":\"`<<currentTiddler>>`\",\"created\":\"20201231191006419\",\"modified\":\"20240929170620415\",\"origin\":\"Templates and the Current Tiddler\",\"qtype\":\"rememberq\",\"question\":\"What variable transclusion is equivalent to the field transclusion `{{!!title}}`?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231191056981\":{\"title\":\"Ta:20201231191056981\",\"answer\":\"`variable`\",\"created\":\"20201231191058879\",\"modified\":\"20210409212926985\",\"origin\":\"Templates and the Current Tiddler\",\"qtype\":\"rememberq\",\"question\":\"What attribute of the `$list` widget causes it to place the title of the output tiddler being processed in a variable other than `currentTiddler`?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231200916212\":{\"title\":\"Ta:20201231200916212\",\"answer\":\"`{{{ [tag[Contact]count[]] }}}`\",\"created\":\"20201231200917522\",\"modified\":\"20240929180958956\",\"origin\":\"Filters and Transclusions\",\"qtype\":\"rememberq\",\"question\":\"What is the wikitext syntax to transclude the result of the filter `[tag[Contact]count[]]`?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231201207111\":{\"title\":\"Ta:20201231201207111\",\"answer\":\"`{{{ [[LinkBonanza]links[]count[]] }}}`\",\"created\":\"20201231201209935\",\"modified\":\"20240929181000689\",\"origin\":\"Filters and Transclusions\",\"qtype\":\"rememberq\",\"question\":\"Write a filter transclusion to display the number of links to unique tiddlers contained in the tiddler `LinkBonanza`.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231201250343\":{\"title\":\"Ta:20201231201250343\",\"answer\":\"The `$text` widget.\",\"created\":\"20201231201251467\",\"modified\":\"20240929181011019\",\"origin\":\"Filters and Transclusions\",\"qtype\":\"rememberq\",\"question\":\"What widget can be used to prevent the result of a filter transclusion from becoming a link?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231201436093\":{\"title\":\"Ta:20201231201436093\",\"answer\":\"`There are <$text text={{{ [count[]] }}}/> non-shadow tiddlers in this wiki.`\",\"created\":\"20201231201437800\",\"modified\":\"20210409220111795\",\"origin\":\"Filters and Transclusions\",\"qtype\":\"rememberq\",\"question\":\"Add a `$text` widget to the following line so the result of the filter isn't a link: `There are {{{ [count[]] }}} non-shadow tiddlers in this wiki.`\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231201716263\":{\"title\":\"Ta:20201231201716263\",\"answer\":\"`[parent{!!title}]`\",\"created\":\"20201231201718070\",\"modified\":\"20240929181026525\",\"origin\":\"Filters and Transclusions\",\"qtype\":\"rememberq\",\"question\":\"Write a filter to find all tiddlers whose `parent` field is set to the title of the current tiddler. Use a field transclusion.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231201742553\":{\"title\":\"Ta:20201231201742553\",\"answer\":\"`[parent<currentTiddler>]`\",\"created\":\"20201231201743734\",\"modified\":\"20240929181050757\",\"origin\":\"Filters and Transclusions\",\"qtype\":\"rememberq\",\"question\":\"Write a filter to find all tiddlers whose `parent` field is set to the title of the current tiddler. Use a variable transclusion.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231201927944\":{\"title\":\"Ta:20201231201927944\",\"answer\":\"`<<list-links \\\"myfilter\\\">>`\",\"created\":\"20201231201929127\",\"modified\":\"20240929181115831\",\"origin\":\"Filters and Transclusions\",\"qtype\":\"rememberq\",\"question\":\"What built-in procedure/macro creates a bulleted list of links to tiddlers that match a filter?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231202241809\":{\"title\":\"Ta:20201231202241809\",\"answer\":\"`addsuffix`\",\"created\":\"20201231202243008\",\"modified\":\"20240929181101683\",\"origin\":\"Filters and Transclusions\",\"qtype\":\"rememberq\",\"question\":\"What filter operator adds a string of text to the end of each of its inputs?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20201231202332834\":{\"title\":\"Ta:20201231202332834\",\"answer\":\"`class=\\\"tc-tiddlylink-external\\\"`\",\"created\":\"20201231202335322\",\"modified\":\"20240929181125920\",\"origin\":\"Filters and Transclusions\",\"qtype\":\"rememberq\",\"question\":\"To make an external link created with an `<a>` HTML tag look the same as one created in wikitext, what attribute must you add to the tag?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210101171825776\":{\"title\":\"Ta:20210101171825776\",\"created\":\"20210101171826919\",\"modified\":\"20240929202046719\",\"origin\":\"Wikification\",\"qtype\":\"remembercz\",\"question\":\"Wikification is the process of taking wikitext and turning it into {HTML} for display.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210101171953478\":{\"title\":\"Ta:20210101171953478\",\"answer\":\"Sometimes. If the `{{transclusion}}` is directly within the body of the tiddler, it will be. But if it's used as an attribute of an HTML element or widget, like `<img src={{transclusion}}>`, it won't be.\",\"created\":\"20210101171954389\",\"modified\":\"20240929202048771\",\"origin\":\"Wikification\",\"qtype\":\"rememberq\",\"question\":\"Always/Sometimes/Never: When you put a `{{transclusion}}` somewhere within the body of a tiddler, the wikitext at the other end of the transclusion will be wikified.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210101172047033\":{\"title\":\"Ta:20210101172047033\",\"answer\":\"`<img src=\\\"https://example.com/image.png\\\">` (`img` is a void element, so the tag is not closed)\",\"created\":\"20210101172048478\",\"modified\":\"20240929202104497\",\"origin\":\"Wikification\",\"qtype\":\"rememberq\",\"question\":\"In HTML, how do you display an image that's stored at the URL `https://example.com/image.png`?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210101172924122\":{\"title\":\"Ta:20210101172924122\",\"answer\":\"As many times as is required to wikify all wikitext resulting from each wikification step.\",\"created\":\"20210101172925655\",\"modified\":\"20240929202127580\",\"origin\":\"Wikification\",\"qtype\":\"rememberq\",\"question\":\"When a transclusion is included directly in the body of a tiddler, how many times does TiddlyWiki try to wikify it?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210101172937494\":{\"title\":\"Ta:20210101172937494\",\"answer\":\"Exactly once.\",\"created\":\"20210101172939240\",\"modified\":\"20240929202138760\",\"origin\":\"Wikification\",\"qtype\":\"rememberq\",\"question\":\"When a transclusion is used as an HTML or widget attribute, how many times does TiddlyWiki try to wikify it?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210101173259951\":{\"title\":\"Ta:20210101173259951\",\"answer\":\"The `$wikify` widget.\",\"created\":\"20210101173304101\",\"modified\":\"20240929202152576\",\"origin\":\"Wikification\",\"qtype\":\"rememberq\",\"question\":\"What widget can be used to wikify text and store the result in a variable, rather than waiting until it appears directly within the body of a tiddler?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210101173413520\":{\"title\":\"Ta:20210101173413520\",\"answer\":\"`<$wikify name=\\\"w\\\" text={{LotsOfWikitext}}> ...use variable here... </$wikify>`<br>(You could also put `{{LotsOfWikitext}}` in quotes. In this case, it has the same effect!)\",\"created\":\"20210101173414869\",\"modified\":\"20240929202154102\",\"origin\":\"Wikification\",\"qtype\":\"rememberq\",\"question\":\"Write a `$wikify` widget call that wikifies the `LotsOfWikitext` tiddler and places the result in a variable called `w`.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210101174948555\":{\"title\":\"Ta:20210101174948555\",\"answer\":\"`[[LinkTarget]backlinks[]]`\",\"created\":\"20210101174953282\",\"modified\":\"20210409165601636\",\"origin\":\"Common Filter Operators\",\"qtype\":\"rememberq\",\"question\":\"Write a filter expression that finds all tiddlers that link to the tiddler `LinkTarget`.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210101175651214\":{\"title\":\"Ta:20210101175651214\",\"answer\":\"`$(myVariable)​$` (just like in a <code>&#96;substituted attribute value&#96;</code>)\",\"created\":\"20210101175652476\",\"modified\":\"20240929201026356\",\"origin\":\"Macros\",\"qtype\":\"rememberq\",\"question\":\"What is the syntax to text-substitute a variable (not a parameter) called `myVariable` in the definition of a macro?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<!--\\n\\nNote: there is a zero-width space between the ) and the `$`, because otherwise it triggers a real variable substitution somewhere in the bowels of the TiddlyRemember rendering!\\n\\n-->\\n\"},\"Ta:20210101180536591\":{\"title\":\"Ta:20210101180536591\",\"answer\":\"When using parameters, it is more obvious at the point where the macro is called what the macro is doing and what inputs it takes.\",\"created\":\"20210101180538367\",\"modified\":\"20240929200936047\",\"origin\":\"Macros\",\"qtype\":\"rememberq\",\"question\":\"Why is it usually preferable to pass information to macros using parameters rather than defining variables and referring to them within the macro?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210102183959975\":{\"title\":\"Ta:20210102183959975\",\"answer\":\"The tag manager.\",\"created\":\"20210102184001422\",\"modified\":\"20210410175959587\",\"origin\":\"Classifying Tags\",\"qtype\":\"rememberq\",\"question\":\"What TiddlyWiki tool allows you to customize the colors and icons of tags?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210102184138118\":{\"title\":\"Ta:20210102184138118\",\"answer\":\"`[icon[$:/core/images/tag-button]tagging[]]`\",\"created\":\"20210102184139892\",\"modified\":\"20210410180003927\",\"origin\":\"Classifying Tags\",\"qtype\":\"rememberq\",\"question\":\"Write a filter to find all tiddlers tagged with a tag that uses the icon `$:/core/images/tag-button`.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210103163347118\":{\"title\":\"Ta:20210103163347118\",\"answer\":\"`list`\",\"created\":\"20210103163348597\",\"modified\":\"20210409135643224\",\"origin\":\"Ordering Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"What field on each tiddler contains a special tiddler list used to order any tiddlers tagged by that tiddler?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210103163502135\":{\"title\":\"Ta:20210103163502135\",\"answer\":\"When looking at a tag pill or table of contents for the tiddler T, `B` and `A` will be listed beneath it in that order.\",\"created\":\"20210103163503663\",\"modified\":\"20210409135651143\",\"origin\":\"Ordering Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"If you have a tag tiddler `T` and two tiddlers with that tag `A` and `B`, what is the effect of populating the `list` field of `T` with `B A`?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210103163854080\":{\"title\":\"Ta:20210103163854080\",\"answer\":\"`list-before` and `list-after`.\",\"created\":\"20210103163855379\",\"modified\":\"20210409135656550\",\"origin\":\"Ordering Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"What two fields can you populate on a //tagged// tiddler `A` (rather than a //tagging// tiddler `T`) to influence where `A` comes in the list of `T`?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210103163935114\":{\"title\":\"Ta:20210103163935114\",\"answer\":\"If you don't want to edit the tiddler containing the list, perhaps because it is a shadow tiddler or belongs to someone else.\",\"created\":\"20210103163936808\",\"modified\":\"20210409135705174\",\"origin\":\"Ordering Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"What is the primary reason you would want to use `list-before` and `list-after` rather than directly editing the `list` field of a tiddler?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210103164048401\":{\"title\":\"Ta:20210103164048401\",\"answer\":\"`A D B C`\",\"created\":\"20210103164050397\",\"modified\":\"20210409135717900\",\"origin\":\"Ordering Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"Given a tag tiddler `T` with list `A B C`, and a tiddler `D` also tagged `T` with a `list-before` field set to `B`, what order do the tiddlers tagged by `T` appear in?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210103164354611\":{\"title\":\"Ta:20210103164354611\",\"answer\":\"`list-links-draggable`\",\"created\":\"20210103164356273\",\"modified\":\"20210409135720041\",\"origin\":\"Ordering Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"What built-in macro allows you to drag and drop tiddlers that appear in a list field of a tiddler to reorder them?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210103164623372\":{\"title\":\"Ta:20210103164623372\",\"answer\":\"`<<list-links-draggable \\\"My Tiddler\\\">>`\",\"created\":\"20210103164625111\",\"modified\":\"20241010132053041\",\"origin\":\"Ordering Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"Use `list-links-draggable` (a built-in procedure) to allow the `list` field on the `My Tiddler` tiddler to be reordered.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210103170007475\":{\"title\":\"Ta:20210103170007475\",\"answer\":\"The value in T's `list` field is ignored and the one in A's `list-before` field is used.\",\"created\":\"20210103170008818\",\"modified\":\"20210409135829116\",\"origin\":\"Ordering Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"How does TiddlyWiki order a tagged tiddler `A` if it is listed in the tag tiddler `T`'s `list` field, but `A` also has a `list-before` field?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210103170224509\":{\"title\":\"Ta:20210103170224509\",\"answer\":\"After all tiddlers that have ordering information, in alphabetical order.\",\"created\":\"20210103170225838\",\"modified\":\"20210409135834297\",\"origin\":\"Ordering Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"How does TiddlyWiki order the tagged tiddlers `A` and `B` if they are missing from the `list` field of the tag tiddler `T`?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210103173543224\":{\"title\":\"Ta:20210103173543224\",\"answer\":\"`tabs`\",\"created\":\"20210103173544313\",\"modified\":\"20240929191339561\",\"origin\":\"Tabs\",\"qtype\":\"rememberq\",\"question\":\"What built-in procedure/macro allows you to create a set of tabs, like those in the sidebar?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210103173645450\":{\"title\":\"Ta:20210103173645450\",\"answer\":\"`tabsList`, a filter describing the tiddlers to be used as tabs, and `default`, the title of the tab that is selected by default.\",\"created\":\"20210103173646735\",\"modified\":\"20240929191349567\",\"origin\":\"Tabs\",\"qtype\":\"rememberq\",\"question\":\"What are the names and functions of the first two parameters to `tabs`?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210103173804424\":{\"title\":\"Ta:20210103173804424\",\"answer\":\"`class:\\\"tc-vertical\\\"`\",\"created\":\"20210103173805655\",\"modified\":\"20240929191405138\",\"origin\":\"Tabs\",\"qtype\":\"rememberq\",\"question\":\"What parameter do you add to `tabs` to show tabs vertically instead of horizontally?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210103173848047\":{\"title\":\"Ta:20210103173848047\",\"answer\":\"A tiddler.\",\"created\":\"20210103173849080\",\"modified\":\"20240929191416526\",\"origin\":\"Tabs\",\"qtype\":\"rememberq\",\"question\":\"What TiddlyWiki object populates each tab produced by `tabs`?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210103174222286\":{\"title\":\"Ta:20210103174222286\",\"answer\":\"`now`\",\"created\":\"20210103174223555\",\"modified\":\"20240929191431193\",\"origin\":\"Tabs\",\"qtype\":\"rememberq\",\"question\":\"What built-in procedure/macro allows you to get today's date?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210103174256315\":{\"title\":\"Ta:20210103174256315\",\"answer\":\"Change the current tiddler to the tiddler being rendered as a tab.\",\"created\":\"20210103174257618\",\"modified\":\"20240929191438995\",\"origin\":\"Tabs\",\"qtype\":\"rememberq\",\"question\":\"When rendering each tab in a `tabs` call, what does TiddlyWiki unexpectedly //not// do?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210103174333268\":{\"title\":\"Ta:20210103174333268\",\"answer\":\"`currentTab`\",\"created\":\"20210103174335087\",\"modified\":\"20240929191449956\",\"origin\":\"Tabs\",\"qtype\":\"rememberq\",\"question\":\"When rendering each tab in a `tabs` call, what variable contains the title of the tiddler being rendered?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210103174719170\":{\"title\":\"Ta:20210103174719170\",\"answer\":\"Drag and drop it onto the browser window.\",\"created\":\"20210103174720050\",\"modified\":\"20240929190408141\",\"origin\":\"Images and Attachments\",\"qtype\":\"rememberq\",\"question\":\"What is the fastest way to import an image into your TiddlyWiki?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210103174822368\":{\"title\":\"Ta:20210103174822368\",\"answer\":\"Transclude the image tiddler, like `{{image.png}}`.\",\"created\":\"20210103174824402\",\"modified\":\"20240929190409451\",\"origin\":\"Images and Attachments\",\"qtype\":\"rememberq\",\"question\":\"How can you quickly display an image that is part of your wiki within another tiddler if you don't need to adjust its size or other parameters?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210103174916873\":{\"title\":\"Ta:20210103174916873\",\"answer\":\"`[img width=350 [image.png]]`\",\"created\":\"20210103174918105\",\"modified\":\"20210410185218452\",\"origin\":\"Images and Attachments\",\"qtype\":\"rememberq\",\"question\":\"What wikitext syntax would you use to display an image stored in the tiddler `image.png`, with a maximum width of 350 pixels?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210103175005436\":{\"title\":\"Ta:20210103175005436\",\"answer\":\"Import the PDF into its own tiddler, then transclude that tiddler.\",\"created\":\"20210103175007009\",\"modified\":\"20210410185220397\",\"origin\":\"Images and Attachments\",\"qtype\":\"rememberq\",\"question\":\"How can you display a PDF within another tiddler?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210103175033563\":{\"title\":\"Ta:20210103175033563\",\"answer\":\"It inflates the size of the file, causing backups to waste space and performance to slow down.\",\"created\":\"20210103175036531\",\"modified\":\"20210418131746732\",\"origin\":\"Images and Attachments\",\"qtype\":\"rememberq\",\"question\":\"Why is including too many images or other attachments in a single-file TiddlyWiki problematic?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210103175124781\":{\"title\":\"Ta:20210103175124781\",\"answer\":\"Any that uses a folder wiki (one hosted on a Node.js webserver, where each tiddler is in a separate file).\",\"created\":\"20210103175125766\",\"modified\":\"20240929190418429\",\"origin\":\"Images and Attachments\",\"qtype\":\"rememberq\",\"question\":\"What method of hosting a TiddlyWiki does not suffer issues when many images are added to the wiki?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210103175243272\":{\"title\":\"Ta:20210103175243272\",\"answer\":\"`[img [https://example.com/image.png]]`\",\"created\":\"20210103175244683\",\"modified\":\"20210410185254067\",\"origin\":\"Images and Attachments\",\"qtype\":\"rememberq\",\"question\":\"What wikitext syntax would you use to display an image hosted on the web at `https://example.com/image.png` within a tiddler in your wiki? (Do not make the image itself a tiddler in your wiki.)\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210103175352198\":{\"title\":\"Ta:20210103175352198\",\"answer\":\"`[img [attachments/image.png]]`\",\"created\":\"20210103175354872\",\"modified\":\"20210410185300133\",\"origin\":\"Images and Attachments\",\"qtype\":\"rememberq\",\"question\":\"If you have a folder on your computer called `attachments` located in the same folder as your TiddlyWiki file, what wikitext syntax do you use to display the `image.png` image in that folder in a tiddler? (Do not make the image a tiddler in your wiki.)\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210103175527476\":{\"title\":\"Ta:20210103175527476\",\"created\":\"20210103175528640\",\"modified\":\"20240929190427782\",\"origin\":\"Images and Attachments\",\"qtype\":\"remembercz\",\"question\":\"You can store a tiddler's content (such as an image) in a file outside your TiddlyWiki by setting the tiddler's {`_canonical_uri`} field to the path to that file.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210103175644610\":{\"title\":\"Ta:20210103175644610\",\"answer\":\"The MIME type (//Type// dropdown) on the tiddler must be set to the correct file type.\",\"created\":\"20210103175645373\",\"modified\":\"20210410185304991\",\"origin\":\"Images and Attachments\",\"qtype\":\"rememberq\",\"question\":\"If you create a new tiddler using the `_canonical_uri` field and the content doesn't appear when you save the tiddler, but you're sure the path to the file is correct, what did you likely forget?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210103175938846\":{\"title\":\"Ta:20210103175938846\",\"answer\":\"Store the images/files in a folder outside of the wiki and reference them from within the wiki.\",\"created\":\"20210103175940169\",\"modified\":\"20210418131836696\",\"origin\":\"Images and Attachments\",\"qtype\":\"rememberq\",\"question\":\"If you need to attach many images or other files to your single-file wiki, what approach should you take to avoid your wiki becoming too large?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210103183826775\":{\"title\":\"Ta:20210103183826775\",\"answer\":\"\",\"created\":\"20210103183828819\",\"modified\":\"20240929200538886\",\"origin\":\"Data Tiddlers\",\"qtype\":\"remembercz\",\"question\":\"A {data} tiddler is one that stores a number of key-value pairs.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210103183848688\":{\"title\":\"Ta:20210103183848688\",\"answer\":\"TiddlyWiki's built-in “dictionary” format, or JSON.\",\"created\":\"20210103183849899\",\"modified\":\"20240929200539975\",\"origin\":\"Data Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"Data tiddlers can be in what two formats?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210103184048411\":{\"title\":\"Ta:20210103184048411\",\"answer\":\"E.g., the dates and names of events, the mappings for a letter substitution cipher, metadata about a wiki that needs to be editable by an external process\",\"created\":\"20210103184050547\",\"modified\":\"20240929200540916\",\"origin\":\"Data Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"Give an example of something you might choose to store in a data tiddler (try to pick a new one).\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210103184206621\":{\"title\":\"Ta:20210103184206621\",\"created\":\"20210103184207725\",\"modified\":\"20240929200542225\",\"origin\":\"Data Tiddlers\",\"qtype\":\"remembercz\",\"question\":\"A data tiddler's text field contains one or more {properties} (term for each item).\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210103184214736\":{\"title\":\"Ta:20210103184214736\",\"created\":\"20210103184215515\",\"modified\":\"20240929200543443\",\"origin\":\"Data Tiddlers\",\"qtype\":\"remembercz\",\"question\":\"In a data tiddler, the key by which the value of a property is retrieved is called a/n {index}.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210103184314406\":{\"title\":\"Ta:20210103184314406\",\"answer\":\"`k: v` (on a separate line)\",\"created\":\"20210103184316716\",\"modified\":\"20240929200544386\",\"origin\":\"Data Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"In a data tiddler formatted as a dictionary, how would you write the key-value pair where `k` was the key and `v` was the value?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210103184418750\":{\"title\":\"Ta:20210103184418750\",\"answer\":\"They can only contain a single level of key-value pairs – no nested arrays or objects.\",\"created\":\"20210103184419927\",\"modified\":\"20240929200545936\",\"origin\":\"Data Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"What limitation is placed on JSON documents being used as data tiddlers?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210103184459909\":{\"title\":\"Ta:20210103184459909\",\"answer\":\"Set its //Type// to `application/x-tiddler-dictionary`.\",\"created\":\"20210103184501081\",\"leechignores\":\"1\",\"modified\":\"20240929200551616\",\"origin\":\"Data Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"How do you mark a tiddler as a data tiddler of the TiddlyWiki dictionary type?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210103184557434\":{\"title\":\"Ta:20210103184557434\",\"answer\":\"`{{DataStore##X}}`\",\"created\":\"20210103184600258\",\"modified\":\"20240929200553655\",\"origin\":\"Data Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"What is the wikitext syntax to transclude the value at index `X` from a data tiddler `DataStore`?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210103184640882\":{\"title\":\"Ta:20210103184640882\",\"answer\":\"`getindex`\",\"created\":\"20210103184642288\",\"modified\":\"20240929200555895\",\"origin\":\"Data Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"What filter operator retrieves the value at a given index from its input data tiddlers?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210103184741717\":{\"title\":\"Ta:20210103184741717\",\"answer\":\"You probably want to store multiple pieces of information about each contact, and a data tiddler can only store one value per index.\",\"created\":\"20210103184743122\",\"modified\":\"20240929200603116\",\"origin\":\"Data Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"Why are data tiddlers likely a poor choice for storing the email addresses of contacts?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210103190602884\":{\"title\":\"Ta:20210103190602884\",\"created\":\"20210103190604113\",\"modified\":\"20240929204950704\",\"origin\":\"System Tiddlers\",\"qtype\":\"remembercz\",\"question\":\"The entire interface of TiddlyWiki is built by {transcluding} a series of special tiddlers.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210103190641443\":{\"title\":\"Ta:20210103190641443\",\"answer\":\"Its name begins with `$:/`.\",\"created\":\"20210103190642844\",\"modified\":\"20240929204950037\",\"origin\":\"System Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"A tiddler is said to be a //system tiddler// if what is true about it?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210103190907688\":{\"title\":\"Ta:20210103190907688\",\"answer\":\"The //Explorer// section of the //More// tab.\",\"created\":\"20210103190910950\",\"modified\":\"20241013004956817\",\"origin\":\"System Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"What section of the sidebar is usually the best way to browse for system tiddlers?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210103191403629\":{\"title\":\"Ta:20210103191403629\",\"answer\":\"The search bar and the //All// section.\",\"created\":\"20210103191405268\",\"modified\":\"20241013005025847\",\"origin\":\"System Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"From which of the following places are system tiddlers hidden by default? Select all that apply.<br>The //Explorer// section of the //More// sidebar tab; the standard search bar; filters; the //All// section of the //More// sidebar tab\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210103191646606\":{\"title\":\"Ta:20210103191646606\",\"created\":\"20210103191648125\",\"modified\":\"20240929204958852\",\"origin\":\"Plugins\",\"qtype\":\"remembercz\",\"question\":\"A plugin is a single tiddler that contains multiple {shadow} tiddlers (TiddlyWiki term for a type of tiddler).\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210103191737048\":{\"title\":\"Ta:20210103191737048\",\"answer\":\"Drag and drop a link to the plugin tiddler from the plugin's demo/documentation wiki into your wiki.\",\"created\":\"20210103191740220\",\"modified\":\"20240929204959933\",\"origin\":\"Plugins\",\"qtype\":\"rememberq\",\"question\":\"What is the most common way to install a plugin in TiddlyWiki?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210103191824456\":{\"title\":\"Ta:20210103191824456\",\"created\":\"20210103191825626\",\"modified\":\"20240929205001436\",\"origin\":\"Plugins\",\"qtype\":\"remembercz\",\"question\":\"Plugins, since they are typically used to add functionality to TiddlyWiki, usually contain primarily {system} tiddlers (TiddlyWiki term for a type of tiddler).\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210103191957794\":{\"title\":\"Ta:20210103191957794\",\"answer\":\"In the ''Plugins'' section of the ''More'' sidebar tab.\",\"created\":\"20210103191959273\",\"modified\":\"20240929205002581\",\"origin\":\"Plugins\",\"qtype\":\"rememberq\",\"question\":\"Where can you find a list of all plugins in your wiki?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210103192035897\":{\"title\":\"Ta:20210103192035897\",\"answer\":\"A plugin tiddler (`$:/core`, specifically).\",\"created\":\"20210103192037268\",\"modified\":\"20240929205003206\",\"origin\":\"Plugins\",\"qtype\":\"rememberq\",\"question\":\"TiddlyWiki's core code is contained in what type of single tiddler?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210107013945419\":{\"title\":\"Ta:20210107013945419\",\"answer\":\"Shadow tiddlers are parts of their plugin tiddler, rather than truly separate tiddlers.\",\"created\":\"20210107013949322\",\"modified\":\"20210418134031544\",\"origin\":\"Shadow Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"How does TiddlyWiki's method of storing shadow tiddlers differ from its method of storing normal tiddlers?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210107014030925\":{\"title\":\"Ta:20210107014030925\",\"answer\":\"If another, normal, tiddler has the same name as the shadow tiddler.\",\"created\":\"20210107014032565\",\"modified\":\"20210418134034916\",\"origin\":\"Shadow Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"In what circumstances will a shadow tiddler provided by a plugin be ignored?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210107014105988\":{\"title\":\"Ta:20210107014105988\",\"created\":\"20210107014106947\",\"modified\":\"20210418134037448\",\"origin\":\"Shadow Tiddlers\",\"qtype\":\"remembercz\",\"question\":\"When a shadow tiddler is ignored because a normal tiddler by the same name also exists in the wiki, the shadow tiddler is said to be {overridden}.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210107014146889\":{\"title\":\"Ta:20210107014146889\",\"answer\":\"TiddlyWiki will go back to using the shadow tiddler when a tiddler by that name is referenced.\",\"created\":\"20210107014148939\",\"modified\":\"20210418134041794\",\"origin\":\"Shadow Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"What happens if you delete a tiddler that is overriding a shadow tiddler?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210107014315547\":{\"title\":\"Ta:20210107014315547\",\"answer\":\"In the preview dropdown on the editor toolbar, you can select “differences from shadow.”\",\"created\":\"20210107014316562\",\"modified\":\"20241013004925319\",\"origin\":\"Shadow Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"Where in a tiddler's interface can you look to see what differences it has to its corresponding shadow tiddler (if it has one)?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210107014412226\":{\"title\":\"Ta:20210107014412226\",\"answer\":\"Taking upgrades to TiddlyWiki or your plugins.\",\"created\":\"20210107014413768\",\"modified\":\"20210418134059363\",\"origin\":\"Shadow Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"What kind of wiki maintenance becomes more challenging when you have many overridden shadow tiddlers?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210107014504752\":{\"title\":\"Ta:20210107014504752\",\"answer\":\"Changing one of the settings overrides a shadow tiddler that contains the default value.\",\"created\":\"20210107014509330\",\"modified\":\"20210418134103200\",\"origin\":\"Shadow Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"What mechanism does TiddlyWiki use to back most of the settings in the Control Panel, making it easy to restore the original settings if needed?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210107014637538\":{\"title\":\"Ta:20210107014637538\",\"answer\":\"If the plugin updated the tiddler you overrode, it may be relying on changes to that tiddler -- but the updates won't be visible in your wiki, since your version is unchanged and blocks the shadow tiddler from being referenced.\",\"created\":\"20210107014642356\",\"modified\":\"20210418134204077\",\"origin\":\"Shadow Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"Why can upgrading a plugin that contains a shadow tiddler you have overridden cause problems with your wiki?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210107014737658\":{\"title\":\"Ta:20210107014737658\",\"answer\":\"They are displayed in bold font.\",\"created\":\"20210107014738844\",\"modified\":\"20241013004940684\",\"origin\":\"Shadow Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"In many TiddlyWiki views, such as the //Explorer// section of the //More// tab of the sidebar, how can you distinguish shadow tiddlers that have not been overridden from normal tiddlers?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210107014811997\":{\"title\":\"Ta:20210107014811997\",\"answer\":\"`[is[shadow]]`\",\"created\":\"20210107014813588\",\"modified\":\"20210418134219356\",\"origin\":\"Shadow Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"What filter expression will display only shadow tiddlers that you have overridden?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210107014848744\":{\"title\":\"Ta:20210107014848744\",\"answer\":\"`all[tiddlers+shadows]`\",\"created\":\"20210107014850336\",\"modified\":\"20210418134225094\",\"origin\":\"Shadow Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"What filter constructor retrieves all shadow and non-shadow tiddlers?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210107014935575\":{\"title\":\"Ta:20210107014935575\",\"answer\":\"`[is[shadow]]` selects //overridden// shadow tiddlers (because its implied input is `all[tiddlers]`, which doesn't include non-overridden shadow tiddlers); `[all[shadows]]` selects all shadow tiddlers, whether overridden or not.\",\"created\":\"20210107015005532\",\"modified\":\"20240612034602261\",\"origin\":\"Shadow Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"Explain the difference between the behavior of the `[is[shadow]]` and `[all[shadows]]` filter runs.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210107015136701\":{\"title\":\"Ta:20210107015136701\",\"answer\":\"The `$:/tags/Global` tag.\",\"created\":\"20210107015140343\",\"modified\":\"20241001125039015\",\"origin\":\"Much More Than You Wanted to Know About Scopes\",\"qtype\":\"rememberq\",\"question\":\"A //global// procedure is one that is in a tiddler with what property?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210107015423886\":{\"title\":\"Ta:20210107015423886\",\"answer\":\"Use a pragma `\\\\import [prefix[W]]`.\",\"created\":\"20210107015425774\",\"modified\":\"20241001125251835\",\"origin\":\"Much More Than You Wanted to Know About Scopes\",\"qtype\":\"rememberq\",\"question\":\"How would you load procedures found in all tiddlers that begin with the letter `W` into the context of the current tiddler?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210107015521319\":{\"title\":\"Ta:20210107015521319\",\"answer\":\"E.g., automatically generate URLs matching a pattern, display some boilerplate text, perform a series of actions using action widgets\",\"created\":\"20210107015530781\",\"modified\":\"20241001125101482\",\"origin\":\"Much More Than You Wanted to Know About Scopes\",\"qtype\":\"rememberq\",\"question\":\"Give an example of something you might define a global procedure to do (try to pick a new one).\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210107015740839\":{\"title\":\"Ta:20210107015740839\",\"created\":\"20210107015742014\",\"modified\":\"20240929205155334\",\"origin\":\"The View Template\",\"qtype\":\"remembercz\",\"question\":\"Every time TiddlyWiki displays a tiddler in the story river, it uses a {template} (TiddlyWiki concept) to determine what the tiddler should look like.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210107015900784\":{\"title\":\"Ta:20210107015900784\",\"answer\":\"Anytime it is displaying a tiddler in the story river (and that tiddler isn't being edited).\",\"created\":\"20210107015902944\",\"modified\":\"20240929205154741\",\"origin\":\"The View Template\",\"qtype\":\"rememberq\",\"question\":\"Explain when TiddlyWiki uses the //view template//.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210107020034725\":{\"title\":\"Ta:20210107020034725\",\"answer\":\"It transcludes all tiddlers that have the `$:/tags/ViewTemplate` tag in order, so that users only have to tag a template tiddler with this tag to include it in the view template.\",\"created\":\"20210107020036261\",\"modified\":\"20240929205153799\",\"origin\":\"The View Template\",\"qtype\":\"rememberq\",\"question\":\"What mechanism does TiddlyWiki's view template use to enable users to easily add additional components?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210107020452964\":{\"title\":\"Ta:20210107020452964\",\"answer\":\"Add a transclusion of that template to the view template.\",\"created\":\"20210107020454241\",\"modified\":\"20241013005101448\",\"origin\":\"The View Template\",\"qtype\":\"rememberq\",\"question\":\"What mechanism would you likely use to display some template on all tiddlers?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210107020640926\":{\"title\":\"Ta:20210107020640926\",\"answer\":\"Use the HTML equivalent, `<h2>Section Name</h2>`. (Change the `2` to match the number of exclamation points.)\",\"created\":\"20210107020642128\",\"modified\":\"20240929205159597\",\"origin\":\"The View Template\",\"qtype\":\"rememberq\",\"question\":\"When creating a template, how can you change the markup `!! Section Name` to ensure that `Section Name` will never merge into a paragraph rather than creating a section heading?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210107020846577\":{\"title\":\"Ta:20210107020846577\",\"answer\":\"The EditTemplate (`$:/core/ui/EditTemplate`)\",\"created\":\"20210107020851974\",\"modified\":\"20240929205200826\",\"origin\":\"The View Template\",\"qtype\":\"rememberq\",\"question\":\"What built-in TiddlyWiki template controls what appears when you edit a tiddler in the story river?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210107184432126\":{\"title\":\"Ta:20210107184432126\",\"answer\":\"Tag it with `$:/tags/SideBar`.\",\"created\":\"20210107184434037\",\"modified\":\"20240929205217647\",\"origin\":\"Adding to the Sidebar\",\"qtype\":\"rememberq\",\"question\":\"How do you get a tiddler to appear as a tab in the sidebar?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210107184506733\":{\"title\":\"Ta:20210107184506733\",\"answer\":\"When the tiddler is being rendered as part of the sidebar.\",\"created\":\"20210107184507891\",\"modified\":\"20210418141629203\",\"origin\":\"Adding to the Sidebar\",\"qtype\":\"rememberq\",\"question\":\"In what common context is the `currentTiddler` variable not defined at all?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210107184538769\":{\"title\":\"Ta:20210107184538769\",\"answer\":\"`caption`\",\"created\":\"20210107184540021\",\"modified\":\"20210418141631978\",\"origin\":\"Adding to the Sidebar\",\"qtype\":\"rememberq\",\"question\":\"What field of a tiddler do you set to change the wording displayed on a tab rendered with the `tabs` macro?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210107184624314\":{\"title\":\"Ta:20210107184624314\",\"answer\":\"`$:/tags/TextEditor/Snippet`\",\"created\":\"20210107184625332\",\"modified\":\"20210418141928034\",\"origin\":\"Stamps\",\"qtype\":\"rememberq\",\"question\":\"What tag do you add to a tiddler to make it available for insertion as a stamp?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210107184722320\":{\"title\":\"Ta:20210107184722320\",\"answer\":\"To insert some predefined text into a tiddler that can't be effectively implemented as a transclusion.\",\"created\":\"20210107184727378\",\"modified\":\"20241010132136804\",\"origin\":\"Stamps\",\"qtype\":\"rememberq\",\"question\":\"What is the purpose of a //stamp//?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210107184853444\":{\"title\":\"Ta:20210107184853444\",\"answer\":\"`[all[current]backlinks[]]`\",\"created\":\"20210107184854784\",\"modified\":\"20240929205248960\",\"origin\":\"Creating a List of Links and Backlinks\",\"qtype\":\"rememberq\",\"question\":\"Write a filter expression that displays the backlinks of the current tiddler. Do not use any field or variable transclusions.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210107185221794\":{\"title\":\"Ta:20210107185221794\",\"answer\":\"`[{!!description}split[]first[100]join[]]`\",\"created\":\"20210107185224741\",\"modified\":\"20240929205254467\",\"origin\":\"Creating a List of Links and Backlinks\",\"qtype\":\"rememberq\",\"question\":\"Write a filter expression that outputs the first 100 characters of the wikitext in the `description` field of the current tiddler as a single output tiddler.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210107185257971\":{\"title\":\"Ta:20210107185257971\",\"answer\":\"The `<div>` element.\",\"created\":\"20210107185259131\",\"modified\":\"20240929205255921\",\"origin\":\"Creating a List of Links and Backlinks\",\"qtype\":\"rememberq\",\"question\":\"What HTML element is used for a generic grouping of elements?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210107185358615\":{\"title\":\"Ta:20210107185358615\",\"answer\":\"Cascading Style Sheets.\",\"created\":\"20210107185359638\",\"modified\":\"20240929205257164\",\"origin\":\"Creating a List of Links and Backlinks\",\"qtype\":\"rememberq\",\"question\":\"What does //CSS// stand for?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210107185422937\":{\"title\":\"Ta:20210107185422937\",\"answer\":\"Its layout and formatting.\",\"created\":\"20210107185425728\",\"modified\":\"20240929205258984\",\"origin\":\"Creating a List of Links and Backlinks\",\"qtype\":\"rememberq\",\"question\":\"What aspect of a website is CSS responsible for controlling?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210107185522336\":{\"title\":\"Ta:20210107185522336\",\"answer\":\"This ensures that you don't accidentally choose the same generic-sounding name (e.g., `item`) as some other plugin or TiddlyWiki's core.\",\"created\":\"20210107185524925\",\"modified\":\"20240929205300389\",\"origin\":\"Creating a List of Links and Backlinks\",\"qtype\":\"rememberq\",\"question\":\"In TiddlyWiki, why is it a good idea to prefix your CSS class names with your initials or some similar prefix?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210107185757110\":{\"title\":\"Ta:20210107185757110\",\"answer\":\"Place the fallback text/widgets within the body of a `$transclude` widget that attempts the transclusion.\",\"created\":\"20210107185759185\",\"modified\":\"20240929205302233\",\"origin\":\"Creating a List of Links and Backlinks\",\"qtype\":\"rememberq\",\"question\":\"How can you easily display some text or widgets only if a specific tiddler cannot be transcluded (e.g., because it does not exist)?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210107190031549\":{\"title\":\"Ta:20210107190031549\",\"answer\":\"A text reference.\",\"created\":\"20210107190032961\",\"modified\":\"20240929205403350\",\"origin\":\"Buttons and Input Widgets\",\"qtype\":\"rememberq\",\"question\":\"In the transclusion `{{MyTiddler!!myfield}}`, the part `MyTiddler!!myfield` is called what?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210107190124407\":{\"title\":\"Ta:20210107190124407\",\"answer\":\"\",\"created\":\"20210107190128053\",\"modified\":\"20240929205403967\",\"origin\":\"Buttons and Input Widgets\",\"qtype\":\"remembercz\",\"question\":\"A text reference uses the same syntax as a {field transclusion}, but without the outer curly braces.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210107231203818\":{\"title\":\"Ta:20210107231203818\",\"answer\":\"The `$button` widget.\",\"created\":\"20210107231205603\",\"modified\":\"20240929205405185\",\"origin\":\"Buttons and Input Widgets\",\"qtype\":\"rememberq\",\"question\":\"What widget is used to create a button?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210107231453085\":{\"title\":\"Ta:20210107231453085\",\"answer\":\"`set` and `setTo`.\",\"created\":\"20210107231454259\",\"modified\":\"20240929205406763\",\"origin\":\"Buttons and Input Widgets\",\"qtype\":\"rememberq\",\"question\":\"What two attributes of the `$button` widget do you use to make the button set a tiddler field to a value?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210107231706966\":{\"title\":\"Ta:20210107231706966\",\"answer\":\"Their names begin with `$:/temp/`.\",\"created\":\"20210107231708431\",\"modified\":\"20240929205407769\",\"origin\":\"Buttons and Input Widgets\",\"qtype\":\"rememberq\",\"question\":\"Temporary tiddlers typically use what naming convention?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210107231758177\":{\"title\":\"Ta:20210107231758177\",\"answer\":\"They are not saved, so they disappear when the wiki is closed and reopened.\",\"created\":\"20210107231759222\",\"modified\":\"20240929205409124\",\"origin\":\"Buttons and Input Widgets\",\"qtype\":\"rememberq\",\"question\":\"What special behavior do tiddlers whose names begin with `$:/temp` have?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210107231830085\":{\"title\":\"Ta:20210107231830085\",\"answer\":\"In a temporary tiddler.\",\"created\":\"20210107231831133\",\"modified\":\"20240929205410399\",\"origin\":\"Buttons and Input Widgets\",\"qtype\":\"rememberq\",\"question\":\"Even core UI elements like the search box store their contents where?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210107231904601\":{\"title\":\"Ta:20210107231904601\",\"answer\":\"The `$edit-text` widget.\",\"created\":\"20210107231905951\",\"modified\":\"20240929205411774\",\"origin\":\"Buttons and Input Widgets\",\"qtype\":\"rememberq\",\"question\":\"What widget is used to create a text box?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210107231924180\":{\"title\":\"Ta:20210107231924180\",\"answer\":\"`tag=\\\"input\\\"`\",\"created\":\"20210107231925433\",\"modified\":\"20240929205413651\",\"origin\":\"Buttons and Input Widgets\",\"qtype\":\"rememberq\",\"question\":\"What attribute and value passed to the `$edit-text` widget causes it to accept only a single line of text?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210107231955280\":{\"title\":\"Ta:20210107231955280\",\"answer\":\"`tiddler`\",\"created\":\"20210107231956593\",\"modified\":\"20240929205414934\",\"origin\":\"Buttons and Input Widgets\",\"qtype\":\"rememberq\",\"question\":\"What attribute of the `$edit-text` widget allows you to choose what tiddler the text box edits?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210107232026427\":{\"title\":\"Ta:20210107232026427\",\"answer\":\"`class=\\\"tc-btn-invisible tc-tiddlylink\\\"`\",\"created\":\"20210107232027815\",\"modified\":\"20240929205416185\",\"origin\":\"Buttons and Input Widgets\",\"qtype\":\"rememberq\",\"question\":\"What attribute can you add to the `$button` widget to make the button appear like a link?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210107232300907\":{\"title\":\"Ta:20210107232300907\",\"answer\":\"`field`\",\"created\":\"20210107232302200\",\"modified\":\"20240929205418224\",\"origin\":\"Buttons and Input Widgets\",\"qtype\":\"rememberq\",\"question\":\"What attribute of the `$edit-text` widget allows you to choose what tiddler field the text box edits?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210107232346817\":{\"title\":\"Ta:20210107232346817\",\"answer\":\"All widgets displayed on the screen are told what tiddler has changed and invited to refresh themselves if they believe they are affected by that change.\",\"created\":\"20210107232350696\",\"modified\":\"20240929205419458\",\"origin\":\"Buttons and Input Widgets\",\"qtype\":\"rememberq\",\"question\":\"Explain the process TiddlyWiki uses to ensure the screen is up to date after a tiddler is changed.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210107232428492\":{\"title\":\"Ta:20210107232428492\",\"answer\":\"`to`\",\"created\":\"20210107232429635\",\"modified\":\"20240929205423432\",\"origin\":\"Buttons and Input Widgets\",\"qtype\":\"rememberq\",\"question\":\"What attribute of the `$button` widget allows you to make the button open and navigate to a specific tiddler?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210107232510188\":{\"title\":\"Ta:20210107232510188\",\"answer\":\"`<table>`\",\"created\":\"20210107232511082\",\"modified\":\"20240929205424471\",\"origin\":\"Buttons and Input Widgets\",\"qtype\":\"rememberq\",\"question\":\"What HTML element creates a table?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210107232532110\":{\"title\":\"Ta:20210107232532110\",\"answer\":\"`<tr>` (//table row//)\",\"created\":\"20210107232533466\",\"modified\":\"20210418160904076\",\"origin\":\"Buttons and Input Widgets\",\"qtype\":\"rememberq\",\"question\":\"What HTML element creates a row when used within a `<table>` element?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210107232556365\":{\"title\":\"Ta:20210107232556365\",\"answer\":\"`<td>` (//table data//)\",\"created\":\"20210107232600707\",\"modified\":\"20210418160905902\",\"origin\":\"Buttons and Input Widgets\",\"qtype\":\"rememberq\",\"question\":\"What HTML element creates a table cell when used within a `<tr>` element?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210107232635219\":{\"title\":\"Ta:20210107232635219\",\"answer\":\"`<th>` (//table header//)\",\"created\":\"20210107232636637\",\"modified\":\"20210418160908411\",\"origin\":\"Buttons and Input Widgets\",\"qtype\":\"rememberq\",\"question\":\"What HTML element creates a table header cell when used within a `<tr>` element?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210107232708814\":{\"title\":\"Ta:20210107232708814\",\"answer\":\"`<table>`, `<tr>`, `<td>`, and `<th>`.\",\"created\":\"20210107232710161\",\"modified\":\"20210418160910734\",\"origin\":\"Buttons and Input Widgets\",\"qtype\":\"rememberq\",\"question\":\"What four basic HTML elements are used to construct tables?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210107232923263\":{\"title\":\"Ta:20210107232923263\",\"answer\":\"`<$button to={{Linky!!target}}>Linky Target</$button>`\",\"created\":\"20210107232926736\",\"modified\":\"20240929205428248\",\"origin\":\"Buttons and Input Widgets\",\"qtype\":\"rememberq\",\"question\":\"Write wikitext to display a button that takes the user to the tiddler referenced in the `target` field of the `Linky` tiddler when clicked. The button text should be “Linky Target”.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210107233329839\":{\"title\":\"Ta:20210107233329839\",\"answer\":\"`<$button set=\\\"!!target\\\" setTo={{$:/temp/NewTarget}}>Reset Target</$button>`\",\"created\":\"20210107233332947\",\"modified\":\"20240929205430960\",\"origin\":\"Buttons and Input Widgets\",\"qtype\":\"rememberq\",\"question\":\"Write wikitext to display a button that sets the `target` field of the current tiddler to the value currently stored in the `text` field of the `$:/temp/NewTarget` tiddler. The button text should be \\\"Reset Target\\\".\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210107233516001\":{\"title\":\"Ta:20210107233516001\",\"answer\":\"`<$edit-text tag=\\\"input\\\" tiddler=<<describedTiddler>> field=\\\"description\\\"/>`\",\"created\":\"20210107233530534\",\"modified\":\"20240929205432936\",\"origin\":\"Buttons and Input Widgets\",\"qtype\":\"rememberq\",\"question\":\"Write wikitext to display a single-line textbox which is bound to the `description` field of the tiddler whose name is stored in the `describedTiddler` variable.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210107233831498\":{\"title\":\"Ta:20210107233831498\",\"answer\":\"\",\"created\":\"20210107233835374\",\"modified\":\"20240929205436560\",\"origin\":\"Buttons and Input Widgets\",\"qtype\":\"remembercz\",\"question\":\"When a text box is allowing the user to edit the value of a specific tiddler field, we say that the text box is {bound} to the field.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210109213545035\":{\"title\":\"Ta:20210109213545035\",\"answer\":\"\",\"created\":\"20210109213546170\",\"modified\":\"20240929205505018\",\"origin\":\"Creating Tiddlers With Predefined Fields\",\"qtype\":\"remembercz\",\"question\":\"When you trigger a message, any widgets that are {higher up the widget tree} from the action are given the opportunity to respond to the message.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210109213621592\":{\"title\":\"Ta:20210109213621592\",\"answer\":\"`tm-new-tiddler`\",\"created\":\"20210109213622593\",\"modified\":\"20240929205505992\",\"origin\":\"Creating Tiddlers With Predefined Fields\",\"qtype\":\"rememberq\",\"question\":\"What message creates a new tiddler and opens it for editing in the story river?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210109214205308\":{\"title\":\"Ta:20210109214205308\",\"answer\":\"An action widget.\",\"created\":\"20210109214206247\",\"modified\":\"20240929205506870\",\"origin\":\"Creating Tiddlers With Predefined Fields\",\"qtype\":\"rememberq\",\"question\":\"What kind of widget makes something happen in the wiki, rather than displaying something?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210109214221733\":{\"title\":\"Ta:20210109214221733\",\"answer\":\"Its name begins with `$action-`.\",\"created\":\"20210109214223269\",\"modified\":\"20240929205508268\",\"origin\":\"Creating Tiddlers With Predefined Fields\",\"qtype\":\"rememberq\",\"question\":\"How can you tell that a particular widget is an action widget?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210109214237296\":{\"title\":\"Ta:20210109214237296\",\"answer\":\"`$action-sendmessage`\",\"created\":\"20210109214238419\",\"modified\":\"20240929205509120\",\"origin\":\"Creating Tiddlers With Predefined Fields\",\"qtype\":\"rememberq\",\"question\":\"What action widget creates a message?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210109214259585\":{\"title\":\"Ta:20210109214259585\",\"answer\":\"The `$button` widget.\",\"created\":\"20210109214300417\",\"modified\":\"20240929205510160\",\"origin\":\"Creating Tiddlers With Predefined Fields\",\"qtype\":\"rememberq\",\"question\":\"Action widgets are most commonly triggered by what other widget?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210109214406987\":{\"title\":\"Ta:20210109214406987\",\"answer\":\"The widget will never do anything at all.\",\"created\":\"20210109214410344\",\"modified\":\"20240929205512459\",\"origin\":\"Creating Tiddlers With Predefined Fields\",\"qtype\":\"rememberq\",\"question\":\"What happens if you put an action widget in a tiddler by itself, rather than within a triggering widget?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210109214506860\":{\"title\":\"Ta:20210109214506860\",\"answer\":\"`actions`\",\"created\":\"20210109214508545\",\"modified\":\"20240929205513791\",\"origin\":\"Creating Tiddlers With Predefined Fields\",\"qtype\":\"rememberq\",\"question\":\"What attribute of a `$button` widget do you use to specify action widgets that it can trigger?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210109214553628\":{\"title\":\"Ta:20210109214553628\",\"answer\":\"`<$button actions=<<myactions>>>Act</$button>`\",\"created\":\"20210109214554641\",\"modified\":\"20240929205531430\",\"origin\":\"Creating Tiddlers With Predefined Fields\",\"qtype\":\"rememberq\",\"question\":\"Given a procedure called `myactions` with no parameters that generates some action widgets, write wikitext for a button labeled //Act// that triggers those action widgets.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210109214712041\":{\"title\":\"Ta:20210109214712041\",\"answer\":\"It performs each action in the order it is shown in the wikitext.\",\"created\":\"20210109214714279\",\"modified\":\"20240929205538998\",\"origin\":\"Creating Tiddlers With Predefined Fields\",\"qtype\":\"rememberq\",\"question\":\"How does TiddlyWiki deal with multiple action widgets associated with the same button?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210109214837731\":{\"title\":\"Ta:20210109214837731\",\"answer\":\"`<$action-sendmessage $message=\\\"tm-new-tiddler\\\" title=NewT tags={{!!tags}}/>`\",\"created\":\"20210109214850266\",\"modified\":\"20240929205540248\",\"origin\":\"Creating Tiddlers With Predefined Fields\",\"qtype\":\"rememberq\",\"question\":\"Write wikitext for an `$action-sendmessage` widget that creates a new tiddler called `NewT` tagged with the same tags as the current tiddler and opens it for editing.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210109214942680\":{\"title\":\"Ta:20210109214942680\",\"answer\":\"A series of arbitrary fields and values (so an attribute `foo=bar` would set the field `foo` to `bar` in the new tiddler).\",\"created\":\"20210109214944092\",\"modified\":\"20240929205544952\",\"origin\":\"Creating Tiddlers With Predefined Fields\",\"qtype\":\"rememberq\",\"question\":\"What parameters does the `tm-new-tiddler` message accept?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210109215136556\":{\"title\":\"Ta:20210109215136556\",\"answer\":\"`$:/tags/PageControls`\",\"created\":\"20210109215137894\",\"modified\":\"20240929205550419\",\"origin\":\"Creating Tiddlers With Predefined Fields\",\"qtype\":\"rememberq\",\"question\":\"What tag causes a button to appear in the page toolbar?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210109221827610\":{\"title\":\"Ta:20210109221827610\",\"answer\":\"`$:/config/PageControlButtons/Visibility/MyButton`\",\"created\":\"20210109221829400\",\"modified\":\"20240929205551857\",\"origin\":\"Creating Tiddlers With Predefined Fields\",\"qtype\":\"rememberq\",\"question\":\"If a tiddler called `MyButton` is part of the page controls, what tiddler controls whether it is visible above the search box?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210109221946679\":{\"title\":\"Ta:20210109221946679\",\"answer\":\"Add a `tooltip` attribute to the `$button` widget.\",\"created\":\"20210109221947919\",\"modified\":\"20240929205553035\",\"origin\":\"Creating Tiddlers With Predefined Fields\",\"qtype\":\"rememberq\",\"question\":\"How do you add a tooltip to a button?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210109222018175\":{\"title\":\"Ta:20210109222018175\",\"answer\":\"In the tag manager (pretend to select an icon for a tag).\",\"created\":\"20210109222019965\",\"modified\":\"20240929205554359\",\"origin\":\"Creating Tiddlers With Predefined Fields\",\"qtype\":\"rememberq\",\"question\":\"Where in TiddlyWiki can you quickly find a list of the default icons?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210109225040407\":{\"title\":\"Ta:20210109225040407\",\"created\":\"20210109225041456\",\"modified\":\"20210502163005576\",\"origin\":\"JavaScript Macros\",\"qtype\":\"remembercz\",\"question\":\"A JavaScript macro should not have any {side effect}s when run.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210109225118013\":{\"title\":\"Ta:20210109225118013\",\"answer\":\"TiddlyWiki may decide to rerun the macro at any time if the tiddler or element containing it needs to be refreshed.\",\"created\":\"20210109225119121\",\"modified\":\"20210502163007403\",\"origin\":\"JavaScript Macros\",\"qtype\":\"rememberq\",\"question\":\"Why are side effects in JavaScript macros dangerous?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210109225153106\":{\"title\":\"Ta:20210109225153106\",\"answer\":\"Those making up the browser DOM.\",\"created\":\"20210109225223042\",\"modified\":\"20210502163011016\",\"origin\":\"JavaScript Macros\",\"qtype\":\"rememberq\",\"question\":\"JavaScript macros are unable to access what objects?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210109225316323\":{\"title\":\"Ta:20210109225316323\",\"answer\":\"The type (set to `application/javascript`) and the `module-type` field (set to `macro`).\",\"created\":\"20210109225318236\",\"modified\":\"20210502163014502\",\"origin\":\"JavaScript Macros\",\"qtype\":\"rememberq\",\"question\":\"What two fields must you set on a tiddler containing a JavaScript macro to make it visible to TiddlyWiki?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210109225359535\":{\"title\":\"Ta:20210109225359535\",\"answer\":\"You must save and reload the wiki for JavaScript changes to take effect.\",\"created\":\"20210109225400637\",\"modified\":\"20210502163016382\",\"origin\":\"JavaScript Macros\",\"qtype\":\"rememberq\",\"question\":\"If you change a JavaScript macro and the changes do not seem to be applying, what did you most likely forget?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210109225449170\":{\"title\":\"Ta:20210109225449170\",\"answer\":\"Save and reload the wiki.\",\"created\":\"20210109225450191\",\"modified\":\"20210502163018214\",\"origin\":\"JavaScript Macros\",\"qtype\":\"rememberq\",\"question\":\"What must you do after adding or editing a JavaScript macro for the changes to take effect?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210109225556485\":{\"title\":\"Ta:20210109225556485\",\"created\":\"20210109225557968\",\"modified\":\"20210502163242181\",\"origin\":\"Stylesheets\",\"qtype\":\"remembercz\",\"question\":\"Inline stylesheets are not {scoped to} the tiddler containing them.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210109225643059\":{\"title\":\"Ta:20210109225643059\",\"answer\":\"Inline stylesheets within a tiddler are not scoped to that tiddler, so custom classes prevent the styles from accidentally applying to other tiddlers.\",\"created\":\"20210109225644650\",\"modified\":\"20210502163245714\",\"origin\":\"Stylesheets\",\"qtype\":\"rememberq\",\"question\":\"Why should you (almost) always use a class name with any CSS that you intend to apply only to a single tiddler?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210109225754963\":{\"title\":\"Ta:20210109225754963\",\"answer\":\"`@@.my-favorite-class` at the start of the block, and `@@` at the end.\",\"created\":\"20210109225756671\",\"modified\":\"20210502163250430\",\"origin\":\"Stylesheets\",\"qtype\":\"rememberq\",\"question\":\"What wikitext syntax can you use to apply the class `my-favorite-class` to a block of wikitext?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210109225841609\":{\"title\":\"Ta:20210109225841609\",\"answer\":\"`@@text-align: center;` at the start of the block, and `@@` at the end.\",\"created\":\"20210109225843207\",\"modified\":\"20210502163255271\",\"origin\":\"Stylesheets\",\"qtype\":\"rememberq\",\"question\":\"What wikitext syntax can you use to apply the style attribute `text-align: center` to a block of wikitext?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210109225940595\":{\"title\":\"Ta:20210109225940595\",\"answer\":\"`$:/tags/Stylesheet`\",\"created\":\"20210109225941808\",\"modified\":\"20210502163259030\",\"origin\":\"Stylesheets\",\"qtype\":\"rememberq\",\"question\":\"What tag is used to make a tiddler part of the global stylesheet in a wiki?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210109230027259\":{\"title\":\"Ta:20210109230027259\",\"answer\":\"If you use the wikitext content type, you can use transclusions in the stylesheet.\",\"created\":\"20210109230029770\",\"modified\":\"20241010132315627\",\"origin\":\"Stylesheets\",\"qtype\":\"rememberq\",\"question\":\"Why might you choose not to use the `text/css` content type for a tiddler containing CSS?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210109230758790\":{\"title\":\"Ta:20210109230758790\",\"answer\":\"Node.js.\",\"created\":\"20210109230759914\",\"modified\":\"20210502163533577\",\"origin\":\"Creating Plugins\",\"qtype\":\"rememberq\",\"question\":\"TiddlyWiki plugins are usually developed using what external helper software?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210109230844101\":{\"title\":\"Ta:20210109230844101\",\"answer\":\"A TiddlyWiki, which in addition to the plugin tiddler contains its documentation.\",\"created\":\"20210109230846035\",\"modified\":\"20210502163546781\",\"origin\":\"Creating Plugins\",\"qtype\":\"rememberq\",\"question\":\"Plugins are typically distributed in what kind of container?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210109230943374\":{\"title\":\"Ta:20210109230943374\",\"answer\":\"`/home/alice/myplugin-wiki/plugins/MyPlugin`\",\"created\":\"20210109230944603\",\"modified\":\"20210502163553026\",\"origin\":\"Creating Plugins\",\"qtype\":\"rememberq\",\"question\":\"If you are creating a plugin called `MyPlugin`, and your `tiddlywiki.info` file is in the folder `/home/alice/myplugin-wiki`, in what folder should you place the tiddlers that make up your plugin?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210109231032557\":{\"title\":\"Ta:20210109231032557\",\"answer\":\"It is a tiddler list where each element is automatically prefixed with the title of your plugin (e.g., `$:/plugins/alice/myplugin/`).\",\"created\":\"20210109231033412\",\"modified\":\"20210502163557713\",\"origin\":\"Creating Plugins\",\"qtype\":\"rememberq\",\"question\":\"What is unusual about the `list` field in a `plugin.info` file?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210109231513717\":{\"title\":\"Ta:20210109231513717\",\"answer\":\"`plugin.info`\",\"created\":\"20210109231516123\",\"modified\":\"20210502163606302\",\"origin\":\"Creating Plugins\",\"qtype\":\"rememberq\",\"question\":\"What file at the root of a plugin's folder contains metadata about the plugin?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210109231640740\":{\"title\":\"Ta:20210109231640740\",\"answer\":\"`tiddlywiki --build index`\",\"created\":\"20210109231641995\",\"modified\":\"20210502163613775\",\"origin\":\"Creating Plugins\",\"qtype\":\"rememberq\",\"question\":\"What TiddlyWiki Node.js command will create a single-file wiki from a folder wiki?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210109231700230\":{\"title\":\"Ta:20210109231700230\",\"answer\":\"`tiddlywiki --listen`\",\"created\":\"20210109231701258\",\"modified\":\"20210502163616490\",\"origin\":\"Creating Plugins\",\"qtype\":\"rememberq\",\"question\":\"What TiddlyWiki Node.js command will start a local web server so you can edit the wiki in the current folder?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210109232307261\":{\"title\":\"Ta:20210109232307261\",\"answer\":\"Each in a separate file containing their fields.\",\"created\":\"20210109232308241\",\"modified\":\"20210502164041560\",\"origin\":\"Writing Shell Scripts Against a TiddlyWiki\",\"qtype\":\"rememberq\",\"question\":\"How are tiddlers stored in a folder wiki (the format used by the Node.js version of TiddlyWiki)?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210109232335937\":{\"title\":\"Ta:20210109232335937\",\"answer\":\"On separate lines at the top of the tiddler file, with a colon separating the field name and its value.\",\"created\":\"20210109232337191\",\"modified\":\"20210502164045301\",\"origin\":\"Writing Shell Scripts Against a TiddlyWiki\",\"qtype\":\"rememberq\",\"question\":\"How are fields other than `text` stored within tiddler files in a folder wiki?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210109232419178\":{\"title\":\"Ta:20210109232419178\",\"answer\":\"After all of the other fields, separated from them by a blank line.\",\"created\":\"20210109232421364\",\"modified\":\"20210502164048174\",\"origin\":\"Writing Shell Scripts Against a TiddlyWiki\",\"qtype\":\"rememberq\",\"question\":\"How is the `text` field stored within a tiddler file in a folder wiki?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210109232511957\":{\"title\":\"Ta:20210109232511957\",\"answer\":\"The `text` (content) field is stored in a separate file, alongside a `.meta` file containing the other fields.\",\"created\":\"20210109232512868\",\"modified\":\"20210502164049691\",\"origin\":\"Writing Shell Scripts Against a TiddlyWiki\",\"qtype\":\"rememberq\",\"question\":\"How are tiddlers containing binary data (e.g., images) stored in a folder wiki?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210109232618910\":{\"title\":\"Ta:20210109232618910\",\"answer\":\"The subcommands/operations are introduced by double-dashes, like `--render`, while the options are positional.\",\"created\":\"20210109232620274\",\"modified\":\"20210502164054250\",\"origin\":\"Writing Shell Scripts Against a TiddlyWiki\",\"qtype\":\"rememberq\",\"question\":\"What unusual syntax does the `tiddlywiki` CLI have?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210109232706049\":{\"title\":\"Ta:20210109232706049\",\"answer\":\"The CLI is stateless, so no record of a different wiki being loaded is preserved to the next call. A second `--operation` needs to be added to the end of the command line to get a useful effect.\",\"created\":\"20210109232707605\",\"modified\":\"20210502164057041\",\"origin\":\"Writing Shell Scripts Against a TiddlyWiki\",\"qtype\":\"rememberq\",\"question\":\"Why is the TiddlyWiki CLI command `tiddlywiki --load SOURCE_WIKI` a no-op?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210110165551205\":{\"title\":\"Ta:20210110165551205\",\"created\":\"20210110165553461\",\"modified\":\"20210408174542944\",\"origin\":\"The TiddlyWiki Interface\",\"qtype\":\"remembercz\",\"question\":\"The TiddlyWiki interface is divided into two sections: the {story river} on the left, and the {sidebar} on the right.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210110165730167\":{\"title\":\"Ta:20210110165730167\",\"answer\":\"The double right arrow in the far upper-right corner.\",\"created\":\"20210110165731674\",\"modified\":\"20210408174545974\",\"origin\":\"The TiddlyWiki Interface\",\"qtype\":\"rememberq\",\"question\":\"Where in TiddlyWiki would you click to hide the sidebar if you wanted more horizontal space?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210110165752901\":{\"title\":\"Ta:20210110165752901\",\"created\":\"20210110165755586\",\"modified\":\"20210408174549367\",\"origin\":\"The TiddlyWiki Interface\",\"qtype\":\"remembercz\",\"question\":\"The story river shows the {tiddlers} in your wiki which are currently open.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210110165831811\":{\"title\":\"Ta:20210110165831811\",\"answer\":\"The //view toolbar//.\",\"created\":\"20210110165833421\",\"modified\":\"20210418131950521\",\"origin\":\"The TiddlyWiki Interface\",\"qtype\":\"rememberq\",\"question\":\"What is the toolbar in the upper-right corner of each tiddler when viewing it called?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210110165850766\":{\"title\":\"Ta:20210110165850766\",\"answer\":\"The //page toolbar//.\",\"created\":\"20210110165851940\",\"modified\":\"20210408174556144\",\"origin\":\"The TiddlyWiki Interface\",\"qtype\":\"rememberq\",\"question\":\"What is the toolbar at the top of the sidebar called?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210110165916732\":{\"title\":\"Ta:20210110165916732\",\"created\":\"20210110165918510\",\"modified\":\"20210408174558302\",\"origin\":\"The TiddlyWiki Interface\",\"qtype\":\"remembercz\",\"question\":\"The //Recent// tab of the sidebar shows those tiddlers that have been {changed} recently.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210110165952850\":{\"title\":\"Ta:20210110165952850\",\"answer\":\"The //Tools// tab (check or uncheck items to control their placement on the toolbar).\",\"created\":\"20210110165954329\",\"modified\":\"20210408174605138\",\"origin\":\"The TiddlyWiki Interface\",\"qtype\":\"rememberq\",\"question\":\"Where in the sidebar can you choose which tools appear on the page toolbar?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210110170043269\":{\"title\":\"Ta:20210110170043269\",\"created\":\"20210110170044390\",\"modified\":\"20210408174608962\",\"origin\":\"The TiddlyWiki Interface\",\"qtype\":\"remembercz\",\"question\":\"The left side of TiddlyWiki's interface, showing the tiddlers that are currently open, is called the {story river}.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210110172653534\":{\"title\":\"Ta:20210110172653534\",\"created\":\"20210110172655081\",\"modified\":\"20210409021847680\",\"origin\":\"Structuring Our Wiki\",\"qtype\":\"remembercz\",\"question\":\"It's helpful to be {consistent} when structuring a TiddlyWiki so that we don't struggle to find things that don't match conventions later.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210110172813200\":{\"title\":\"Ta:20210110172813200\",\"answer\":\"We applied a tag representing the type of content to each tiddler.\",\"created\":\"20210110172814395\",\"modified\":\"20210409021849832\",\"origin\":\"Structuring Our Wiki\",\"qtype\":\"rememberq\",\"question\":\"In our sample TiddlyWiki, how did we classify tiddlers based on the type of content in them (e.g., journal, contact, project)?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210110172919136\":{\"title\":\"Ta:20210110172919136\",\"answer\":\"Since tiddlers are small and focus on a single idea, if they aren't connected to adjacent ideas it will be particularly difficult to find them.\",\"created\":\"20210110172920901\",\"modified\":\"20240614020338027\",\"origin\":\"Structuring Our Wiki\",\"qtype\":\"rememberq\",\"question\":\"Explain why associating tiddlers with one another is particularly critical in TiddlyWiki compared to other notes systems.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210110173202946\":{\"title\":\"Ta:20210110173202946\",\"answer\":\"E.g., Ingredient, Recipe, Store, Cookbook, Tip\",\"created\":\"20210110173204331\",\"modified\":\"20210409021900183\",\"origin\":\"Structuring Our Wiki\",\"qtype\":\"rememberq\",\"question\":\"Give an example of a type (classification) of tiddler you might invent in a TiddlyWiki that stores recipes and other cooking notes (try to pick a new one).\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210110173316061\":{\"title\":\"Ta:20210110173316061\",\"answer\":\"When you are looking for this information later, it is unlikely you will remember that the information came up during that specific meeting.\",\"created\":\"20210110173324319\",\"modified\":\"20210409021904060\",\"origin\":\"Structuring Our Wiki\",\"qtype\":\"rememberq\",\"question\":\"Why should you consider moving information that is of long-term importance out of your meeting notes into some other location after a meeting?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210110174256345\":{\"title\":\"Ta:20210110174256345\",\"answer\":\"<code>&#96;monospace text&#96;</code>\",\"created\":\"20210110174257685\",\"modified\":\"20210409022755636\",\"origin\":\"Journal Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"What is the wikitext syntax for monospace text applied to a few individual words?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210110182159208\":{\"title\":\"Ta:20210110182159208\",\"answer\":\"UTC (otherwise known as GMT)\",\"created\":\"20210110182200524\",\"modified\":\"20210409024941234\",\"origin\":\"Meeting Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"What time zone are TiddlyWiki timestamps stored in?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210115212301253\":{\"title\":\"Ta:20210115212301253\",\"answer\":\"WYSIWYM editors involve the use of markup syntax (extra phrases and symbols) to explain what a page should look like when viewed, while WYSIWYG editors make the editor look like the page will look when it's viewed.\",\"created\":\"20210115212302541\",\"modified\":\"20210408175554092\",\"origin\":\"Wikitext\",\"qtype\":\"rememberq\",\"question\":\"Explain how a WYSIWYM editor differs from a WYSIWYG editor.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210115212635781\":{\"title\":\"Ta:20210115212635781\",\"answer\":\"An editor toolbar presenting a number of buttons that insert common snippets used to create formatting like bold, italics, and links.\",\"created\":\"20210115212637089\",\"modified\":\"20210408175600964\",\"origin\":\"Wikitext\",\"qtype\":\"rememberq\",\"question\":\"What tool does TiddlyWiki's editor provide to help you remember wikitext syntax?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210115212752286\":{\"title\":\"Ta:20210115212752286\",\"created\":\"20210115212753295\",\"modified\":\"20210408175605341\",\"origin\":\"Wikitext\",\"qtype\":\"remembercz\",\"question\":\"Text written in a raw markup language may be referred to as {source} text.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210115212808753\":{\"title\":\"Ta:20210115212808753\",\"created\":\"20210115212809740\",\"modified\":\"20210408175606717\",\"origin\":\"Wikitext\",\"qtype\":\"remembercz\",\"question\":\"The process of turning the source of a markup language into output is called {rendering}.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210115212940187\":{\"title\":\"Ta:20210115212940187\",\"answer\":\"A WYSIWYM editor (using a markup language).\",\"created\":\"20210115212941377\",\"modified\":\"20210408175610078\",\"origin\":\"Wikitext\",\"qtype\":\"rememberq\",\"question\":\"What type of editor shows a description of how the text should be formatted, rather than a visual representation of that formatting?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210115213922401\":{\"title\":\"Ta:20210115213922401\",\"answer\":\"One (`[[my text|my target]]`).\",\"created\":\"20210115213923680\",\"modified\":\"20240929170728431\",\"origin\":\"Templates and the Current Tiddler\",\"qtype\":\"rememberq\",\"question\":\"How many pipe characters are used when specifying a link with different displayed text and target?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210115213943747\":{\"title\":\"Ta:20210115213943747\",\"answer\":\"Two (`{{My Tiddler||My Template}}`).\",\"created\":\"20210115213946406\",\"modified\":\"20240929170636440\",\"origin\":\"Templates and the Current Tiddler\",\"qtype\":\"rememberq\",\"question\":\"How many pipe characters are used when specifying a template transclusion?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210116004748514\":{\"title\":\"Ta:20210116004748514\",\"answer\":\"`[[my text|MyTiddler]]`\",\"created\":\"20210116004751472\",\"modified\":\"20210418131753420\",\"origin\":\"Links\",\"qtype\":\"rememberq\",\"question\":\"What is the wikitext syntax to link to a tiddler called `MyTiddler`, with the link text `my text`?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210116010959834\":{\"title\":\"Ta:20210116010959834\",\"created\":\"20210116011003179\",\"modified\":\"20210408175611881\",\"origin\":\"Wikitext\",\"qtype\":\"remembercz\",\"question\":\"{Syntax} comprises the rules for producing correctly formed sentences or expressions in a natural or computer language.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210116171504180\":{\"title\":\"Ta:20210116171504180\",\"answer\":\"It contains a space between filter steps, which TiddlyWiki interprets as part of the operator name, thus asking it to select tiddlers that have an empty field called <code>&nbsp;backlinks</code> (namely, all of them).\",\"created\":\"20210116171505337\",\"modified\":\"20210409152451829\",\"origin\":\"Using Filter Expressions\",\"qtype\":\"rememberq\",\"question\":\"Why does the filter expression `[!is[system] backlinks[]]` not retrieve a list of tiddlers that link to other non-system tiddlers?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210116234613487\":{\"title\":\"Ta:20210116234613487\",\"answer\":\"`[[a search engine|https://www.google.com]]`\",\"created\":\"20210116234614891\",\"modified\":\"20210408180654771\",\"origin\":\"Links\",\"qtype\":\"rememberq\",\"question\":\"What is the wikitext syntax to create a link to Google (`https://www.google.com`) with the link text `a search engine`?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210116234645661\":{\"title\":\"Ta:20210116234645661\",\"answer\":\"An internal link links to another tiddler in your wiki. An external link links to a website or other URL outside your wiki.\",\"created\":\"20210116234647021\",\"modified\":\"20210408180657514\",\"origin\":\"Links\",\"qtype\":\"rememberq\",\"question\":\"Explain the difference between an //internal link// and an //external link//.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210116234706260\":{\"title\":\"Ta:20210116234706260\",\"answer\":\"An external link.\",\"created\":\"20210116234707458\",\"modified\":\"20240612035518904\",\"origin\":\"Links\",\"qtype\":\"rememberq\",\"question\":\"What kind of link does not represent a relationship between two tiddlers when placed in a tiddler's `text` field?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210116235201834\":{\"title\":\"Ta:20210116235201834\",\"created\":\"20210116235203718\",\"modified\":\"20240929202504273\",\"origin\":\"Block Mode and Inline Mode\",\"qtype\":\"remembercz\",\"question\":\"The two //modes// TiddlyWiki uses when reading wikitext are {block} mode and {inline} mode.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210116235225037\":{\"title\":\"Ta:20210116235225037\",\"created\":\"20210116235227184\",\"modified\":\"20240929202505355\",\"origin\":\"Block Mode and Inline Mode\",\"qtype\":\"remembercz\",\"question\":\"In block mode, elements are stacked {vertically} (vertical/horizontal).\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210116235249040\":{\"title\":\"Ta:20210116235249040\",\"created\":\"20210116235250122\",\"modified\":\"20240929202507288\",\"origin\":\"Block Mode and Inline Mode\",\"qtype\":\"remembercz\",\"question\":\"In inline mode, elements are stacked {horizontally} (vertical/horizontal).\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210116235314838\":{\"title\":\"Ta:20210116235314838\",\"answer\":\"\",\"created\":\"20210116235316108\",\"modified\":\"20240929202509490\",\"origin\":\"Block Mode and Inline Mode\",\"qtype\":\"remembercz\",\"question\":\"You cannot start a new paragraph or insert vertical space within {inline} mode.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210116235422856\":{\"title\":\"Ta:20210116235422856\",\"answer\":\"By leaving a blank line in your wikitext.\",\"created\":\"20210116235424609\",\"modified\":\"20240929202513520\",\"origin\":\"Block Mode and Inline Mode\",\"qtype\":\"rememberq\",\"question\":\"If you are in inline mode within some wikitext, how do you re-enter block mode prior to a block-mode element such as a list?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210116235525673\":{\"title\":\"Ta:20210116235525673\",\"answer\":\"If you don't leave a blank line, TiddlyWiki will still be in inline mode from rendering the paragraph, but a list is a block-mode element and can't start in inline mode.\",\"created\":\"20210116235528737\",\"modified\":\"20240929202518160\",\"origin\":\"Block Mode and Inline Mode\",\"qtype\":\"rememberq\",\"question\":\"Using the concept of rendering modes, explain why you must leave a blank line between a paragraph and a bulleted list in TiddlyWiki.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210116235640904\":{\"title\":\"Ta:20210116235640904\",\"answer\":\"e.g., including a field containing a piece of data like a phone number, email address, or link to another tiddler in a paragraph, bulleted list, or table\",\"created\":\"20210116235642580\",\"modified\":\"20240929202520954\",\"origin\":\"Block Mode and Inline Mode\",\"qtype\":\"rememberq\",\"question\":\"Give an example of when you might want to transclude a field in inline mode (try to pick a new one).\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210116235725120\":{\"title\":\"Ta:20210116235725120\",\"answer\":\"E.g., when transcluding an entire tiddler containing multiple paragraphs, when transcluding a complex template\",\"created\":\"20210116235726982\",\"modified\":\"20240929202523204\",\"origin\":\"Block Mode and Inline Mode\",\"qtype\":\"rememberq\",\"question\":\"Give an example of when you might want to transclude a field in block mode (try to pick a new one).\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210116235841638\":{\"title\":\"Ta:20210116235841638\",\"answer\":\"Italic text (the `em` HTML element) is an inline-mode element. When TiddlyWiki is inside an inline-mode element, it will not look for block-mode elements like new paragraphs.\",\"created\":\"20210116235910756\",\"modified\":\"20240929202528396\",\"origin\":\"Block Mode and Inline Mode\",\"qtype\":\"rememberq\",\"question\":\"Using the concept of inline mode, explain why opening italics with `//` and never closing them results in the remainder of the tiddler turning into a single paragraph.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210117001839027\":{\"title\":\"Ta:20210117001839027\",\"answer\":\"Continue periodically reviewing the takeaways by opening the book and clicking on the review banner.\",\"created\":\"20210117001840527\",\"modified\":\"20210504013630914\",\"origin\":\"How to Use This Book\",\"qtype\":\"rememberq\",\"question\":\"If you need to take a break from learning TiddlyWiki, what should you do to avoid forgetting what you've learned in //Grok TiddlyWiki//?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210117012531956\":{\"title\":\"Ta:20210117012531956\",\"answer\":\"The comment ends after the first `-->`, so `comment. -->` appears in the output.\",\"created\":\"20210117012534804\",\"modified\":\"20210409173357510\",\"origin\":\"Comments\",\"qtype\":\"rememberq\",\"question\":\"What is wrong with this comment?: `<!-- here is an <!-- especially commenty --> comment. -->`\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210117012550524\":{\"title\":\"Ta:20210117012550524\",\"created\":\"20210117012551481\",\"modified\":\"20210409173400551\",\"origin\":\"Comments\",\"qtype\":\"remembercz\",\"question\":\"Turning what would otherwise be functional wikitext into a comment temporarily, preventing it from appearing in the output, is called {commenting out} that wikitext.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210117013403056\":{\"title\":\"Ta:20210117013403056\",\"answer\":\"`The password is \\\"purple<!-- elephant-->\\\".`\",\"created\":\"20210117013406348\",\"modified\":\"20210409173415228\",\"origin\":\"Comments\",\"qtype\":\"rememberq\",\"question\":\"Make the following wikitext appear to say that the password is \\\"purple\\\" when it's rendered, by inserting a comment: `The password is \\\"purple elephant\\\".`\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210117013433768\":{\"title\":\"Ta:20210117013433768\",\"answer\":\"`<!--`\",\"created\":\"20210117013435287\",\"modified\":\"20210409173426018\",\"origin\":\"Comments\",\"qtype\":\"rememberq\",\"question\":\"What string of characters begins a comment in HTML or wikitext?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210117013445546\":{\"title\":\"Ta:20210117013445546\",\"answer\":\"`-->`\",\"created\":\"20210117013447362\",\"modified\":\"20210409173427726\",\"origin\":\"Comments\",\"qtype\":\"rememberq\",\"question\":\"What string of characters ends a comment in HTML or wikitext?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210120022054991\":{\"title\":\"Ta:20210120022054991\",\"created\":\"20210120022056041\",\"modified\":\"20210409174725932\",\"origin\":\"When Things Go Wrong\",\"qtype\":\"remembercz\",\"question\":\"If you ever find yourself unsure how something works, try creating a/n {experiment} that will answer your question.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210120022211371\":{\"title\":\"Ta:20210120022211371\",\"answer\":\"If your first attempt at one of the chunks doesn't work right, you have a better idea of where the problem could be.\",\"created\":\"20210120022212709\",\"modified\":\"20210409174729267\",\"origin\":\"When Things Go Wrong\",\"qtype\":\"rememberq\",\"question\":\"Why should you split complicated problems into multiple chunks and solve each chunk by itself?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210120232130346\":{\"title\":\"Ta:20210120232130346\",\"answer\":\"Explain in detail to the duck what you are trying to do, in the hopes that this will call attention to your mistake.\",\"created\":\"20210120232131457\",\"modified\":\"20210409174734273\",\"origin\":\"When Things Go Wrong\",\"qtype\":\"rememberq\",\"question\":\"How can you use a rubber duck to help solve your TiddlyWiki problems?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210120232349960\":{\"title\":\"Ta:20210120232349960\",\"answer\":\"The element inspector (a part of the browser's developer tools).\",\"created\":\"20210120232350802\",\"modified\":\"20210409174739152\",\"origin\":\"When Things Go Wrong\",\"qtype\":\"rememberq\",\"question\":\"What web browser feature can you use to inspect the HTML of a specific element within TiddlyWiki?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210120232418473\":{\"title\":\"Ta:20210120232418473\",\"answer\":\"On the menu when you right-click anywhere on the page.\",\"created\":\"20210120232419282\",\"modified\":\"20210409174744170\",\"origin\":\"When Things Go Wrong\",\"qtype\":\"rememberq\",\"question\":\"Where do you find the option to open your web browser's HTML inspector?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210120232620760\":{\"title\":\"Ta:20210120232620760\",\"answer\":\"Display the values of the intermediate variables or fields by themselves to check whether they contain what you expect.\",\"created\":\"20210120232623385\",\"modified\":\"20240929214844080\",\"origin\":\"When Things Go Wrong\",\"qtype\":\"rememberq\",\"question\":\"What technique can you use to trace which part of some complicated wikitext is having a problem, without having to break the wikitext apart into smaller pieces?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210120232711407\":{\"title\":\"Ta:20210120232711407\",\"answer\":\"Step away from the computer for a few minutes.\",\"created\":\"20210120232712727\",\"modified\":\"20210409174804924\",\"origin\":\"When Things Go Wrong\",\"qtype\":\"rememberq\",\"question\":\"If you become frustrated at a TiddlyWiki problem, what is the fastest way to get back on track?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210120233224812\":{\"title\":\"Ta:20210120233224812\",\"answer\":\"Explaining the problem to a rubber duck (or a person).\",\"created\":\"20210120233231796\",\"modified\":\"20210409174807110\",\"origin\":\"When Things Go Wrong\",\"qtype\":\"rememberq\",\"question\":\"What troubleshooting technique helps you to identify places where you believe your wikitext does one thing, but it actually does something else?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210123231355355\":{\"title\":\"Ta:20210123231355355\",\"answer\":\"`all[current]`\",\"created\":\"20210123231400916\",\"modified\":\"20241012230804136\",\"origin\":\"Templates and the Current Tiddler\",\"qtype\":\"rememberq\",\"question\":\"What filter step using the `all` operator constructs one output tiddler, the title of the current tiddler?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210124162823766\":{\"title\":\"Ta:20210124162823766\",\"answer\":\"Membership.\",\"created\":\"20210124162824443\",\"modified\":\"20210409020145969\",\"origin\":\"Tags\",\"qtype\":\"rememberq\",\"question\":\"What type of relationship is expressed by a TiddlyWiki tag?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210124183029121\":{\"title\":\"Ta:20210124183029121\",\"answer\":\"Place `<<<` above and below the section of text you want to quote.\",\"created\":\"20210124183030116\",\"modified\":\"20210409022758252\",\"origin\":\"Journal Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"What is the wikitext syntax to create a block quote that spans multiple lines?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210124183102272\":{\"title\":\"Ta:20210124183102272\",\"answer\":\"Place <code>&#96;&#96;&#96;</code> above and below the section of text you want to include in the code block.\",\"created\":\"20210124183103500\",\"modified\":\"20210409022802316\",\"origin\":\"Journal Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"What is the wikitext syntax to create a code (monospaced) block with multiple lines?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210124183159608\":{\"title\":\"Ta:20210124183159608\",\"answer\":\"Begin each list item on a new line with the character `*`.\",\"created\":\"20210124183201434\",\"modified\":\"20210409022808630\",\"origin\":\"Journal Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"What is the wikitext syntax to create a bulleted list?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210124183212683\":{\"title\":\"Ta:20210124183212683\",\"answer\":\"Begin each list item on a new line with the character `#`.\",\"created\":\"20210124183214276\",\"modified\":\"20210409022810241\",\"origin\":\"Journal Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"What is the wikitext syntax to create a numbered list?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210130212746305\":{\"title\":\"Ta:20210130212746305\",\"created\":\"20210130212747987\",\"modified\":\"20210418131804163\",\"origin\":\"Tiddler Titles\",\"qtype\":\"remembercz\",\"question\":\"A knowledge tiddler should be focused on a single {idea}.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210130212814069\":{\"title\":\"Ta:20210130212814069\",\"created\":\"20210130212815216\",\"modified\":\"20210409130127397\",\"origin\":\"Tiddler Titles\",\"qtype\":\"remembercz\",\"question\":\"If a noun phrase seems insufficiently precise for titling a tiddler, try using a {claim} (type of statement) instead.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210130212836866\":{\"title\":\"Ta:20210130212836866\",\"answer\":\"//Not//.\",\"created\":\"20210130212837495\",\"modified\":\"20210409130133180\",\"origin\":\"Tiddler Titles\",\"qtype\":\"rememberq\",\"question\":\"What word should be avoided to make your tiddler titles sharper?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210130213337117\":{\"title\":\"Ta:20210130213337117\",\"answer\":\"Namespacing (starting all their names with a constant prefix, perhaps followed by a slash or colon).\",\"created\":\"20210130213338912\",\"modified\":\"20210409131331825\",\"origin\":\"Naming Conventions\",\"qtype\":\"rememberq\",\"question\":\"What naming technique may help organize a large number of tiddlers of the same type or on the same topic?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210130213501953\":{\"title\":\"Ta:20210130213501953\",\"answer\":\"It can make you bring hierarchical thinking to places where it doesn't belong, discouraging you from reusing the tiddlers in different contexts.\",\"created\":\"20210130213503269\",\"modified\":\"20210418132025561\",\"origin\":\"Naming Conventions\",\"qtype\":\"rememberq\",\"question\":\"How can namespacing your tiddlers limit your thinking if the technique is used inappropriately?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210130214416899\":{\"title\":\"Ta:20210130214416899\",\"answer\":\"A tag pill.\",\"created\":\"20210130214417669\",\"modified\":\"20210409020147458\",\"origin\":\"Tags\",\"qtype\":\"rememberq\",\"question\":\"What is the colored ellipse around a tag's name in TiddlyWiki called?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210130214444181\":{\"title\":\"Ta:20210130214444181\",\"answer\":\"Click on the tag pill; the drop-down menu that appears will show the tagged tiddlers.\",\"created\":\"20210130214445363\",\"modified\":\"20210418131851643\",\"origin\":\"Tags\",\"qtype\":\"rememberq\",\"question\":\"If you are looking at a tag in TiddlyWiki's interface, how can you obtain a list of all tiddlers with that tag?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210130223813261\":{\"title\":\"Ta:20210130223813261\",\"answer\":\"Integration, reference, and serendipity.\",\"created\":\"20210130223814292\",\"modified\":\"20210409141341567\",\"origin\":\"Creating Evergreen Notes\",\"qtype\":\"rememberq\",\"question\":\"What three functions does //Grok TiddlyWiki// say notes have? (in alphabetical order)\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210130223903147\":{\"title\":\"Ta:20210130223903147\",\"answer\":\"Writing the notes prompts you to think about the information more deeply, so you are more likely to remember it without needing the notes in the future.\",\"created\":\"20210130223904258\",\"modified\":\"20210409141407324\",\"origin\":\"Creating Evergreen Notes\",\"qtype\":\"rememberq\",\"question\":\"Explain how notes help you //integrate// information (one of their three functions).\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210130223931544\":{\"title\":\"Ta:20210130223931544\",\"answer\":\"You remember that you took relevant notes on some topic you're thinking about, and you go find those notes.\",\"created\":\"20210130223932856\",\"modified\":\"20210409141415396\",\"origin\":\"Creating Evergreen Notes\",\"qtype\":\"rememberq\",\"question\":\"Explain how notes are used for //reference// (one of their three functions).\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210130224008308\":{\"title\":\"Ta:20210130224008308\",\"answer\":\"You run across the notes at a time they are useful, having completely forgotten you took them.\",\"created\":\"20210130224009549\",\"modified\":\"20210409141418099\",\"origin\":\"Creating Evergreen Notes\",\"qtype\":\"rememberq\",\"question\":\"Explain how notes can create //serendipity// (one of their three functions).\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210130224110199\":{\"title\":\"Ta:20210130224110199\",\"answer\":\"Once you have a lot of notes, the keywords you search for are likely found in so many places it will be difficult to find the notes.\",\"created\":\"20210130224111387\",\"modified\":\"20210409141426858\",\"origin\":\"Creating Evergreen Notes\",\"qtype\":\"rememberq\",\"question\":\"Why is full-text search insufficient to find notes that are not stored in a relevant retrieval context? (reason relating to scale)\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210130224154129\":{\"title\":\"Ta:20210130224154129\",\"answer\":\"Reference (knowing some relevant notes exist and looking for them).\",\"created\":\"20210130224157118\",\"modified\":\"20210409141431428\",\"origin\":\"Creating Evergreen Notes\",\"qtype\":\"rememberq\",\"question\":\"Full-text search can only help you use notes in which one of //Grok TiddlyWiki//'s functions of notes?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210130224237554\":{\"title\":\"Ta:20210130224237554\",\"answer\":\"A context in which you are likely to want to find the information in the notes.\",\"created\":\"20210130224238806\",\"modified\":\"20210409141448578\",\"origin\":\"Creating Evergreen Notes\",\"qtype\":\"rememberq\",\"question\":\"In the context of evergreen notes, what is a //retrieval context//?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210131035147675\":{\"title\":\"Ta:20210131035147675\",\"answer\":\"At the time you create the note, you do not know what context you may need the note in later, so the more relevant contexts you place it in, the more likely you pick a useful one.\",\"created\":\"20210131035149131\",\"modified\":\"20210409141457218\",\"origin\":\"Creating Evergreen Notes\",\"qtype\":\"rememberq\",\"question\":\"Why is it valuable to relate a new note to as many relevant things as possible? Use the concept of a //retrieval context//.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210131035234849\":{\"title\":\"Ta:20210131035234849\",\"created\":\"20210131035236136\",\"modified\":\"20210409141543558\",\"origin\":\"Creating Evergreen Notes\",\"qtype\":\"remembercz\",\"question\":\"Notes that are placed in a retrieval context, are related to many other ideas, and are continually updated as more information comes available can be called {evergreen} notes.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210131035326236\":{\"title\":\"Ta:20210131035326236\",\"created\":\"20210131035327968\",\"modified\":\"20210409141546766\",\"origin\":\"Creating Evergreen Notes\",\"qtype\":\"remembercz\",\"question\":\"Notes should be placed only in contexts in which they may actually be {useful} in the future.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210131035518635\":{\"title\":\"Ta:20210131035518635\",\"created\":\"20210131035521797\",\"modified\":\"20210409141548429\",\"origin\":\"Creating Evergreen Notes\",\"qtype\":\"remembercz\",\"question\":\"The {broken windows} theory (sociology term) of notes: when your notes are wrong or out of date, you are discouraged from using or updating the notes, producing a spiral of decay.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210131035624182\":{\"title\":\"Ta:20210131035624182\",\"answer\":\"Filling your notes with ideas that have no long-term importance draws your attention away from the parts that matter, making your notes harder to use.\",\"created\":\"20210131035625205\",\"modified\":\"20210409141551184\",\"origin\":\"Creating Evergreen Notes\",\"qtype\":\"rememberq\",\"question\":\"Why should you avoid making all your notes into evergreen notes?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210131035704014\":{\"title\":\"Ta:20210131035704014\",\"created\":\"20210131035705764\",\"modified\":\"20210409141554057\",\"origin\":\"Creating Evergreen Notes\",\"qtype\":\"remembercz\",\"question\":\"To decide whether a note should be turned into an evergreen note, ask yourself whether you want the note to {outlive the day}.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210131162834222\":{\"title\":\"Ta:20210131162834222\",\"answer\":\"Click the gear icon in the page toolbar, under the wiki's title in the sidebar.\",\"created\":\"20210131162835586\",\"modified\":\"20210818141636826\",\"origin\":\"Tweaking Your Settings\",\"qtype\":\"rememberq\",\"question\":\"How do you open the //control panel// in a stock TiddlyWiki?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210131162854519\":{\"title\":\"Ta:20210131162854519\",\"created\":\"20210131162855974\",\"modified\":\"20210408175058224\",\"origin\":\"Tweaking Your Settings\",\"qtype\":\"remembercz\",\"question\":\"The color scheme used by a TiddlyWiki is called its {palette}.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210131205501655\":{\"title\":\"Ta:20210131205501655\",\"answer\":\"A macro.\",\"created\":\"20210131205502716\",\"modified\":\"20241008122221457\",\"origin\":\"Macros\",\"qtype\":\"rememberq\",\"question\":\"Text substitution occurs only within what type of variable?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210131205538119\":{\"title\":\"Ta:20210131205538119\",\"created\":\"20210131205539128\",\"modified\":\"20240929201050593\",\"origin\":\"Macros\",\"qtype\":\"remembercz\",\"question\":\"While TiddlyWiki is doing text substitution, it stops processing {wikitext markup}.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210131205933326\":{\"title\":\"Ta:20210131205933326\",\"answer\":\"`<<__myparameter__>>`\",\"created\":\"20210131205934532\",\"modified\":\"20240929201113676\",\"origin\":\"Macros\",\"qtype\":\"rememberq\",\"question\":\"What wikitext syntax can you use to refer to the value of a parameter `myparameter` of a macro without doing text substitution?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210131210204783\":{\"title\":\"Ta:20210131210204783\",\"answer\":\"The former syntax doesn't result in text substitution, so there is no possibility of errors if special characters like `]]` or `\\\"` are used to surround <code>&#36;myparameter&#36;</code> but also appear in its value.\",\"created\":\"20210131210208174\",\"modified\":\"20240929201141457\",\"origin\":\"Macros\",\"qtype\":\"rememberq\",\"question\":\"Why is it usually better to write `<<__myparameter__>>` rather than <code>&#36;myparameter&#36;</code> within a macro, if it would have the same effect?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210131211152969\":{\"title\":\"Ta:20210131211152969\",\"answer\":\"It does not begin with a capital letter.\",\"created\":\"20210131211154457\",\"modified\":\"20210321231640425\",\"origin\":\"CamelCase\",\"qtype\":\"rememberq\",\"question\":\"Why is `camelCaseWord` not in CamelCase?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210131211210978\":{\"title\":\"Ta:20210131211210978\",\"answer\":\"It does not contain a capital letter immediately following a lowercase letter.\",\"created\":\"20210131211212504\",\"modified\":\"20210320135849194\",\"origin\":\"CamelCase\",\"qtype\":\"rememberq\",\"question\":\"Why is `Camel2Camel` not in CamelCase?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210131211235165\":{\"title\":\"Ta:20210131211235165\",\"answer\":\"`\\\\rules except wikilink`\",\"created\":\"20210131211236448\",\"modified\":\"20210311183357631\",\"origin\":\"CamelCase\",\"qtype\":\"rememberq\",\"question\":\"CamelCase linking can be turned off for a specific tiddler using what pragma?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210131211319408\":{\"title\":\"Ta:20210131211319408\",\"answer\":\"Precede it with a tilde, `~CamelCase`.\",\"created\":\"20210131211320419\",\"modified\":\"20210311183354737\",\"origin\":\"CamelCase\",\"qtype\":\"rememberq\",\"question\":\"How do you escape the word `CamelCase`, so that it does not turn into a link when camel-case linking is on?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210131212436299\":{\"title\":\"Ta:20210131212436299\",\"answer\":\"E.g., link from the meeting to the project, link from the project to the meeting, put a `meetings` list field on the project, tag the meeting with the project tiddler, create a giant table mapping meetings to projects\",\"created\":\"20210131212437525\",\"modified\":\"20210409025824923\",\"origin\":\"Project Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"Suggest a way to relate a meeting to a project (try to pick a new one).\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210131212528420\":{\"title\":\"Ta:20210131212528420\",\"answer\":\"Effectively using custom fields this way usually requires creating a small amount of custom logic so you can easily see and edit the fields.\",\"created\":\"20210131212529677\",\"modified\":\"20241013004813137\",\"origin\":\"Project Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"Why are fields a higher-effort method of relating tiddlers than tags?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210206151704888\":{\"title\":\"Ta:20210206151704888\",\"created\":\"20210206151706663\",\"modified\":\"20210418131749070\",\"origin\":\"Multi-Run Filters\",\"qtype\":\"remembercz\",\"question\":\"With a single filter run, you can only find tiddlers that match {all of} a set of conditions.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210206151741395\":{\"title\":\"Ta:20210206151741395\",\"answer\":\"By placing the conditions for each branch of the OR in a separate filter run.\",\"created\":\"20210206151742797\",\"modified\":\"20210410181916526\",\"origin\":\"Multi-Run Filters\",\"qtype\":\"rememberq\",\"question\":\"In a filter expression, you create an OR condition how?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210206151820321\":{\"title\":\"Ta:20210206151820321\",\"answer\":\"`[tag[Journal]] [tag[Meeting]]`\",\"created\":\"20210206151821987\",\"modified\":\"20210410183003166\",\"origin\":\"Multi-Run Filters\",\"qtype\":\"rememberq\",\"question\":\"Write a filter expression that shows all tiddlers that are tagged `Journal` or `Meeting`.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210206151843430\":{\"title\":\"Ta:20210206151843430\",\"created\":\"20210206151845763\",\"modified\":\"20210410183007155\",\"origin\":\"Multi-Run Filters\",\"qtype\":\"remembercz\",\"question\":\"In a filter expression, you can include spaces between filter {runs} but not between filter {steps}.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210206152022536\":{\"title\":\"Ta:20210206152022536\",\"answer\":\"A tiddler list is a basic filter expression, consisting of several runs, each of which select a single tiddler.\",\"created\":\"20210206152024753\",\"modified\":\"20210410183030931\",\"origin\":\"Multi-Run Filters\",\"qtype\":\"rememberq\",\"question\":\"Explain the relationship between tiddler lists and filter expressions.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210206152226708\":{\"title\":\"Ta:20210206152226708\",\"answer\":\"//Dominant appending// (the tiddler appears in the last place it showed up and is removed from any prior position in the list).\",\"created\":\"20210206152230480\",\"modified\":\"20210410183041079\",\"origin\":\"Multi-Run Filters\",\"qtype\":\"rememberq\",\"question\":\"When the same tiddler appears in the output of multiple consecutive filter runs, what concept does TiddlyWiki use to determine where the tiddler should be listed?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210206152347300\":{\"title\":\"Ta:20210206152347300\",\"answer\":\"`=` (or `:all`)\",\"created\":\"20210206152348589\",\"modified\":\"20210410183058421\",\"origin\":\"Multi-Run Filters\",\"qtype\":\"rememberq\",\"question\":\"What prefix can you add to a filter run to inhibit dominant appending and allow duplicate values in the list?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210206152409644\":{\"title\":\"Ta:20210206152409644\",\"answer\":\"`+` (or `:and`)\",\"created\":\"20210206152410753\",\"modified\":\"20210410183109577\",\"origin\":\"Multi-Run Filters\",\"qtype\":\"rememberq\",\"question\":\"What prefix can you add to a filter run to AND it with the accumulated results of previous runs?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210206152427628\":{\"title\":\"Ta:20210206152427628\",\"answer\":\"`-` (or `:except`)\",\"created\":\"20210206152428907\",\"modified\":\"20210410183127863\",\"origin\":\"Multi-Run Filters\",\"qtype\":\"rememberq\",\"question\":\"What prefix can you add to a filter run to remove all outputs of this run from the accumulated results?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210206152454854\":{\"title\":\"Ta:20210206152454854\",\"answer\":\"`~` (or `:else`)\",\"created\":\"20210206152455981\",\"modified\":\"20210410183144993\",\"origin\":\"Multi-Run Filters\",\"qtype\":\"rememberq\",\"question\":\"What prefix can you add to a filter run to ignore it unless the accumulated results are empty?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210206152557092\":{\"title\":\"Ta:20210206152557092\",\"answer\":\"Removes them from their current position and puts them at the end of the results.\",\"created\":\"20210206152558864\",\"modified\":\"20210410183203836\",\"origin\":\"Multi-Run Filters\",\"qtype\":\"rememberq\",\"question\":\"In a dominant append, TiddlyWiki does what to tiddlers that are already in the accumulated results?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210206152939201\":{\"title\":\"Ta:20210206152939201\",\"answer\":\"`[tag[Journal]] -[search:text[fudge]tag[Meeting]]`\",\"created\":\"20210206152939704\",\"modified\":\"20241013004202288\",\"origin\":\"Multi-Run Filters\",\"qtype\":\"rememberq\",\"question\":\"Write a filter expression that shows all tiddlers that are tagged `Journal`, but do not both contain the word `fudge` in their `text` field and have the tag `Meeting` (having one of the latter two conditions is OK).\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210206153058234\":{\"title\":\"Ta:20210206153058234\",\"answer\":\"`[tag[Contact]] [search:text[JaneDoe]] +[sort[]]`\",\"created\":\"20210206153059645\",\"modified\":\"20241013004215806\",\"origin\":\"Multi-Run Filters\",\"qtype\":\"rememberq\",\"question\":\"Write a filter expression that finds all tiddlers that are either tagged `Contact` or contain the word `JaneDoe` in their `text` field. The list should be sorted alphabetically.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210206163511138\":{\"title\":\"Ta:20210206163511138\",\"answer\":\"Slice your content up into appropriate tiddlers.\",\"created\":\"20210206163512092\",\"modified\":\"20210409133647911\",\"origin\":\"Slicing Up Content\",\"qtype\":\"rememberq\",\"question\":\"What is the best way to create opportunities for reuse of content in TiddlyWiki?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210206163533246\":{\"title\":\"Ta:20210206163533246\",\"created\":\"20210206163534157\",\"modified\":\"20210409133649829\",\"origin\":\"Slicing Up Content\",\"qtype\":\"remembercz\",\"question\":\"Rule of thumb for dividing tiddlers: create more tiddlers than {you think you should}.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210206163552612\":{\"title\":\"Ta:20210206163552612\",\"created\":\"20210206163554160\",\"modified\":\"20210409133652153\",\"origin\":\"Slicing Up Content\",\"qtype\":\"remembercz\",\"question\":\"Rule of thumb for dividing tiddlers: a tiddler should not get so large that {it doesn't fit on your screen without scrolling}.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210206163621213\":{\"title\":\"Ta:20210206163621213\",\"answer\":\"Conceptual ones.\",\"created\":\"20210206163622535\",\"modified\":\"20210409133655044\",\"origin\":\"Slicing Up Content\",\"qtype\":\"rememberq\",\"question\":\"Dividing content into tiddlers should be done based on what type of boundaries?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210206163646455\":{\"title\":\"Ta:20210206163646455\",\"created\":\"20210206163647779\",\"modified\":\"20210409133658178\",\"origin\":\"Slicing Up Content\",\"qtype\":\"remembercz\",\"question\":\"Tiddlers are used to model {nouns} (language metaphor).\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210206163709629\":{\"title\":\"Ta:20210206163709629\",\"answer\":\"By making the noun a tiddler and the properties fields of that tiddler.\",\"created\":\"20210206163710743\",\"modified\":\"20210409133700398\",\"origin\":\"Slicing Up Content\",\"qtype\":\"rememberq\",\"question\":\"How do we describe the properties of a noun in TiddlyWiki?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210206163838278\":{\"title\":\"Ta:20210206163838278\",\"answer\":\"\",\"created\":\"20210206163841179\",\"modified\":\"20210409133707423\",\"origin\":\"Slicing Up Content\",\"qtype\":\"remembercz\",\"question\":\"When tiddlers gather together lists of other tiddlers that meet some criteria, they act like {sentences} (language metaphor).\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210206163910099\":{\"title\":\"Ta:20210206163910099\",\"created\":\"20210206163911006\",\"modified\":\"20210409133710434\",\"origin\":\"Slicing Up Content\",\"qtype\":\"remembercz\",\"question\":\"When tiddlers perform actions on other tiddlers, they act like {machines} (object in the physical world).\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210206164032797\":{\"title\":\"Ta:20210206164032797\",\"answer\":\"Transclusion.\",\"created\":\"20210206164033785\",\"modified\":\"20210409133739809\",\"origin\":\"Slicing Up Content\",\"qtype\":\"rememberq\",\"question\":\"What TiddlyWiki concept allows tiddlers to appear within other tiddlers?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210206164140818\":{\"title\":\"Ta:20210206164140818\",\"answer\":\"E.g., `caption`, `author`, `publisher`, `publication-year`, `genre`, `isbn`, `rating`, `price`\",\"created\":\"20210206164142791\",\"modified\":\"20210418131821886\",\"origin\":\"Slicing Up Content\",\"qtype\":\"rememberq\",\"question\":\"Give an example of a field you might use on a tiddler describing a book (try to pick a new one).\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210206170818374\":{\"title\":\"Ta:20210206170818374\",\"created\":\"20210206170822321\",\"modified\":\"20240929170638974\",\"origin\":\"Templates and the Current Tiddler\",\"qtype\":\"remembercz\",\"question\":\"Templates behave like {lenses}, objects that modify the way we see other objects.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210206182434279\":{\"title\":\"Ta:20210206182434279\",\"answer\":\"`myop:one:two[param]`\",\"created\":\"20210206182435827\",\"modified\":\"20240929214546847\",\"origin\":\"Anatomy of Filter Steps\",\"qtype\":\"rememberq\",\"question\":\"If a filter operator `myop` accepts multiple suffixes, `one` and `two`, and a single parameter `param`, what does the resulting filter step look like?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210206182504129\":{\"title\":\"Ta:20210206182504129\",\"answer\":\"`myop[one],[two]`\",\"created\":\"20210206182505096\",\"modified\":\"20240929214552949\",\"origin\":\"Anatomy of Filter Steps\",\"qtype\":\"rememberq\",\"question\":\"If a filter operator `myop` accepts multiple parameters, `one` and `two`, and has no suffix, what does the resulting filter step look like?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210206183151676\":{\"title\":\"Ta:20210206183151676\",\"answer\":\"`[tag[Contact]search:phone[1234]]` (Careful: not `phone[1234]`, which requires the phone number to be //exactly// `1234`, or `contains:phone[1234]`, which would select a `1234` item from a tiddler list.)\",\"created\":\"20210206183206851\",\"modified\":\"20221015160957260\",\"origin\":\"Common Filter Operators\",\"qtype\":\"rememberq\",\"question\":\"Write a filter run that finds all contacts whose phone number contains the number `1234`.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210206183227682\":{\"title\":\"Ta:20210206183227682\",\"answer\":\"`*`\",\"created\":\"20210206183229677\",\"modified\":\"20210409165638425\",\"origin\":\"Common Filter Operators\",\"qtype\":\"rememberq\",\"question\":\"What suffix to the `search` operator causes it to find matches in any field of a tiddler?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210206183311072\":{\"title\":\"Ta:20210206183311072\",\"answer\":\"`title,text` (in context, `search:title,text[your search query here]`)\",\"created\":\"20210206183312052\",\"modified\":\"20210409165641047\",\"origin\":\"Common Filter Operators\",\"qtype\":\"rememberq\",\"question\":\"What suffix to the search operator causes it to find matches in either the `title` or `text` field of a tiddler?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210206231316184\":{\"title\":\"Ta:20210206231316184\",\"answer\":\"The `$count` widget.\",\"created\":\"20210206231317022\",\"modified\":\"20210502161012539\",\"origin\":\"Miscellaneous Widgets\",\"qtype\":\"rememberq\",\"question\":\"What widget displays the number of tiddlers that match a filter?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210206231346639\":{\"title\":\"Ta:20210206231346639\",\"answer\":\"`<$count filter=\\\"[tag[Contact]]\\\"/>`\",\"created\":\"20210206231348368\",\"modified\":\"20210502161016052\",\"origin\":\"Miscellaneous Widgets\",\"qtype\":\"rememberq\",\"question\":\"Write a `$count` widget to describe how many tiddlers have the tag `Contact`.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210206233305368\":{\"title\":\"Ta:20210206233305368\",\"answer\":\"The `$tiddler` widget.\",\"created\":\"20210206233306616\",\"modified\":\"20210502161018205\",\"origin\":\"Miscellaneous Widgets\",\"qtype\":\"rememberq\",\"question\":\"What widget is specifically designed to allow you to set the current tiddler?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210206233413592\":{\"title\":\"Ta:20210206233413592\",\"answer\":\"`<$tiddler tiddler=<<myTiddler>>>{{||Example Template}}</$tiddler>` (you could also use a `$transclude` widget inside)\",\"created\":\"20210206233415186\",\"modified\":\"20210512023556342\",\"origin\":\"Miscellaneous Widgets\",\"qtype\":\"rememberq\",\"question\":\"Write a `$tiddler` widget with content that transcludes the tiddler specified in the `myTiddler` variable through the `Example Template` tiddler.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210206233716739\":{\"title\":\"Ta:20210206233716739\",\"answer\":\"`<$radio field=\\\"color\\\" value=\\\"teal\\\">&nbsp;Teal</$radio>`\",\"created\":\"20210206233718557\",\"modified\":\"20210502161057496\",\"origin\":\"Miscellaneous Widgets\",\"qtype\":\"rememberq\",\"question\":\"Write a `$radio` widget that sets the value of the `color` field of the current tiddler to `teal`. The label on the button should say “Teal”.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210206233839505\":{\"title\":\"Ta:20210206233839505\",\"answer\":\"The `$select` widget.\",\"created\":\"20210206233840308\",\"modified\":\"20210502161100735\",\"origin\":\"Miscellaneous Widgets\",\"qtype\":\"rememberq\",\"question\":\"What widget allows you to create a drop-down menu?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210206233859381\":{\"title\":\"Ta:20210206233859381\",\"answer\":\"A series of `<option>` elements.\",\"created\":\"20210206233901108\",\"modified\":\"20210502161102676\",\"origin\":\"Miscellaneous Widgets\",\"qtype\":\"rememberq\",\"question\":\"The various choices offered by a `$select` widget are defined using what nested HTML element?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210206234005759\":{\"title\":\"Ta:20210206234005759\",\"answer\":\"`<option value=\\\"excellent\\\">An Excellent Choice</option>`\",\"created\":\"20210206234006739\",\"modified\":\"20210502161108117\",\"origin\":\"Miscellaneous Widgets\",\"qtype\":\"rememberq\",\"question\":\"Write an `option` HTML element which displays the text “An Excellent Choice” and places the text `excellent` in its `$select` widget's bound field.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210206234201889\":{\"title\":\"Ta:20210206234201889\",\"answer\":\"`<$select field=\\\"selection\\\"><$list filter=\\\"[tag[Ingredient]]\\\"><option value={{!!title}}>{{!!caption}}</option></$list></$select>`\",\"created\":\"20210206234203279\",\"modified\":\"20240929211133008\",\"origin\":\"Miscellaneous Widgets\",\"qtype\":\"rememberq\",\"question\":\"Write a `$select` widget that allows you to choose from all items with the tag `Ingredient`, placing the value of the selected ingredient's `title` field inside the `selection` field of the current tiddler. The text of each drop-down selection should be the `caption` field of the ingredient.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210206234235502\":{\"title\":\"Ta:20210206234235502\",\"answer\":\"`$select`, `$list`, and `option`.\",\"created\":\"20210206234236937\",\"modified\":\"20210502161132257\",\"origin\":\"Miscellaneous Widgets\",\"qtype\":\"rememberq\",\"question\":\"What three widgets/HTML elements must be nested together to produce a drop-down list with dynamically chosen elements in TiddlyWiki?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210206234447506\":{\"title\":\"Ta:20210206234447506\",\"answer\":\"A drop-down menu always takes up the same (reasonable) amount of space, while radio buttons could consume an amount of space limited only by the number of matching items.\",\"created\":\"20210206234448719\",\"modified\":\"20240929211139758\",\"origin\":\"Miscellaneous Widgets\",\"qtype\":\"rememberq\",\"question\":\"Why is it usually better to use a `$select` widget than a `$radio` widget to select from a list of options matching a filter when you don't know how many items may be found by the filter?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210207005116544\":{\"title\":\"Ta:20210207005116544\",\"answer\":\"They are assumed to be zero.\",\"created\":\"20210207005117396\",\"modified\":\"20210502162346961\",\"origin\":\"Working with Dates\",\"qtype\":\"rememberq\",\"question\":\"What happens if you leave digits out of a TiddlyWiki timestamp?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210207005145077\":{\"title\":\"Ta:20210207005145077\",\"answer\":\"12:00 noon.\",\"created\":\"20210207005146102\",\"modified\":\"20210502162348732\",\"origin\":\"Working with Dates\",\"qtype\":\"rememberq\",\"question\":\"What time should you set a TiddlyWiki timestamp to if you care only about the date?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210207005228571\":{\"title\":\"Ta:20210207005228571\",\"answer\":\"If you have a negative UTC offset, the date will otherwise be one day too early when adjusted for time zone and displayed.\",\"created\":\"20210207005229873\",\"modified\":\"20210502162351454\",\"origin\":\"Working with Dates\",\"qtype\":\"rememberq\",\"question\":\"Why is it a good idea to list a time of noon on timestamps if you care only about the date?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210207005253185\":{\"title\":\"Ta:20210207005253185\",\"answer\":\"The `$view` widget.\",\"created\":\"20210207005254137\",\"modified\":\"20210502162354660\",\"origin\":\"Working with Dates\",\"qtype\":\"rememberq\",\"question\":\"What widget is used for displaying a date stored as a timestamp in a field of a tiddler in a user-friendly date format?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210207005320123\":{\"title\":\"Ta:20210207005320123\",\"answer\":\"`<$view field=\\\"modified\\\" format=\\\"date\\\" template=\\\"YYYY\\\"/>`\",\"created\":\"20210207005321950\",\"modified\":\"20210502162403716\",\"origin\":\"Working with Dates\",\"qtype\":\"rememberq\",\"question\":\"Write a `$view` widget to display the four-digit year in which the current tiddler was last modified.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210207005357385\":{\"title\":\"Ta:20210207005357385\",\"answer\":\"`format=\\\"date\\\"`\",\"created\":\"20210207005358389\",\"modified\":\"20210502162407228\",\"origin\":\"Working with Dates\",\"qtype\":\"rememberq\",\"question\":\"What attribute and value passed to the `$view` widget causes it to format a field as a date?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210207005414293\":{\"title\":\"Ta:20210207005414293\",\"answer\":\"`template`\",\"created\":\"20210207005415452\",\"modified\":\"20210502162409032\",\"origin\":\"Working with Dates\",\"qtype\":\"rememberq\",\"question\":\"What additional attribute must be supplied to the `$view` widget when choosing `format=\\\"date\\\"`?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210207005448591\":{\"title\":\"Ta:20210207005448591\",\"created\":\"20210207005450211\",\"modified\":\"20210502162411552\",\"origin\":\"Working with Dates\",\"qtype\":\"remembercz\",\"question\":\"The template used to describe how to format a date in TiddlyWiki is often known as a {format string}.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210207005515157\":{\"title\":\"Ta:20210207005515157\",\"answer\":\"The `now` macro.\",\"created\":\"20210207005516658\",\"modified\":\"20210502162419118\",\"origin\":\"Working with Dates\",\"qtype\":\"rememberq\",\"question\":\"What macro retrieves the current date and time and displays it in your chosen format?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210207005537472\":{\"title\":\"Ta:20210207005537472\",\"answer\":\"`<<now \\\"YYYY\\\">>`\",\"created\":\"20210207005539067\",\"modified\":\"20210502162422784\",\"origin\":\"Working with Dates\",\"qtype\":\"rememberq\",\"question\":\"Write a call to the `now` macro that displays the current four-digit year.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210207005559946\":{\"title\":\"Ta:20210207005559946\",\"answer\":\"The `days` operator.\",\"created\":\"20210207005601117\",\"modified\":\"20210502162426032\",\"origin\":\"Working with Dates\",\"qtype\":\"rememberq\",\"question\":\"What filter operator finds tiddlers with dates that are before or after a specific time?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210207014041832\":{\"title\":\"Ta:20210207014041832\",\"answer\":\"`is[draft]`\",\"created\":\"20210207014043275\",\"modified\":\"20210418163720035\",\"origin\":\"Getting the Current Tiddler Right on Drafts\",\"qtype\":\"rememberq\",\"question\":\"What filter step checks if the input tiddler is a draft tiddler?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210207014108901\":{\"title\":\"Ta:20210207014108901\",\"answer\":\"In a field called `draft.of`.\",\"created\":\"20210207014109677\",\"modified\":\"20210418163723652\",\"origin\":\"Getting the Current Tiddler Right on Drafts\",\"qtype\":\"rememberq\",\"question\":\"How does a draft tiddler store the name of the tiddler it is a draft of?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210207014142455\":{\"title\":\"Ta:20210207014142455\",\"answer\":\"Check if the current tiddler is a draft tiddler, and if it is change the current tiddler to the tiddler the draft is of.\",\"created\":\"20210207014143636\",\"modified\":\"20210418163731056\",\"origin\":\"Getting the Current Tiddler Right on Drafts\",\"qtype\":\"rememberq\",\"question\":\"What pattern can be used to allow logic depending on the name of the current tiddler to function in a side-by-side preview?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210207032034836\":{\"title\":\"Ta:20210207032034836\",\"answer\":\"Give it a filter that has either one or zero output tiddlers depending on the state of the condition; if it has one, the body of the widget will be displayed, and if it has zero, it won't.\",\"created\":\"20210207032035835\",\"modified\":\"20240929210438986\",\"origin\":\"Hiding and Showing Things\",\"qtype\":\"rememberq\",\"question\":\"How can you use the `$list` widget to display some content only if a condition is true?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210207032115114\":{\"title\":\"Ta:20210207032115114\",\"answer\":\"The `$list` widget and the `$reveal` widget.\",\"created\":\"20210207032116183\",\"modified\":\"20240929210445546\",\"origin\":\"Hiding and Showing Things\",\"qtype\":\"rememberq\",\"question\":\"What two widgets can be used to display any content only if a condition is true?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210207032239853\":{\"title\":\"Ta:20210207032239853\",\"answer\":\"`<$list filter=\\\"[[$:/config/MyConfigTiddler]text[yes]]\\\"> ... </$list>`\",\"created\":\"20210207032242027\",\"modified\":\"20240929210520002\",\"origin\":\"Hiding and Showing Things\",\"qtype\":\"rememberq\",\"question\":\"Write a `$list` widget that displays its contents only if the `text` field of the tiddler `$:/config/MyConfigTiddler` is set to the exact value `yes`. Use only hard parameters (no transclusions).\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210207032310040\":{\"title\":\"Ta:20210207032310040\",\"answer\":\"`emptyMessage`\",\"created\":\"20210207032311129\",\"modified\":\"20240929210501937\",\"origin\":\"Hiding and Showing Things\",\"qtype\":\"rememberq\",\"question\":\"What attribute of the `$list` widget allows you to display some content if there are zero results from the filter?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210207032407897\":{\"title\":\"Ta:20210207032407897\",\"answer\":\"`first[]`\",\"created\":\"20210207032408993\",\"modified\":\"20240929210531335\",\"origin\":\"Hiding and Showing Things\",\"qtype\":\"rememberq\",\"question\":\"What filter operator is often used with conditionals based on the `$list` widget to ensure the contents of the widget doesn't get displayed more than once?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210207032540788\":{\"title\":\"Ta:20210207032540788\",\"created\":\"20210207032541862\",\"modified\":\"20240929210548730\",\"origin\":\"Hiding and Showing Things\",\"qtype\":\"remembercz\",\"question\":\"The `$reveal` widget displays its contents only if a specified {c1::field} matches a {c1::value}.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210207033024829\":{\"title\":\"Ta:20210207033024829\",\"answer\":\"It creates a new `<span>` or `<div>` element to contain its contents, which may be illegal or have unwanted effects in some places.\",\"created\":\"20210207033028546\",\"modified\":\"20210418165634896\",\"origin\":\"Hiding and Showing Things\",\"qtype\":\"rememberq\",\"question\":\"Why does the `$reveal` widget lead to incorrectly formatted output in some contexts?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210207033253889\":{\"title\":\"Ta:20210207033253889\",\"answer\":\"`name`, `value`, `filter`, and `emptyValue`.\",\"created\":\"20210207033254670\",\"modified\":\"20210418165643151\",\"origin\":\"Hiding and Showing Things\",\"qtype\":\"rememberq\",\"question\":\"What four attributes of `$set` are used to make its value conditional on whether a filter has results?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210207033439159\":{\"title\":\"Ta:20210207033439159\",\"answer\":\"`emptyValue`\",\"created\":\"20210207033441465\",\"modified\":\"20210418165740872\",\"origin\":\"Hiding and Showing Things\",\"qtype\":\"rememberq\",\"question\":\"When the `filter` attribute is used to make a `$set` widget conditional, what attribute contains the value to be used if the filter returns no results?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210207033446919\":{\"title\":\"Ta:20210207033446919\",\"answer\":\"`value`\",\"created\":\"20210207033447893\",\"modified\":\"20210418165744760\",\"origin\":\"Hiding and Showing Things\",\"qtype\":\"rememberq\",\"question\":\"When the `filter` attribute is used to make a `$set` widget conditional, what attribute contains the value to be used if the filter returns at least one result?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210207033542865\":{\"title\":\"Ta:20210207033542865\",\"answer\":\"`<$set name=\\\"hasContacts\\\" filter=\\\"[tag[Contact]]\\\" value=\\\"yes\\\" emptyValue=\\\"no\\\"> ... </$set>`\",\"created\":\"20210207033544029\",\"modified\":\"20240929210626459\",\"origin\":\"Hiding and Showing Things\",\"qtype\":\"rememberq\",\"question\":\"Write a `$set` widget that sets the variable `hasContacts` to `yes` if at least one tiddler in the wiki is tagged `Contact`, to `no` otherwise.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210207033918887\":{\"title\":\"Ta:20210207033918887\",\"answer\":\"Place the fallback in the content/body of the widget.\",\"created\":\"20210207033921565\",\"modified\":\"20210418165801683\",\"origin\":\"Hiding and Showing Things\",\"qtype\":\"rememberq\",\"question\":\"How can you provide fallback content to the `$transclude` widget to be used if the tiddler field it specifies does not exist?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210207033930875\":{\"title\":\"Ta:20210207033930875\",\"answer\":\"Place the fallback in the content/body of the widget.\",\"created\":\"20210207033933255\",\"modified\":\"20210418165832577\",\"origin\":\"Hiding and Showing Things\",\"qtype\":\"rememberq\",\"question\":\"How can you provide fallback content to the `$view` widget to be used if the tiddler field it specifies does not exist?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210207034003070\":{\"title\":\"Ta:20210207034003070\",\"created\":\"20210207034004011\",\"modified\":\"20210418165834559\",\"origin\":\"Hiding and Showing Things\",\"qtype\":\"remembercz\",\"question\":\"The `$view` widget differs from the `$transclude` widget in that it does not {wikify} the contents of the field it is accessing.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210207060709278\":{\"title\":\"Ta:20210207060709278\",\"answer\":\"We are able to reuse tiddlified ideas in a wider variety of contexts.\",\"created\":\"20210207060712248\",\"modified\":\"20210408175118923\",\"origin\":\"Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"Why does breaking up information into tiddlers make our notes and our thoughts more flexible?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210207180624866\":{\"title\":\"Ta:20210207180624866\",\"answer\":\"`fields[]`\",\"created\":\"20210207180626371\",\"modified\":\"20240929211256213\",\"origin\":\"Working with Dates\",\"qtype\":\"rememberq\",\"question\":\"What filter operator finds the names of all the fields used on the input tiddlers?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210208023219597\":{\"title\":\"Ta:20210208023219597\",\"answer\":\"The `qualify` macro.\",\"created\":\"20210208023220835\",\"modified\":\"20210502162612438\",\"origin\":\"Qualification\",\"qtype\":\"rememberq\",\"question\":\"What macro creates a name that is unique among all places the call to the macro is transcluded?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210208023320983\":{\"title\":\"Ta:20210208023320983\",\"answer\":\"(any situation that involves using a template in multiple places, where the template refers to a single tiddler storing state which should differ between uses of the template)\",\"created\":\"20210208023322067\",\"modified\":\"20210502162614372\",\"origin\":\"Qualification\",\"qtype\":\"rememberq\",\"question\":\"Describe a situation in which you would need to use the `qualify` macro (try to pick a new one).\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210208023605710\":{\"title\":\"Ta:20210208023605710\",\"answer\":\"A field of the tiddler where the template is being transcluded.\",\"created\":\"20210208023607305\",\"modified\":\"20210502162616280\",\"origin\":\"Qualification\",\"qtype\":\"rememberq\",\"question\":\"The `qualify` macro is usually //not// needed when storing state used on a template where?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210208023626366\":{\"title\":\"Ta:20210208023626366\",\"answer\":\"A separate temporary tiddler.\",\"created\":\"20210208023628034\",\"modified\":\"20210502162618236\",\"origin\":\"Qualification\",\"qtype\":\"rememberq\",\"question\":\"The `qualify` macro //is// needed when storing the state of a template in what kind of tiddler?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210208023806895\":{\"title\":\"Ta:20210208023806895\",\"answer\":\"One, the base `title` to which a unique number will be suffixed.\",\"created\":\"20210208023808130\",\"modified\":\"20210502162620685\",\"origin\":\"Qualification\",\"qtype\":\"rememberq\",\"question\":\"What parameters does the `qualify` macro have?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210214165634956\":{\"title\":\"Ta:20210214165634956\",\"answer\":\"Purple.\",\"created\":\"20210214165635960\",\"modified\":\"20210214172141205\",\"origin\":\"TestyTest\",\"qtype\":\"rememberq\",\"question\":\"What color is a purple cow?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210327180615955\":{\"title\":\"Ta:20210327180615955\",\"created\":\"20210327180617038\",\"modified\":\"20210409133748552\",\"origin\":\"Slicing Up Content\",\"qtype\":\"remembercz\",\"question\":\"When tiddlers modify the way other tiddlers are displayed, they act like {lenses} (object in the physical world).\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210327180930007\":{\"title\":\"Ta:20210327180930007\",\"answer\":\"Which tag you want to look for.\",\"created\":\"20210327180931096\",\"modified\":\"20210409165646046\",\"origin\":\"Common Filter Operators\",\"qtype\":\"rememberq\",\"question\":\"You need to use `tagging[]` instead of `tag[]` when you don't know what at the time you write the filter?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20210327182023927\":{\"title\":\"Ta:20210327182023927\",\"answer\":\"Its square brackets are mismatched; there is a missing closing bracket at the end.\",\"created\":\"20210327182025345\",\"modified\":\"20210409152458301\",\"origin\":\"Using Filter Expressions\",\"qtype\":\"rememberq\",\"question\":\"Why does the filter expression `[tag[Contact]` not work?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20240614031901039\":{\"title\":\"Ta:20240614031901039\",\"answer\":\"All lowercase.\",\"created\":\"20240614031902944\",\"modified\":\"20240929162436950\",\"origin\":\"Contact Tiddlers\",\"qtype\":\"rememberq\",\"question\":\"How are field names usually capitalized?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20240929154355182\":{\"title\":\"Ta:20240929154355182\",\"answer\":\"The `$let` widget.\",\"created\":\"20240929154356572\",\"modified\":\"20240929162555796\",\"origin\":\"Variables\",\"qtype\":\"rememberq\",\"question\":\"What widget allows you to set any number of variables to new values?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20240929154746057\":{\"title\":\"Ta:20240929154746057\",\"created\":\"20240929154758125\",\"modified\":\"20240929162549118\",\"origin\":\"Variables\",\"qtype\":\"remembercz\",\"question\":\"Putting a variable's name between double angle brackets `<<>>` where you want its value to appear is called {transcluding the variable's value}.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20240929155859363\":{\"title\":\"Ta:20240929155859363\",\"answer\":\"Transclusions can't be nested inside other complex wikitext elements like links.\",\"created\":\"20240929155901071\",\"modified\":\"20240929162542934\",\"origin\":\"Using Variables as Attributes\",\"qtype\":\"rememberq\",\"question\":\"Why does this syntax not produce a usable link? `[[Wikipedia|<<wp>>]]`\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20240929155943495\":{\"title\":\"Ta:20240929155943495\",\"answer\":\"`<a href=<<url>>>Search the web</a>`\",\"created\":\"20240929155949698\",\"modified\":\"20240929162536678\",\"origin\":\"Using Variables as Attributes\",\"qtype\":\"rememberq\",\"question\":\"Given a variable `url` containing the URL of Google, create a link to Google whose text is `Search the web`.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20240929160159417\":{\"title\":\"Ta:20240929160159417\",\"answer\":\"A backtick.\",\"created\":\"20240929160200720\",\"modified\":\"20240929162531558\",\"origin\":\"Using Variables as Attributes\",\"qtype\":\"rememberq\",\"question\":\"In the context of TiddlyWiki, what is the character <code>&#96;</code> called?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20240929160755112\":{\"title\":\"Ta:20240929160755112\",\"answer\":\"A //substituted attribute value//.\",\"created\":\"20240929160759545\",\"modified\":\"20240929162526254\",\"origin\":\"Using Variables as Attributes\",\"qtype\":\"rememberq\",\"question\":\"What's this kind of attribute value, delimited by backticks, called? <code><a href=&#96;&#36;(wpLink)$/Aardvark&#96;>Aardvarks</a></code>\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20240929160831411\":{\"title\":\"Ta:20240929160831411\",\"created\":\"20240929160832419\",\"modified\":\"20240929162520241\",\"origin\":\"Using Variables as Attributes\",\"qtype\":\"remembercz\",\"question\":\"A substituted attribute value allows you to combine {constant text} and {the values of variables} into one attribute value.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20240929161330455\":{\"title\":\"Ta:20240929161330455\",\"answer\":\"<code>&#36;(bling)$</code>\",\"created\":\"20240929161333827\",\"modified\":\"20240929162514164\",\"origin\":\"Using Variables as Attributes\",\"qtype\":\"rememberq\",\"question\":\"Within a substituted attribute value, what syntax do you use to refer to the variable `bling`?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20240929161437104\":{\"title\":\"Ta:20240929161437104\",\"answer\":\"The value of an attribute must be //just// a transclusion, //just// a constant string, or //just// a substituted attribute value -- not several of those things put together.\",\"created\":\"20240929161439086\",\"modified\":\"20240929162505024\",\"origin\":\"Using Variables as Attributes\",\"qtype\":\"rememberq\",\"question\":\"Why doesn't this syntax yield a working link? `<a href=<<wpBase>>\\\"/Aardvark\\\">`\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20240929170839829\":{\"title\":\"Ta:20240929170839829\",\"answer\":\"`<$transclude $tiddler=\\\"ContactInformationTemplate\\\"/>`\",\"created\":\"20240929170842545\",\"modified\":\"20240929170909238\",\"origin\":\"Field Transclusions\",\"qtype\":\"rememberq\",\"question\":\"Transclude the `text` field of the tiddler `ContactInformationTemplate` using a `$transclude` widget.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20240929170839830\":{\"title\":\"Ta:20240929170839830\",\"answer\":\"`<$transclude $tiddler=\\\"ContactInformationTemplate\\\" $field=\\\"description\\\"/>`\",\"created\":\"20240929170913242\",\"modified\":\"20240929170931264\",\"origin\":\"Field Transclusions\",\"qtype\":\"rememberq\",\"question\":\"Transclude the `description` field of the tiddler `ContactInformationTemplate` using a `$transclude` widget.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20240929171020153\":{\"title\":\"Ta:20240929171020153\",\"answer\":\"`{{JaneDoe}}` changes the current tiddler to `JaneDoe` during the transclusion. `$transclude` has no effect on the current tiddler.\",\"created\":\"20240929171021646\",\"modified\":\"20240929171021646\",\"origin\":\"Templates and the Current Tiddler\",\"qtype\":\"rememberq\",\"question\":\"What major and unexpected difference is there between the effect of `{{JaneDoe}}` and `<$transclude $tiddler=\\\"JaneDoe\\\"/>`?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20240929171043170\":{\"title\":\"Ta:20240929171043170\",\"answer\":\"`$tiddler`\",\"created\":\"20240929171046127\",\"modified\":\"20240929171046127\",\"origin\":\"Templates and the Current Tiddler\",\"qtype\":\"rememberq\",\"question\":\"What widget is the most concise and idiomatic way to change the current tiddler?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20240929181236028\":{\"title\":\"Ta:20240929181236028\",\"answer\":\"Only the title of the first meeting (first result of the filter) is shown.\",\"created\":\"20240929181237345\",\"modified\":\"20241013003923252\",\"origin\":\"Filters and Transclusions\",\"qtype\":\"rememberq\",\"question\":\"What behavior does this snippet exhibit that you might not expect? `<$text text={{{ [tag[Meeting]] }}}/>`\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20240929181552822\":{\"title\":\"Ta:20240929181552822\",\"answer\":\"<code><&#36;widget attribute=&#96;text and &#36;{ [filter-expression[]] }&#36;&#96;/></code>\",\"created\":\"20240929181556009\",\"modified\":\"20240929181558944\",\"origin\":\"Filters and Transclusions\",\"qtype\":\"rememberq\",\"question\":\"What syntax allows transcluding a filter expression as //part// of the value of an attribute?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20240929181836470\":{\"title\":\"Ta:20240929181836470\",\"answer\":\"`\\\\parameters`\",\"created\":\"20240929181837586\",\"modified\":\"20241013003938901\",\"origin\":\"Parameterizing Field Transclusions\",\"qtype\":\"rememberq\",\"question\":\"What pragma is used to give a field/tiddler parameters?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20240929181933683\":{\"title\":\"Ta:20240929181933683\",\"answer\":\"`{{Sn:Hi|A|B}}`\",\"created\":\"20240929181934822\",\"modified\":\"20240929181934822\",\"origin\":\"Parameterizing Field Transclusions\",\"qtype\":\"rememberq\",\"question\":\"Modify this transclusion to pass two values, `A` and `B`, as parameters: `{{Sn:Hi}}`\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20240929182116673\":{\"title\":\"Ta:20240929182116673\",\"answer\":\"(1) transcludes `A` through the template `B` (i.e., it transcludes the tiddler `B`, setting the current tiddler to `A`).   (2) transcludes the tiddler `A`, passing `B` as the value of its first parameter.\",\"created\":\"20240929182132020\",\"modified\":\"20240929182132020\",\"origin\":\"Parameterizing Field Transclusions\",\"qtype\":\"rememberq\",\"question\":\"Explain the difference in meaning between these two transclusions: (1) `{{A||B}}` (2) `{{A|B}}`\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20240929182224200\":{\"title\":\"Ta:20240929182224200\",\"answer\":\"`<$transclude $tiddler=\\\"Hi\\\" name=\\\"Emily\\\"/> `\",\"created\":\"20240929182235085\",\"modified\":\"20240929182235085\",\"origin\":\"Parameterizing Field Transclusions\",\"qtype\":\"rememberq\",\"question\":\"Use a `$transclude` widget to transclude the tiddler `Hi` with the parameter `name` set to `Emily`.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20240929182408006\":{\"title\":\"Ta:20240929182408006\",\"answer\":\"`{{A||B|C}}`\",\"created\":\"20240929182410926\",\"modified\":\"20240929182410926\",\"origin\":\"Parameterizing Field Transclusions\",\"qtype\":\"rememberq\",\"question\":\"Transclude the tiddler `A` through the template `B`, passing parameter `C`, using the brace syntax.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20240929182444440\":{\"title\":\"Ta:20240929182444440\",\"created\":\"20240929182445040\",\"modified\":\"20240929182445040\",\"origin\":\"Parameterizing Field Transclusions\",\"qtype\":\"remembercz\",\"question\":\"The `\\\\parameters` pragma is a shortcut for a {`$parameters` widget}.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20240929182540797\":{\"title\":\"Ta:20240929182540797\",\"answer\":\"`<$slot $name=\\\"statement\\\" />`\",\"created\":\"20240929182547128\",\"modified\":\"20241013004003264\",\"origin\":\"Parameterizing Field Transclusions\",\"qtype\":\"rememberq\",\"question\":\"Write a widget that retrieves the contents of a slot named `statement`.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20240929182735224\":{\"title\":\"Ta:20240929182735224\",\"answer\":\"`<$transclude $tiddler=\\\"X\\\"><$fill $name=\\\"statement\\\">Y</$fill></$transclude>`\",\"created\":\"20240929182756829\",\"modified\":\"20240929182819070\",\"origin\":\"Parameterizing Field Transclusions\",\"qtype\":\"rememberq\",\"question\":\"Transclude the tiddler `X`, filling its `statement` slot with `Y`.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20240929183057195\":{\"title\":\"Ta:20240929183057195\",\"answer\":\"Because of its different syntax, it's easier to include content that is long or contains lots of formatting.\",\"created\":\"20240929183100991\",\"modified\":\"20240929183100991\",\"origin\":\"Parameterizing Field Transclusions\",\"qtype\":\"rememberq\",\"question\":\"Why use a slot rather than a parameter?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20240929184628075\":{\"title\":\"Ta:20240929184628075\",\"created\":\"20240929184629664\",\"modified\":\"20240929184629664\",\"origin\":\"Functions\",\"qtype\":\"remembercz\",\"question\":\"A function is a special kind of variable that contains a {filter expression}.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20240929184714885\":{\"title\":\"Ta:20240929184714885\",\"answer\":\"It evaluates the filter expression inside the function and shows the results.\",\"created\":\"20240929184716508\",\"modified\":\"20240929184727273\",\"origin\":\"Functions\",\"qtype\":\"rememberq\",\"question\":\"When you call a function, what action does TiddlyWiki take, different from what it does when calling a procedure?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20240929184803749\":{\"title\":\"Ta:20240929184803749\",\"answer\":\"The `$transclude` widget (with the same `$variable` attribute and parameters a procedure would use).\",\"created\":\"20240929184805176\",\"modified\":\"20241012230628630\",\"origin\":\"Functions\",\"qtype\":\"rememberq\",\"question\":\"What widget is used to call a function in modern TiddlyWiki?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20240929184844965\":{\"title\":\"Ta:20240929184844965\",\"answer\":\"To make the main filter expression shorter and easier to understand, by giving the extracted part a name that describes what it does.\",\"created\":\"20240929184845820\",\"modified\":\"20240929184845820\",\"origin\":\"Functions\",\"qtype\":\"rememberq\",\"question\":\"What's the purpose of extracting part of a filter expression into a function?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20240929184939778\":{\"title\":\"Ta:20240929184939778\",\"answer\":\"`function[]`\",\"created\":\"20240929184942793\",\"modified\":\"20240929184942793\",\"origin\":\"Functions\",\"qtype\":\"rememberq\",\"question\":\"What filter operator calls a function with an arbitrary name and places its results in the filter pipeline?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20240929185008670\":{\"title\":\"Ta:20240929185008670\",\"answer\":\"`{{{ [function[multiply-by-two],[4]] }}}`\",\"created\":\"20240929185011551\",\"modified\":\"20240929185011551\",\"origin\":\"Functions\",\"qtype\":\"rememberq\",\"question\":\"Call the function `multiply-by-two` in a filter expression with a single parameter `4`, using the `function` operator.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20240929185048955\":{\"title\":\"Ta:20240929185048955\",\"answer\":\"`{{{ [.multiply-by-two[4]] }}}`\",\"created\":\"20240929185052321\",\"modified\":\"20241013004227939\",\"origin\":\"Functions\",\"qtype\":\"rememberq\",\"question\":\"Call the function `.multiply-by-two` in a filter expression, with the parameter `4`, using the shortcut syntax.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20240929185124406\":{\"title\":\"Ta:20240929185124406\",\"answer\":\"It must contain a dot (`.`).\",\"created\":\"20240929185127423\",\"modified\":\"20240929185127423\",\"origin\":\"Functions\",\"qtype\":\"rememberq\",\"question\":\"To use the shortcut syntax for calling a function within a filter pipeline (treating it like an operator), what must be true of the function's name?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20240929185738402\":{\"title\":\"Ta:20240929185738402\",\"answer\":\"This is fine: TiddlyWiki doesn't do anything with the bodies of any of the declarations (pragmas) until it has read all of them.\",\"created\":\"20240929185741274\",\"modified\":\"20241008120418661\",\"origin\":\"Functions\",\"qtype\":\"rememberq\",\"question\":\"What happens if you call a function or procedure that's defined //after// the current one in a tiddler's wikitext?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20240929185828539\":{\"title\":\"Ta:20240929185828539\",\"answer\":\"Only the first result will be transcluded by `<<variable transclusion syntax>>`.\",\"created\":\"20240929185830723\",\"modified\":\"20240929185830723\",\"origin\":\"Functions\",\"qtype\":\"rememberq\",\"question\":\"What's different about the result of calling a function using `<<variable transclusion syntax>>` and calling it from within a filter?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20240929190210958\":{\"title\":\"Ta:20240929190210958\",\"answer\":\"If you make a mistake and this clause actually //is// reachable, it is much easier to recognize and fix the problem if you show an error message there.\",\"created\":\"20240929190212962\",\"modified\":\"20241013004238726\",\"origin\":\"Functions\",\"qtype\":\"rememberq\",\"question\":\"Why is it sometimes helpful to add an `<% else %>` clause to a chain of conditional expressions even if you think you have covered all conditions?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20240929201238567\":{\"title\":\"Ta:20240929201238567\",\"answer\":\"`\\\\define` (not `\\\\macro`!)\",\"created\":\"20240929201241419\",\"modified\":\"20240929201241419\",\"origin\":\"Macros\",\"qtype\":\"rememberq\",\"question\":\"What pragma is used to define a macro?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20240929201435327\":{\"title\":\"Ta:20240929201435327\",\"answer\":\"`$myparameter$`\",\"created\":\"20240929201437257\",\"modified\":\"20240929201437257\",\"origin\":\"Macros\",\"qtype\":\"rememberq\",\"question\":\"What's the syntax to text-substitute a parameter `myparameter` into the body of a macro?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20240929201523651\":{\"title\":\"Ta:20240929201523651\",\"answer\":\"Due to their use of text substitution, macros can fail in unexpected ways when tiddler names contain certain special characters (such as quotation marks or closing braces).\",\"created\":\"20240929201525200\",\"modified\":\"20240929201525200\",\"origin\":\"Macros\",\"qtype\":\"rememberq\",\"question\":\"Why are procedures usually safer to use than macros?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20240929201814667\":{\"title\":\"Ta:20240929201814667\",\"answer\":\"`$articleName$` is performing text substitution (only available in a macro), which means the replacement happens without regard for syntax. After the parameters are substituted, the link will be valid wikitext.\",\"created\":\"20240929201819661\",\"modified\":\"20240929201840688\",\"origin\":\"Macros\",\"qtype\":\"rememberq\",\"question\":\"Why does this method of including a parameter in a wikitext link work in a macro, while it would not in a procedure? `[[$articleName$|https://en.wikipedia.org/wiki/$articleName$]]`\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20240929202435397\":{\"title\":\"Ta:20240929202435397\",\"answer\":\"Because the transclusion of `myText` is not quoted, TiddlyWiki will wikify it only once, leaving the `<<text>>` variable transclusion unexpanded.\",\"created\":\"20240929202437580\",\"modified\":\"20240929202437580\",\"origin\":\"Wikification\",\"qtype\":\"rememberq\",\"question\":\"Why will this snippet fail to place \\\"test text\\\" in the `wikitext` variable?<br>`\\\\procedure myText(text) Text: <<text>>`<br>` <$wikify name=\\\"wikitext\\\" text=<<myText \\\"test text\\\">>>...`\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20240929202653877\":{\"title\":\"Ta:20240929202653877\",\"answer\":\"A procedure.\",\"created\":\"20240929202655657\",\"modified\":\"20240929202655657\",\"origin\":\"Custom Widgets\",\"qtype\":\"rememberq\",\"question\":\"A custom widget is internally what other TiddlyWiki object?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20240929202718241\":{\"title\":\"Ta:20240929202718241\",\"answer\":\"(1) They must begin with a `$`, like all widgets. (2) They must contain a dot `.` (unless overriding a built-in widget).\",\"created\":\"20240929202720641\",\"modified\":\"20240929202813544\",\"origin\":\"Custom Widgets\",\"qtype\":\"rememberq\",\"question\":\"What two restrictions are placed on the names of custom widgets?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20240929202757206\":{\"title\":\"Ta:20240929202757206\",\"answer\":\"`\\\\widget`\",\"created\":\"20240929202758080\",\"modified\":\"20240929202758080\",\"origin\":\"Custom Widgets\",\"qtype\":\"rememberq\",\"question\":\"What pragma is used to define a custom widget?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20240929202845764\":{\"title\":\"Ta:20240929202845764\",\"answer\":\"`ts-raw`\",\"created\":\"20240929202847430\",\"modified\":\"20240929202847430\",\"origin\":\"Custom Widgets\",\"qtype\":\"rememberq\",\"question\":\"What named slot contains the body of a custom widget?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20240929202944408\":{\"title\":\"Ta:20240929202944408\",\"answer\":\"`\\\\widget $italicize.text() //<$slot $name=\\\"ts-raw\\\" />//`\",\"created\":\"20240929202946793\",\"modified\":\"20240929202946793\",\"origin\":\"Custom Widgets\",\"qtype\":\"rememberq\",\"question\":\"Define a custom widget `$italicize.text` that renders its body in italics.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20240929205625975\":{\"title\":\"Ta:20240929205625975\",\"answer\":\"`$action-log`\",\"created\":\"20240929205627235\",\"modified\":\"20240929205627235\",\"origin\":\"Creating Tiddlers With Predefined Fields\",\"qtype\":\"rememberq\",\"question\":\"What action widget can be used to log the values of variables to your browser console when a button is pressed?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20240929205726683\":{\"title\":\"Ta:20240929205726683\",\"answer\":\"When it is overriding a built-in widget.\",\"created\":\"20240929205727446\",\"modified\":\"20240929205727446\",\"origin\":\"Overriding Built-In Widgets\",\"qtype\":\"rememberq\",\"question\":\"In what case does the name of a custom widget not need to contain a `.`?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20240929205819621\":{\"title\":\"Ta:20240929205819621\",\"answer\":\"TiddlyWiki will instead use the definition of the newly created, overriding widget, and get stuck in an infinite loop.\",\"created\":\"20240929205820463\",\"modified\":\"20240929205820463\",\"origin\":\"Overriding Built-In Widgets\",\"qtype\":\"rememberq\",\"question\":\"Why can we not add extra behavior to a built-in widget by simply using that widget within an overriding custom widget?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20240929205834451\":{\"title\":\"Ta:20240929205834451\",\"answer\":\"The `$genesis` widget.\",\"created\":\"20240929205835644\",\"modified\":\"20240929205835644\",\"origin\":\"Overriding Built-In Widgets\",\"qtype\":\"rememberq\",\"question\":\"What widget allows us to call the original (not overridden) version of a widget we are overriding?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20240929205952443\":{\"title\":\"Ta:20240929205952443\",\"answer\":\"If you override a built-in widget with a broken version globally, it may make it difficult or impossible to edit the tiddler again and undo the changes.\",\"created\":\"20240929205956237\",\"modified\":\"20240929205956237\",\"origin\":\"Overriding Built-In Widgets\",\"qtype\":\"rememberq\",\"question\":\"When overriding a built-in widget, why should you start by scoping your override to a single tiddler?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20240929211458797\":{\"title\":\"Ta:20240929211458797\",\"answer\":\"Having it be a function allows it to be fully called as the attribute of a widget, since the first wikification of a function causes the entire filter expression to be evaluated. If it were a procedure, it would be passed in to the widget attribute as the literal macro call syntax `<<now ...>>`, rather than the current time.\",\"created\":\"20240929211500356\",\"modified\":\"20240929211501942\",\"origin\":\"Working with Dates\",\"qtype\":\"rememberq\",\"question\":\"Why is this potentially more useful written as a function than as a procedure?  `\\\\function now-timestamp() [<now [UTC]YYYY0MM0DD0hh0mm0ssXXX>]`\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20240929211649615\":{\"title\":\"Ta:20240929211649615\",\"answer\":\"`data-tiddler-title` and `data-tags`.\",\"created\":\"20240929211702232\",\"modified\":\"20240929211702232\",\"origin\":\"Stylesheets\",\"qtype\":\"rememberq\",\"question\":\"What two data attributes does TiddlyWiki add to the HTML elements of tiddlers rendered in the story river?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20240929211734391\":{\"title\":\"Ta:20240929211734391\",\"answer\":\"You can use an attribute selector on the `data-tags` data attribute to target your CSS rules to only these tiddlers.\",\"created\":\"20240929211735796\",\"modified\":\"20240929211735796\",\"origin\":\"Stylesheets\",\"qtype\":\"rememberq\",\"question\":\"What mechanism can you use to style tiddlers with a particular tag differently from others?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20240929214906971\":{\"title\":\"Ta:20240929214906971\",\"answer\":\"The `$log` widget.\",\"created\":\"20240929214908252\",\"modified\":\"20240929214908252\",\"origin\":\"When Things Go Wrong\",\"qtype\":\"rememberq\",\"question\":\"What widget can you use to assist with displaying the values of variables in the middle of complicated wikitext?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20240929214935650\":{\"title\":\"Ta:20240929214935650\",\"answer\":\"Any number of arbitrarily named parameters, each with (typically) a variable as its value.\",\"created\":\"20240929214936814\",\"modified\":\"20240929214936814\",\"origin\":\"When Things Go Wrong\",\"qtype\":\"rememberq\",\"question\":\"What parameters does the `$log` widget take?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20240930021427548\":{\"title\":\"Ta:20240930021427548\",\"answer\":\"`<$macrocall $name=\\\"mymacro\\\" param1=\\\"value1\\\"/>`\",\"created\":\"20240930021430383\",\"modified\":\"20240930021430383\",\"origin\":\"Macros\",\"qtype\":\"rememberq\",\"question\":\"How would you use the old `$macrocall` syntax to call a macro named `mymacro` with the parameter `param1=value1`?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20241001120058112\":{\"title\":\"Ta:20241001120058112\",\"answer\":\"Variable or field (no limitations).\",\"created\":\"20241001120059093\",\"modified\":\"20241001120059093\",\"origin\":\"Parameterizing Field Transclusions\",\"qtype\":\"rememberq\",\"question\":\"A slot can be used with what type of transclusion?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20241001123050663\":{\"created\":\"20241001123051664\",\"tags\":\"Takeaway\",\"modified\":\"20241001123051664\",\"title\":\"Ta:20241001123050663\",\"type\":\"text/vnd.tiddlywiki\",\"question\":\"Conditional expressions are based on {filters} (TiddlyWiki concept). \",\"qtype\":\"remembercz\",\"origin\":\"Conditional Expressions\"},\"Ta:20241001123114756\":{\"title\":\"Ta:20241001123114756\",\"created\":\"20241001123115525\",\"modified\":\"20241001123115525\",\"origin\":\"Conditional Expressions\",\"qtype\":\"remembercz\",\"question\":\"A conditional expression is true if its filter returns {at least one result}.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20241001123238034\":{\"title\":\"Ta:20241001123238034\",\"answer\":\"`<% if FILTER %> ... <% endif %>`\",\"created\":\"20241001123238956\",\"modified\":\"20241001123238956\",\"origin\":\"Conditional Expressions\",\"qtype\":\"rememberq\",\"question\":\"What syntax (quasi-HTML tag pair) starts and ends a conditional expression?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20241001123303207\":{\"title\":\"Ta:20241001123303207\",\"created\":\"20241001123304787\",\"modified\":\"20241001123304787\",\"origin\":\"Conditional Expressions\",\"qtype\":\"remembercz\",\"question\":\"TiddlyWiki's formal name for the syntax used by conditional expressions is the {conditional shortcut syntax}.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20241001123425111\":{\"title\":\"Ta:20241001123425111\",\"answer\":\"Placing quotes around the filter expression causes the result to become a constant string and the condition to always be true.\",\"created\":\"20241001123426326\",\"modified\":\"20241013004141333\",\"origin\":\"Conditional Expressions\",\"qtype\":\"rememberq\",\"question\":\"What's wrong with this syntax? `<% if \\\"[<storyTiddler>match[When Pigs Fly]]\\\" %>`\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20241001123501560\":{\"title\":\"Ta:20241001123501560\",\"answer\":\"`<% else %>`\",\"created\":\"20241001123502876\",\"modified\":\"20241001123502876\",\"origin\":\"Conditional Expressions\",\"qtype\":\"rememberq\",\"question\":\"What tag do you add to a conditional expression to render some wikitext only if none of the previous filters returned a result?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20241001123543179\":{\"title\":\"Ta:20241001123543179\",\"answer\":\"`<% elseif FILTER %>`\",\"created\":\"20241001123544171\",\"modified\":\"20241001123544171\",\"origin\":\"Conditional Expressions\",\"qtype\":\"rememberq\",\"question\":\"What tag do you add to a conditional expression to evaluate another filter, only if no previous filter in the set of filters has returned a result?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20241001123813694\":{\"title\":\"Ta:20241001123813694\",\"answer\":\"Tag the tiddler with `$:/tags/Global`.\",\"created\":\"20241001123817609\",\"modified\":\"20241013004255137\",\"origin\":\"Much More Than You Wanted to Know About Scopes\",\"qtype\":\"rememberq\",\"question\":\"How do you make the procedures in a tiddler accessible in every tiddler in the wiki?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20241001123924508\":{\"title\":\"Ta:20241001123924508\",\"created\":\"20241001123925718\",\"modified\":\"20241001123925718\",\"origin\":\"Much More Than You Wanted to Know About Scopes\",\"qtype\":\"remembercz\",\"question\":\"A procedure that is accessible in any tiddler in the wiki is said to be in the {global scope}.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20241001123935437\":{\"title\":\"Ta:20241001123935437\",\"created\":\"20241001123936283\",\"modified\":\"20241001123936283\",\"origin\":\"Much More Than You Wanted to Know About Scopes\",\"qtype\":\"remembercz\",\"question\":\"A procedure that is accessible in only one tiddler is said to be in a {local scope}.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20241001124024011\":{\"title\":\"Ta:20241001124024011\",\"answer\":\"If you inadvertently use the same name in multiple places, you'll end up with a confusing conflict.\",\"created\":\"20241001124027591\",\"modified\":\"20241001124027591\",\"origin\":\"Much More Than You Wanted to Know About Scopes\",\"qtype\":\"rememberq\",\"question\":\"Why not put all names in the global scope?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20241001124231868\":{\"title\":\"Ta:20241001124231868\",\"answer\":\"This makes it far less likely that your names will conflict with someone else's (e.g., a plugin's).\",\"created\":\"20241001124233096\",\"modified\":\"20241001124233096\",\"origin\":\"Much More Than You Wanted to Know About Scopes\",\"qtype\":\"rememberq\",\"question\":\"Why should you consider prefixing names that you put in the global scope with your initials or wiki name?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20241001124251903\":{\"title\":\"Ta:20241001124251903\",\"answer\":\"`.` or `-`, depending on context.\",\"created\":\"20241001124253487\",\"modified\":\"20241001124315977\",\"origin\":\"Much More Than You Wanted to Know About Scopes\",\"qtype\":\"rememberq\",\"question\":\"Which two characters do we often choose to separate name prefixes from the rest of a name in TiddlyWiki?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20241001124357012\":{\"title\":\"Ta:20241001124357012\",\"answer\":\"The inner procedure is only accessible from within the outer procedure, not beyond its boundaries.\",\"created\":\"20241001124357957\",\"modified\":\"20241001124357957\",\"origin\":\"Much More Than You Wanted to Know About Scopes\",\"qtype\":\"rememberq\",\"question\":\"What effect does placing a procedure inside another procedure have on the names made available in the surrounding scope?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20241001124406565\":{\"title\":\"Ta:20241001124406565\",\"created\":\"20241001124407355\",\"modified\":\"20241001124407355\",\"origin\":\"Much More Than You Wanted to Know About Scopes\",\"qtype\":\"remembercz\",\"question\":\"Placing a procedure inside another procedure is called {nesting} procedures.\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20241001124442506\":{\"title\":\"Ta:20241001124442506\",\"answer\":\"The `\\\\end` of each procedure must list the name of the procedure that is ending (e.g., `\\\\end my-procedure`).\",\"created\":\"20241001124443797\",\"modified\":\"20241001124443797\",\"origin\":\"Much More Than You Wanted to Know About Scopes\",\"qtype\":\"rememberq\",\"question\":\"When you nest procedures, what do you have to change in the syntax of your `\\\\procedure` pragmas?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20241001124616839\":{\"title\":\"Ta:20241001124616839\",\"answer\":\"`\\\\import`\",\"created\":\"20241001124617825\",\"modified\":\"20241001124617825\",\"origin\":\"Much More Than You Wanted to Know About Scopes\",\"qtype\":\"rememberq\",\"question\":\"What pragma makes procedures that aren't global accessible in another tiddler?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20241001124645414\":{\"title\":\"Ta:20241001124645414\",\"answer\":\"In the tiddler where you want them to be available, `\\\\import [tag[MyTwProcedures]]`.\",\"created\":\"20241001124646881\",\"modified\":\"20241001124646881\",\"origin\":\"Much More Than You Wanted to Know About Scopes\",\"qtype\":\"rememberq\",\"question\":\"How do you make the procedures in all tiddlers with the tag `MyTwProcedures` available in a particular tiddler?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20241001124730049\":{\"title\":\"Ta:20241001124730049\",\"answer\":\"`$:/tags/Macro`\",\"created\":\"20241001124731051\",\"modified\":\"20241001124731051\",\"origin\":\"Much More Than You Wanted to Know About Scopes\",\"qtype\":\"rememberq\",\"question\":\"What tag was the equivalent of `$:/tags/Global` in older versions of TiddlyWiki, and is still around?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Ta:20241013004053882\":{\"title\":\"Ta:20241013004053882\",\"answer\":\"You can't access them within filters or pass them on to a different procedure or tiddler.\",\"created\":\"20241013004055542\",\"modified\":\"20241013004055542\",\"origin\":\"Parameterizing Field Transclusions\",\"qtype\":\"rememberq\",\"question\":\"What drawback do slots have in terms of flexibility compared to parameters or variables?\",\"tags\":\"Takeaway\",\"type\":\"text/vnd.tiddlywiki\"},\"Tabs\":{\"title\":\"Tabs\",\"created\":\"20200717215952541\",\"description\":\"The `tabs` procedure facilitates compact display of a number of related tiddlers, as in the sidebar of a stock TiddlyWiki.\",\"modified\":\"20241010125935497\",\"parent\":\"More Organizational Tools\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"It's often useful to create a summary or links tiddler that uses tabs to show the contents of some other tiddlers, just like the sidebar does in the default installation of TiddlyWiki. We can easily create new sets of tabs with the built-in `tabs` {{Ltc:TabsProcedure||LieToChildrenTemplate}}.\\n\\nA typical call to the `tabs` procedure looks like this:\\n\\n```html\\n<<tabs tabsList:\\\"foo bar baz\\\" default:\\\"foo\\\">>\\n```\\n\\n`tabsList`, in its simplest incarnation, is just a list of tiddler titles, but it can actually be any filter (recall that a list of tiddler titles is in the same format of [[a series of simple filter runs|Multi-Run Filters]]), which makes it possible to choose what tabs should be shown on the fly. For instance, we can create tabs for all of the basic `Concept`s tagged in this book:\\n\\n{{Sn:ConceptTabs||MagicSnippet}}\\n\\nNow, if we add new concepts to the wiki, they'll immediately show up as new tabs. The `caption` field of each tiddler, if it exists, will be used as the text on the tab; otherwise the title will be used.\\n\\nThe optional `default` parameter, set to the title of one of the tiddlers being made into a tab, chooses which tab starts selected. If you leave it blank, you'll have to click on a tab to see anything expand.\\n\\nThe `tabs` macro has several other optional parameters that are occasionally useful, which you can read about in [[the documentation|https://tiddlywiki.com/#tabs%20Macro]].\\n\\nYou can make tabs show up vertically instead of horizontally, like they do under the ''More'' tab of the sidebar, using the parameter `class:\\\"tc-vertical\\\"`.\\n\\n!! Exercises\\n\\n{{Ex:MeetingsToday||ExerciseTemplate}}\\n{{Ex:ContactTabs||ExerciseTemplate}}\\n{{Ex:FixingContactTabs||ExerciseTemplate}}\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\"},\"Tags\":{\"title\":\"Tags\",\"created\":\"20200530170303661\",\"description\":\"Tags are a special type of link used to categorize tiddlers and arrange them in hierarchies.\",\"modified\":\"20210409020111576\",\"parent\":\"The Shape of TiddlyWiki\",\"tags\":\"Concept Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Forget everything you know about tags for a moment, because TiddlyWiki has a slightly different notion of tags from most tools.\\n\\nTiddlyWiki tags are a way of ''relating two tiddlers''. (You might consider a tag a special kind of [[link|Links]] to another tiddler that's stored in a `tags` [[field|Fields]] instead of the `text` field.) Specifically, the type of relationship expressed by a tag is ''membership''. If I create a tiddler about myself called `Soren` and tag it `Person`, I'm saying that the `Soren` tiddler is a conceptual member of another tiddler called `Person`; or, put another way, “`Soren` is a `Person`.” As with [[traditional links|Links]] in TiddlyWiki, this is a bidirectional relationship and you can search based on that relationship in either direction: `Person` will know that it is //tagging// `Soren`, while `Soren` will know that it is //tagged// `Person`. \\n\\nMaking tagging into a means of relating tiddlers rather than a means of sticking little labels on things dramatically expands the range of things tags can be used for. Traditional tags can only be used for “tag-based” organization -- you can filter your content based on its having or not having a particular tag or set of tags, and that's about it. You can still do this with TiddlyWiki tags, but you can also use them to create more complex structures like multi-level hierarchies -- seemingly the antithesis of traditional tags. If tiddler C is tagged with B, and tiddler B is tagged with A, you have an A > B > C hierarchy. TiddlyWiki provides tools such as [[tables of contents|Creating Hierarchies with a Table of Contents]] for viewing these hierarchies.\\n\\nIn some way, this also just makes sense: if [[everything's a tiddler|Tiddlers]] in TiddlyWiki, why should tags be any different?\\n\\nJust like you can link to a tiddler that doesn't exist yet, you can tag a tiddler with a tiddler that doesn't exist yet. For the more traditional methods of using tags (e.g., filtering tiddlers based on whether they do or do not have a particular tag), you never need to create the tagging tiddler at all -- but you always have the option if you need it, or if you want a convenient place to describe what the tag is used for.\\n\\nIf you look at the top of this section, you can see that its tiddler is tagged <<tag Concept>> and <<tag Section>>. The colored ellipses around the tag names are called ''tag pills'', and if you click on one you will see a list of all tiddlers with that tag. Usually the tagged tiddlers are shown in alphabetical order, but we'll learn later that they can be [[put in any order you like|Ordering Tiddlers]].\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\"},\"TakeAway Help/General Takeaway Functions\":{\"title\":\"TakeAway Help/General Takeaway Functions\",\"caption\":\"General takeaway functions\",\"created\":\"20210101234652033\",\"description\":\"Once you've answered a takeaway for the first time, you'll see several options below it, whether you're seeing the takeaway [[in the text|TakeAway Help/Studying In Text]] (//List// tab), [[in the browser|Takeaway Browser]], or [[in review|TakeAway Help/Reviewing]].\",\"modified\":\"20210407194540991\",\"tags\":\"Fragment\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"{{TakeAway Help/General Takeaway Functions!!description}}\\n\\n* ''next review'' or ''due for review'' (only shown in the text and the browser) -- this indicates when you'll next see the takeaway, or //due for review// if it's time to review it now. See [[Reviewing takeaways|TakeAway Help/Reviewing]] for more information. If the takeaway is due later than tomorrow, you can click //forgot// to tell TakeAway that you've already forgotten the takeaway and would like to see it again right away tomorrow.\\n* ''edit'' -- Open the takeaway's tiddler to edit its text or view its scheduling information.\\n* ''uncollect'' -- If you don't want to see this takeaway at all in review anymore, this option will remove it from review, clear its scheduling history, and put the takeaway back to showing only the question in the text.\\n* ''send feedback'' -- If you think the prompt is unclear or could be improved, click here to send a quick note to the author.\\n* ''help'' -- Open the TakeAway help screen.\\n\\nIn the reviewer and the browser, you'll also notice a link and an ID number in square brackets over on the right. You can click the link to ''return to the section in the text where the takeaway was introduced'', if you need a refresher.\"},\"TakeAway Help/Leeches\":{\"title\":\"TakeAway Help/Leeches\",\"created\":\"20210123182104528\",\"lapses\":\"5\",\"modified\":\"20210407194337860\",\"tags\":\"Fragment\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"''Leeches'' are takeaways that you keep on forgetting. Because you keep forgetting them over and over, they cause frustration and take up a disproportionate amount of your review time. TakeAway will display a banner like this one when it finds a leech:\\n\\n{{||$:/plugins/sobjornstad/TakeAway/LeechBanner}}\\n\\nThe number of times you have to forget a takeaway before this banner appears is called the //leech threshold//. It defaults to 4, but can be adjusted in the [[settings|TakeAway Settings]]. For purposes of leech detection, you're only considered to have “forgotten” a takeaway if you answer something other than “forgot” and then forget it again. That is, pressing “forgot” several days in a row doesn't count as having forgotten the takeaway -- in that case, you never really knew it at all.\\n\\n\\n!! Why leeches happen\\n\\nLeeches are usually a symptom of some other problem, not the problem in themselves:\\n\\n* The takeaway might be worded in a way that's confusing to you (see [[Editing takeaways|TakeAway Help/Editing]]). This could be the result of the author writing the takeaway poorly, or you having a different mental model of the topic or different related knowledge than most other people.\\n* You may not fully understand the topic the takeaway is asking about.\\n* You may be confusing this takeaway with another one (//memory interference//).\\n\\n!! Fixing leeches\\n\\nWhen you see the leech banner, take a moment to see if you can ''identify why you're struggling'', then fix the problem, perhaps by doing some background reading or editing the takeaway text. Click //hide warning// when you've taken care of it. The warning will appear again at each multiple of the leech threshold; by default, this is when you've forgotten the takeaway 8 times, 12 times, 16 times, etc.\\n\\nAnother entirely reasonable option, if you don't believe the information in the takeaway is particularly valuable to you, is to simply ''uncollect it'', preventing it from showing up in reviews again. This will allow you to reallocate your limited study time to material that isn't as frustrating or difficult to retain.\\n\\nFor much more on leeches in spaced-repetition study, check out the article [[Dealing with Leeches|https://controlaltbackspace.org/memory/dealing-with-leeches/]]. The article is focused on Anki, but most of its guidance will apply to TakeAway too.\"},\"Templates and the Current Tiddler\":{\"title\":\"Templates and the Current Tiddler\",\"created\":\"20200530170337337\",\"description\":\"Combining transclusions and manipulation of TiddlyWiki's `currentTiddler` variable gives us //templates//, tiddlers that control the way other tiddlers are displayed.\",\"modified\":\"20241017013949599\",\"parent\":\"Transclusion\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Field transclusions have another useful trick up their sleeve: the option to treat the tiddler being transcluded as a ''template''. A template transclusion, like a normal field transclusion, is a means of reusing content, but it allows the tiddler being transcluded to refer to information {{Ltc:TiddlerDoingTransclusion||LieToChildrenTemplate}}.\\n\\nTo return to the metaphor we began back in [[Slicing Up Content]], templates are a sort of lens or optical apparatus with which to look at a tiddler: still nouns themselves, but ones that can be used to modify the way we see other nouns.\\n\\nBe forewarned that templates are probably somewhat unlike anything you've encountered before, so this section might bend your brain a bit. It's OK if you don't get it the first time around.\\n\\n\\n!! The current tiddler\\n\\nTo understand templates, we have to first understand TiddlyWiki's unexpectedly complex concept of the ''current tiddler''. We casually referred to the current tiddler in the [[Field Transclusions]] section when talking about the syntax `{{!!field}}`, and you probably assumed that the “current” tiddler is the one that you're typing the transclusion into. And in many cases, such as in several of the exercises in that section, it is. But it turns out there's a bit more to it.\\n\\nAn {{Ltc:CurrentTiddlerDefinition||LieToChildrenTemplate}} is straightforward: it's just ''the tiddler that's named in the value of the `<<currentTiddler>>` [[variable|Variables]]''. However, the current tiddler is much more interesting than your average variable, because references to this variable are deeply embedded into the syntax and inner workings of TiddlyWiki.\\n\\nHere are some places you can ''access the current tiddler'':\\n\\n* Via the `<<currentTiddler>>` variable.\\n* In a field transclusion that does not name any tiddler. `{{!!field}}` refers to the `field` field of the current tiddler, as noted in [[Field Transclusions]].\\n* Via the `all[current]` [[filter step|Common Filter Operators]].\\n* Many [[widgets|Widgets]] assume the tiddler to operate on is the current tiddler unless you say otherwise.\\n\\nHere are some things that ''change the current tiddler'':\\n\\n* Transcluding another tiddler with the `{{curly braces}}` syntax.\\n* Using a `$list` widget to enumerate the outputs of a filter ([[unless you specify otherwise|Ex:ContainingCurrentTiddler/answer]]).\\n* Directly setting `currentTiddler` with a `$set` or `$let` widget.\\n* Using a `$tiddler` widget to change the current tiddler.\\n\\nFor completeness, here are some things that ''//don't// change the current tiddler'' that people often guess would change it:\\n\\n* Transcluding another tiddler with a `$transclude` widget.\\n* Transcluding another tiddler with the `{{||piped curly braces}}` syntax (this syntax will be described in detail later in the section).\\n* Transcluding the contents of a tiddler as a [[tab|Tabs]].\\n\\nWhen you are looking at a tiddler `X` directly in the story river and haven't done anything in that tiddler's wikitext to change the current tiddler, the current tiddler is `X`. It's when you start using widgets and transclusions within tiddler `X` that it gets complicated -- or if the tiddler `X` is not displayed directly within the story river but is instead transcluded within another tiddler `Y`.\\n\\n\\n!! The current tiddler changes when transcluding a tiddler\\n\\nLet's take a closer look at what happens when we ''transclude a tiddler''. Think back to the [[first exercise|Ex:JaneDataTransclusion]] in the [[Field Transclusions]] section, the one in which we made Jane's contact information appear on the `JaneDoe` tiddler by adding a bunch of transclusions like `{{!!email}}` and `{{!!family}}` to the `JaneDoe` tiddler:\\n\\n```html\\n!! Information about Jane\\n\\n* ''Email'': {{!!email}}\\n* ''Phone'': {{!!phone}}\\n* ''Family'': {{!!family}}\\n* ''Manager'': {{!!manager}}\\n```\\n\\nThese field references referred to the `JaneDoe` tiddler, since they were in `JaneDoe`, we hadn't done anything in the `JaneDoe` tiddler to change the current tiddler, and we were looking at the `JaneDoe` tiddler directly in the story river at the time.\\n\\nEasy enough, right? Now let's think about what happens when we transclude Jane's tiddler in another tiddler called `AllContacts`. (If you want, you can go try this in your wiki right now.) If we're looking at `AllContacts`, we definitely don't want the current tiddler to be `AllContacts` while rendering the content of the `JaneDoe` tiddler -- if it were, we wouldn't be able to see any of Jane's contact information, because we referred to it with, e.g., `{{!!phone}}`, and the `AllContacts` tiddler doesn't have a `phone` field, much less one containing Jane's phone number.\\n\\nFor this reason, anytime we transclude a field of a tiddler using the `{{braces syntax}}`, the current tiddler is ''changed to the tiddler we're transcluding'', the contents of the field are processed, and then the current tiddler is changed back. You can imagine that TiddlyWiki does something like this:\\n\\n```html\\n<$let currentTiddler=\\\"JaneDoe\\\">\\n  {{JaneDoe}}\\n</$let>\\n```\\n\\nIn reality, of course, you don't have to put the `$let` widget there yourself, it just happens when you say `{{JaneDoe}}`.\\n\\n\\n!! When the current tiddler shouldn't change\\n\\nIt gets more complicated, because while resetting the current tiddler like this makes sense as a default and is often exactly what you want, there are other occasions on which it proves unhelpful.\\n\\nGoing back to the exercise, we did a nice job of displaying Jane's contact information on //Jane's// tiddler…but what about every other contact's tiddler? If we want the contact fields to appear on every contact's tiddler, the most obvious way would be to copy and paste the same list of information and field references to every contact tiddler, but that sounds pretty annoying. This sounds like an ideal place to use transclusion, which lets us include the same content in many different tiddlers without repeating the content.\\n\\nLet's try this, then: let's excise the “Information about Jane” section we created above from her tiddler (if you've forgotten, there is a button on the editor toolbar to do this, or you can press Ctrl+E). Call the excised tiddler `ContactInformationTemplate`, and replace it with a transclusion; `{{ContactInformationTemplate}}` should appear in the wikitext of `JaneDoe`.\\n\\nNice. But wait…none of the information is showing up now. Did you catch why?\\n\\n<$details summary=\\\"Answer\\\">\\nWhen we transclude the `ContactInformationTemplate` into `JaneDoe`, the current tiddler is changed to `ContactInformationTemplate`, which means we don't have access to the fields on `JaneDoe` anymore. We could get around this by changing the transclusions on the `ContactInformationTemplate` to look like, e.g., `{{JaneDoe!!phone}}`, but then this `ContactInformationTemplate` tiddler could only be used with the `JaneDoe` tiddler -- and being able to reuse the `ContactInformationTemplate` tiddler was the entire point of extracting it into a separate tiddler.\\n</$details>\\n\\nSuddenly the behavior that looked nice just a moment ago is exactly what we don't want!\\n\\n\\n!! Transcluding a tiddler through a template\\n\\nTo make the `ContactInformationTemplate` work the way we want, we need a way of //not// changing the current tiddler during a field transclusion, or, more generally, making the current tiddler a tiddler of our choice during the transclusion.\\n\\nThis is called ''transcluding a tiddler through a template''. The syntax is `{{tiddler||template}}`. So here it would be:\\n\\n```html\\n{{JaneDoe||ContactInformationTemplate}}\\n```\\n\\nAdd that in the `JaneDoe` tiddler in place of plain `{{ContactInformationTemplate}}`, and you should immediately see Jane's information show up again, because we told TiddlyWiki to transclude `ContactInformationTemplate`, but to make the current tiddler during the transclusion be `JaneDoe`, rather than `ContactInformationTemplate`. Sweet!\\n\\nThere's a shorter and more flexible way to write this. Just like we can write `{{!!field}}` to transclude the `field` field of the current tiddler, we can write `{{||template}}` to transclude the current tiddler through `template` (i.e., not change the current tiddler at all while transcluding `template`). So here we can just say:\\n\\n```html\\n{{||ContactInformationTemplate}}\\n```\\n\\nIn this case, we could also simply use the `$transclude` widget, which does not change the current tiddler. The above syntax is equivalent to:\\n\\n```html\\n<$transclude $tiddler=\\\"ContactInformationTemplate\\\"/>\\n```\\n\\n(If you want to use the `$transclude` widget rather than braces but you //do// want to change the current tiddler, you can set the `currentTiddler` variable yourself around the `$transclude` widget. The idiomatic way to do this is with the `$tiddler` widget, like `<$tiddler tiddler=\\\"NewCurrentTiddler\\\">`.)\\n\\n\\n!! How to think about templates\\n\\n`{{tiddler||template}}`, and the concept of “transcluding a tiddler through a template,” ''feels backwards'' to many people at first. This operation actually transcludes the //template//, giving it access to the fields of the tiddler; our intuitive notion of transcluding a tiddler seems rather to suggest that the //tiddler// should be transcluded with reference to the information in the template. A good way to read `{{tiddler||template}}` is “Put the contents of //template// right here, but as you're deciding what //template// looks like, the current tiddler is //tiddler//, not //template//.”\\n\\nIt's important to remember that, since [[everything's a tiddler|Tiddlers]], ''a template is not really a thing in itself''. That is, unlike in many other similar tools, your TiddlyWiki is not separated into two distinct categories of content, tiddlers and templates. Rather, when you transclude a tiddler through a template, you are using a particular tiddler //as// a template, to display the content in the other tiddler. A tiddler can be used as a template in one place, and as an ordinary content tiddler with a link to it, or for that matter as a tag, in another. In fact, in many cases, transclusion will have exactly the same effect whether the transcluded tiddler is treated as a template or not. For instance, `{{EmployeeProfileSetupMeeting}}`, `{{||EmployeeProfileSetupMeeting}}`, and `{{JaneDoe||EmployeeProfileSetupMeeting}}` should all do the same thing if you try them: the contents of the `EmployeeProfileSetupMeeting` tiddler appears. That's because the `EmployeeProfileSetupMeeting` tiddler doesn't contain any references that depend on the current tiddler, such as `{{!!field transclusions}}`.\\n\\nLook out as you move forward: the syntax for templates uses two consecutive pipe characters (`||`). In [[Parameterizing Field Transclusions]], we'll see that a single pipe within a field transclusion does something entirely different! (And don't confuse either with a single pipe in a [[link|Links]], which separates the tiddler name or URL from its text.)\\n\\n\\n!! When is an error not an error?\\n\\nWhen it's displayed on a tiddler you intend to use as a template.\\n\\nSince templates are usually written expecting the current tiddler to be some other tiddler -- not the template tiddler itself -- when you look at a template tiddler directly, it may look pretty funny. For instance, there will likely be some data missing. The formatting may even be incorrect, or TiddlyWiki may show an outright error (e.g., a //Recursive transclusion error//). This should not worry you. In general, the only way to know if a template tiddler is written correctly is to actually use it as a template and see if the expected output appears there.\\n\\n\\n!! Exercises\\n\\n!!! On the current tiddler\\n\\n{{Ex:CurrentTiddlerAndListWidget||ExerciseTemplate}}\\n{{Ex:MeetingListWithoutCurrentTiddler||ExerciseTemplate}}\\n{{Ex:ContainingCurrentTiddler||ExerciseTemplate}}\\n{{Ex:MethodsOfTransclusion||ExerciseTemplate}}\\n{{Ex:TranscludedProcedureScope||ExerciseTemplate}}\\n\\n!!! On templates\\n\\n{{Ex:AddContactTemplates||ExerciseTemplate}}\\n{{Ex:CreateMeetingTemplate||ExerciseTemplate}}\\n{{Ex:TicketTrackingTemplate||ExerciseTemplate}}\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\\n\"},\"The Finer Points of Procedures\":{\"title\":\"The Finer Points of Procedures\",\"created\":\"20240727195829171\",\"description\":\"Procedures come in many forms.\",\"modified\":\"20241010130147339\",\"parent\":\"Transclusion\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"We just skimmed the surface of procedures in the previous section, and you may be left with quite a few questions. Let's try to tackle some of the most important ones.\\n\\n{{$:/plugins/sobjornstad/TakeAway/ContextualHelp/DetailsWidget}}\\n\\n<$details summary=\\\"Procedures have scope\\\">\\n\\nIn the [[Variables]] section, we learned that after the closing `</$set>` or `</$let>` tag, a variable goes out of scope and is no longer available for use. So you might wonder, what's the scope of a procedure?\\n\\nThe answer is, generally, the procedure is available until the end of the tiddler. It's also possible to define //global procedures// -- ones that you can use across any tiddler in your wiki. We'll discuss how to do that in [[Much More Than You Wanted to Know About Scopes]], next chapter.\\n\\n</$details><$details summary=\\\"Procedures can have zero parameters\\\">\\n\\nIt's possible, and even common, to have a procedure with //no// parameters, which is just a different way of writing a variable scoped to the entire tiddler. For instance, this is equivalent to the example of the corporate disclaimer previously discussed in the [[Variables]] section:\\n\\n{{Sn:ParameterlessProcedure||MagicSnippet}}\\n\\n\\n</$details><$details summary=\\\"Procedures can have multiple parameters\\\">\\n\\nLet's come back to our good old `wikipediaLink` procedure again. Let's say we want the user to be able to specify the text as well as the article we're linking to. Here's how we can do that:\\n\\n{{Sn:MultipleParameterProcedure||MagicSnippet}}\\n\\nNote that parameters are separated by a space in the procedure call but by a comma in the procedure definition. No, this doesn't really make any sense, but a lot of programming languages do it this way too.\\n\\nAlso notice the use of \\\"double quotation marks\\\" when a parameter contains spaces.\\n\\n\\n</$details><$details summary=\\\"Procedures can be called with parameters containing double quotes\\\">\\n\\nA moment ago, we saw that you can include spaces in a parameter by surrounding it with double quotes. But what happens when the parameter itself contains double quotes? Uh-oh:\\n\\n{{Sn:QuoteWithinQuotesProcedure||MagicSnippet}}\\n\\nIn this case, we can use //tripled// double quotes (colloquially called //triple quotes//) to mark the start and end of the parameter:\\n\\n{{Sn:TripleDoublesProcedure||MagicSnippet}}\\n\\nThis trick works elsewhere in TiddlyWiki as well, if you ever find yourself needing to quote something that contains quotes.\\n\\nIt's also possible to use 'single quotes' / apostrophes in place of double quotes, if you don't use any inside the parameter text. But since it's common to have apostrophes in text, while triple quotes are virtually never found inside text, triple quotes are a more generally useful tactic.\\n\\n</$details><$details summary=\\\"Procedures can be called with parameter names\\\">\\n\\nIf we don't like the order that the procedure parameters are specified in, or there are a lot of parameters and it's hard to remember what order they come in, we can list the parameters by name. If we do this, the order becomes unimportant.\\n\\n{{Sn:ProcedureParameterNames||MagicSnippet}}\\n\\nSometimes this is called using ''named parameters'', in contrast to using //positional parameters//.\\n\\nA space may optionally be added after the colon `:`, but most people find it easier to read without a space.\\n\\n\\n</$details><$details summary=\\\"Procedures can have optional parameters\\\">\\n\\nWhen defining a procedure, we can specify a default value for a parameter by writing it after the parameter name and a colon. Then we only need to provide a value in the procedure call if we don't want to use the default.\\n\\n{{Sn:DefaultProcedureParameterValues||MagicSnippet}}\\n\\nAgain, a space may optionally be added after the colon.\\n\\n</$details><$details summary=\\\"Procedures can be defined on a single line\\\">\\n\\nYou can place short procedures whose bodies need only one line on the same line as the `\\\\procedure` pragma and omit the `\\\\end`:\\n\\n{{Sn:SingleLineProcedure||MagicSnippet}}\\n\\n\\n</$details><$details summary=\\\"Procedures can be called using a $transclude widget\\\">\\n\\nIn addition to the handy `<<double angle bracket>>` syntax, it's possible to call a procedure using the `$transclude` [[widget|Widgets]]. As we discussed in the widgets section, this is a common pattern in TiddlyWiki: anything you can do with convenient wikitext syntax can also be done with HTML tags or widgets, and those forms may offer some additional options for advanced use.\\n\\nHere's how we could create our aardvark link with a widget:\\n\\n{{Sn:SimpleProcedureCallWidget||MagicSnippet}}\\n\\nNotice the dollar sign in front of `$variable`, which is easily missed. (It's there so that your procedure can have parameters with any names, including `variable`, without conflicting.)\\n\\n</$details><$details summary=\\\"The $transclude widget can take variables as parameters\\\">\\n\\nFrom the above, it was probably not immediately obvious why you would ever want to write out a procedure call the long way with a widget. Here's the main reason why: you can //transclude other things// into the parameters of the procedure. For instance, maybe we want to link to a few different Wikipedia pages, but use the same link name:\\n\\n{{Sn:TranscludedProcedureCallWidget||MagicSnippet}}\\n\\n</$details>\\n\\n\\n!! Exercises\\n\\n{{Ex:TicketTrackingLink||ExerciseTemplate}}\\n{{Ex:ReversedOptionalParameters||ExerciseTemplate}}\\n{{Ex:QuotedProcedureCall||ExerciseTemplate}}\\n{{Ex:UnclosedProcedureCall||ExerciseTemplate}}\\n\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\"},\"The Shape of TiddlyWiki\":{\"title\":\"The Shape of TiddlyWiki\",\"caption\":\"1: The Shape of TiddlyWiki\",\"created\":\"20200603023507957\",\"description\":\"In which we download and install TiddlyWiki, learn the basics of TiddlyWiki's data model, and begin creating some tiddlers in a sample wiki.\",\"list\":\"[[Installing TiddlyWiki]] [[Downloading Grok TiddlyWiki]] [[The TiddlyWiki Interface]] [[Tweaking Your Settings]] Tiddlers Fields Wikitext Links Tags [[Requirements for the Sample Wiki]] [[Structuring Our Wiki]] [[Journal Tiddlers]] [[Contact Tiddlers]] [[Meeting Tiddlers]] [[Project Tiddlers]] [[Knowledge Tiddlers]] [[Reviewing the Basics]]\",\"modified\":\"20240907020404246\",\"parent\":\"Outline\",\"tags\":\"Chapter\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Welcome to TiddlyWiki! This first chapter will help you get your bearings. At the end of it, you will have a fully functional and useful sample wiki; it just won't take advantage of many of the features that [[make TiddlyWiki special|Why TiddlyWiki?]].\\n\\nThe chapter has three phases:\\n\\n# First, we'll ''set up a sample wiki'' for use in the rest of the book, by [[installing TiddlyWiki|Installing TiddlyWiki]], [[downloading a copy of this book|Downloading Grok TiddlyWiki]], [[exploring the TiddlyWiki interface|The TiddlyWiki Interface]], and [[tweaking settings|Tweaking Your Settings]].\\n# Second, we'll learn about ''five basic concepts'' in TiddlyWiki: [[tiddlers|Tiddlers]], [[fields|Fields]], [[wikitext|Wikitext]], [[links|Links]], and [[tags|Tags]].\\n# Last, we'll go through a ''seven-section tutorial'' to set up the basic structure of the sample wiki, [[gathering requirements|Requirements for the Sample Wiki]], [[outlining the structure of the wiki|Structuring Our Wiki]], and then creating [[journal entries|Journal Tiddlers]], [[contacts|Contact Tiddlers]], [[meeting notes|Meeting Tiddlers]], [[projects|Project Tiddlers]], and [[miscellaneous notes|Knowledge Tiddlers]] in accordance with the requirements and structure. Along the way, you'll learn how to navigate TiddlyWiki's interface, use the basic features of [[wikitext|Wikitext]], and model data in TiddlyWiki.\\n\\nThis chapter will be unusual in that it will include few exercises. Instead, you'll be working nonstop in your sample wiki as you read. Once we move into chapter 2, we'll switch to discussing some concepts and then turning you loose to try them out on your own.\\n\\nIf you haven't yet read [[How to Use This Book]] or watched the video tour there, you may wish to do so now. If you're feeling impatient, you can figure out how it works as you go along and return to that section later if needed.\\n\\n!! In this chapter\\n\\n{{||ChapterOutlineTemplate}}\"},\"The TiddlyWiki Interface\":{\"title\":\"The TiddlyWiki Interface\",\"created\":\"20201125202250940\",\"description\":\"Study an annotated screenshot of TiddlyWiki's interface to help you put names to what you're seeing.\",\"modified\":\"20241013021015117\",\"parent\":\"The Shape of TiddlyWiki\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Let's take a quick look at the interface of a brand-new TiddlyWiki, in annotated form:\\n\\n<$link to=\\\"interface.png\\\">{{interface.png}}</$link>\\n\\nBefore we get started, it's worth pointing out that the interface of TiddlyWiki is highly customizable and extensible, as we will learn in <<gtw.link-chapter-number \\\"Looking Under the Hood\\\">>, [[Looking Under the Hood]]. If you carefully compare the screenshot above to the interface of //Grok TiddlyWiki//, you'll notice some differences -- for instance, many toolbars will have a different set of buttons, and the tabs in the sidebar will be different. The interface described in this section and in the remainder of the book is that of a stock `empty.html` TiddlyWiki downloaded from https://tiddlywiki.com, except where we change it during the course of the exercises. To avoid confusion, use the example wiki you created in [[Installing TiddlyWiki]] anytime you want to study the interface or see how TiddlyWiki behaves by default.\\n\\nWith that out of the way, take a look at the screenshot again. You can see that the screen is divided into two parts, the ''story river'' (red highlight) and the ''sidebar'' (magenta highlight). If your screen is too narrow to show both side-by-side (for instance, if you're viewing the wiki on a smartphone), the sidebar will come at the top of the page and the story river below it.\\n\\nThe story river shows the tiddlers which are currently open. We'll talk more about [[tiddlers|Tiddlers]] and their function in a moment; for now, just think of them as containers for the content of your wiki, like files or sheets of paper. When you open a new tiddler, it gets a new “card” over in the story river and leaves existing tiddlers open, so you can easily work with several tiddlers at once. The toolbar in the upper-right corner of each tiddler (the ''view toolbar'') lets you edit it, close it, delete it, get a link to it, collapse it, and so on.\\n\\nThe sidebar allows you to navigate to tiddlers that you don't have open and take various system actions. The toolbar at the top-right (the ''page toolbar'') lets you create new tiddlers, adjust options, and save your wiki by default, but it's possible to customize what buttons show up here. Then there is a fast full-text search for all tiddlers in the wiki; we'll discuss this in the [[Searching]] section. Last come four tabs which contain the majority of the sidebar's functionality:\\n\\n; Open\\n: A concise list of the tiddlers in the story river, useful if you have a ton of them open at once or you want to reorder them (just drag and drop).\\n; Recent\\n: A list of tiddlers you've changed recently.\\n; Tools\\n: A list of system actions like importing content, advanced search, changing the colors, and so on. You can place the tools you use most frequently on the page toolbar by checking or unchecking the box next to each tool.\\n; More\\n: A variety of other ways to find tiddlers, which we'll discuss in detail in [[Browsing Your Tiddlers]].\\n\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\\n\"},\"The View Template\":{\"title\":\"The View Template\",\"created\":\"20200718024513554\",\"description\":\"The ViewTemplate is a special template TiddlyWiki uses internally to render each story in the story river; you can customize it to add custom content to all tiddlers or a subset of tiddlers.\",\"modified\":\"20240926004421049\",\"parent\":\"Looking Under the Hood\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"So far, every time we have created a template to display some fields or other useful information about a tiddler, we have had to manually say in each tiddler that we wanted to display that template. For instance, in [[Ex:AddContactTemplates]], you added a `{{||ContactInformationTemplate}}` to every contact in your wiki. This is convenient when we only want to display the template in a few tiddlers, perhaps in different places, but if we want it at the start or end of every tiddler that matches some obvious criteria, it is boring, error-prone, and a waste of time. Let's look at a better way.\\n\\n!! Understanding the ViewTemplate\\n\\nSpeaking of templates, every time TiddlyWiki displays a tiddler in the story river, it uses a template to do so. There are two important templates for this purpose, the ViewTemplate and the EditTemplate. The ''ViewTemplate'' controls what displays when the tiddler is viewed, and the ''EditTemplate'' controls what displays after you click the edit button. Let's look at the ViewTemplate; the EditTemplate will work very similarly.\\n\\nIf you open up and edit $:/core/ui/ViewTemplate, you'll see something of a hornet's nest of filters. If you look closely at the end, though, you'll spot this bit:\\n\\n```html\\n<$list filter=\\\"[all[shadows+tiddlers]tag[$:/tags/ViewTemplate]!has[draft.of]]\\\" variable=\\\"listItem\\\">\\n  <$transclude tiddler=<<listItem>>/>\\n</$list>\\n```\\n\\nThis is beautiful, because it means most of the time we need not edit the ViewTemplate itself (and thus have to override a complicated shadow tiddler that could change in a future version of TiddlyWiki). Instead, we merely have to ''adjust the individual tiddlers'' tagged with `$:/tags/ViewTemplate` which define parts of the interface. Go ahead and find that tag in the ''Explorer'' and open it up. You'll see that it has a `list` field, to place the interface elements which appear when rendering a tiddler in a certain order (see [[Ordering Tiddlers]]). In a default installation as of TiddlyWiki 5.3.5, the list looks like this:\\n\\n* $:/core/ui/ViewTemplate/title\\n* $:/core/ui/ViewTemplate/unfold\\n* $:/core/ui/ViewTemplate/subtitle\\n* $:/core/ui/ViewTemplate/tags\\n* $:/core/ui/ViewTemplate/classic\\n* $:/core/ui/ViewTemplate/body\\n\\nWhat we need to do is define our own view tiddler and sneak it into the list wherever we want to display it. We can then transclude the `ContactInformationTemplate` within that view tiddler. (We could also simply tag the `ContactInformationTemplate` itself with `$:/tags/ViewTemplate`, but this would be less flexible, as we'll see in a moment.)\\n\\n!! Adding to the ViewTemplate\\n\\nLet's call our new tiddler `$:/yourname/TiddlerTypeTemplates/Contact`; this will leave space for us to add similar templates for other types of tiddlers. Drop in `{{||ContactInformationTemplate}}` there, add the `$:/tags/ViewTemplate` tag, remove `{{||ContactInformationTemplate}}` from all your contacts so the information isn't displayed twice, and you should be set.\\n\\nActually, there are two small problems. The first is that instead of a header `Information about JaneDoe`, the double exclamation point is ''literally appearing on each tiddler''. This is because the transclusion is starting in [[inline mode|Block Mode and Inline Mode]]. Unfortunately, this can be tricky to fix; I find the easiest way is begin with a block-level HTML element instead of wikitext, so here change the `!! title` to `<h2>title</h2>`. In this case, there's no way TiddlyWiki can parse it wrong; an `<h2>` simply cannot be an inline element, whereas `!!` can be since it could be part of some running text.\\n\\nThe second is that our contact information is now appearing ''even on tiddlers that aren't contacts''! Oops. Fixing this part is left as an exercise.\\n\\n!! Exercises\\n\\n{{Ex:ContactsOnlyOnContacts||ExerciseTemplate}}\\n{{Ex:MoveContactInformation||ExerciseTemplate}}\\n{{Ex:MeetingInformation||ExerciseTemplate}}\\n{{Ex:EditTemplateInformation||ExerciseTemplate}}\\n{{Ex:DontOverrideViewTemplateTag||ExerciseTemplate}}\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\"},\"Tiddler Titles\":{\"title\":\"Tiddler Titles\",\"created\":\"20200603023508383\",\"description\":\"Carefully naming tiddlers and concepts has many benefits, but is often more art than science.\",\"modified\":\"20241014125221373\",\"parent\":\"Filing and Organizing\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"In the [[basic searching|Searching]] section, we mentioned that it was a good idea to include the keywords you're likely to search for in the titles of your tiddlers. So far I've just been giving you titles, so let's talk a bit more about what makes a good tiddler title.\\n\\n\\n!! The obvious\\n\\nSometimes your titles are going to be ''obvious''. For instance, in creating our [[contact tiddlers|Contact Tiddlers]], we made the tiddler titles the person's name. For the Employee Information System, which was a software application, the title was the name of the application. If you're creating a tiddler for something that already //has// a name, then you're probably in pretty decent shape just using that as a name.\\n\\nThere's one exception to that rule: if the name is ambiguous. For instance, if you're creating a tiddler for the technology company Apple, calling your tiddler simply `Apple` could be problematic: are you talking about the company, the [[original computer|https://en.wikipedia.org/wiki/Apple_I]] the company made, the fruit, the [[record label|https://en.wikipedia.org/wiki/Apple_Records]], or something else entirely? If your wiki focuses entirely on music or food, you're probably fine, but otherwise you might want to add an extra word or two to disambiguate.\\n\\n\\n!! Titles for knowledge tiddlers\\n\\nIn many cases, though, we want to create tiddlers that don't have a specific named thing associated with them. For instance, the [[project for our onboarding|Project Tiddlers]] probably does not have an official corporate name, nor does the [[meeting|Meeting Tiddlers]] at which Jane showed us how to use the information system, nor will a tiddler we create describing a new insight we came up with that might help us improve our process.\\n\\nWriting titles is tricky, as anyone who's stared at a blank sheet of paper or a computer screen trying to figure out what to call their essay or poem or book knows. But there's a great deal of value in getting them right. The popular academic-writing guide //They Say, I Say// describes titles as //metacommentary//, “a way of commenting on your claims and telling readers how and how not to think about them” (p. 127). It goes on to explain:\\n\\n> Thinking of a title as metacommentary can actually help you to develop sharper titles, leading you to write something that gives readers some sense of your argument rather than merely announcing your topic, or that it's an “English Essay” -- or having no title at all. Essays that bear no title send the message that the writer has simply not bothered to reflect on what he or she is saying.\\n\\nOf course, the audience for your wiki may be only yourself. This doesn't get you off the hook, though; as the old adage goes in computer programming, “There are always at least two people involved, you and you six weeks from now.” And having a good title not only makes it easier to find ideas, it actually makes it easier to //think// about ideas: once the tiddler is no longer fresh in your mind, looking at a good title still immediately gives you that “sense of the argument” therein, without having to look into the contents, and when you do look at the contents it frames your initial impression of it.\\n\\nFurther, we can only hold a small amount of information in our short-term memory at a time; if the title is clear enough to help us understand the idea, we can forget everything except the title, leaving us free to use that capacity to relate the title to other things.\\n\\nGiving your idea or note a title is coming up with a name for that thing. For more on the importance of naming things, check out my blog post, [[The Power of Names|https://controlaltbackspace.org/psychology/the-power-of-names/]]. Also, if you're of a technical bent, Andy Matuschak [[describes|https://notes.andymatuschak.org/Evergreen_note_titles_are_like_APIs]] note titles as ''idea APIs'' -- a way of referencing a complicated idea with a simple interface. \\n\\n!! In practice\\n\\nWe just spent the last few paragraphs describing //why// you should create good titles for things without obvious names, but not //how// to do it. The //how// is much more art than science, and it differs somewhat from wiki to wiki, but if you get in the habit of reflecting on what you're writing about as you create a title, you'll get better at choosing titles over time. That said, here are a few suggestions to help guide your experimentation:\\n\\n* Make sure that your tiddlers are really focused on a ''single idea''. If you have multiple ideas, you should have multiple tiddlers. This is an important skill to develop to get the most out of TiddlyWiki in general, but it's also quite helpful in producing titles. Scoping the title appropriately may make it easier to figure out what content goes in the tiddler, and vice versa.\\n* If a noun phrase (e.g., “Good keyboards” or “Benefits of using a good keyboard”) doesn't seem like it would describe the idea in the tiddler with sufficient precision, try ''making a claim'' instead (e.g., “Using a good keyboard makes injury less likely”).\\n* ''Avoid the word “not,”'' and negations in general, when possible; titles that state what is, rather than what is not, are easier to interpret and are less likely to result in overly broad tiddlers.\\n* If there are any ''keywords'' you know you'll be using when searching for this tiddler later, try including them in the title, as we noted in the [[Searching]] section.\\n\\n\\n!! Exercises\\n\\n{{Ex:NamingOldNotes||ExerciseTemplate}}\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\"},\"Tiddlers\":{\"title\":\"Tiddlers\",\"created\":\"20200530170154864\",\"description\":\"Tiddlers are the unit of information in TiddlyWiki.\",\"modified\":\"20241013021525992\",\"parent\":\"The Shape of TiddlyWiki\",\"tags\":\"Section Concept\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Before we start creating our sample wiki, we need to go over a few concepts. I know, theory is boring and you want to get your hands on the software, so I'll just introduce five foundational concepts that we can't do without right now, and we'll fill in the rest as we need them.\\n\\n''Tiddlers'' are the unit of information in TiddlyWiki. If we didn't want to use a weird neologism, we might call tiddlers //notes//, or //cards//, or //records//, or //files//, or //pages//, or //articles//. However, tiddlers aren't quite like any of these things, so the designers concluded a word that doesn't carry any baggage from other information systems would ultimately be less confusing. (A tiddler is a kind of small fish -- thus the logo for //Grok TiddlyWiki//.)\\n\\nFor now, you can think of a tiddler as a 3×5 index card: a blank slate used to store a small amount of information. Even better, think of it as an [[edge-notched card|https://www.youtube.com/watch?v=v8qHPXPnQps]], an index card that can be mechanically sorted based on metadata punched out of the edges of the card. (In the mid-20th century, these were the height of sophistication for the amateur information geek, and they're still pretty cool even in the computer age!) Tiddlers can do much more complicated things than this, however, so in [[Slicing Up Content]] in chapter 2 we'll see a different, more conceptual metaphor which will be more helpful as we continue.\\n\\n<div style=\\\"text-align: center;\\\">\\n<$link to=\\\"edge-notched.jpg\\\">[img width=300 [edge-notched.jpg]]</$link>\\n<div>//A homemade edge-notched card system with vintage sorting needle and notching punch (click to expand). TiddlyWiki eliminates the [[chads|https://en.wikipedia.org/wiki/Chad_(paper)]], but it keeps alive the spirit of small units of information, non-hierarchical thinking, and easy sorting inherent in these systems.//</div>\\n</div>\\n\\nIn TiddlyWiki, ''everything is a tiddler'': content, configuration, plugins, {{Ltc:CoreCodeTiddlers||LieToChildrenTemplate}}. This means you get to use the same set of powerful tools for working with all these things. It's much like Unix's [[everything's a file|https://en.wikipedia.org/wiki/Everything_is_a_file]] philosophy, and it has the same benefits.\\n\\nThe way we slice our content up into tiddlers and relate those tiddlers to each other has a strong influence on both our patterns of thinking and the value of our notes. By slicing content into small, carefully defined tiddlers, we are able to reuse ideas and data in many more contexts than we could if they were organized like traditional notes, which makes not only our notes but also our thoughts more flexible. A substantial portion of the first two chapters will be spent on the question of how to slice up and relate tiddlers.\\n\\nThis section of the book, //Tiddlers//, is an example of a tiddler.\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\\n\"},\"Tips and Tricks\":{\"title\":\"Tips and Tricks\",\"caption\":\"8: Tips and Tricks\",\"created\":\"20210120034644865\",\"description\":\"In which we explore some bonus widgets, tips, tricks, and hacks that will serve you well on the rest of your TiddlyWiki journey.\",\"list\":\"[[Getting the Current Tiddler Right on Drafts]] [[Hiding and Showing Things]] [[Miscellaneous Widgets]] [[Working with Dates]] Qualification\",\"modified\":\"20241013010733962\",\"parent\":\"Outline\",\"tags\":\"Chapter\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"In this chapter, we'll explore a handful of additional widgets and techniques that may be useful on your TiddlyWiki journey.\\n\\n!! In this chapter\\n\\n{{||ChapterOutlineTemplate}}\"},\"Transclusion\":{\"title\":\"Transclusion\",\"caption\":\"4: Transclusion\",\"created\":\"20200603200642700\",\"description\":\"In which we study a variety of ways to write some content in one place and reuse it in many other places, a capability which sounds boring but is in fact incredibly powerful and versatile, setting TiddlyWiki apart from the competition.\",\"list\":\"Variables [[Using Variables as Attributes]] Procedures [[The Finer Points of Procedures]] [[Field Transclusions]] [[Templates and the Current Tiddler]] [[Filters and Transclusions]] [[Parameterizing Field Transclusions]] [[Conditional Expressions]] [[Summary of Transclusion Syntax]]\",\"modified\":\"20241002114116204\",\"parent\":\"Outline\",\"tags\":\"Chapter\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"TiddlyWiki is as powerful and flexible as it is because it allows you to [[slice up content|Slicing Up Content]] into small pieces -- often, but not always, [[Tiddlers]] -- and reuse them in many different contexts. But how do we actually go about reusing tiddlers or other pieces of wikitext in different contexts? So far we've seen that we can [[filter|Filters]] tiddlers into lists, but that's about as far as we've gotten.\\n\\nUltimately, what we need is a way to weave together wikitext from different sources into a single document. That process of including wikitext from other sources in a document is called ''transclusion'', and is the subject of this chapter.\\n\\nFirst, we'll talk about three ways we can transclude content: ''variables'', ''procedures'', and ''field transclusions''. Then we'll go over some more advanced ways to use field transclusions, as well as how transclusions of all kinds integrate with filters. Finally, we'll explore how you can include wikitext only if certain conditions are true, not every time.\\n\\nThis chapter is the core of the book and the core of TiddlyWiki. The features we discuss here, in one form or another, power most of the tools in TiddlyWiki that allow you to avoid repetitive work and customize your wiki to your liking. If you fully understand these three things and the way they integrate with the rest of TiddlyWiki, along with [[filters|Filtering and Formatting]], you'll be able to accomplish almost anything in TiddlyWiki.\\n\\nWhile the concepts in this chapter are, for the most part, not intrinsically complicated, there are a lot of details to internalize, and the way TiddlyWiki does things may be different enough from the way you're used to other apps doing things to be a bit confusing at first. So this chapter is packed with exercises, and it will likely take you somewhat longer than the previous chapters to work through.\\n\\n!! In this chapter\\n\\n{{||ChapterOutlineTemplate}}\"},\"Tweaking Your Settings\":{\"title\":\"Tweaking Your Settings\",\"created\":\"20200530195556288\",\"description\":\"A quick look at some of the TiddlyWiki options you're most likely to want to change.\",\"modified\":\"20241015000158183\",\"parent\":\"The Shape of TiddlyWiki\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"If you've been following along so far, you should be looking at a `GettingStarted` tiddler in your new wiki. Let's take a few minutes to personalize it so you have somewhere comfortable to work while you do the exercises in this book.\\n\\nStart by setting the title and subtitle to something interesting in the `GettingStarted` tiddler. You'll see them change immediately at the top of the sidebar as you do.\\n\\nYou may also wish to click the “retain story ordering” button, if only because this means you don't have to decide what tiddlers to open when you start the wiki. With this option on, anytime you start up the wiki, any tiddlers you had open when you closed it down will be reopened.\\n\\nClose out of `GettingStarted` and click the gear icon <<textual-button \\\"options-button\\\">> on the page toolbar to open the control panel. There are a //lot// of settings available here, and many of them are interesting, but once you get familiar with TiddlyWiki, they are mostly self-explanatory. Thus, we'll look at a handful that will improve our initial experience, and once you've gotten the hang of TiddlyWiki, you can come back and explore the other options.\\n\\n!! Info tab\\n\\n; Animation duration\\n: Maybe I'm just an impatient person, but I find that dragging animations out over 400&nbsp;ms (almost half a second) makes my wiki feel really laggy. If you decrease it too far, though, you'll get vertigo; I find 200--250 is a nice compromise. To test values, create a new tiddler using the add button <<textual-button \\\"new-button\\\">> on the page toolbar, then close the new tiddler with the cancel button <<textual-button \\\"cancel-button\\\">> in its upper-right, and observe the speed and subjective experience of watching it open and close. Rinse and repeat until you find something comfortable.\\n\\n!! Appearance tab\\n\\n; Palette tab\\n: Pick a color scheme you like. I like to give each of my wikis a different one so I can quickly tell them apart if I have several open at once.\\n\\n; Toolbars tab/View Toolbar\\n: Tick the box next to //info//. The info button is really useful, and if it's hidden in the “more” menu when you're starting out, you may not remember it's even there!\\n\\n; Theme Tweaks tab\\n: If you have a large screen, you'll likely want to increase the amount of space allocated to the story river compared to the sidebar, or most of the space on your screen will be wasted. The easiest way is to change //Sidebar layout// to //Fluid story, fixed sidebar//. Unfortunately, this often makes the story river too wide (extremely long lines [[are much harder to read|https://practicaltypography.com/line-length.html]]), so you may want to increase the //Sidebar width// as well to compensate.\\n\\n!! Settings tab\\n\\n; Camel Case Wiki Links\\n: This setting is very divisive! For many years it was on by default; recently it changed to being off by default. With the setting on, text RunTogetherLikeThis will automatically become a link. There are advantages to both choices, and I have the setting on in some wikis and off in others. See the [[CamelCase]] appendix for details. Because I generally like camel-case for personal notes, and because there are a few gotchas with CamelCase that are worth learning about if you want to build a complete understanding of TiddlyWiki, we'll turn it on for our sample wiki.\\n\\nChanging the CamelCase option requires you to ''reload the page'' in your web browser to see the effect, so go ahead and save your wiki and reload the page now.\\n\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\"},\"Updated Summary of Transclusion Syntax\":{\"title\":\"Updated Summary of Transclusion Syntax\",\"created\":\"20240928013458182\",\"description\":\"Review all the syntax used for reusing and relating content in TiddlyWiki.\",\"modified\":\"20241010130015429\",\"parent\":\"Macros, Wikification, and Widgets\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"At the end of chapter 4, we threw together a [[Summary of Transclusion Syntax]]. Since then, we've added functions, macros, and data tiddlers, so there's a little more syntax to add. Here's an updated version.\\n\\nYou can find a condensed version of this section in the [[Wikitext Reference]], which also has some live examples you can play with.\\t\\n\\n{{CommonTransclusionSyntax|second}}\"},\"Upgrade\":{\"title\":\"Upgrade\",\"created\":\"20210407135618740\",\"modified\":\"20241019231514534\",\"tags\":\"Fragment\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"To update an old copy of //Grok TiddlyWiki// to this version without losing your takeaway progress and other customizations, drag the following links into your wiki: <$link to=\\\"$:/plugins/sobjornstad/GrokTiddlyWiki\\\"><$text text={{{ [[Grok TiddlyWiki version ]addsuffix{Metadata##version}] }}}/></$link>; <$link to=\\\"$:/plugins/sobjornstad/TakeAway\\\"><$set name=\\\"ta-version\\\" value={{{ [[$:/plugins/sobjornstad/TakeAway]get[version]] }}}><$text text={{{ [[TakeAway version ]addsuffix<ta-version>] }}}/></$set></$link>; <$link to=\\\"$:/plugins/sobjornstad/TiddlyRemember\\\"><$set name=\\\"tr-version\\\" value={{{ [[$:/plugins/sobjornstad/TiddlyRemember]get[version]] }}}><$text text={{{ [[TiddlyRemember version ]addsuffix<tr-version>] }}}/></$set></$link>. Sections, takeaways, exercises, and any other tiddlers that you have changed will be untouched during an upgrade.\\n\\n''Please note'': If your old wiki is from a //Grok TiddlyWiki// version less than 2.0, you should first ''upgrade its TiddlyWiki version'' at https://tiddlywiki.com/upgrade. The current version of GTW requires a newer version of TiddlyWiki to work than was bundled with those older GTW versions, so your wiki will look broken if you aren't on the latest TiddlyWiki.\"},\"UsHolidays\":{\"title\":\"UsHolidays\",\"text\":\"01/01: New Year's Day\\n07/04: Independence Day\\n10/31: Halloween\\n12/25: Christmas Day\",\"type\":\"application/x-tiddler-dictionary\",\"created\":\"20240924001540519\",\"modified\":\"20240924002517771\",\"tags\":\"\"},\"Useful Plugins\":{\"title\":\"Useful Plugins\",\"created\":\"20201121233242024\",\"description\":\"A collection of particularly essential or interesting community plugins.\",\"modified\":\"20240929215641304\",\"parent\":\"Appendices\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"This section collects some plugins I find particularly useful that you may want to check out as well. There are //many// more out there, and, as we've seen, [[you can write your own|Creating Plugins]].\\n\\n* [[Auto Complete|https://evidentlycube.github.io/TW5-PluginShowcase/#Auto%20Complete]] -- allows custom autocomplete menus while typing in a tiddler's wikitext, populated by filters on things in your wiki\\n* CodeMirror (find in the official plugins repository in //Control Panel > Plugins//) -- improves the text editor embedded in the edit view of TiddlyWiki with things like find-and-replace and keybinding sets to match popular editors like Emacs and Vim.\\n* Highlight (find in the official plugins repository) -- syntax highlighting on code blocks.\\n* KaTeX (find in the official plugins repository) -- insert mathematical notation and formulas between `$$double dollar signs$$` in your wiki.\\n* [[kin filter|https://bimlas.github.io/tw5-kin-filter/]] -- allow finding tagged or linked items anywhere in a multi-level hierarchy. Like `tags[]`, `links[]`, etc., but more powerful.\\n* [[TiddlyTables|http://tiddlytables.tiddlyspot.com]] -- create pretty dynamic, interactive tables with less fussing with HTML\\n* [[Shiraz|https://kookma.github.io/TW-Shiraz/]] -- adds Bootstrap CSS classes to TiddlyWiki for pretty formatting.\\n* [[Relink|https://flibbles.github.io/tw5-relink/]] -- allows updating all references to a tiddler when renaming it; almost essential in large wikis where things change frequently.\\n* [[TiddlyRemember|https://sobjornstad.github.io/TiddlyRemember/]] -- transfer the most important parts of your notes into your brain by writing flashcards in your wiki and syncing them to [[Anki|https://apps.ankiweb.net/]]. The TakeAway tools in this book are built on TiddlyRemember.\\n* [[Date Picker|http://kixam.github.io/TW5-datePicker/]] -- to create fields that allow easily selecting dates and times, rather than manually typing in dates in TiddlyWiki's weird format.\\n\\nThe [[TiddlyWiki Central Plugin Library|https://tiddly-gittly.github.io/TiddlyWiki-CPL/#Index:Index]] is a community attempt to gather unofficial plugins into a convenient location.\\n\\nDavid Gifford's [[TiddlyWiki Toolmap|https://dynalist.io/d/zUP-nIWu2FFoXH-oM7L7d9DM]] and the community [[TiddlyWiki Links Aggregator|https://links.tiddlywiki.org/]] are other brilliant resources for finding plugins and other TiddlyWiki-related tools.\"},\"Using Filter Expressions\":{\"title\":\"Using Filter Expressions\",\"created\":\"20200603023508416\",\"description\":\"Filter expressions, runs, and steps work together to select tiddlers.\",\"modified\":\"20210818203650408\",\"parent\":\"Filtering and Formatting\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"So that's what [[filters|Filters]] //are//…now what do they look like, and how do we use them?\\n\\nFilters, or, more formally, ''filter expressions'', consist of one or more ''filter runs'', which each contain one or more ''filter steps''. For now, we'll only worry about filter expressions containing a single run -- you'll be able to accomplish most basic tasks without needing multiple runs. However, know that individual runs [[can be combined in various ways|Multi-Run Filters]] to form a more complex filter expression, and we'll discuss this further in chapter 5.\\n\\nIf you've ever used any shell language (Bash, MS-DOS, PowerShell, etc.) -- or even if you haven't -- you can think of a filter run as a ''pipeline''. You put a list of tiddlers into the left end of the pipeline; unless you say otherwise, {{Ltc:AllTiddlersInTheLeft||LieToChildrenTemplate}} go in the left end. The tiddlers then pass from left to right through a series of steps in the pipeline. Each step can remove tiddlers from the list that don't match some criteria, generate and output a new list of tiddlers based on the existing list, or ignore the existing list and spit out an entirely new list. The next step then gets to make its own changes to the list output by this step, and so on until we come to the right side of the pipeline and the output of the last step is the result of the filter run.\\n\\nHere are some very simple filter expressions. Each of them has just one run containing one step:\\n\\n* `[title[JaneDoe]]` -- this returns the tiddler `JaneDoe`\\n** This is such a common usage that you can leave out the word `title`, resulting in just `[[JaneDoe]]`.\\n* `[tag[Contact]]` -- this returns all tiddlers tagged `Contact`\\n* `[links[]]` -- this returns all the tiddlers that have been linked to by any tiddler in your wiki\\n\\n\\n!! Trying some filters\\n\\nLet's try using some of these filters. To do so, open Advanced Search <<textual-button \\\"advanced-search-button\\\">>. You can find this option in the ''Tools'' tab in the sidebar or next to the search box, or you can press Ctrl+Shift+A. Then pick the ''Filter'' tab and type in one of the expressions above. You'll see a list of the tiddlers that match.\\n\\nIf you try the last filter listed above, `[links[]]`, you might notice a whole bunch of funny-looking tiddlers show up, with names starting with `$:/`. What's up with those? Those are [[system tiddlers|System Tiddlers]]; they contain configuration settings or bits and pieces of TiddlyWiki itself. If you don't want to see the system tiddlers, add `!is[system]` to the beginning of the filter run to eliminate them (read `!` as //not//). So that will look like `[!is[system]links[]]`.\\n\\nLet's look at that one again: `[!is[system]links[]]`. This run has two steps: first we eliminate all tiddlers that are system tiddlers (alternatively, you could choose to think of it as “keep all tiddlers that are not system tiddlers”), then we look at each of the tiddlers in that reduced list and spit out all of the tiddlers it links to.\\n\\n!! Common mistakes\\n\\nFilter expressions are quite sensitive to minor mistakes in punctuation. Once you've become familiar with the most common mistakes, spotting and fixing them will be trivial, but at first they may be extremely frustrating. These three errors are particularly common:\\n\\n* ''Forgetting the outer set of square brackets'', which define a filter run. Just `tag[Contact]`, for instance, is not a valid filter expression, as it consists of a single filter step, not a complete filter run. If you see the text //Filter error: Missing [ in filter expression// instead of the list of tiddlers you expected, this is likely your problem.\\n* ''Including the opening square bracket but not the closing one''. For some runs, the filter expression may //look// symmetric even if all the brackets haven't been closed yet (for example, `[tag[Contact]`). A useful habit to develop is inserting both the left and the right square bracket whenever you come to a left square bracket, then pressing the left arrow key to put the cursor back between them -- this way, you won't have to remember how many brackets need to be closed.\\n* ''Putting a space between filter steps'', like <code>[!is[system]&nbsp;links[]]</code>. What this actually does is filter on the values of the [[field|Fields]] called ` links` (a space followed by the word //links//). Unless that is actually what you want, leave out the space.\\n\\n!! Exercises\\n\\n{{Ex:CreatingBasicFilters||ExerciseTemplate}}\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\\n\"},\"Using Variables as Attributes\":{\"title\":\"Using Variables as Attributes\",\"created\":\"20240616152105208\",\"description\":\"You can use the value of a variable as the value of an HTML or widget attribute, although there are additional complications.\",\"modified\":\"20241008024108297\",\"parent\":\"Transclusion\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"In the [[previous section|Variables]], we saw how we can transclude the values of variables within running text. We can also use variables within other formatting instructions -- as the ''values of attributes'' on widgets or HTML tags.\\n\\nWe already did this once already in the [[link pattern|Ex:LinkPattern]] exercise in [[Your First Dynamic List]], before we had explained that `<<currentTiddler>>` was a variable:\\n\\n```html\\n<$link to=<<currentTiddler>>/>\\n```\\n\\nIn a basic sense, using variables as attribute values is no different than using them elsewhere. However, there are some pitfalls for the unwary when it comes to mixing variables and other wikitext elements. Fully elucidating all of these requires much more understanding of TiddlyWiki, so we'll start by covering the most basic issues in this section and postpone the rest until later.\\n\\n\\n!! Multiple links to the same place\\n\\nSuppose we want to link to the Wikipedia homepage multiple times. If we want the same text on the link each time, we can simply put the wikitext needed to create the link in a variable and transclude it several times, like this:\\n\\n{{Sn:WikipediaWikitext||MagicSnippet}}\\n\\nBut what if we want to use different text for the link each time? You might try this:\\n\\n{{Sn:WikipediaBadWikitext||MagicSnippet}}\\n\\nUnfortunately, transclusions ''can't be nested inside other complex wikitext elements like links'', so this doesn't work. If you try clicking on one of the links in the example above, you'll see that TiddlyWiki produces a link to the tiddler literally called `<<wp>>`, which isn't very helpful!\\n\\nHowever, you //can// transclude a variable ''into the value of an attribute''. So an easy solution is to use an `a` HTML element instead of wikitext syntax (recall that all items of wikitext syntax have corresponding [[widgets|Widgets]] or [[HTML]] tags). This element takes the URL to link to in its `href` attribute and the text to display in its body. (`href` stands for //hypertext reference//, and `a` for //anchor//.)\\n\\n{{Sn:WikipediaAElement||MagicSnippet}}\\n\\nThe space between the `>>` closing the variable transclusion and the `>` closing the tag is not required, but many people find it makes the wikitext more readable.\\n\\nDepending on the [[palette|Tweaking Your Settings]] you have selected, you may notice that links to external sites that use the `a` tag are a different color than is usual in your wiki. If this bothers you, add the attribute `class=\\\"tc-tiddlylink-external\\\"` to the `<a>` tag, which will tell TiddlyWiki to use the same styling that it would if you created an external link with `[[double square brackets]]`.\\n\\n\\n!! Multiple links to different Wikipedia articles\\n\\nThe previous example may be functional, but it's a bit academic -- how often do you want to link to the same web page multiple times?\\n\\nHere's a more useful idea. Wikipedia article URLs have a very predictable format: for an article named `Article Name` in the English encyclopedia, the URL looks like `https://en.wikipedia.org/wiki/Article Name`. The only part that ever changes is the name of the article. Can we use a variable to hold the part of the URL that doesn't change? Then we could produce a working link to any article given only its title.\\n\\nThe most obvious thing to try would be:\\n\\n{{Sn:WikipediaCombinedVarSubst||MagicSnippet}}\\n\\nThat looks OK, but if you click on the link you'll find that it goes to a page called `<<wpBase>>/Aardvark`, which obviously isn't what we wanted.\\n\\nMaybe the transclusion needs to go outside the quotation marks?\\n\\n{{Sn:WikipediaCombinedVarSubst2||MagicSnippet}}\\n\\nUh-oh!\\n\\nIt turns out that we need an entirely new syntax to achieve this. We can use //just// a transclusion as the value of an attribute by writing it directly after the `=`, as we did earlier in this section. Or we can use //just// a constant value (one with no variables) by placing it in `\\\"double quotation marks\\\"` after the `=`. But if we need to //combine// a constant value and one or more variables, as we do here, we need to use a ''substituted attribute value'', which looks like this:\\n\\n{{Sn:WikipediaSubAttrValue||MagicSnippet}}\\n\\nThose funny <code>&#96;</code>'s are called ''backticks''. On a standard US keyboard, you can find the backtick (also called the //grave accent//) to the left of the 1 key. Other keyboards have it in weirder places or even on the AltGr layer; you may have to do a quick web search to learn how to type it on your keyboard.\\n\\nWithin a substituted attribute value, the syntax `$(wpBase)$` refers to the value of the variable `wpBase`. The way in which this differs from `<<wpBase>>` is somewhat arcane, so we'll hold off on discussing it until we learn about [[macros|Macros]] in <<gtw.link-chapter-number \\\"Macros, Wikification, and Widgets\\\">>. For now, suffice it to say that you should refer to the values of variables with this `$()$` syntax within substituted attribute values.\\n\\n\\n!! Exercises\\n\\n{{Ex:ContactLinks||ExerciseTemplate}}\\n{{Ex:ProcedureAdjacency||ExerciseTemplate}}\\n\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\"},\"Variables\":{\"title\":\"Variables\",\"created\":\"20200530170346174\",\"description\":\"Variables let you assign a name to an arbitrary value, then use the name in place of the value in multiple places within your wikitext.\",\"modified\":\"20240928203320411\",\"parent\":\"Transclusion\",\"tags\":\"Section Concept\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"''Variables'' are the simplest way to define some wikitext in one place and refer to it in many places.\\n\\n!! How variables work\\n\\nA variable has a ''name'', which is how you refer to the variable, and a ''value'', which is the other piece of wikitext that it stands in for.\\n\\nAs a silly example, let's suppose corporate requires us to include a disclaimer at the end of every paragraph we write:\\n\\n> (This paragraph does not represent the formal opinion of my company.)\\n\\nWe can make this text into a variable using a ''`$set` widget'', like this:\\n\\n{{Sn:SetDisclaimer||MagicSnippet}}\\n\\nAs you can see in the example above, the `$set` widget doesn't itself display anything in the rendered version of your tiddler. However, in between the `<$set>` tags, TiddlyWiki will keep track of the fact that the variable with name `disclaimer` is set to the stated value. (Once we pass the closing `</$set>` tag, TiddlyWiki will forget about the variable. When this happens, we say that the variable has ''gone out of scope''.)\\n\\nIn order to actually use the variable, we put its name between double angle brackets `<<>>` in the spot where we want its value to show up; this is called ''transcluding the variable's value''. Let's edit our `EmployeeInformationSystem` tiddler to use this disclaimer:\\n\\n{{Sn:EmployeeInformationSystemDisclaimer||MagicSnippet}}\\n\\nCopy this into your version of the tiddler, and you should see the disclaimer appear in the rendered output at each spot where `<<disclaimer>>` appears in the wikitext.\\n\\n\\n!! The `$let` widget\\n\\nThe `$set` widget is the most powerful way to set variables, offering [[a number of different options|https://tiddlywiki.com/#SetWidget]] which you can read about in the documentation. However, the syntax is rather verbose for many purposes -- the words `name` and `value` are clutter, and if you want to set multiple variables, you'll need multiple `$set` widgets.\\n\\nFor cases where you don't need any fancy options, the `$let` widget allows you to concisely set as many `name=value` pairs as you want:\\n\\n{{Sn:EmployeeInformationSystemDisclaimerLet||MagicSnippet}}\\n\\nWe'll primarily use the `$let` widget to set variables throughout the rest of the book.\\n\\n\\n!! Why use variables?\\n\\nEliminating repetition can save typing, which is nice but hardly anything to write home about. Much more importantly, if you want to change a snippet after you create it, ''you only have to change it in one place''. If you only use the snippet a couple of times, changing it in multiple places is no big deal, but there might be some things you end up using dozens or hundreds of times throughout your wiki. And sometimes a full wikitext snippet will be many lines long and easy to mistype, while a variable transclusion is short, concise, and easy to understand.\\n\\nAdditionally, some variables are ''set automatically by TiddlyWiki'', which can allow you to access information you otherwise wouldn't have. For instance, when we created a list widget to show all our meetings in the previous chapter, TiddlyWiki automatically set the `<<currentTiddler>>` variable to refer to the item which was currently being processed by the list widget.\\n\\nIn the real world, you will use [[procedures|Procedures]] or [[field transclusions|Field Transclusions]] more often than simple variables when you want to use some wikitext in many places throughout your wiki. But all three of these mechanisms serve the same basic purpose -- avoiding repetition -- and offer the same benefits discussed here.\\n\\n!! Exercises\\n\\n{{Ex:UpdatingDisclaimer||ExerciseTemplate}}\\n{{Ex:EisVariable||ExerciseTemplate}}\\n{{Ex:EisLet||ExerciseTemplate}}\\n{{Ex:SpacedVariable||ExerciseTemplate}}\\n{{Ex:VariableAfterSet||ExerciseTemplate}}\\n{{Ex:NestedSets||ExerciseTemplate}}\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\"},\"Welcome to Grok TiddlyWiki\":{\"title\":\"Welcome to Grok TiddlyWiki\",\"created\":\"20210110055215195\",\"description\":\"An overview of the book and where you should get started.\",\"modified\":\"20241019230512540\",\"parent\":\"Front Matter\",\"tags\":\"Index Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Welcome to ''Grok TiddlyWiki'', the definitive TiddlyWiki learning resource! //Grok TiddlyWiki// is a textbook that helps you build a deep, lasting understanding of and proficiency with TiddlyWiki through a combination of detailed explanations, practical exercises, and [[spaced-repetition reviews|TakeAway Help]] of prompts called //takeaways//.\\n\\n[[TiddlyWiki|https://tiddlywiki.com]] is a human-shaped tool for organizing information and taking notes. It stores and relates information in a non-linear but structured way, just like your brain, and it doesn't forget things. Maintaining a well-organized TiddlyWiki requires a modest amount of effort, and TiddlyWiki has a bit of a learning curve, but it's extremely powerful and customizable, and once you grok it, it will change the way you take notes, think about your work and your ideas, and relate to information in general.\\n\\nTiddlyWiki shines at almost any task that involves organizing information and enabling creativity. People use TiddlyWiki for keeping notes at their jobs, collecting their ideas, keeping track of what they read, drafting books, building static websites, storing recipes, managing genealogical databases, planning tabletop role-playing campaigns, and much more.\\n\\nTo [[grok|https://en.wikipedia.org/wiki/Grok]] something is to understand it on a deep level, so thoroughly that it changes you and becomes part of your identity. This word is particularly appropriate when discussing TiddlyWiki, since its method of organizing information may well change the way you understand and relate to information in general.\\n\\n\\n!! Where do I start?\\n\\n* If you aren't sure if TiddlyWiki is for you yet, check out [[Why TiddlyWiki?]]\\n* If you know you want to learn TiddlyWiki but don't know if you want to learn from this book, read about the [[Philosophy of Grok TiddlyWiki]] to see if it seems like a good fit for you.\\n* If you're already partway through the book, or you want to see what topics are covered, visit the [[Outline]] or click the //Contents// tab in the sidebar.\\n* If you're ready to get started, start at [[How to Use This Book]], or, if you're feeling impatient, at [[The Shape of TiddlyWiki|The Shape of TiddlyWiki]].\\n\\n\\n!! How much does it cost?\\n\\n//Grok TiddlyWiki// is free to read. You are also free to copy and share the book under certain conditions, pursuant to the CC BY-NC-ND 4.0 license; please see the [[copyright notice|Copyright]] for details on the terms and conditions.\\n\\nThat said, I have spent hundreds if not thousands of hours writing and updating this book over the years, and it's an ongoing project, since TiddlyWiki is an evolving application. Creating a quality learning resource is not an easy undertaking. So if you read the book and find it helpful, and you have the means to do so, ''please consider donating'' to support my work and ensure I can continue doing this. You can give whatever you think the book is worth to you, from $5 to $100.\\n\\n<a href={{$:/sib/DonationLink}} class=\\\"tc-tiddlylink-external\\\">Donate here</a>, or use the //donate// link in the sidebar.\\n\\nYou can find other suggestions for helping out both //Grok TiddlyWiki// and the TiddlyWiki project in the [[Support Us]] appendix.\\n\\n\\n!! Who made this? How do I get in touch?\\n\\n//Grok TiddlyWiki// is written and maintained by Soren Bjornstad ([[about|https://sorenbjornstad.com]]; [[blog|https://controlaltbackspace.org]]; [[public notes|https://mosmu.se]]; [[contact|https://sorenbjornstad.com/contact]]). The TiddlyWiki project [[considers GTW|https://tiddlywiki.com/#%22Grok%20TiddlyWiki%22%20by%20Soren%20Bjornstad]] “highly recommended” for learners, and I am an active participant in the TiddlyWiki community.\\n\\nYou can send me feedback on any section by clicking the //send feedback// link at the bottom of that section. Also feel free to email me with general questions, problems, or suggestions (see //contact// link above). Thanks [[to everyone|Acknowledgments]] who has offered feedback and other forms of assistance at every stage of //Grok TiddlyWiki//'s development.\\n\\nIf you're looking for one-on-one help learning TiddlyWiki or getting a wiki set up, I am occasionally available for online tutoring for an hourly fee; [[contact me|https://sorenbjornstad.com/contact]] if that sounds like something you might be interested in.\\n\\n\\n!! What version is this?\\n\\n|!Book version |{{Metadata##version}}|\\n|!TiddlyWiki version |{{Metadata##tw-version}}|\\n\\nEvery time I publish a new version of //Grok TiddlyWiki//, I increase the book's version number. To see what's changed in recent versions, visit [[Changes]]. You can always find the latest version at {{Metadata##project-url}}.\\n\\nThe TiddlyWiki version indicates which version of TiddlyWiki this version of //Grok TiddlyWiki// expects you to have; I try to keep it up to date with the newest version, but if I'm behind, it should be fine to use a newer version of TiddlyWiki than listed here. In contrast, using an older version than listed might mean some things the book tells you to do mysteriously don't work, so that's not a good idea! If you have an older version in a wiki you're already using, you can visit the [[TiddlyWiki Upgrader|https://tiddlywiki.com/upgrade.html]] to update that wiki to the latest version.\\n\\nThis is the second major version of //Grok TiddlyWiki//, aligned with TiddlyWiki 5.3.5+. Recent versions of TiddlyWiki have added major new features such as [[Procedures]], [[Functions]], and [[Custom Widgets]], to replace older features which were more difficult to learn and had more gotchas, such as [[Macros]]. This means that significant portions of GTW have been rewritten or reorganized because the recommended approach to reusing wikitext has changed. If you've used older versions of TiddlyWiki, you may wish to work through <<gtw.link-chapter-number \\\"Transclusion\\\">> and <<gtw.link-chapter-number \\\"Macros, Wikification, and Widgets\\\">>, as well as the [[Functions]] section in <<gtw.link-chapter-number \\\"More Organizational Tools\\\">>, to get up to speed on these newer tools.\\n\\n{{Upgrade}}\\n\\nYou can find the book's source [[on GitHub|https://github.com/sobjornstad/grok-tiddlywiki]]. But basically everything is in the file you're looking at already, because it's TiddlyWiki!\"},\"When Things Go Wrong\":{\"title\":\"When Things Go Wrong\",\"created\":\"20210120014333991\",\"description\":\"As your wikitext gets more complicated, it occasionally might not do what you were expecting; here's how you can figure out what you did wrong.\",\"modified\":\"20241015032547270\",\"parent\":\"Filtering and Formatting\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<<<\\nError messages can be terrifying when you aren't prepared for them; but they can be fun when you have the right attitude. Just remember that you really haven't hurt the computer's feelings, and that nobody will hold the errors against you.\\n\\n---Donald Knuth, //The TeXbook//\\n<<<\\n\\nIn this chapter, we started looking at some more complicated features of [[wikitext|Wikitext]]. The more complicated wikitext gets, the more likely you use it incorrectly by mistake. So before we finish out the chapter, let's talk briefly about what to do when some wikitext you're writing doesn't do what you think it should. (Programmers would say you need to ''debug'' your wikitext.)  TiddlyWiki, like all software, is pretty fussy: if you leave out a period in the wrong spot, you might get a totally different effect than the one you intended. As you continue to work on the exercises and with your own wikis, you will no doubt run into problems on occasion.\\n\\nFinding the errors will get easier as you learn more about TiddlyWiki. You'll get much faster at spotting minor syntax mistakes, and you'll have a deeper understanding of how TiddlyWiki works, so you'll be able to think through why something might not work. I also try to call out some of the most common errors in exercises and takeaways throughout the book, with the hopes that you'll be able to learn about at least a few of the errors ahead of time instead of through the school of hard knocks. In the meantime, let's look at some cognitive tools for working through problems when your prior experience fails you.\\n\\n\\n!! Use the scientific method\\n\\nIf you ever find yourself unsure how something works, try it! Devise and carry out a simple ''experiment'' that will answer the question. And take a page from science and isolate the single variable that you're wondering about. If you're not sure how a `$list` widget behaves, don't test it in the middle of a three-page-long tiddler with a complicated filter; copy and paste the widget you're having trouble with into a new tiddler by itself, simplify the filter to `[tag[MyTestTag]]` (adding that tag to a couple tiddlers if necessary), and explore from there. Once you've answered the question, you can bring your new understanding back to your original problem.\\n\\nSimilarly, consider ''splitting complex tasks into pieces'' and making sure that each piece is correct before proceeding to the next. That way, if everything doesn't work perfectly, it will be much more obvious where to look for the problem. If you're trying to use a `$list` widget, get your filter working in $:/AdvancedSearch before trying to use it in the widget. Then make sure the content of your widget looks right by itself, and only then wrap it in the `$list` widget and change the content to pick up the `<<currentTiddler>>` from the `$list` widget.\\n\\n\\n!! Talk to the duck\\n\\nGrab a rubber duck or some similar object and put it in front of your monitor. Your task is to ''explain what you're trying to do, from the beginning, to the duck''. The duck has a basic understanding of what TiddlyWiki is, so you don't have to try to explain, e.g., what a web browser or a tiddler is, but the duck still knows much less than you do, being a duck, so you should explain thoroughly and without leaving out any steps.\\n\\nThis works because, after looking at some wikitext for a while, we start to see each part of the wikitext as doing what we think it //should// do, or what we //meant// it to do, rather than what it's actually doing. Having to start the explanation over and go through it in detail means we're more likely to see where the reality doesn't align with our perception.\\n\\nYou can always talk to a real person instead, whether they know anything about TiddlyWiki or not – but a rubber duck is surprisingly functional and doesn't require you to find someone to bother, so there's less friction involved in trying this technique with an inanimate object.\\n\\n\\n!! Use your web browser's inspector\\n\\nIf something isn't displaying on the screen the way you expect, you might be able to spot what's going wrong by ''taking a closer look at the HTML source'' of the page. However, the standard “view source” option that we used in the [[Ex:ViewSource]] exercise in the [[HTML]] section won't work well here. For one, “view source” doesn't convert wikitext to HTML, so you can only get part of the picture. For another, the source for an average TiddlyWiki could be dozens or hundreds of pages long, and we hardly want to scan through it to find the spot on the page that's not working.\\n\\nThere's a better way: if you right-click anywhere on the page in TiddlyWiki, there will be an //Inspect// option (in some browsers, this may be within a submenu called //Developer Tools//). Choosing this option will open another window to the side of your wiki, which will let you explore the HTML of the page.\\n\\nNow, simply click the pointer icon in the far top-left corner of the inspector and hover the mouse over the area on the page exhibiting the problem. You'll see each area on the page highlighted as your cursor moves over it; each highlighted area represents an HTML element. When you find an element related to your problem, click and the relevant HTML will be highlighted in the inspector window. Taking a close look at the HTML generated by your wikitext may make the problem obvious.\\n\\n\\n!! Display the values of variables\\n\\nIn the next chapter, we'll start discussing [[variables, procedures, and field transclusions|Transclusion]]. Oftentimes you will use variables, procedures, and field transclusions as part of widgets or filters (for instance, you might use the value of a variable in a filter). If your widget or filter isn't working right and you are at all uncertain about what's in the variable, try ''using the variable by itself in your wikitext'' and see what shows up in the preview. If the variable's value is wrong, investigating how it got set to the wrong value will likely point you to the problem.\\n\\nSometimes putting a variable directly in your wikitext might mess up the formatting in a way that makes the issue harder to understand. In this case, you can use the ''`$log` widget'' instead. This widget doesn't put anything into the rendered output of the tiddler -- instead it puts output into your ''browser console'', a hidden log that you only see when you open the developer tools. For instance, paste this into a tiddler in your test wiki:\\n\\n```html\\n<$log X=\\\"Y\\\"/>\\n```\\n\\nIf you now open the page inspector, as discussed in “Use your web browser's inspector,” above, and click the //Console// tab, you should see a table showing that the value of X is Y. Every time the tiddler re-renders, the value is logged again.\\n\\n[img[xy.png]]\\n\\nIn real life, you'll typically put a variable in place of `\\\"Y\\\"` (once you learn what that is in the next section!), which will look something like this:\\n\\n```html\\n<$log X=<<myvariable>>/>\\n```\\n\\nSee [[more details|https://tiddlywiki.com/#LogWidget]].\\n\\n!! Take a break\\n\\nIf you start getting frustrated, ''step away from the computer'' for ten to twenty minutes. Ideally, go outside and take a walk, and don't think about the problem at all for at least five minutes; let your mind wander. You'll often have solved the problem by the time you get back, and even if you haven't, you'll be less frustrated and more likely to spot mistakes.\\n\\n\\n!! Ask for help\\n\\nIf you really run out of ideas, you can ask the TiddlyWiki community for assistance; see [[Getting Help]] to learn how.\\n\\n\\n!! Exercises\\n\\n{{Ex:InspectSquare||ExerciseTemplate}}\\n{{Ex:RubberDucking||ExerciseTemplate}}\\n{{Ex:LogWidget||ExerciseTemplate}}\\n\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\\n\"},\"Why TiddlyWiki?\":{\"title\":\"Why TiddlyWiki?\",\"created\":\"20200531034640143\",\"description\":\"What makes TiddlyWiki worth learning and using?\",\"modified\":\"20241013011655463\",\"parent\":\"Front Matter\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"There are a lot of tools for taking notes and storing information out in the world, and most of them are easier to learn than TiddlyWiki. So you might ask, why should you care? What makes TiddlyWiki good enough that it's worth working through a textbook to learn?\\n\\nBecause TiddlyWiki offers an entirely new way of thinking -- there's a reason this book is called //Grok TiddlyWiki//, and it's not just because [[grok|https://en.wikipedia.org/wiki/Grok]] is a fun word -- the benefits often appear underwhelming to those who haven't experienced it (see [[tools for thinking don't wow|https://mosmu.se/#ToolsForThinkingDontWow]]). Shortly after I published the first edition of this book, someone asked me what TiddlyWiki was, and I [[was embarrassed to realize|https://ap.sorenbjornstad.com/#post-70]] I couldn't even explain that! \\n\\nHowever, while it may be difficult to explain in a couple of sentences, a few short sections can give a nice idea of the flavor.\\n\\n!! Talking points\\n\\n{{$:/plugins/sobjornstad/TakeAway/ContextualHelp/DetailsWidget}}\\n\\n<$details summary=\\\"Works like you think\\\">\\n\\nTraditional information-management systems, both paper and digital, encourage or require you to put notes into “boxes” of one kind or another: notebooks, pages, categories, hierarchies. Notes, once added, stay static, stuck in the same place and time forever, so they quickly get out of date and you forget about them.\\n\\nCategories and hierarchies are sometimes unfairly maligned. In reality, they are powerful supplemental tools for thinking; sometimes, in order to think about a topic, we need to add additional order to a set of ideas to [[reduce them to a level of complexity we're capable of thinking about|https://mosmu.se/#InformationalJig]], and these tools give us that ability. But as a general-purpose organization method, these tools are terrible: they prevent ideas from being effectively used outside their original context and force us to collapse distinctions that we might prefer to maintain. For notes to reach their full potential, we need to allow them to relate in a greater variety of ways. Further, we don't naturally think in hierarchies except when we are tackling a specific problem; we think in links and webs of ideas.\\n\\nIf you doubt that we don't think in hierarchies, try this. Think of the color white. You can take this idea in an almost infinite number of directions with no effort at all: What are some white things? What other colors are there? What categories does white fit into? What metaphors involve whiteness? And from each of the ideas you generate as answers to those questions, you can quickly generate another set of associations. Three or four jumps, and the relationship between the two ideas is unrecoverable except by the path you traced. This is not the mark of hierarchical organization.\\n\\nTiddlyWiki mirrors the way you think. While you can create traditional categories and hierarchies where they're helpful, these aren't the primary way of organizing content. Instead, you break ideas out into small, reusable pieces called [[tiddlers|Tiddlers]], and relate them and further describe their properties using [[links|Links]], [[tags|Tags]], and [[fields|Fields]]. You can query based on all these properties and more using [[filters|Filters]], and weave tiddlers together into other tiddlers to create aggregations and summaries using [[transclusion|Field Transclusions]].\\n\\nThese mechanisms, properly used, allow relationships between ideas to magically jump out at you, and you can easily find the related bits that you //just know// are there somewhere but can't ever seem to find in traditional notes systems. Sometimes you may even find notes you didn't remember you took but turn out to be exactly what you need. Almost every TiddlyWiki user has had the experience of having some brilliant new idea and going to the appropriate spot to add it, only to find that it's already there.\\n\\nMost notes systems fail at the seemingly elementary requirement of matching the way you think. (Why would you use a tool for thinking that doesn't match the way you think?) A few succeed, but those that do usually don't also have the advantages below.\\n\\n</$details><$details summary=\\\"Easy and flexible formatting\\\">\\n\\nIn TiddlyWiki, notes are written and formatted using a markup language called [[wikitext|Wikitext]] (rather like [[Markdown|https://en.wikipedia.org/wiki/Markdown]]). This language is relatively easy to learn and offers a more flexible way of formatting notes than WYSIWYG editors like those used by word processors or email programs.\\n\\nAdvanced users or anyone needing detailed control over how their notes look can fall back to [[HTML]] and [[CSS|Stylesheets]], the same languages used for styling web pages. You can write [[procedures|Procedures]] or use [[templates|Templates and the Current Tiddler]], along with CSS, for full [[separation of content and presentation|https://en.wikipedia.org/wiki/Separation_of_content_and_presentation]]. You can even write parts of your notes directly in HTML or in Markdown (via a plugin) if you like.\\n\\n[img [side-by-side-wikitext.png]]\\n\\n</$details><$details summary=\\\"Radically customizable\\\">\\n\\nWikitext is mostly a formatting language, but it's also a declarative language for finding and making changes to notes. For instance, you can create an automatically-updating list of all the kinds of tea you've discussed in your wiki, each with a companion button that takes you to the webpage where you can reorder it and records that you've done so in a list of purchases. //Grok TiddlyWiki// implements an integrated spaced-repetition flashcards program, [[TakeAway|TakeAway Help]], entirely in wikitext.\\n\\nAlmost every aspect of TiddlyWiki's user interface and behavior can be customized. The out-of-the-box behavior is plenty good for many use cases already, but as you settle into any workflow, you'll probably find some things that could be a little easier. TiddlyWiki will let you make those easier, perhaps with the help of [[scores of useful plugins|Useful Plugins]] on the web.\\n\\nTiddlyWiki is customized in a different way than most other applications, too. Rather than using plugins that are written outside the app in a different programming language, TiddlyWiki is written and customized //using TiddlyWiki//: both the content in your wiki and the wiki software itself [[are written in wikitext|Looking Under the Hood]]. This means that changes to your content seamlessly blend into changes to the software. You can change something for a single page, right within that page's text, and later expand it to a set of pages, or your whole wiki. You don't have to open another app to work on the software, and any changes you make take effect instantly, so there's no friction in tweaking something. This ability to evolve your content and your tools simultaneously, in the same place, using the same language, [[is efficient, empowering, and mind-expanding|https://mosmu.se/reflexive]] in a way that's difficult to explain until you try it.\\n\\n</$details><$details summary=\\\"Free, future-proof, and portable\\\">\\n\\n* TiddlyWiki is ''free as in beer''. Many notes apps are, but many of the better ones will cost you a monthly fee. A small monthly fee probably isn't a big deal, but who wouldn't prefer not having one if the software is just as good?\\n* TiddlyWiki is ''free as in freedom''. Unlike proprietary tools like Evernote, Roam Research, and OneNote, you have complete freedom to use TiddlyWiki for any purpose you want, share it with others, and modify it if you need or want to. You will never lose access to your notes because a company decided the service wasn't profitable anymore. If you're planning a long-term project, this should be non-negotiable.\\n* TiddlyWiki has a ''commitment to longevity''. TiddlyWiki [[has been around since 2004|https://tiddlywiki.com/static/History%2520of%2520TiddlyWiki.html]], and its backwards compatibility is excellent. When TiddlyWiki 5, which was an entirely new design without backwards compatibility, was introduced in 2011, the old version was not thrown out but continues to be actively maintained and considered a first-class citizen, with even the occasional new feature, for those users who still have large wikis on the old system that aren't worth migrating. This is vanishingly rare in the software world nowadays, and if you're looking at keeping a lot of important notes, it's an important quality. The only note tools I know of likely to achieve a better compatibility and longevity record than TiddlyWiki are plain-text files and paper, both of which are comparatively poor at organizing ideas.\\n* TiddlyWiki is ''portable''. It runs in an ordinary web browser, so it works on virtually any computer or operating system. Many people have reported opening unmodified TiddlyWikis from years prior and having them still work just fine in a modern browser. If you want to share your wiki with someone, you can just email them the file and be virtually assured they can open it.\\n* TiddlyWiki is ''decentralized''. You can choose to keep your wiki as a single HTML file that you can ship around or as a folder of content served by an included lightweight web server. If you go the file route but want your wiki accessible on more than one computer, you can keep it in cloud storage like Dropbox or GitHub, or use a web hosting service. Nobody gets to handle your data unless you choose to trust them, and if you become disenchanted with one provider or storage method, there are dozens of other options.\\n\\n</$details><$details summary=\\\"The bad\\\">\\n\\nWhile I love TiddlyWiki, no software is perfect, so it's worth pointing out some of TiddlyWiki's flaws as well.\\n\\n* Most importantly, TiddlyWiki ''requires some effort to master''. This is inevitable for a tool as powerful as TiddlyWiki, but it's a significant barrier nonetheless. TiddlyWiki works differently from other tools you've used, and you need to develop a few new skills to take full advantage of it. Almost anyone can learn, and this book will help you, but if you're looking for something that works great right away without any commitment on your part, TiddlyWiki may not be for you. (You can get up and running with TiddlyWiki quickly enough, but you likely won't find it much better than any other tool until you learn a bit more.)\\n* Handling ''images and attachments'' in TiddlyWiki can be somewhat troublesome. If you occasionally like to add images or attach files to your notes, this is unlikely to be a big deal. If the main thing you want to do with your note-taking app is organize images or other files, you may be better off looking for a different solution. See [[Images and Attachments]] for details.\\n* TiddlyWiki's ''keyboard shortcuts'' are somewhat deficient compared to a desktop notes application, at least in a default setup, although this has improved recently. It is possible, however, to give at least the text entry fields some standard keybindings (e.g., vi-compatible) using the [[CodeMirror plugin|Useful Plugins]].\\n* Using TiddlyWiki to collaborate on a wiki with ''multiple users'' is still in its infancy. While there is some effort at changing this, particularly with the [[Bob plugin|https://github.com/OokTech/TW5-Bob]], TiddlyWiki is by and large a single-user tool.\\n\\n</$details>\\n\\n!! Experience TW for yourself\\n\\nIf you have around an hour, check out the video [[Experience TiddlyWiki Fluency: Creating a Reading List|https://www.youtube.com/watch?v=vsdDs7oOLlg]], which will show you the experience of building a small tool in TiddlyWiki. You can also play around in some [[Public Wikis]], such as my [[Mosaic Muse|https://mosmu.se]].\\n\\n<iframe style=\\\"width: 100%; height: 3in;\\\" src=\\\"https://www.youtube.com/embed/vsdDs7oOLlg\\\" title=\\\"YouTube video player\\\" frameborder=\\\"0\\\" allow=\\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\\" allowfullscreen></iframe>\\n\\n!! Sold?\\n\\nIf TiddlyWiki sounds like what you've been looking for, proceed to [[Philosophy of Grok TiddlyWiki]] to see if this book is a good way for you to learn TiddlyWiki, to [[How to Use This Book]] to learn more about how the book works, or to [[The Shape of TiddlyWiki|The Shape of TiddlyWiki]] to jump in.\\n\\nIf you end up using and liking this book, consider <a href={{$:/sib/DonationLink}} class=\\\"tc-tiddlylink-external\\\">chipping in a few dollars</a> to support my work on it.\"},\"Widgets\":{\"title\":\"Widgets\",\"created\":\"20201125033901397\",\"description\":\"Widgets are a TiddlyWiki extension to HTML exposing wiki-specific functionality.\",\"modified\":\"20241015032005027\",\"parent\":\"Filtering and Formatting\",\"tags\":\"Section Concept\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"''Widgets'' {{Ltc:WidgetsExtension||LieToChildrenTemplate}} to [[HTML]]. They look and work almost exactly like HTML elements, except they have a `$` before the tag name, and TiddlyWiki does further processing on them prior to sending them to your browser for display.\\n\\nAll the formatting instructions you use in wikitext, like `//italics//` or `[[links]]`, have either a corresponding HTML element or a corresponding widget. Just like we sometimes need or want to use raw HTML elements for more control over formatting, we sometimes need or want to use raw widgets.\\n\\nThere are also many widgets that have no equivalent at all in wikitext, because you can only make the symbols on the keyboard do so many things! We will be seeing some of these widgets throughout the rest of the book.\\n\\nYou can also write your own widgets in wikitext. We'll learn how to do this in <<gtw.link-chapter-number \\\"Macros, Wikification, and Widgets\\\">>, in [[Custom Widgets]].\\n\\n!! Widget example\\n\\nLet's suppose we want to link to another tiddler. You can create a link with the double-bracket syntax in wikitext:\\n\\n{{Sn:WikitextLink||MagicSnippet}}\\n\\nOr you can use the `$link` widget:\\n\\n{{Sn:WidgetLink||MagicSnippet}}\\n\\nAt the moment, this looks like it's just an overly verbose way to write a link, but in later chapters, we'll see that there are some things that we can do with this syntax that we can't do with the double-bracket syntax.\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\"},\"Wikification\":{\"title\":\"Wikification\",\"created\":\"20201124152747833\",\"description\":\"TiddlyWiki converts wikitext into HTML for display by //wikifying// it. This process may sometimes need to be triggered manually.\",\"imageurl\":\"https://upload.wikimedia.org/wikipedia/commons/b/bb/Kittyply_edit1.jpg?download\",\"modified\":\"20241016131345928\",\"parent\":\"Macros, Wikification, and Widgets\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\define wikipediaUrl(article)\\n  {{$:/BaseWikipediaUrl}}/$article$\\n\\\\end\\n\\n''Wikification'', in TiddlyWiki, is the process of taking wikitext and turning it into pure HTML that a browser can read directly (or, occasionally, into plain text or some other format). This includes processing markup like `//italics//`, rendering widgets, calling procedures, transcluding other tiddlers, and so on.\\n\\nWikification can be understood as a sort of pre-processing or pre-rendering: first TiddlyWiki renders the wikitext into HTML, then your browser renders the HTML on your screen.\\n\\n!! When wikification happens\\n\\nObviously, processing and formatting wikitext is one of the most essential functions of TiddlyWiki. It happens any time a tiddler is displayed. However, just because you put some wikitext somewhere in TiddlyWiki does not guarantee it will be wikified.\\n\\nIn general, ''any time a chunk of wikitext ends up in the body of a tiddler that is being displayed'', TiddlyWiki tries to wikify it. The chunk might be the entire text of the tiddler or the result of a single transclusion (in the most general sense, including field transclusions, variable transclusions, procedure calls, macro calls, and transcluded filter expressions). If the result of wikifying one of these things still contains wikifiable wikitext -- for instance, the result of wikifying the `{{tiddler!!field}}` transclusion syntax is some wikitext contained in the `field` field -- TiddlyWiki will try to wikify that as well. It will repeat this step until there is no more unwikified wikitext, or until it detects that it has gotten stuck in an infinite loop (recall [[Ex:SelfTransclusion]]).\\n\\nHowever, there is one huge exception: when you use a variable or field transclusion as a parameter to an HTML or widget attribute, ''the result of this transclusion is //not// wikified''. In other words, TiddlyWiki doesn't attempt to repeatedly wikify the result of the initial transclusion like it does with body text; it does it exactly once and then stops.\\n\\nThis will become more clear with an example:\\n\\n{{Sn:TestVar12||MagicSnippet}}\\n\\nAs you can see, `XYZ` is rendered by this snippet. Let's follow along with TiddlyWiki to see why:\\n\\n# In the first `$let` widget, the variable `testVar1` gets set to the text `XYZ`.\\n# In the second `$let` widget, the variable `testVar2` gets set to the text `<<testVar1>>`.\\n# The variable `<<testVar2>>` is used directly within the body of the tiddler. When rendering the tiddler, TiddlyWiki comes to this variable transclusion and looks up the value of the variable `testVar2`; it finds the text `<<testVar1>>`.\\n# `<<testVar1>>` is a new chunk of wikitext that can be further processed, so TiddlyWiki wikifies that as well. This time that process finds another variable transclusion, and it substitutes the value of the variable `testVar1`, yielding `XYZ`.\\n# At this point, there is nothing left to do with the text `XYZ`, since it is already plain text with no wikitext syntax, so TiddlyWiki sends the text `XYZ` to your browser to display and moves on to the rest of the tiddler.\\n\\nHowever, if we make a minor change so that `testVar2` is the attribute of a widget…\\n\\n{{Sn:TestVar122||MagicSnippet}}\\n\\n…now the literal text `<<testVar1>>` prints out:\\n\\n# In the first `$let` widget, the variable `testVar1` gets set to the text `XYZ`.\\n# In the second `$let` widget, the variable `testVar2` gets set to the text `<<testVar1>>`.\\n# `<<testVar2>>` is used as an HTML attribute. When rendering the tiddler, TiddlyWiki comes to this variable transclusion and looks up the value of the variable `testVar2`; it finds `<<testVar1>>`.\\n# Because this is an HTML attribute, TiddlyWiki does not attempt to wikify the result, `<<testVar1>>`, again; instead, it passes it directly to the `$text` widget.\\n# The `$text` widget sees that it's been asked to display the text `<<testVar1>>`, so it does so.\\n\\nYou might initially think this has something to do with the `$text` widget in particular, since that widget's usual use is to inhibit wikification or formatting, but that isn't the case; it applies to any widget or HTML tag, as we'll see in a moment.\\n\\n(//Note//: Using a single `$let` widget instead of two in the above examples would have exactly the same effect as using two separate ones; we've simply left them separate in this example to make the order of operations as clear as possible.)\\n\\n\\n!! Manual wikification\\n\\nThat was a good example for demonstrating what TiddlyWiki does and does not wikify, but it didn't do anything useful, so at this point it may be hard to see why it matters that TiddlyWiki does not repeatedly wikify attributes. As a more practical example, let's suppose that we're creating a wiki about animals, and we want to include a picture of each animal in its corresponding tiddler. We might add an `imageurl` field to each tiddler to store the URL of an appropriate image. We then want to create a template, called `TiddlerImage`, that displays the image found in the `imageurl` field of the current tiddler.\\n\\nLet's try this in our sample wiki. We can start the `TiddlerImage` tiddler with the HTML syntax for an image:\\n\\n```html\\n<img src={{!!imageurl}}>\\n```\\n\\nNow, if we populate the `imageurl` field on some tiddler with a URL and include the template transclusion `{{||TiddlerImage}}`, the image will appear. If you don't have an image URL handy, you can use this picture of a cat: `https://upload.wikimedia.org/wikipedia/commons/b/bb/Kittyply_edit1.jpg?download`.\\n\\nHowever, what if you want to ''keep part of the URL in another tiddler''? In the above URL, perhaps we are using a lot of images from Wikimedia Commons in our wiki, and we want to store the base URL `https://upload.wikimedia.org/wikipedia/commons` in a tiddler called `WikimediaCommonsUrl`. Then in the `imageurl` we could just use: `{{WikimediaCommonsUrl}}/b/bb/Kittyply_edit1.jpg?download`. This way, if Wikimedia Commons ever changes its web address (unlikely, to be sure!), we can quickly update all our links.\\n\\nIf you try this, though, you'll find that the image doesn't appear; instead a “broken image” icon will appear. Since it might be hard to see exactly //why// it doesn't work, try selecting the image with your browser's element inspector (if you've forgotten how that works, review [[When Things Go Wrong]]). After a close look at the HTML, the problem should be obvious: the `src` attribute literally begins with `{{WikimediaCommonsUrl}}`, it hasn't been replaced with the contents of that tiddler. Since that isn't a valid URL of an image, no image is displayed.\\n\\nHow, then, can we get the transclusion to expand? What we need is a way to wikify the wikitext //while it's still in a variable//, rather than waiting until it's actually rendered as part of a tiddler (because it never will be rendered as part of a tiddler the way we're using it). The appropriately named `$wikify` widget provides this capability. We can modify our example to use this widget as follows:\\n\\n```html\\n<$wikify name=\\\"wikifiedImageUrl\\\" text={{!!imageurl}}>\\n    <img src=<<wikifiedImageUrl>>>\\n</$wikify>\\n```\\n\\nIf you try again using this snippet, you'll find that the image appears as expected.\\n\\nThe `$wikify` widget has several other options, such as the format to parse the text into (plain text, HTML, a JSON parse tree, and so on). You can read about them in the [[documentation|https://tiddlywiki.com/#WikifyWidget]] on https://tiddlywiki.com.\\n\\n\\n!! Parameter and variable references in macros and procedures require wikification\\n\\nIt is worth pointing out that both `<<variable references>>` and `<<__macro-parameter-as-variable references__>>` are not evaluated until they are wikified, which means that such references do not work at all when their containing procedure or macro is used directly as the value of an HTML or widget attribute:\\n\\n{{Sn:AttributeParameterSubstitution||MagicSnippet}}\\n\\nYou can fix this by manually wikifying:\\n\\n{{Sn:AttributeParameterSubstitutionWikified||MagicSnippet}}\\n\\nIf you use a [[macro|Macros]], you can also use text substitution to get the result you want, and this is one of the key scenarios in which macros may remain more convenient than procedures:\\n\\n{{Sn:AttributeParameterSubstitutionMacro||MagicSnippet}}\\n\\n\\n!! Exercises\\n\\n{{Ex:WikifyWikipediaLink||ExerciseTemplate}}\\n{{Ex:WikifiedQuotation||ExerciseTemplate}}\\n\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\\n\"},\"Wikitext Reference\":{\"title\":\"Wikitext Reference\",\"created\":\"20210131044310808\",\"description\":\"A concise listing of the most common wikitext syntax.\",\"list\":\"Wr:InlineFormatting Wr:Links Wr:Headings Wr:Lists Wr:Quotes Wr:CodeBlocks Wr:Images Wr:Transclusions Wr:Tables Wr:HorizontalRules Wr:LineBreaks Wr:Styles\",\"modified\":\"20240928200223472\",\"parent\":\"Appendices\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"[[Wikitext]] is extremely powerful, but can take some time to fully internalize. When clicking the buttons on the editor toolbar isn't enough to remind you what syntax to use, you can review this concise, example-heavy appendix for details on the most common wikitext markup.\\n\\nThis reference is not exhaustive. In particular, [[widgets|Widgets]] are not included, as that would make it unreasonably long. You can quickly find details on all the widgets by searching in the [[TiddlyWiki documentation|https://tiddlywiki.com]].\\n\\n<$list filter=\\\"[<renderingStatic>!match[yes]]\\\" variable=_ emptyMessage=<<list-links \\\"[all[tiddlers+shadows]tag[Wikitext Reference]]\\\">>>\\n  <<tabs \\\"[all[tiddlers+shadows]tag[Wikitext Reference]]\\\" default:\\\"Wr:InlineFormatting\\\">>\\n</$list>\"},\"Wikitext\":{\"title\":\"Wikitext\",\"created\":\"20210115203325002\",\"description\":\"Wikitext is a markup language used to format tiddlers.\",\"modified\":\"20240614043856659\",\"parent\":\"The Shape of TiddlyWiki\",\"tags\":\"Concept Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Many text-editing and note-taking tools are //WYSIWYG// (“What You See is What You Get”): that is, while editing the document, it looks exactly like it will look when viewed or printed. Common tools like Microsoft Word, Google Docs, Outlook, Gmail, and Evernote use this type of editor.\\n\\nTiddlyWiki takes a different approach: it uses a ''markup language'', or ''WYSIWYM'' paradigm (“What You See is What You Mean”). In this type of editor, you see only plain text while editing, and you include special characters or phrases (“markup”) along with the text to explain how it should be formatted when you view it. For instance, to see text in //italics// while viewing it, you put it between `//double slashes//` while editing.\\n\\nIf you've never used a markup language before, this may seem like a primitive and overly difficult way to write content, and it's true that markup languages take a little longer to learn than WYSIWYG editors, but once you've learned them, they are more powerful. (Check out the [[Advantages of WYSIWYM]] appendix for details.)\\n\\nTiddlyWiki calls its markup language ''wikitext''. The basic structure of TiddlyWiki wikitext is similar to that of other popular markup languages like Markdown, MediaWiki, reStructuredText, and AsciiDoc. However, wikitext is more powerful than most other markup languages, because it offers expressions that pull data from and make decisions based on other tiddlers in your wiki. If you have some content stored somewhere in your wiki in a consistent format (which we'll learn how to do in this chapter and the next), you can use wikitext to slice and process it and display it in a different format -- it's like a spreadsheet for your notes. In fact, this facility is so flexible that the majority of TiddlyWiki itself is implemented in wikitext, rather than in a traditional programming language.\\n\\n\\nWe'll look at some of the most important and popular wikitext syntax shortly. (//Syntax// comprises the rules for producing correctly formed sentences or expressions in a natural or computer language.) You can also visit the [[Wikitext Reference]] appendix at any time to look up the syntax.\\n\\nA useful tool as you're learning is TiddlyWiki's ''editor toolbar'', which includes a number of buttons that insert common markup. For instance, you can click the italics button to insert the text `////` and put the cursor in between the slashes, or click the button with some text already highlighted to surround it with slashes. TiddlyWiki also offers a side-by-side preview, so you can write wikitext on the left and see the displayed version on the right; we'll see how to do this when we start writing tiddlers in the [[Journal Tiddlers]] section. Here's an example of what writing in wikitext looks like with the side-by-side preview (from my [[Mosaic Muse|Public Wikis]] wiki):\\n\\n[img[side-by-side-wikitext.png]]\\n\\nSometimes text in the raw markup language (in TiddlyWiki, that's wikitext) is called ''source'', and the displayed version is called ''output''. In the screenshot above, the left half is source and the right half is output. The process of turning source into output and displaying it on the screen is called ''rendering''.\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\\n\\n\\n\"},\"Working with Dates\":{\"title\":\"Working with Dates\",\"created\":\"20210206180622120\",\"description\":\"TiddlyWiki offers tooling for displaying, retrieving, and computing differences between dates.\",\"modified\":\"20241017010444959\",\"parent\":\"Tips and Tricks\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Dates are messy. The calendar is weird, for one thing: days of the week don't fall on the same days every year, there are leap years, there used to be the [[Julian calendar|https://en.wikipedia.org/wiki/Julian_calendar]]. Then time zones get in the way. Then we have a zillion different ways of writing the same dates and times.\\n\\nAll this is to say, don't expect TiddlyWiki to work miracles here: dates are hard no matter what, and TiddlyWiki doesn't work that hard for us to make them easier. But if you understand a few things, you should be able to avoid getting entirely defeated by dates and times.\\n\\n!! Timestamp format\\n\\nAs we learned in [[Meeting Tiddlers]], {{Datetime Format}}\\n\\nThis format, sometimes called a ''timestamp'', is used for storing dates in the built-in `created` and `modified` dates. You should normally use this same format for any date fields that you create, so that you can take advantage of all the other date tools described below.\\n\\nIt's possible to leave some digits of precision off, for instance, the milliseconds. Any missing digits are assumed to be zero (if this produces an invalid date, the result is relatively meaningless but will be an earlier day than the remaining digits would suggest).\\n\\n''Beware of leaving the time off entirely.'' If you do that, it will be midnight UTC, and if you live in the Western Hemisphere, your timezone has a negative [[UTC offset|https://en.wikipedia.org/wiki/UTC_offset]]. This will cause dates at midnight UTC to roll over to the previous day when converted to your local time (so if you say `20200602`, it will display as June 1, 2020). It's safer to specify a time of 12:00 noon if you don't care about the time -- this will always work right //almost// everywhere in the world (there are a handful of locations around the Pacific that have a +12 or higher offset, so if you live there you might need to bring it back a couple of hours).\\n\\n\\n!! Displaying dates\\n\\nWay back in [[Meeting Tiddlers]], you were given the following mysterious magic snippet to check your work writing a date field:\\n\\n{{Sn:MagicDateSnippet||BasicSnippet}}\\n\\nThis ought to be easier to understand now. The `$view` widget, as mentioned in [[Hiding and Showing Things]], allows you to look at the contents of fields. It's much like [[transcluding a field|Field Transclusions]], but it doesn't wikify the contents; instead, it can display them verbatim or apply a variety of other formats. In this case, we've chosen the `date` option, one of the widget's most important applications. We additionally have to supply a `template`, which is a date format string, consisting of placeholders describing what components of a date should go where. In this case, it shows the day of the month, the month name, the four-digit year, and the hour, minute, and second in 12-hour format, with AM or PM listed at the end. A list of all the placeholders can be found in the [[Date Format|https://tiddlywiki.com/#DateFormat]] section of the TiddlyWiki documentation.\\n\\nAs another example, let's see on what day the `Metadata` tiddler describing the version of this book was last modified, in a long date format typical for the United States:\\n\\n{{Sn:MetadataDateUpdated||MagicSnippet}}\\n\\n\\n!! Getting the current date\\n\\nAs we discussed in [[Creating Tiddlers With Predefined Fields]], it's commonly helpful to ''retrieve the current date and time'' in order to prefill a field. This can be done with the `now` macro, which accepts any date format string, as described above, as a parameter. For some reason, it does not default to the format string needed to produce the standard internal format, which isn't exactly easy to remember, so I find it helpful to add a [[function|Functions]] like the following:\\n\\n{{Sn:NowTimestamp||MagicSnippet}}\\n\\n(Why use a function rather than a procedure or macro? That's such a good question that I'll leave it as an exercise.)\\n\\n\\n!! Calculations with dates\\n\\nYou can use the `days` filter operator to find tiddlers that have a date tiddler before or after a particular time relative to the current date. For instance, to find all meetings that have occurred in the last 7 days or have yet to occur, we could say:\\n\\n```html\\n<<list-links \\\"[tag[Meeting]days:at[-7]]\\\">>\\n```\\n\\nUnfortunately, the [[documentation|https://tiddlywiki.com/#days%20Operator]] of the `days` operator is, as of this writing, almost useless. I have read it dozens of times and am no closer to understanding what it means, and nobody I have talked to has professed to actually understand the operator. A more useful reference I often visit is this [[forum thread|https://groups.google.com/g/tiddlywiki/c/60yAONBAh04/]]; you might want to bookmark that now.\\n\\n\\n!! Plugins\\n\\nFor more complicated needs, a wide variety of [[plugins|Useful Plugins]] and tricks are available, including these:\\n\\n* [[Calculating “N days from now”|https://groups.google.com/g/tiddlywiki/c/y_GjM302u60]]\\n* [[Date picker|http://kixam.github.io/TW5-datePicker/]] -- provides an `$edit-date` widget so you don't have to manually figure out what the appropriate timestamp is for an arbitrary date\\n\\n\\n!! Exercises\\n\\n{{Ex:CreatedNowButton||ExerciseTemplate}}\\n{{Ex:NowTimestampFunction||ExerciseTemplate}}\\n{{Ex:DateFormatter||ExerciseTemplate}}\\n\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\"},\"Wr:CodeBlocks\":{\"title\":\"Wr:CodeBlocks\",\"caption\":\"{{$:/core/images/mono-block}} Code blocks\",\"created\":\"20210131145918563\",\"modified\":\"20210320144937334\",\"tags\":\"[[Wikitext Reference]]\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Code blocks work much like block quotes, only they begin and end with <code>&#96;&#96;&#96;</code> instead of `<<<`, and they display their contents in a fixed-width font, respecting line breaks. If you install the official Highlight [[plugin|Plugins]], you can also specify a language for [[syntax highlighting|https://en.wikipedia.org/wiki/Syntax_highlighting]] after the opening backticks.\\n\\n{{Sn:WikitextCodeBlock||MagicSnippet}}\"},\"Wr:Headings\":{\"title\":\"Wr:Headings\",\"caption\":\"{{$:/core/images/heading-1}} Headings\",\"created\":\"20210131145939469\",\"modified\":\"20241017011831660\",\"tags\":\"[[Wikitext Reference]]\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"{{Sn:WikitextHeadings||MagicSnippet}}\\n\\nHeadings should be used sparingly in TiddlyWiki. If you find yourself creating complex multi-level headings within a tiddler, you [[should probably be creating multiple tiddlers|Slicing Up Content]] instead.\\n\\nHeading 1 is usually not used (in HTML documents, it is reserved for the page title).\\n\\nAnything below Heading 4 is smaller than the body text and not particularly useful. If you find yourself needing anything deeper than Heading 3, you should almost certainly be splitting into multiple tiddlers anyway. I usually try to avoid more than one level of headings within an individual tiddler.\\n\\nHeadings are [[block-level elements|Block Mode and Inline Mode]], so you need to put a blank line between text and a following heading, or the heading will get rolled into the preceding paragraph, which is almost certainly not what you want:\\n\\n{{Sn:WikitextHeadingsRolledIn||MagicSnippet}}\"},\"Wr:HorizontalRules\":{\"title\":\"Wr:HorizontalRules\",\"caption\":\"Horizontal rules\",\"created\":\"20210131152830004\",\"modified\":\"20210320145050316\",\"tags\":\"[[Wikitext Reference]]\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"You can put a horizontal rule in your tiddler to mark a new, unnamed section by putting at least three hyphens on a line by themselves after a blank line:\\n\\n{{Sn:WikitextHorizontalRule||MagicSnippet}}\"},\"Wr:Images\":{\"title\":\"Wr:Images\",\"caption\":\"{{$:/core/images/picture}} Images\",\"created\":\"20210131152534431\",\"modified\":\"20241017012010146\",\"tags\":\"[[Wikitext Reference]]\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"[[Image tiddlers|Images and Attachments]] can be simply displayed within other tiddlers by [[transcluding the image tiddler|Field Transclusions]]:\\n\\n{{Sn:WikitextImageTransclusion||MagicSnippet}}\\n\\nUsing the `img` link-like syntax, you can also specify a size:\\n\\n{{Sn:WikitextImageImgify||MagicSnippet}}\\n\\nThe `img` syntax can also directly include images available at a web URL:\\n\\n{{Sn:WikitextWebImage||MagicSnippet}}\\n\\nFor more on including images in your wiki, see [[Images and Attachments]].\"},\"Wr:InlineFormatting\":{\"title\":\"Wr:InlineFormatting\",\"caption\":\"{{$:/core/images/italic}} Inline formatting\",\"created\":\"20210131145932529\",\"modified\":\"20210322015851587\",\"tags\":\"[[Wikitext Reference]]\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"{{Sn:WikitextInlineTextFormatting||MagicSnippet}}\\n\\nUsing backticks to create monospaced text also inhibits further parsing of wikitext inside the backticks, so you can use this to talk about TiddlyWiki markup or prevent TiddlyWiki from treating computer code or other punctuation-heavy text as wiki markup.\\n\\nWhen creating bold italics (or any other combination of formatting), be sure to close the bold and italic in the opposite order you opened them, or you will [[get stuck in inline mode|Block Mode and Inline Mode]] and the remainder of the tiddler will be formatted incorrectly:\\n\\n{{Sn:WikitextBoldItalicBad||MagicSnippet}}\"},\"Wr:LineBreaks\":{\"title\":\"Wr:LineBreaks\",\"caption\":\"Maintaining line breaks\",\"created\":\"20210131151340756\",\"modified\":\"20210131153038726\",\"tags\":\"[[Wikitext Reference]]\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Normally, TiddlyWiki only starts a new paragraph when you leave a blank line (two presses of the Enter key). While usually helpful, this can be unwanted in a few circumstances, like when trying to display poetry. You can turn off this behavior for a block of text by wrapping it in triple quotes:\\n\\n{{Sn:WikitextTripleQuotes||MagicSnippet}}\\n\\nWhen displaying passages this way, you might also want to put the text in a block quote or indent some lines. You can combine this with the block-quote syntax, and use HTML //em spaces// (`&emsp;`) to add a small indent:\\n\\n{{Sn:WikitextPoetryMarkup||MagicSnippet}}\\n\"},\"Wr:Links\":{\"title\":\"Wr:Links\",\"caption\":\"{{$:/core/images/link}} Links\",\"created\":\"20210131145925457\",\"modified\":\"20240614032354443\",\"tags\":\"[[Wikitext Reference]]\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"You can create both internal and external [[links|Links]] using the `[[double bracket]]` syntax. Internal links go to another tiddler, while external links go to a URL; TiddlyWiki automatically selects the correct type based on the link target. To make the link text different than the target, you place the link text first, followed by a pipe (`|`) character and then the link target.\\n\\nHere are some examples:\\n\\n{{Sn:WikitextLinksExample||MagicSnippet}}\\n\\nURLs or paths to files are automatically linked if they appear in the text of your tiddler. However, there are a handful of cases where TiddlyWiki can't automatically detect something as a URL, for instance if it's a relative path to a file on your computer (see [[Images and Attachments]]) for why you might want that. Then placing the path by itself will make it normal text, and putting it in double square brackets will try to link to a tiddler with that name. In this case, you can use the `ext` syntax to force an external link.\\n\\n{{Sn:WikitextExtForce||MagicSnippet}}\\n\\nIf CamelCase links are on in the control panel, words in CamelCase are automatically turned into links. If you want to prevent a CamelCase word from turning into a link, prefix it with a tilde: `~CamelCase`. See the [[CamelCase appendix|CamelCase]] for details.\"},\"Wr:Lists\":{\"title\":\"Wr:Lists\",\"caption\":\"{{$:/core/images/list-bullet}} Lists\",\"created\":\"20210131145945917\",\"modified\":\"20210320145234700\",\"tags\":\"[[Wikitext Reference]]\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Bulleted (//unordered//) lists:\\n\\n{{Sn:WikitextBulletedList||MagicSnippet}}\\n\\nNumbered (//ordered//) lists:\\n\\n{{Sn:WikitextNumberedList||MagicSnippet}}\\n\\nBulleted and numbered lists can be combined:\\n\\n{{Sn:WikitextCombinedList||MagicSnippet}}\\n\\nTo nest multiple lines of [[HTML]] within a wikitext list, for instance to include multiple paragraphs or other complicated content within a single list item, you can open a `<div>` at the end of a list element:\\n\\n{{Sn:WikitextHtmlInList||MagicSnippet}}\\n\\nDefinition lists:\\n\\n{{Sn:WikitextDefinitionList||MagicSnippet}}\"},\"Wr:Quotes\":{\"title\":\"Wr:Quotes\",\"caption\":\"{{$:/core/images/quote}} Quotes\",\"created\":\"20210131145912549\",\"modified\":\"20210320145248231\",\"tags\":\"[[Wikitext Reference]]\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"There are two forms of block quotes. The line form uses a single `>`, like plain-text email. This form can be nested. The block form opens and closes with `<<<` on a separate line.\\n\\n{{Sn:WikitextQuotes||MagicSnippet}}\"},\"Wr:Styles\":{\"title\":\"Wr:Styles\",\"caption\":\"Styles\",\"created\":\"20210131152547938\",\"modified\":\"20210131154106270\",\"tags\":\"[[Wikitext Reference]]\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"You can apply arbitrary CSS styles or classes to blocks of text.\\n\\n{{Sn:WikitextStyles||MagicSnippet}}\\n\\nSee [[Stylesheets]] for more information on styles and this syntax.\"},\"Wr:Tables\":{\"title\":\"Wr:Tables\",\"caption\":\"Tables\",\"created\":\"20210131145854489\",\"modified\":\"20210213232523034\",\"tags\":\"[[Wikitext Reference]]\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Tables are created by putting pipe characters (`|`) between the columns, and putting each row on a separate line. A `!` can be placed at the beginning of a cell to turn it into a header.\\n\\n{{Sn:WikitextTableReference||MagicSnippet}}\\n\\nAlignment can be accomplished by adding spaces next to the vertical bars. To left-align, put a space at the right; to right-align, put a space at the left; and to center-align, put a space on both sides. By default, header cells are centered and other cells are left-aligned. You can see this in action below:\\n\\n{{Sn:WikitextTableAlignment||MagicSnippet}}\\n\\nIt's also possible to merge cells and apply further [[HTML]] markup. In most cases, you likely won't need these features, but if they sound useful, you can read about them in the [[TiddlyWiki documentation|https://tiddlywiki.com/#Tables%20in%20WikiText]].\"},\"Wr:Transclusions\":{\"title\":\"Wr:Transclusions\",\"caption\":\"{{$:/core/images/transcludify}} Transclusions\",\"created\":\"20210131145843458\",\"modified\":\"20241017012125083\",\"tags\":\"[[Wikitext Reference]]\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"[[Transclusions|Transclusion]] of [[fields|Fields]], [[variables|Variables]], [[procedures|Procedures]], [[functions|Functions]], and [[macros|Macros]] are an essential part of TiddlyWiki. Here's the standard syntax for including bits and pieces from other places in a tiddler.\\n\\nSee [[Updated Summary of Transclusion Syntax]] for a more detailed treatment.\\n\\n<table class=\\\"gtw-transclusions-table\\\" >\\n  <tr>\\n    <td>[[Transclude the text field of a tiddler|Field Transclusions]]</td>\\n    <td>{{Sn:WikitextTransclusionBasic||MagicSnippet}}</td>\\n  </tr>\\n  <tr>\\n    <td>[[Transclude a specific field of a tiddler|Field Transclusions]], here `caption`</td>\\n    <td>{{Sn:WikitextTransclusionField||MagicSnippet}}</td>\\n  </tr>\\n  <tr>\\n    <td>Transclude an index from a [[data tiddler|Data Tiddlers]]</td>\\n    <td>(The [[Metadata]] tiddler contains details about //Grok TiddlyWiki// like its version number and project URL.)\\n\\n    {{Sn:WikitextTransclusionData||MagicSnippet}}</td>\\n  </tr>\\n  <tr>\\n    <td>[[Transclude a tiddler through a template|Templates and the Current Tiddler]]</td>\\n    <td>{{Sn:WikitextTransclusionTemplate||MagicSnippet}}</td>\\n  </tr>\\n  <tr>\\n    <td>Transclude the [[current tiddler|Templates and the Current Tiddler]] through a template</td>\\n    <td>{{Sn:WikitextCurrentTransclusionTemplate||MagicSnippet}}</td>\\n  </tr>\\n  <tr>\\n    <td>Transclude a tiddler [[with parameters|Parameterizing Field Transclusions]]</td>\\n    <td>\\n\\n```html\\n{{Sn:WikitextParameterTransclusion|param1|param2}}\\n```\\n\\n      (This one can't be shown as a live example because the live example code loses the parameters before they can be passed on.)\\n    </td>\\n  </tr>\\n  <tr>\\n    <td>[[Transclude the result|Filters and Transclusions]] of a [[filter|Filters]]</td>\\n    <td>{{Sn:WikitextTransclusionFilter||MagicSnippet}}</td>\\n  </tr>\\n  <tr>\\n    <td>Transclude the result of a filter through a [[template|Templates and the Current Tiddler]]</td>\\n    <td>{{Sn:WikitextTransclusionFilterTemplate||MagicSnippet}}</td>\\n  </tr>\\n  <tr>\\n    <td>Transclude the value of a [[variable|Variables]]</td>\\n    <td>{{Sn:WikitextTransclusionVariable||MagicSnippet}}</td>\\n  </tr>\\n  <tr>\\n    <td>Call a [[procedure|Procedures]]</td>\\n    <td>{{Sn:WikitextTransclusionProcedure||MagicSnippet}}</td>\\n  </tr>\\n  <tr>\\n    <td>Transclude the result of the first item in a filter expression returned by a [[function|Functions]]</td>\\n    <td>{{Sn:WikitextTransclusionFunctionAngles||MagicSnippet}}</td>\\n  </tr>\\n  <tr>\\n    <td>Call a [[function|Functions]] within a filter expression using the `function` operator</td>\\n    <td>{{Sn:WikitextTransclusionFunctionFunction||MagicSnippet}}</td>\\n  </tr>\\n  <tr>\\n    <td>Call a [[function|Functions]] within a filter expression as an operator (requires the function to have a `.` in its name)</td>\\n    <td>{{Sn:WikitextTransclusionFunctionDotOperator||MagicSnippet}}</td>\\n  </tr>\\n  <tr>\\n    <td>Call a [[macro|Macros]] (transcluding its result), treating its parameter as a variable</td>\\n    <td>{{Sn:WikitextTransclusionMacro||MagicSnippet}}</td>\\n  </tr>\\n  <tr>\\n    <td>Call a [[macro|Macros]] (transcluding its result), using its parameter in text substitution</td>\\n    <td>{{Sn:WikitextTransclusionMacroSubst||MagicSnippet}}</td>\\n  </tr>\\n  <tr>\\n    <td>Include the value of a variable in a macro via text substitution</td>\\n    <td>{{Sn:MacroVariableTextSubstitution||MagicSnippet}}</td>\\n  </tr>\\n</table>\\n\\n<style>\\ntable.gtw-transclusions-table {\\n  width: 100%;\\n}\\ntable.gtw-transclusions-table tr td {\\n  padding: 5px;\\n}\\ntable.gtw-transclusions-table tr td:first {\\n  width: 20%;\\n}\\n</style>\"},\"Writing Shell Scripts Against a TiddlyWiki\":{\"title\":\"Writing Shell Scripts Against a TiddlyWiki\",\"created\":\"20200822201508518\",\"description\":\"External tools can access the data in your TiddlyWiki by reading files and calling a Node.js CLI.\",\"modified\":\"20241017011525566\",\"parent\":\"Getting Technical\",\"prerequisite\":\"A basic background in shell scripting or some other scripting language like Python\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"(''Prerequisite'' for this section: {{!!prerequisite}}.)\\n\\nIf you're a [[Unix philosophy|https://en.wikipedia.org/wiki/Unix_philosophy]] person and believe that programs should do one thing well and integrate well with other programs, you might be wondering whether your data is going to be trapped in TiddlyWiki. Good news: if you install the Node.js backend on your computer and host your wiki there, you can easily integrate with other programs in whatever way you please. (It's also possible to quickly convert a single-file wiki to a Node.js folder wiki, so if you prefer to use a single file but sometimes need to get at the contents programmatically, you can extract a new folder wiki from the file to a temporary directory and then operate on that. [[TiddlyRemember|https://sobjornstad.github.io/TiddlyRemember/]], for instance, works this way.)\\n\\n\\n!! File structure\\n\\nThe Node.js backend stores text tiddlers in individual files, which are easy for a script or other application to read. The format is much like email: first the fields of the tiddler are listed with the name separated from the value by a colon and a space, and then after one blank line comes the contents of the `text` field.\\n\\nTiddlers containing non-textual data, such as images, are instead included unmodified, and the fields associated with their tiddlers are stored in a separate text file with a `.meta` extension (the `text` field is set to the unmodified main file). So if you have an image tiddler called `image.png`, there will be an `image.png` PNG file which can be opened in a normal image viewer, and an `image.png.meta` file containing the fields of the tiddler.\\n\\nFor the most part, the names of tiddlers are used as their filenames, with a `.tid` extension added. However, a few characters are changed so as to avoid those that are invalid in filenames on some operating systems. It's also possible to add additional transformations as TiddlyWiki filters, for instance to put tiddlers with particular tags in a different folder. The details can be found in the [[Customizing Tiddler File Naming|https://tiddlywiki.com/#Customising Tiddler File Naming]] tiddler in the TW documentation.\\n\\n\\n!! The TiddlyWiki CLI\\n\\nWhen simply looking at the files is not enough, the ''`tiddlywiki` command'', installed with the npm package, lets you perform most any operation you need, such as rendering tiddlers to HTML or plain text, or selecting tiddlers that match a filter and writing them into a new wiki.\\n\\nThe TiddlyWiki CLI has a rather unconventional syntax that often confuses new users. Most CLIs would use positional parameters with the first parameter being the operation to perform:\\n\\n```bash\\ntiddlywiki render FILTER\\n```\\n\\nOr perhaps a positional parameter for the operations and double-dashed options for the details:\\n\\n```bash\\ntiddlywiki render --filter=FILTER\\n```\\n\\nInstead, TiddlyWiki uses double-dashed options for the actual //operations//, and positional arguments for the details on each operation:\\n\\n```bash\\ntiddlywiki --render FILTER\\n```\\n\\nYou can, and often must, chain these together. So to set the source wiki and then save the wiki folder, you would do:\\n\\n```bash\\ntiddlywiki --load SOURCE_WIKI --render FILTER\\n```\\n\\nThis is important because the CLI is stateless. From the help message, you might expect this to work:\\n\\n```bash\\ntiddlywiki --load SOURCE_WIKI\\ntiddlywiki --render FILTER\\n```\\n\\nBut it doesn't -- the first command sets the wiki to load but doesn't persist that setting, then exits, so it amounts to a no-op. The second command will continue to use the default source location (the current directory).\\n\\n\\n!! Editing wiki files\\n\\nIf you're going to edit wiki files on disk, rather than just reading them, be aware that you will need to ''restart the server to pick up the changes'', as it assumes it is the exclusive user of the folder while it's running and does not watch files on disk. The plugin [[Bob|https://github.com/OokTech/TW5-Bob]] adds listening functionality along with some other helpful features and is worth a look if you plan to do this more than occasionally.\\n\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\"},\"Your First Dynamic List\":{\"title\":\"Your First Dynamic List\",\"created\":\"20200603023508451\",\"description\":\"You can create lists of tiddlers that automatically update to show all the tiddlers that currently match a filter.\",\"modified\":\"20241015032325763\",\"parent\":\"Filtering and Formatting\",\"tags\":\"Section\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Searching with filters is all very nice, but what if we want to look for the same thing all the time? For instance, we probably often need to go back and look at our notes from recent meetings. It would be nice to have a list of all our meetings from newest to oldest, rather than having to remember what we called each meeting or exactly when it was and search for it.\\n\\nFortunately, one of the things TiddlyWiki does best is create dynamic lists -- lists of tiddlers or other content that automatically update as the wiki changes. Dynamic lists take a filter and do something with all of the tiddlers that filter returns. In [[Slicing Up Content]], we said the role of a tiddler containing a dynamic list was much like that of a sentence: it describes the relationships between other things.\\n\\nLet's create a new tiddler to try this out in and call it `MeetingList`. If we want to give it a tag, we could tag it `Tool`.\\n\\n\\n!! Creating a `$list` widget\\n\\nThe ''`$list` widget'' is among the most important and frequently used TiddlyWiki widgets. This widget is named quite appropriately for our purpose, since we're trying to create a list, but you can also use a `$list` widget to accomplish some other things that don't necessarily look like they involve listing anything. We'll see more of those uses later.\\n\\nHere's how we create a list of meetings from the output of a filter:\\n\\n```html\\n<$list filter=\\\"[tag[Meeting]]\\\"></$list>\\n```\\n\\nThat was easy. But wait, there's something wrong…all of the meeting names are run together in a single line, without even a space between them!\\n\\nWhen the list widget is used without any contents, like we did above, it simply plops each tiddler title that the filter returns right after the previous one. In HTML, line breaks only happen when you explicitly ask for them, either with a rich formatting tag like `</p>` to indicate the end of a paragraph or `</li>` to indicate the end of a list item, or with the simple `<br>` for a line break. Let's fix this by adding a `<br>` between each item:\\n\\n```html\\n<$list filter=\\\"[tag[Meeting]]\\\">\\n  <<currentTiddler>><br>\\n</$list>\\n```\\n\\nThat's better! But you're probably wondering, what the heck is this `<<currentTiddler>>` thing? We'll be talking much more about the concept of the [[current tiddler|Templates and the Current Tiddler]], as well as the `<<double angle bracket>>` [[syntax|Variables]], in <<gtw.link-chapter-number \\\"Transclusion\\\">>. For now, just think of it as a placeholder for “the item in the list currently being processed.” (If you've done any programming, the `$list` widget is much like a loop or a functional-programming `map`: the contents of the widget are displayed once for each output tiddler in the filter.)\\n\\nThere's one more problem here, which is that we haven't actually listed our meetings from newest to oldest. Let's fix that by adding a `sort` filter step:\\n\\n```html\\nHere are all your meetings from newest to oldest:\\n\\n<$list filter=\\\"[tag[Meeting]!sort[at]]\\\">\\n  <<currentTiddler>><br>\\n</$list>\\n```\\n\\n!! The future\\n\\nIn this example, we only see a list of tiddler titles that match the search criteria, which is nifty but hardly revolutionary. However, it turns out we can actually display ''any information we want'' that can be derived from the contents of the tiddlers we're listing: any field on those tiddlers, the tiddlers they link to, the number of tags they have, and so on. We'll learn how to do this in the [[next chapter|Transclusion]].\\n\\n\\n!! Exercises\\n\\n{{Ex:JaneMeetingList||ExerciseTemplate}}\\n{{Ex:BulletedMeetingList||ExerciseTemplate}}\\n{{Ex:ContactList||ExerciseTemplate}}\\n{{Ex:ContactListNoPhoneExclusion||ExerciseTemplate}}\\n{{Ex:LinkPattern||ExerciseTemplate}}\\n\\n\\n!! Takeaways\\n\\n{{||TakeawaysTemplate}}\\n\"},\"anki-config-screenshot.png\":{\"title\":\"anki-config-screenshot.png\",\"text\":\"\",\"type\":\"image/png\",\"created\":\"20210130011052905\",\"modified\":\"20210130011003808\",\"tags\":\"Screenshot\"},\"chris-smith-empty.png\":{\"title\":\"chris-smith-empty.png\",\"text\":\"\",\"type\":\"image/png\",\"created\":\"20240829220925768\",\"modified\":\"20240829220928227\"},\"comic-sans.png\":{\"title\":\"comic-sans.png\",\"text\":\"\",\"type\":\"image/png\",\"created\":\"20240927010452237\",\"modified\":\"20240927010456814\"},\"create-th-site.png\":{\"title\":\"create-th-site.png\",\"text\":\"\",\"type\":\"image/png\",\"created\":\"20240829121822066\",\"modified\":\"20240829121824321\"},\"date-formatter-example.png\":{\"title\":\"date-formatter-example.png\",\"text\":\"\",\"type\":\"image/png\",\"created\":\"20210207181258370\",\"modified\":\"20210207181207524\",\"tags\":\"Screenshot\"},\"download-in-tiddlyhost.png\":{\"title\":\"download-in-tiddlyhost.png\",\"text\":\"\",\"type\":\"image/png\",\"created\":\"20240829121325957\",\"modified\":\"20240829121333815\"},\"edge-notched.jpg\":{\"title\":\"edge-notched.jpg\",\"text\":\"\",\"type\":\"image/jpeg\",\"created\":\"20210213211831550\",\"modified\":\"20210213211740069\",\"source\":\"Soren Bjornstad, 2021-02-06. Own work.\",\"tags\":\"Screenshot\"},\"interface.png\":{\"title\":\"interface.png\",\"text\":\"\",\"type\":\"image/png\",\"created\":\"20201125202846778\",\"modified\":\"20201125202818887\",\"tags\":\"Screenshot\"},\"open-button.png\":{\"title\":\"open-button.png\",\"text\":\"\",\"type\":\"image/png\",\"created\":\"20210408173444566\",\"modified\":\"20210408173449540\",\"tags\":\"Screenshot\"},\"savers-oh-no.png\":{\"title\":\"savers-oh-no.png\",\"text\":\"\",\"type\":\"image/png\",\"created\":\"20240829121411520\",\"modified\":\"20240829121420134\"},\"side-by-side-wikitext.png\":{\"title\":\"side-by-side-wikitext.png\",\"text\":\"\",\"type\":\"image/png\",\"created\":\"20240614035254620\",\"modified\":\"20240614035303226\"},\"xy.png\":{\"title\":\"xy.png\",\"text\":\"\",\"type\":\"image/png\",\"created\":\"20240927020741516\",\"modified\":\"20240927020741999\"}}}"
  },
  {
    "title": "$:/plugins/sobjornstad/TakeAway",
    "description": "A TiddlyWiki implementation of the mnemonic medium",
    "author": "Soren Bjornstad",
    "version": "1.3.0",
    "core-version": ">=5.3.5",
    "source": "https://groktiddlywiki.com",
    "list": "readme license",
    "dependents": "$:/plugins/sobjornstad/TiddlyRemember",
    "plugin-type": "plugin",
    "type": "application/json",
    "text": "{\"tiddlers\":{\"$:/config/sobjornstad/TakeAway/ContextualHelp/seen/creative-question\":{\"title\":\"$:/config/sobjornstad/TakeAway/ContextualHelp/seen/creative-question\",\"created\":\"20240929200528997\",\"modified\":\"20240929200528997\",\"type\":\"text/vnd.tiddlywiki\"},\"$:/config/sobjornstad/TakeAway/ContextualHelp/seen/takeaways\":{\"title\":\"$:/config/sobjornstad/TakeAway/ContextualHelp/seen/takeaways\",\"created\":\"20240929155656477\",\"modified\":\"20240929183331365\",\"type\":\"text/vnd.tiddlywiki\"},\"$:/config/sobjornstad/TakeAway/Exporter/InhibitPrefixIfQuestionMatch\":{\"title\":\"$:/config/sobjornstad/TakeAway/Exporter/InhibitPrefixIfQuestionMatch\",\"caption\":\"Skip prefix on match\",\"created\":\"20210101191505488\",\"description\":\"If the question field of the takeaway matches this regular expression, no prefix will be added to the question (e.g., you might feel prefixing questions that contain the word `TiddlyWiki` with `TiddlyWiki` is redundant).\",\"modified\":\"20210407150611410\",\"stackorder\":\"20\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"TiddlyWiki\"},\"$:/config/sobjornstad/TakeAway/Exporter/Prefix\":{\"title\":\"$:/config/sobjornstad/TakeAway/Exporter/Prefix\",\"caption\":\"Question prefix\",\"created\":\"20210101191430398\",\"description\":\"If you study many subjects with Anki, you may want to add a prefix to all TiddlyWiki-related questions so you don't mix them up with other topics that use similar terminology. The prefix will only be used when exporting, not when viewing takeaways in the text.\",\"modified\":\"20210407150628717\",\"stackorder\":\"10\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"TiddlyWiki: \"},\"$:/config/sobjornstad/TakeAway/ReviewerSeed\":{\"title\":\"$:/config/sobjornstad/TakeAway/ReviewerSeed\",\"created\":\"20210105135756693\",\"modified\":\"20241012224534828\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"17:45:34\"},\"$:/config/sobjornstad/TakeAway/Reviewer/ShowDueNotifications\":{\"title\":\"$:/config/sobjornstad/TakeAway/Reviewer/ShowDueNotifications\",\"caption\":\"Show due notifications\",\"created\":\"20201230133708020\",\"description\":\"Show a banner in the sidebar when takeaways are due for review. Disable this if you're using an external spaced-repetition tool like Anki.\",\"modified\":\"20210407150742448\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"yes\"},\"$:/config/sobjornstad/TakeAway/Reviewer/UseFourButtons\":{\"title\":\"$:/config/sobjornstad/TakeAway/Reviewer/UseFourButtons\",\"caption\":\"Use four answer buttons\",\"created\":\"20201230132338280\",\"description\":\"Show the //Hard// and //Easy// answer choices when reviewing. Changing this setting does not affect your review history and is completely reversible.\",\"modified\":\"20210407150748616\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"yes\"},\"$:/config/sobjornstad/TakeAway/Scheduler/AgainEasePenalty\":{\"title\":\"$:/config/sobjornstad/TakeAway/Scheduler/AgainEasePenalty\",\"caption\":\"Forgot penalty\",\"created\":\"20201230000007996\",\"description\":\"Percentage points by which the ease of a takeaway is decreased when choosing //Forgot//.\",\"modified\":\"20210407150759447\",\"stackorder\":\"55\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"20\"},\"$:/config/sobjornstad/TakeAway/Scheduler/EasyEaseBonus\":{\"title\":\"$:/config/sobjornstad/TakeAway/Scheduler/EasyEaseBonus\",\"caption\":\"Easy bonus\",\"created\":\"20201230000015631\",\"description\":\"Percentage points by which the ease of a takeaway is increased when choosing //Easy//.\",\"modified\":\"20210407150807215\",\"stackorder\":\"70\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"15\"},\"$:/config/sobjornstad/TakeAway/Scheduler/EasyMultiplier\":{\"title\":\"$:/config/sobjornstad/TakeAway/Scheduler/EasyMultiplier\",\"caption\":\"Easy multiplier\",\"created\":\"20201229235756173\",\"description\":\"Extra multiplier for the interval of a takeaway when choosing //Easy//, in addition to the ease; e.g., 2.0 will make the interval twice as long as it would be if you had chosen //Good//.\",\"modified\":\"20210407150812698\",\"stackorder\":\"50\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"1.3\"},\"$:/config/sobjornstad/TakeAway/Scheduler/HardEasePenalty\":{\"title\":\"$:/config/sobjornstad/TakeAway/Scheduler/HardEasePenalty\",\"caption\":\"Hard penalty\",\"created\":\"20201229235951493\",\"description\":\"Percentage points by which the ease of a takeaway is decreased when choosing //Hard//.\",\"modified\":\"20210407150819235\",\"stackorder\":\"60\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"15\"},\"$:/config/sobjornstad/TakeAway/Scheduler/HardMultiplier\":{\"title\":\"$:/config/sobjornstad/TakeAway/Scheduler/HardMultiplier\",\"caption\":\"Hard multiplier\",\"created\":\"20201230000218198\",\"description\":\"Multiplier for the interval of a takeaway when choosing //Hard//; e.g., 1.2 will make the interval 1.2 times as long as it currently is.\",\"modified\":\"20210407150823828\",\"stackorder\":\"30\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"1.2\"},\"$:/config/sobjornstad/TakeAway/Scheduler/InitialEase\":{\"title\":\"$:/config/sobjornstad/TakeAway/Scheduler/InitialEase\",\"caption\":\"Starting ease\",\"created\":\"20201230013117977\",\"description\":\"Ease of newly seen takeaways. The ease is the size of the new interval when choosing //Good// compared to the previous interval, expressed as a percentage; e.g., 200 will make //Good// double the interval. The ease is adjusted when you select options other than //Good//.\",\"modified\":\"20210407150829885\",\"stackorder\":\"20\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"250\"},\"$:/config/sobjornstad/TakeAway/Scheduler/InitialForgotInterval\":{\"title\":\"$:/config/sobjornstad/TakeAway/Scheduler/InitialForgotInterval\",\"caption\":\"Initial forgot interval\",\"created\":\"20201230013113133\",\"description\":\"Initial interval for newly seen takeaways if you choose “forgot” in-text; the number of days before first review. This option does not affect the interval a forgotten takeaway is reduced to, which is always 1.\",\"modified\":\"20210407150837685\",\"stackorder\":\"10\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"1\"},\"$:/config/sobjornstad/TakeAway/Scheduler/InitialRememberedInterval\":{\"title\":\"$:/config/sobjornstad/TakeAway/Scheduler/InitialRememberedInterval\",\"caption\":\"Initial remembered interval\",\"created\":\"20210213214003604\",\"description\":\"Initial interval for newly seen takeaways if you choose “remembered” in-text; the number of days before first review.\",\"modified\":\"20210407150844217\",\"stackorder\":\"12\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"5\"},\"$:/config/sobjornstad/TakeAway/Scheduler/LeechThreshold\":{\"title\":\"$:/config/sobjornstad/TakeAway/Scheduler/LeechThreshold\",\"caption\":\"Leech threshold\",\"created\":\"20210123180740015\",\"description\":\"Number of lapses (nonconsecutive selections of //Forgot//) at which the leech warning banner will appear. If the warning is hidden, it will appear again at every multiple of this number.\",\"modified\":\"20210407150859105\",\"stackorder\":\"80\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"4\"},\"$:/config/sobjornstad/TakeAway/Scheduler/TimeOffset\":{\"title\":\"$:/config/sobjornstad/TakeAway/Scheduler/TimeOffset\",\"caption\":\"Time modifier for due dates\",\"created\":\"20210102002153151\",\"description\":\"//If your local time zone is UTC+12 or greater, read on. Otherwise, ignore this setting and be happy.// TiddlyWiki's `days[]` operator has an odd notion of time zones, which can cause takeaways to become due a day early if your UTC offset is negative and the time portion is left off the datestamp. To fix this, TakeAway puts all due dates at noon UTC and then ignores the time portion, which causes the takeaways to properly become due at midnight local time in almost all time zones. However, it fails if you are at UTC+12 or greater, in which case your takeaways may become due a day //late//. To fix this, decrease this value so that N + your UTC offset < 24. The default value is 12.\",\"modified\":\"20210407150849764\",\"stackorder\":\"90\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"12\"},\"$:/plugins/sobjornstad/TakeAway/AddTakeawayButton\":{\"title\":\"$:/plugins/sobjornstad/TakeAway/AddTakeawayButton\",\"created\":\"20240615154834366\",\"modified\":\"20240929162418929\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\define create-takeaway-actions()\\n  <$action-createtiddler\\n    $basetitle=\\\"Ta:$(rightNow)$\\\"\\n    $savetitle=\\\"$:/temp/addq!!newtid\\\"\\n    tags=\\\"Takeaway\\\"\\n    $(fieldAttributes)$\\n    qtype=<<takeawayType>>\\n    origin=<<currentTiddler>>\\n  />\\n  <$action-deletetiddler $tiddler=\\\"$:/temp/addq\\\"/>\\n\\\\end create-takeaway-actions\\n\\n\\\\procedure add-takeaway-button(takeawayType)\\n  <$tiddler tiddler=\\\"$:/temp/addq\\\">\\n    <$let previewTakeawayType=<<takeawayType>>>\\n      {{||$:/plugins/sobjornstad/TakeAway/TakeawayBackSide}}\\n    </$let>\\n  </$tiddler>\\n\\n  <$let\\n    rightNow=<<now \\\"[UTC]YYYY0MM0DD0hh0mm0ss0XXX\\\">>\\n    qafields=`question=\\\"\\\"\\\"${ [{$:/temp/addq!!question}] }$\\\"\\\"\\\" answer=\\\"\\\"\\\"${ [{$:/temp/addq!!answer}] }$\\\"\\\"\\\"`\\n    czfields=`question=\\\"\\\"\\\"${ [{$:/temp/addq!!question}] }$\\\"\\\"\\\"`\\n    fieldAttributes={{{ [<takeawayType>match[rememberq]then<qafields>else<czfields>] }}}\\n  >\\n    <$button actions=<<create-takeaway-actions>>>\\n      Add takeaway\\n    </$button>\\n  </$let>\\n\\\\end\"},\"$:/plugins/sobjornstad/TakeAway/ContextualHelpMacros\":{\"title\":\"$:/plugins/sobjornstad/TakeAway/ContextualHelpMacros\",\"created\":\"20210817203226888\",\"modified\":\"20240615153252864\",\"tags\":\"$:/tags/Global\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\function gtw.help-wanted(key) [[$:/config/sobjornstad/TakeAway/ContextualHelp/seen/]addsuffix<key>is[tiddler]then[]else[yes]!is[blank]] -[<renderingStatic>match[yes]]\\n\\n\\\\define help-seen(key) <$action-setfield $tiddler=\\\"$:/config/sobjornstad/TakeAway/ContextualHelp/seen/$key$\\\" text=\\\"\\\"/>\"},\"$:/plugins/sobjornstad/TakeAway/ContextualHelp/CreativeQuestion\":{\"title\":\"$:/plugins/sobjornstad/TakeAway/ContextualHelp/CreativeQuestion\",\"created\":\"20210817222020209\",\"modified\":\"20240615154202537\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<% if [gtw.help-wanted[creative-question]] %>\\n<% if [all[current]search:question[Give an example]] %>\\n\\n<div class=\\\"tr-contextual-help\\\">\\n\\n!!! Tip:\\n\\nThis is a //creative question// with a potentially infinite number of answers. Use your understanding of the topic to make up a new answer you've never given before. You are not necessarily wrong if you don't see your new example when you show the answer -- the answer will include only a couple of possibilities.\\n\\nYou can identify creative takeaways by the text “(try to pick a new one)” at the end of the prompt. Spaced-repetition nerds can see [[this explanation|https://zettelkasten.sorenbjornstad.com/#CreativePattern]] of the pattern.\\n\\n<div style=\\\"text-align: center;\\\">\\n  <$button\\n    actions=<<help-seen \\\"creative-question\\\">> \\n    class=\\\"tc-btn-invisible tc-tiddlylink\\\"\\n  >\\n    I've got it, don't remind me again\\n  </$button>\\n</div>\\n\\n</div>\\n\\n<% endif %> <!-- this is a creative question -->\\n<% endif %> <!-- gtw.help-wanted -->\"},\"$:/plugins/sobjornstad/TakeAway/ContextualHelp/DetailsWidget\":{\"title\":\"$:/plugins/sobjornstad/TakeAway/ContextualHelp/DetailsWidget\",\"created\":\"20210818005527099\",\"modified\":\"20240615153324449\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<% if [gtw.help-wanted[details-widget]] %>\\n<div class=\\\"tr-contextual-help\\\">\\n\\n!!! Tip:\\n\\nAccordions like these are used throughout //Grok TiddlyWiki// to break up long passages and show alternative options. Click on an item to show its content.\\n\\n<div style=\\\"text-align: center;\\\"><$button actions=<<help-seen \\\"details-widget\\\">> class=\\\"tc-btn-invisible tc-tiddlylink\\\">I've got it, don't remind me again</$button></div>\\n\\n</div>\\n<% endif %>\"},\"$:/plugins/sobjornstad/TakeAway/ContextualHelp/TakeAway\":{\"title\":\"$:/plugins/sobjornstad/TakeAway/ContextualHelp/TakeAway\",\"created\":\"20210818010128673\",\"modified\":\"20240615153955730\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<% if [gtw.help-wanted[takeaways]] %>\\n<div class=\\\"tr-contextual-help\\\">\\n\\n!!! Tip:\\n\\nTakeAway is a new learning tool that helps you remember what you read. As you answer the questions below to check your comprehension, TakeAway will keep track of how well you remember them and present them to you for review when it thinks you might be about to forget them.\\n\\nMore information:\\n\\n<$details summary=\\\"What is TakeAway?\\\">\\n\\n{{TakeAway Help/About TakeAway}}\\n\\n</$details>\\n<$details summary=\\\"How do I use TakeAway?\\\">\\n\\n{{TakeAway Help/Studying In Text}}\\n\\nTomorrow, or whenever it's time for your first review session, a banner will appear in the sidebar indicating that it's time to begin a review session; when you see this banner, take a moment to click the link and review what you've previously learned before diving into new sections.\\n\\n</$details>\\n\\nFind details on the theory behind takeaways in [[How to Use This Book]], and more help on the TakeAway tool itself at [[TakeAway Help]]. If you hide this tip box, you'll still be able to access the TakeAway help at any time by clicking the //help// link anywhere in TakeAway's interface.\\n\\n<div style=\\\"text-align: center;\\\"><$button actions=<<help-seen \\\"takeaways\\\">> class=\\\"tc-btn-invisible tc-tiddlylink\\\">I've got it, don't remind me again</$button></div>\\n\\n</div>\\n<% endif %>\"},\"$:/plugins/sobjornstad/TakeAway/ContextualHelp/TakeawayReviewer\":{\"title\":\"$:/plugins/sobjornstad/TakeAway/ContextualHelp/TakeawayReviewer\",\"created\":\"20210818022144250\",\"modified\":\"20240615153933104\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<% if [gtw.help-wanted[takeaway-reviewer]] %>\\n\\n<div class=\\\"tr-contextual-help\\\">\\n\\n!!! Tip:\\n\\nThe takeaways presented here, if any, are currently //due for review//, meaning TakeAway thinks you should look briefly at them again to avoid forgetting the answers soon. When you have takeaways due for review, take a few moments to review them prior to learning new material.\\n\\nIf you review regularly, you can expect to remember most of the answers at review time. However, forgetting 10--15% of them is normal -- it's impossible for TakeAway to perfectly predict exactly how long you'll remember a particular item, so it will guess wrong on occasion. TakeAway will help you relearn items you've forgotten by showing them more often, but if you find you no longer understand why the answer is correct, you should use the link provided with each takeaway to go back and re-read the original text rather than try to memorize the takeaway by rote.\\n\\nSee the [[TakeAway help page on reviewing|TakeAway Help/Reviewing]] for more information on how reviewing and the scheduling algorithm work.\\n\\n<div style=\\\"text-align: center;\\\"><$button actions=<<help-seen \\\"takeaway-reviewer\\\">> class=\\\"tc-btn-invisible tc-tiddlylink\\\">I've got it, don't remind me again</$button></div>\\n\\n</div>\\n\\n<% endif %>\"},\"$:/plugins/sobjornstad/TakeAway/CreateNewCloze\":{\"title\":\"$:/plugins/sobjornstad/TakeAway/CreateNewCloze\",\"caption\":\"Cloze deletion\",\"created\":\"20210817193451300\",\"modified\":\"20240615155930519\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\whitespace trim\\n\\\\import [[$:/plugins/sobjornstad/TakeAway/AddTakeawayButton]]\\n\\n<table>\\n<tr>\\n  <th style=\\\"text-align: left;\\\">Cloze</th>\\n  <td class=\\\"gtw-question-input\\\">\\n    <$edit-text\\n      tiddler=\\\"$:/temp/addq\\\"\\n      tag=input\\n      default=\\\"\\\"\\n      field=\\\"question\\\"\\n      placeholder=\\\"e.g., In TiddlyWiki, everything is a {tiddler}.\\\"\\n    />\\n  </td>\\n</tr>\\n</table>\\n\\n<div>\\n\\n<% if [{$:/temp/addq!!question}regexp[.*{.*}.*]] %>\\n\\n  <% if [[$:/temp/addq]get[question]!is[blank]] %>\\n\\n    <<add-takeaway-button remembercz>>\\n\\n  <% endif %>\\n\\n<% else %>\\n\\n  //Specify one or more words or phrases to occlude/hide with {single curly braces}.//\\n\\n<% endif %>\\n\\n</div>\"},\"$:/plugins/sobjornstad/TakeAway/CreateNewQa\":{\"title\":\"$:/plugins/sobjornstad/TakeAway/CreateNewQa\",\"caption\":\"Question/Answer\",\"created\":\"20210817193149287\",\"modified\":\"20240929154129682\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\whitespace trim\\n\\\\import [[$:/plugins/sobjornstad/TakeAway/AddTakeawayButton]]\\n\\n<table>\\n  <tr>\\n    <th style=\\\"text-align: left;\\\">\\n      Question\\n    </th>\\n    <td class=\\\"gtw-question-input\\\">\\n      <$edit-text\\n        tiddler=\\\"$:/temp/addq\\\"\\n        field=\\\"question\\\"\\n        tag=\\\"input\\\"\\n        default=\\\"\\\"\\n        placeholder=\\\"e.g., What field contains the name of a tiddler?\\\"\\n      />\\n    </td>\\n  </tr>\\n  <tr>\\n    <th style=\\\"text-align: left;\\\">\\n      Answer\\n    </th>\\n    <td class=\\\"gtw-question-input\\\">\\n      <$edit-text\\n        tiddler=\\\"$:/temp/addq\\\"\\n        field=\\\"answer\\\"\\n        tag=\\\"input\\\"\\n        default=\\\"\\\"\\n        placeholder=\\\"e.g., `title`\\\"\\n        class=\\\"gtw-question-input\\\"\\n      />\\n    </td>\\n  </tr>\\n</table>\\n\\n<div>\\n\\n<% if [[$:/temp/addq]get[question]!is[blank]] %>\\n<% if [[$:/temp/addq]get[answer]!is[blank]] %>\\n\\n  <<add-takeaway-button rememberq>>\\n\\n<% endif %>\\n<% endif %>\\n\\n</div>\"},\"$:/plugins/sobjornstad/TakeAway/CreateNewTrNote\":{\"title\":\"$:/plugins/sobjornstad/TakeAway/CreateNewTrNote\",\"created\":\"20201229004207931\",\"modified\":\"20240615154811419\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<<tabs\\n  \\\"$:/plugins/sobjornstad/TakeAway/CreateNewQa $:/plugins/sobjornstad/TakeAway/CreateNewCloze\\\" \\n  default:\\\"$:/plugins/sobjornstad/TakeAway/CreateNewQa\\\"\\n>>\"},\"$:/plugins/sobjornstad/TakeAway/Dateops\":{\"title\":\"$:/plugins/sobjornstad/TakeAway/Dateops\",\"created\":\"20201229225912046\",\"modified\":\"20210407150849689\",\"tags\":\"$:/tags/Macro\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\whitespace trim\\n\\n\\\\define g(y,m,d,offset:\\\"0\\\")\\n<$set name=m value={{{ [<__m__>add[9]remainder[12]] }}}>\\n<$set name=y value={{{ [<m>divide[10]floor[]negate[]add<__y__>] }}} >\\n<$set name=y4 value={{{ [<y>divide[4]floor[]] }}}>\\n<$set name=y100 value={{{ [<y>divide[100]floor[]] }}}>\\n<$set name=y400 value={{{ [<y>divide[400]floor[]] }}}>\\n<$set name=m306 value={{{ [<m>multiply[306]add[5]divide[10]floor[]] }}}>\\n<$set name=result value={{{ [[365]multiply<y>add<y4>subtract<y100>add<y400>add<m306>add[$d$]add[$offset$]subtract[1]] }}} >\\n<<result>>\\n</$set></$set></$set></$set></$set></$set></$set>\\n\\\\end\\n\\n\\n\\\\define d(g)\\n<$set name=daysperyear value=\\\"365.2425\\\">\\n<!-- y = (10000*g + 14780)/3652425 -->\\n<$set name=y value={{{ [[10000]multiply<__g__>add[14780]divide[3652425]floor[]] }}}>\\n<!-- ddd = g - (365*y + y/4 - y/100 + y/400) -->\\n<$set name=y4 value={{{ [<y>divide[4]floor[]] }}}>\\n<$set name=y100 value={{{ [<y>divide[100]floor[]] }}}>\\n<$set name=y400 value={{{ [<y>divide[400]floor[]] }}}>\\n<$set name=dddtest value={{{ [[365]multiply<y>add<y4>subtract<y100>add<y400>negate[]add<__g__>] }}} >\\n<$set name=prioryear value={{{ [<y>subtract[1]] }}} >\\n<$set name=y value={{{ [<dddtest>prefix[-]then<prioryear>] [<dddtest>!prefix[-]then<y>] }}} >\\n<$set name=ddd value={{{ [[365]multiply<y>add<y4>subtract<y100>add<y400>negate[]add<__g__>] }}} >\\n<!-- mi = (100*ddd + 52)/3060 -->\\n<$set name=mi value={{{ [[100]multiply<ddd>add[52]divide[3060]floor[]] }}} >\\n<!-- mm = (mi + 2)%12 + 1 -->\\n<$set name=mm value={{{ [<mi>add[2]remainder[12]add[1]] }}} >\\n<!-- y = y + (mi + 2)/12 -->\\n<$set name=y value={{{ [<mi>add[2]divide[12]floor[]add<y>] }}} >\\n<!-- dd= ddd - (mi*306 + 5)/10 + 1 -->\\n<$set name=dd value={{{ [<mi>multiply[306]add[5]divide[10]floor[]negate[]add<ddd>add[1]] }}} >\\n<<y>>, <<mm>>, <<dd>> <br/>\\n</$set></$set></$set></$set></$set></$set></$set></$set></$set></$set></$set></$set></$set>\\n\\\\end\\n\\n\\\\define daysfrom(y,m,d,o)\\n<$wikify name=future text=\\\"<<g $y$ $m$ $d$ $o$>>\\\">\\n<$macrocall $name=\\\"d\\\" g=<<future>>/>\\n</$wikify>\\n\\\\end\\n\\n\\\\define datestampFromOffset(y, m, d, o)\\n<$wikify name=result text=\\\"<<daysfrom $y$ $m$ $d$ $o$>>\\\">\\n  <$vars\\n    year={{{  [<result>split[,]nth[1]trim[]] }}}\\n    month={{{ [<result>split[,]nth[2]trim[]] }}}\\n    day={{{   [<result>split[,]nth[3]trim[]] }}}>\\n  <$vars\\n    paddedmonth={{{ [<month>addprefix[0]] }}}\\n    paddedday={{{   [<day>addprefix[0]] }}}>\\n    <<year>><$text text={{{ [<month>minlength[2]else<paddedmonth>] }}}/><$text text={{{ [<day>minlength[2]else<paddedday>] }}}/>{{$:/config/sobjornstad/TakeAway/Scheduler/TimeOffset}}00\\n  </$vars>\\n  </$vars>\\n\\n</$wikify>\\n\\\\end\\n\\n\\\\define daysFromDatestamp(datestamp, offset)\\n  <$vars\\n    year={{{ [<__datestamp__>split[]first[4]join[]] }}}\\n    month={{{ [<__datestamp__>split[]first[6]last[2]join[]] }}}\\n    day={{{ [<__datestamp__>split[]first[8]last[2]join[]] }}}>\\n    <$macrocall $name=datestampFromOffset\\n      y=<<year>> m=<<month>> d=<<day>> o=<<__offset__>> />\\n  </$vars>\\n\\\\end\\n\\n\\n<!-- First 4 macros are from here: https://groups.google.com/g/tiddlywiki/c/y_GjM302u60/m/H0eGNUQCCgAJ -->\\n\"},\"$:/plugins/sobjornstad/TakeAway/EditMacros\":{\"title\":\"$:/plugins/sobjornstad/TakeAway/EditMacros\",\"created\":\"20201230022210312\",\"modified\":\"20240612042844876\",\"tags\":\"$:/tags/Macro\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\whitespace trim\\n\\n\\\\define setSeennessAction(newValue)\\n  <$set name=nextInterval value={{$:/config/sobjornstad/TakeAway/Scheduler/InitialForgotInterval}}>\\n  <$wikify name=whendue text=\\\"<<getNextDueDate>>\\\">\\n    <$action-setfield\\n      $tiddler=<<currentTiddler>>\\n      seen=<<__newValue__>>\\n      ivl=<<nextInterval>>\\n      ease={{$:/config/sobjornstad/TakeAway/Scheduler/InitialEase}}\\n      due={{{ [<whendue>trim[]] }}}/>\\n    <<backToQuestionAction>>\\n  </$wikify>\\n  </$set>\\n\\\\end\\n\\n\\\\define setSeennessLink(buttonName, newValue, tooltip:\\\"\\\")\\n<$button actions=<<setSeennessAction \\\"\\\"\\\"$newValue$\\\"\\\"\\\">> class=\\\"tc-btn-invisible tc-tiddlylink\\\" tooltip=<<__tooltip__>>><<__buttonName__>></$button>\\n\\\\end\\n\\n\\\\define editLink()\\n  <$link to={{!!title}} tooltip=\\\"Go to this takeaway's tiddler to edit it.\\\">edit</$link>\\n\\\\end\\n\\n\\\\define markUnseenLink()\\n  <<setSeennessLink \\\"uncollect\\\" \\\"\\\" tooltip:\\\"Clear your progress on this takeaway, hide the answer in the text, and don't show it again in your regular reviews.\\\">>\\n\\\\end\\n\\n\\\\define markSeenLink()\\n<<setSeennessLink \\\"collect\\\" \\\"yes\\\" tooltip:\\\"Start showing this takeaway in reviews starting tomorrow.\\\">>\\n\\\\end\\n\\n\\\\define currentDueFilt() [all[current]!days:due[-1]] [all[current]days:due[0]] +[tag[Takeaway]seen[yes]has[due]]\\n\\n\\\\define laterThanTomorrowFilt() [all[current]tag[Takeaway]seen[yes]!days:due[+2]]\\n\\n\\\\define notCollectedFilt() [all[current]!seen[yes]]\\n\\n\\\\define collectedFilt() [all[current]seen[yes]]\\n\\n\\\\define iforgotButton()\\n<$button class=\\\"tc-btn-invisible tc-tiddlylink\\\" tooltip=\\\"I have forgotten this takeaway and would like to see it again tomorrow.\\\">\\n  <<againAction>>\\n  forgot</$button>\\n\\\\end\\n\\n\\\\define nextDueLink()\\n<$wikify name=tomorrow text=\\\"<<daysFromToday 1>>\\\">\\n<$wikify name=today text=\\\"<<daysFromToday 0>>\\\">\\n  <$list filter=<<laterThanTomorrowFilt>>>next review on <$view field=\\\"due\\\" format=\\\"date\\\" template=\\\"YYYY-0MM-0DD\\\"/>\\n    (<<iforgotButton>>)</$list><$list filter=<<collectedFilt>>><$reveal state=\\\"!!due\\\" type=\\\"match\\\" text={{{ [<tomorrow>trim[]]}}}>next review tomorrow</$reveal></$list><$list filter=<<currentDueFilt>>><$button class=\\\"tc-btn-invisible tc-tiddlylink\\\" tooltip=\\\"It's time to review this takeaway. Click here to start reviewing.\\\"><<startReviewSessionAction>>\\n    due for review</$button></$list><$list filter=<<notCollectedFilt>>>not collected (<<markSeenLink>>)</$list></$wikify></$wikify>\\n\\\\end\\n\\n\\\\define helpLink()\\n  <$link to=\\\"TakeAway Help\\\">help</$link>\\n\\\\end\\n\\n\\\\define sendFeedbackAction()\\n  <$action-createtiddler $basetitle=\\\"$:/temp/Feedback\\\" $savetitle=\\\"$:/temp/FeedbackCollector\\\" target=<<currentTiddler>> email={{$:/config/sobjornstad/GrokTiddlyWiki/Feedback/UserEmail}} comment=\\\"\\\" debug=\\\"yes\\\" />\\n  <$action-navigate $to=\\\"Send Feedback\\\"/>\\n\\\\end\\n\\n\\\\define sendFeedbackLink(tooltip:\\\"Suggest an improvement to this question.\\\", icon:\\\"\\\" text:\\\"send feedback\\\")\\n<$button class=\\\"tc-btn-invisible tc-tiddlylink\\\" tooltip=<<__tooltip__>>>\\n  <<sendFeedbackAction>>\\n  $icon$ $text$\\n</$button>\\n\\\\end\"},\"$:/plugins/sobjornstad/TakeAway/EditViewTemplate\":{\"title\":\"$:/plugins/sobjornstad/TakeAway/EditViewTemplate\",\"caption\":\"Edit\",\"created\":\"20210103031204057\",\"modified\":\"20210407150224079\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\define deltid() <$action-deletetiddler $tiddler=<<currentTiddler>>/>\\n\\n<table class=\\\"tr-view-form\\\">\\n<$list filter=\\\"[all[current]qtype[rememberq]]\\\" variable=_>\\n  <tr>\\n    <th>Question</th><td><$edit-text tag=input type=\\\"text\\\" default=\\\"\\\" field=\\\"question\\\" /></td>\\n  </tr>\\n  <tr>\\n    <th>Answer</th><td><$edit-text tag=input type=\\\"text\\\" default=\\\"\\\" field=\\\"answer\\\" /></td>\\n  </tr>\\n</$list>\\n<$list filter=\\\"[all[current]qtype[remembercz]]\\\" variable=_>\\n  <tr>\\n    <th>Cloze</th><td><$edit-text tag=input type=\\\"text\\\" default=\\\"\\\" field=\\\"question\\\" /></td>\\n  </tr>\\n</$list>\\n  <tr>\\n    <th>Type</th>\\n    <td>\\n      <$radio field=\\\"qtype\\\" value=\\\"rememberq\\\">&nbsp;Question/Answer</$radio>&emsp;\\n      <$radio field=\\\"qtype\\\" value=\\\"remembercz\\\">&nbsp;Cloze deletion</$radio>\\n    </td>\\n  </tr>\\n</table>\\n\\n<$list filter=\\\"[all[shadows]field:title<currentTiddler>]\\\" emptyMessage=\\\"You created this takeaway yourself.\\\"><<thisMacroExistsOnlySoTheListWidgetIsNotEmptyAndThusDoesNotDisplayTheNameOfTheTiddler>></$list>\\n<$list filter=\\\"[is[shadow]field:title<currentTiddler>]\\\">\\n\\n  <p><$button class=\\\"tc-btn-invisible tc-tiddlylink\\\" actions=<<deltid>>>Reset this takeaway to default</$button> (this will erase scheduling information and any changes to text you may have made).</p>\\n\\n  Was there an error or something hard to understand in this takeaway? If other learners might benefit from your edit, please\\n  <$button class=\\\"tc-btn-invisible tc-tiddlylink\\\">\\n    <<sendFeedbackAction>>\\n    <$action-setfield $tiddler={{$:/temp/FeedbackCollector}} comment=\\\"I've attached an improved version of this takeaway.\\\"/>\\n    submit your version\\n  </$button>.\\n\\n</$list>\\n\\n\\n\\n<style>\\ntable.tr-view-form {\\n  width: 100%;\\n}\\n\\ntable.tr-view-form th {\\n  text-align: left;\\n}\\n\\ntable.tr-view-form td {\\n  width: 100%;\\n}\\n\\ntable.tr-view-form td input[type=text] {\\n  width: 100%;\\n}\\n</style>\"},\"$:/plugins/sobjornstad/TakeAway/FileExport\":{\"title\":\"$:/plugins/sobjornstad/TakeAway/FileExport\",\"created\":\"20210209033858878\",\"modified\":\"20210408135904273\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"You can also export the takeaways you have studied to a file in one of two formats:\\n\\n* ''JSON'' -- import this file into another TakeAway-enabled TiddlyWiki to start reviewing these takeaways there, with your scheduling history and customizations preserved.<br><$button>\\n  <$action-sendmessage $message=\\\"tm-download-file\\\" $param=\\\"$:/core/templates/exporters/JsonFile\\\" exportFilter=\\\"[tag[Takeaway]]\\\" filename=<<exportButtonFilename \\\"\\\"\\\"takeaway.json\\\"\\\"\\\">>/>\\n  Export as JSON\\n</$button>\\n\\n* ''TSV'' -- import this tab-separated values file into another flashcards program or any other destination you choose. SM2-style scheduling information (ease, interval, and due date) is included, if your target application is capable of taking advantage of this information.<br><$button>\\n  <$action-sendmessage $message=\\\"tm-download-file\\\" $param=\\\"$:/plugins/sobjornstad/TakeAway/QuestionCsvTemplate\\\" filename=\\\"takeaway.tsv\\\"/>\\n  Export as TSV\\n</$button>\"},\"$:/plugins/sobjornstad/TakeAway/LeechBanner\":{\"title\":\"$:/plugins/sobjornstad/TakeAway/LeechBanner\",\"created\":\"20210123182210610\",\"modified\":\"20210516124613505\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"  <$set name=leechThreshold filter=\\\"[all[current]get[leechignores]add[1]] ~[[1]] +[multiply{$:/config/sobjornstad/TakeAway/Scheduler/LeechThreshold}]\\\">\\n  <$list filter=\\\"[all[current]get[lapses]compare:number:gteq<leechThreshold>]\\\" variable=\\\"numLapses\\\">\\n    <div class=\\\"tr-leech-warning\\\">\\n      It looks like you're struggling with this takeaway -- you've forgotten and relearned it <<numLapses>> times. You may wish to edit or uncollect it.<br>[[help|TakeAway Help/Leeches]]&nbsp;· <$button actions=<<hideLeechWarningAction>> class=\\\"tc-btn-invisible tc-tiddlylink\\\">hide warning</$button>\\n    </div>\\n  </$list>\\n  </$set>\\n\\n<style>\\ndiv.tr-leech-warning {\\n  border: 1px solid;\\n  padding: 5px;\\n  text-align: center;\\n  margin: auto;\\n  width: 90%;\\n  background-color: <<color tiddler-info-tab-background>>;\\n  /*background-color: #404040;*/\\n  margin-bottom: 1em;\\n}\\n</style>\"},\"$:/plugins/sobjornstad/TakeAway/QuestionCsvTemplate\":{\"title\":\"$:/plugins/sobjornstad/TakeAway/QuestionCsvTemplate\",\"created\":\"20210209040141986\",\"modified\":\"20210408135913882\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"title\\tqtype\\torigin\\tquestion\\tanswer\\tseen\\tdue\\tease\\tivl\\tlapses<$list filter=\\\"[all[tiddlers+shadows]tag[Takeaway]!is[draft]]\\\">\\n{{!!title}}\\t{{!!qtype}}\\t{{!!origin}}\\t{{!!question}}\\t{{!!answer}}\\t{{!!seen}}\\t{{!!due}}\\t{{!!ease}}\\t{{!!ivl}}\\t{{!!lapses}}</$list>\"},\"$:/plugins/sobjornstad/TakeAway/ReviewNotificationBanner\":{\"title\":\"$:/plugins/sobjornstad/TakeAway/ReviewNotificationBanner\",\"created\":\"20201230045026595\",\"list-before\":\"$:/core/ui/SideBarSegments/page-controls\",\"modified\":\"20210511025059714\",\"tags\":\"$:/tags/SideBarSegment\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$list filter=\\\"[[$:/config/sobjornstad/TakeAway/Reviewer/ShowDueNotifications]text[yes]]\\\">\\n<$list filter=\\\"[!days:due[-1]] [days:due[0]] +[tag[Takeaway]seen[yes]has[due]first[]]\\\">\\n  <div class=\\\"mm-review-notification\\\">\\n    <div style=\\\"display: inline-block; vertical-align: center; margin-top: 6px; margin-left: 1em;\\\">\\n      <span style=\\\"height: 44px; fill: green;\\\">{{$:/core/images/info-button}}</span>\\n    </div>\\n    <div style=\\\"display: inline-block; margin-left: 1em; margin-right: 1em;\\\">\\n    You have takeaways due for review.<br>\\n      <$button class=\\\"tc-btn-invisible tc-tiddlylink\\\">\\n        <<startReviewSessionAction>>\\n        Click here\\n      </$button> to start a review session.\\n  </div>\\n  </div>\\n</$list>\\n</$list>\\n\\n<style>\\n.mm-review-notification {\\n  background-color: <<color tiddler-background>>;\\n  display: inline-block;\\n}\\n</style>\"},\"$:/plugins/sobjornstad/TakeAway/SchedulerMacros\":{\"title\":\"$:/plugins/sobjornstad/TakeAway/SchedulerMacros\",\"created\":\"20201230012621143\",\"modified\":\"20210408171516499\",\"tags\":\"$:/tags/Macro\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\define doReview(newIvl, newEase, newDueDate)\\n  <$action-setfield\\n    ivl=<<__newIvl__>>\\n    ease=<<__newEase__>>\\n    due={{{ [<__newDueDate__>trim[]] }}}/>\\n  <<backToQuestionAction>>\\n\\\\end\\n\\n\\\\define getNextDueDate()\\n<$set name=\\\"parm\\\" value={{{ [[YYYY0MM0DD]addsuffix{$:/config/sobjornstad/TakeAway/Scheduler/TimeOffset}addsuffix[00]] }}}>\\n  <$wikify name=\\\"thismoment\\\" text=\\\"<$macrocall $name=now format=<<parm>>/>\\\">\\n    <$macrocall $name=\\\"dateadd\\\" basedate=<<thismoment>> days=<<nextInterval>>/>{{$:/config/sobjornstad/TakeAway/Scheduler/TimeOffset}}00\\n  </$wikify>\\n</$set>\\n\\\\end\\n\\n\\\\define daysFromToday(days)\\n<$set name=\\\"parm\\\" value={{{ [[YYYY0MM0DD]addsuffix{$:/config/sobjornstad/TakeAway/Scheduler/TimeOffset}addsuffix[00]] }}}>\\n  <$wikify name=\\\"thismoment\\\" text=\\\"<$macrocall $name=now format=<<parm>>/>\\\">\\n    <$macrocall $name=\\\"dateadd\\\" basedate=<<thismoment>> days=<<__days__>>/>{{$:/config/sobjornstad/TakeAway/Scheduler/TimeOffset}}00\\n  </$wikify>\\n</$set>\\n\\\\end\\n\\n\\\\define reviewAction(ivlExpr, easeExpr)\\n  <$vars\\n    nextInterval=$ivlExpr$\\n    nextEase=$easeExpr$>\\n  <$wikify name=nextDueDate text=\\\"<<getNextDueDate>>\\\" mode=\\\"inline\\\">\\n    <$macrocall $name=doReview\\n      newIvl=<<nextInterval>>\\n      newEase=<<nextEase>>\\n      newDueDate=<<nextDueDate>> />\\n  </$wikify>\\n  </$vars>\\n\\\\end\\n\\n\\\\define showTodayAction()\\n  <<reviewAction\\n    ivlExpr:0\\n    easeExpr:\\\"{{!!ease}}\\\">>\\n\\\\end\\n\\n\\\\define againAction()\\n  <!-- add a lapse only if we remembered it for longer than a day;\\n       ==> multiple consecutive failures is only one lapse,\\n       and failures before ever learning a card are not lapses -->\\n  <$list filter=\\\"[{!!ivl}!match[1]]\\\" variable=_>\\n    <$action-setfield lapses={{{ [{!!lapses}add[1]] }}}/>\\n  </$list>\\n  <<reviewAction\\n    ivlExpr:1\\n    easeExpr:\\\"{{{ [{!!ease}subtract{$:/config/sobjornstad/TakeAway/Scheduler/AgainEasePenalty}max[130]] }}}\\\">>\\n\\\\end\\n\\n\\\\define hardAction()\\n  <<reviewAction\\n    ivlExpr:\\\"{{{ [{!!ivl}multiply{$:/config/sobjornstad/TakeAway/Scheduler/HardMultiplier}ceil[]] }}}\\\"\\n    easeExpr:\\\"{{{ [{!!ease}subtract{$:/config/sobjornstad/TakeAway/Scheduler/HardEasePenalty}max[130]] }}}\\\">>\\n\\\\end\\n\\n\\\\define goodAction()\\n  <<reviewAction\\n    ivlExpr:\\\"{{{ [{!!ivl}multiply{!!ease}divide[100]ceil[]] }}}\\\"\\n    easeExpr:\\\"{{!!ease}}\\\">>\\n\\\\end\\n\\n\\\\define easyAction()\\n  <<reviewAction\\n    ivlExpr:\\\"{{{ [{!!ivl}multiply{!!ease}multiply{$:/config/sobjornstad/TakeAway/Scheduler/EasyMultiplier}divide[100]ceil[]] }}}\\\"\\n    easeExpr:\\\"{{{ [{!!ease}add{$:/config/sobjornstad/TakeAway/Scheduler/EasyEaseBonus}] }}}\\\">>\\n\\\\end\\n\\n\\\\define initialRememberedAction()\\n  <<reviewAction\\n    ivlExpr:\\\"{{$:/config/sobjornstad/TakeAway/Scheduler/InitialRememberedInterval}}\\\"\\n    easeExpr:\\\"{{!!ease}}\\\">>\\n\\\\end\\n\\n\\\\define backToQuestionAction()\\n  <$action-setfield\\n    $tiddler=\\\"$:/temp/TakeAwayReviewerAnswerState\\\"\\n    text=\\\"question\\\"/>\\n\\\\end\\n\\n\\\\define forwardToAnswerAction()\\n  <$action-setfield\\n    $tiddler=\\\"$:/temp/TakeAwayReviewerAnswerState\\\"\\n    text=\\\"answer\\\"/>\\n\\\\end\\n\\n\\\\define startReviewSessionAction()\\n  <$action-setfield $tiddler=\\\"$:/temp/TakeAwayReviewerAnswerState\\\" text=\\\"\\\"/>\\n  <$action-setfield $tiddler=\\\"$:/config/sobjornstad/TakeAway/ReviewerSeed\\\" $value=<<now \\\"0hh:0mm:0ss\\\">>/>\\n  <$action-navigate $to=\\\"TakeAway Reviewer\\\"/>\\n\\\\end\\n\\n\\\\define hideLeechWarningAction()\\n  <$action-setfield leechignores={{{ [all[current]get[leechignores]add[1]] ~[[1]] }}}/>\\n\\\\end\"},\"$:/plugins/sobjornstad/TakeAway/SchedulingViewTemplate\":{\"title\":\"$:/plugins/sobjornstad/TakeAway/SchedulingViewTemplate\",\"caption\":\"Scheduling\",\"created\":\"20210101230352640\",\"modified\":\"20210407150300967\",\"seen\":\"\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<table class=\\\"mm-schedule-table\\\">\\n  <tr>\\n    <th>Collected</th>\\n    <td>\\n      <$list filter={{!!seen}} emptyMessage=\\\"no\\\"><$text text=<<currentTiddler>>/></$list>\\n      <$list filter=\\\"[all[current]seen[yes]]\\\" variable=_>\\n        (<<markUnseenLink>>)\\n      </$list>\\n      <$list filter=\\\"[all[current]!seen[yes]]\\\" variable=_>\\n        (<<markSeenLink>>)\\n      </$list>\\n    </td>\\n  </tr>\\n  <tr>\\n    <th>Interval</th>\\n    <$list filter=\\\"[all[current]ivl[1]]\\\" variable=_>\\n      <td>{{!!ivl}} day</td>\\n    </$list>\\n    <$list filter=\\\"[all[current]!ivl[1]]\\\" variable=_>\\n      <td>{{!!ivl}} days</td>\\n    </$list>\\n  </tr>\\n  <tr>\\n    <th>Ease</th>\\n    <td>{{!!ease}}%</td>\\n  </tr>\\n  <tr>\\n    <th>Lapses</th>\\n    <td><$view field=\\\"lapses\\\">0</$view></td>\\n  </tr>\\n  <tr>\\n    <th>Next review</th>\\n    <td>\\n      <$view format=\\\"date\\\" template=\\\"YYYY-0MM-0DD\\\" field=\\\"due\\\"/>\\n      <$reveal type=\\\"nomatch\\\" state=\\\"!!ivl\\\" text=\\\"1\\\">\\n        (<<iforgotButton>>)\\n      </$reveal>\\n    </td>\\n  </tr>\\n</table>\\n\\n<style>\\n.mm-schedule-table th {\\n  text-align: left;\\n}\\n</style>\"},\"$:/plugins/sobjornstad/TakeAway/Settings\":{\"title\":\"$:/plugins/sobjornstad/TakeAway/Settings\",\"caption\":\"TakeAway\",\"created\":\"20210101233014514\",\"modified\":\"20241017014430721\",\"tags\":\"$:/tags/ControlPanel/SettingsTab $:/tags/ControlPanel/Settings\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"These settings let you customize the behavior of [[TakeAway|TakeAway Help]].\\n\\n<div class=\\\"ta-control-panel\\\">\\n<<tabs \\\"[all[tiddlers+shadows]prefix[$:/plugins/sobjornstad/TakeAway/Settings/]sortan[stackorder]]\\\" default:\\\"$:/plugins/sobjornstad/TakeAway/Settings/Review\\\">>\\n</div>\\n\"},\"$:/plugins/sobjornstad/TakeAway/Settings/BulkUpdate\":{\"title\":\"$:/plugins/sobjornstad/TakeAway/Settings/BulkUpdate\",\"caption\":\"Bulk update\",\"created\":\"20201230022957637\",\"modified\":\"20210408135934749\",\"stackorder\":\"100\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"-------\\n\\n@@text-align:center;\\n! !!! WARNING !!!\\n\\nDo NOT press these buttons unless you are certain you know what you are doing.<br>\\n''They take effect instantly and cannot be undone'', and they can wipe out hours of review history in a single click.\\n@@\\n\\n-------\\n\\n<$details summary=\\\"I understand, and I have made a backup copy of my wiki\\\">\\n\\n* Mark all takeaways that are currently seen unseen again: <$button>\\n  <$list filter=\\\"[all[tiddlers+shadows]tag[Takeaway]seen[yes]]\\\">\\n    <<setSeennessAction \\\"\\\">>\\n  </$list>\\n  Mark All Unseen\\n</$button>\\n\\n* Mark all takeaways seen: <$button>\\n  <$list filter=\\\"[all[tiddlers+shadows]tag[Takeaway]]\\\">\\n    <<setSeennessAction \\\"yes\\\">>\\n  </$list>\\n  Mark All Seen\\n</$button>\\n\\n* Shift the interval of all takeaways that are currently due tomorrow back one day: <$button>\\n  <$list filter=\\\"[all[tiddlers+shadows]tag[Takeaway]seen[yes]days:due[+1]!days:due[+1]]\\\">\\n    <<showTodayAction>>\\n    <$action-setfield ivl=1/>\\n  </$list>\\n  Show Tomorrow's Reviews Today\\n</$button>\\n\\n* Delete/reset all takeaways completely (reverting to shadow version): <$button>\\n  <$list filter=\\\"[tag[Takeaway]]\\\">\\n    <$action-deletetiddler $tiddler=<<currentTiddler>>/>\\n  </$list>\\n  Reset All Takeaways\\n</$button>\\n\\n</$details>\"},\"$:/plugins/sobjornstad/TakeAway/Settings/Export\":{\"title\":\"$:/plugins/sobjornstad/TakeAway/Settings/Export\",\"caption\":\"Export\",\"created\":\"20210101224920086\",\"modified\":\"20210407150448374\",\"stackorder\":\"10\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Only collected takeaways (those you have answered in the text or manually chosen to collect) are exported. If necessary, you can collect all takeaways in the [[bulk-update console|$:/plugins/sobjornstad/TakeAway/Settings/BulkUpdate]] first.\\n\\n!!! Anki export via TiddlyRemember\\n\\n{{$:/plugins/sobjornstad/TakeAway/TrAnkiExportSettings}}\\n\\n!!! File export\\n\\n{{$:/plugins/sobjornstad/TakeAway/FileExport}}\"},\"$:/plugins/sobjornstad/TakeAway/Settings/Review\":{\"title\":\"$:/plugins/sobjornstad/TakeAway/Settings/Review\",\"caption\":\"Review\",\"created\":\"20210101233411930\",\"modified\":\"20210407191238894\",\"stackorder\":\"1\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<table class=\\\"gtw-form\\\">\\n<$list filter=\\\"[all[tiddlers+shadows]prefix[$:/config/sobjornstad/TakeAway/Reviewer/]nsort[stackorder]]\\\">\\n<tr>\\n  <th width=\\\"200px\\\" style=\\\"text-align: left; vertical-align: top;\\\">{{!!caption}}</th>\\n  <td><$checkbox tiddler=<<currentTiddler>> field=text checked=\\\"yes\\\" unchecked=\\\"no\\\"/></td>\\n  <td>{{!!description}}</td>\\n</tr>\\n</$list>\\n</table>\\n\\n<$button>\\n  <!-- NOT all[tiddlers+shadows] -- delete only modified -->\\n  <$list filter=\\\"[prefix[$:/config/sobjornstad/TakeAway/Reviewer/]]\\\">\\n    <$action-deletetiddler $tiddler=<<currentTiddler>>/>\\n  </$list>\\n  Reset review settings to default\\n</$button>\"},\"$:/plugins/sobjornstad/TakeAway/Settings/Scheduler\":{\"title\":\"$:/plugins/sobjornstad/TakeAway/Settings/Scheduler\",\"caption\":\"Scheduler\",\"created\":\"20201230042714308\",\"modified\":\"20241012224750182\",\"stackorder\":\"20\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"If you're familiar with spaced repetition and want to play around with the parameters of the spacing algorithm, you can do that here. If that doesn't sound exciting, you do not need to and should not make any changes here.\\n\\nTakeAway uses an algorithm from the Anki SM-2 family. If you don't understand the terms used in these descriptions, read [[Spaced Repetition from the Ground Up|https://controlaltbackspace.org/memory/spaced-repetition-from-the-ground-up/]] for help.\\n\\n<table class=\\\"gtw-form\\\">\\n<$list filter=\\\"[all[tiddlers+shadows]prefix[$:/config/sobjornstad/TakeAway/Scheduler/]nsort[stackorder]]\\\">\\n<tr>\\n  <th width=\\\"140px\\\" style=\\\"text-align: left; vertical-align: top;\\\">{{!!caption}}</th>\\n  <td style=\\\"vertical-align: top;\\\"><$edit-text tag=input size=4/></td>\\n  <td>{{!!description}}</td>\\n  <!--<td><$edit-text tag=input field=\\\"stackorder\\\" size=4/></td>-->\\n</tr>\\n</$list>\\n</table>\\n\\n<$button>\\n  <!-- NOT all[tiddlers+shadows] -- delete only modified -->\\n  <$list filter=\\\"[prefix[$:/config/sobjornstad/TakeAway/Scheduler/]]\\\">\\n    <$action-deletetiddler $tiddler=<<currentTiddler>>/>\\n  </$list>\\n  Reset scheduling settings to default\\n</$button>\"},\"$:/plugins/sobjornstad/TakeAway/StudyingOnWebBanner\":{\"title\":\"$:/plugins/sobjornstad/TakeAway/StudyingOnWebBanner\",\"created\":\"20210817154209775\",\"modified\":\"20210817184047172\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$reveal state=\\\"$:/info/url/hostname\\\" type=\\\"match\\\" text=\\\"groktiddlywiki.com\\\">\\n  <div style=\\\"display: inline-block;\\\">\\n    <div style=\\\"display: inline-block; vertical-align: top; margin-top: 1rem; margin-left: 1em;\\\">\\n      <span style=\\\"height: 44px; fill: orange;\\\">{{$:/core/images/warning}}</span>\\n    </div>\\n    <div style=\\\"display: inline-block; margin-left: 1em; margin-right: 1em;\\\">\\n      You're currently studying on the web at groktiddlywiki.com.<br>\\n      ''Your progress in takeaways and exercises will not be saved''<br>\\n      unless you [[make your own copy|Downloading Grok TiddlyWiki]] of //Grok TiddlyWiki// now.<br>\\n  </div>\\n  </div>\\n</$reveal>\"},\"$:/plugins/sobjornstad/TakeAway/Stylesheet\":{\"title\":\"$:/plugins/sobjornstad/TakeAway/Stylesheet\",\"created\":\"20201230011501771\",\"modified\":\"20220103150554231\",\"tags\":\"$:/tags/Stylesheet\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"/* override spacing after clozes from TiddlyRemember so our links bar looks normal underneath it */\\ndiv.remembercz {\\n  margin-bottom: 22px; /* line-height of the selfidentification block */\\n}\\n\\n.tr-nav {\\n  text-align: center;\\n  /* previously 22 */\\n  margin-top: -18px;\\n  margin-bottom: 36px;\\n}\\n@media only screen and (max-width: 750px) {\\n  .tr-nav {\\n    clear: both;\\n  }\\n}\\n\\n.tr-nav-withref .tr-nav {\\n  text-align: left;\\n}\\n\\n/* I don't understand why the width:100% default on .tc-control-panel causes the input boxes to have no width and disappear, but adding a .ta-control-panel div around the settings window fixes it for now */\\n.ta-control-panel table input {\\n  width: auto;\\n}\\n\\ntable.mm-takeaway-browser {\\n  table-layout: fixed;\\n  width: 100%;\\n  font-size: 12px;\\n}\\n\\nspan.gtw-cloze-occlusion {\\n  color: <<color primary>>;\\n  font-weight: bold;\\n}\\n\\ndiv.tr-reviewer {\\n  position: relative;\\n  min-height: 240px;\\n  max-width: 600px;\\n  margin: auto;\\n}\\n\\ndiv.tr-actions {\\n  position: absolute;\\n  bottom: 0;\\n  left: 0;\\n  right: 0;\\n  margin: 0 auto;\\n  width: 100%;\\n  max-width: 400px;\\n  clear: both;\\n}\\ndiv.tr-actions div {\\n  text-align: center;\\n}\\n@media only screen and (max-width: 400px) {\\n  div.tr-reviewer {\\n    min-height: 350px;\\n  }\\n}\\n@media only screen and (max-width: 350px) {\\n  div.tr-reviewer {\\n    min-height: 450px;\\n  }\\n}\\n@media only screen and (max-width: 150px) {\\n  div.tr-reviewer {\\n    position: relative;\\n  }\\n}\\n\\ndiv.mm-intext-takeaway-list .tr-selfidentification, div.mm-intext-takeaway-card .tr-selfidentification {\\n  display: none;\\n}\\ndiv.mm-takeaway-example .tr-selfidentification {\\n  display: none;\\n}\\n\\ndiv.mm-intext-takeaway-list, div.mm-intext-takeaway-card {\\n  border-bottom: 1px solid <<color tab-border>>;\\n}\\n\\n.mm-intext-takeaway-card .tr-nav {\\n  margin-bottom: 0;\\n  padding-bottom: 0;\\n}\\n\\ndiv.mm-intext-takeaway {\\n  margin-bottom: 36px;\\n}\\n\\ndiv.mm-intext-no-more-takeaways {\\n  padding-bottom: 1em;\\n}\\n\\ndiv.mm-intext-takeaway:last-child {\\n  margin-bottom: 0;\\n}\\n\\ntd.gtw-question-input, td.gtw-question-input input {\\n  width: 100%;\\n}\\n\\ndiv.tr-contextual-help {\\n  border: 1px solid;\\n  padding: 5px;\\n  padding-left: 10px;\\n  padding-right: 10px;\\n  margin: auto;\\n  width: 90%;\\n  background-color: <<color tiddler-info-tab-background>>;\\n  /*background-color: #404040;*/\\n  margin-bottom: 1em;\\n}\\n\\ndiv.tr-contextual-help h3 {\\n  text-align: center;\\n}\"},\"$:/plugins/sobjornstad/TakeAway/TakeAwayHelpTemplate\":{\"title\":\"$:/plugins/sobjornstad/TakeAway/TakeAwayHelpTemplate\",\"created\":\"20210123234617682\",\"list-before\":\"$:/core/ui/ViewTemplate/body\",\"modified\":\"20210511024142037\",\"tags\":\"$:/tags/ViewTemplate\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$list filter=\\\"[all[current]prefix[TakeAway Help]!match[TakeAway Help]]\\\">\\n<div style=\\\"text-align: center;\\\">This is a section of TakeAway's help. [[See all help pages|TakeAway Help]].</div>\\n</$list>\"},\"$:/plugins/sobjornstad/TakeAway/TakeawayBackSide\":{\"title\":\"$:/plugins/sobjornstad/TakeAway/TakeawayBackSide\",\"caption\":\"Preview\",\"created\":\"20201229003054682\",\"modified\":\"20220103163741194\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<!-- Render the current tiddler as a TiddlyRemember note, whether Q&A or cloze type. -->\\n\\n\\\\define sched-line() <$list filter=\\\"[all[current]has[due]has[ivl]has[ease]]\\\" variable=_>due:{{!!due}};ivl:{{!!ivl}};ease:{{!!ease}}0;lapses:{{{ [{!!lapses}!is[blank]else[0]] }}}</$list>\\n\\n<$set name=qprefixed value={{{ [<needsContext>match[yes]!is[blank]then<currentTiddler>!search:question:regexp{$:/config/sobjornstad/TakeAway/Exporter/InhibitPrefixIfQuestionMatch}get[question]addprefix{$:/config/sobjornstad/TakeAway/Exporter/Prefix}] }}}>\\n<$set name=qtext value={{{ [<qprefixed>is[blank]then{!!question}else<qprefixed>] }}}>\\n<$set name=\\\"qid\\\" value={{{ [<previewTakeawayType>!is[blank]then[Preview]] ~[{!!title}split[:]last[]] }}}>\\n\\n  <$list filter=\\\"[<previewTakeawayType>match[rememberq]] ~[<currentTiddler>qtype[rememberq]]\\\" variable=_>\\n    <$wikify name=\\\"sched-info\\\" text=<<sched-line>>>\\n    <$macrocall $name=rememberq question=<<qtext>> answer={{!!answer}} id=<<qid>> reference={{!!origin}} sched=<<sched-info>>/>\\n    </$wikify>\\n  </$list>\\n\\n  <$list filter=\\\"[<previewTakeawayType>match[remembercz]] ~[<currentTiddler>qtype[remembercz]]\\\" variable=_>\\n    <$wikify name=\\\"sched-info\\\" text=<<sched-line>>>\\n    <$macrocall $name=remembercz id=<<qid>> text={{{ [<qtext>splitregexp[{(?:c\\\\d::)?]join[<span class=\\\"gtw-cloze-occlusion\\\">{]split[}]join[}</span>]] }}} reference={{!!origin}} sched=<<sched-info>>/>\\n    </$wikify>\\n  </$list>\\n\\n  <$reveal text=\\\"yes\\\" type=\\\"match\\\" default=<<requireQtype>>>\\n    <$list filter=\\\"[<currentTiddler>!qtype[rememberq]!qtype[remembercz]]\\\">\\n      <div style=\\\"color: orange;\\\">Not sure how to display a note with qtype '{{!!qtype}}'! qtype should be `rememberq` or `remembercz`.</div>\\n      <br>\\n    </$list>\\n  </$reveal>\\n\\n</$set>\\n</$set>\\n</$set>\"},\"$:/plugins/sobjornstad/TakeAway/TakeawayFrontSide\":{\"title\":\"$:/plugins/sobjornstad/TakeAway/TakeawayFrontSide\",\"created\":\"20201230010120117\",\"modified\":\"20220103151340329\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$list filter=\\\"[<currentTiddler>qtype[rememberq]]\\\" variable=_>\\n  {{||$:/plugins/sobjornstad/TakeAway/ContextualHelp/CreativeQuestion}}\\n\\n  <div class=\\\"rememberq remembertwo\\\">\\n    <div class=\\\"rquestion tr-ritem\\\">\\n      <div>Q:</div>\\n      <$reveal type=\\\"match\\\" state=\\\"!!question\\\" text=\\\"multiline\\\">\\n        <$transclude mode=\\\"block\\\"/>\\n      </$reveal>\\n      <$reveal type=\\\"nomatch\\\" state=\\\"!!question\\\" text=\\\"multiline\\\">\\n        <p>{{!!question}}</p>\\n      </$reveal>\\n    </div>\\n  </div>\\n</$list>\\n<$list filter=\\\"[<currentTiddler>qtype[remembercz]]\\\" variable=_>\\n  <div class=\\\"remembercz\\\">\\n    <span class=\\\"cloze-identifier\\\">cloze: </span>\\n    <span class=\\\"cloze-text\\\">{{!!question}}</span>\\n    <span class=\\\"cloze-display\\\"><$wikify name=\\\"w\\\" mode=\\\"inline\\\" output=\\\"html\\\" text={{{ [{!!question}splitregexp[{.*?}]join[<span class=\\\"gtw-cloze-occlusion\\\">{…}</span>]] }}}><<w>></$wikify></span>\\n  </div>\\n</$list>\"},\"$:/plugins/sobjornstad/TakeAway/TakeawayIntextCards\":{\"title\":\"$:/plugins/sobjornstad/TakeAway/TakeawayIntextCards\",\"caption\":\"{{$:/core/images/storyview-zoomin}} Flashcards\",\"created\":\"20210214165949835\",\"modified\":\"20210817183247620\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\define empty-message()\\n<div class='mm-intext-no-more-takeaways'>\\n  You have collected all the takeaways in this section. Choose the //List// tab to see them.\\n</div>\\n<div class='mm-intext-no-more-takeaways'>\\n  {{$:/plugins/sobjornstad/TakeAway/StudyingOnWebBanner}}\\n</div>\\n\\\\end\\n\\n<div class=\\\"mm-intext-takeaway-card\\\">\\n<$list filter=\\\"[all[tiddlers+shadows]tag[Takeaway]origin<currentTiddler>sort[title]!seen[yes]first[]]\\\" emptyMessage=<<empty-message>>>\\n\\n  <$reveal type=\\\"match\\\" text=\\\"\\\" state=\\\"!!seen\\\">\\n    {{||$:/plugins/sobjornstad/TakeAway/TakeawayFrontSide}}\\n    <div class=\\\"tr-nav\\\">\\n      <div>\\n        <$button class=\\\"tc-btn-invisible tc-tiddlylink\\\">\\n          <<setSeennessAction \\\"initial\\\">>\\n          show answer\\n        </$button>\\n      </div>\\n    </div>\\n  </$reveal>\\n\\n  <$reveal type=\\\"nomatch\\\" text=\\\"\\\" state=\\\"!!seen\\\" class=\\\"mm-intext-takeaway\\\">\\n    {{||$:/plugins/sobjornstad/TakeAway/TakeawayListItem}}\\n  </$reveal>\\n\\n</$list>\\n</div>\"},\"$:/plugins/sobjornstad/TakeAway/TakeawayIntextList\":{\"title\":\"$:/plugins/sobjornstad/TakeAway/TakeawayIntextList\",\"caption\":\"{{$:/core/images/list-bullet}} List\",\"created\":\"20210214165852309\",\"modified\":\"20210408135951734\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<div class=\\\"mm-intext-takeaway-list\\\">\\n<$list filter=\\\"[all[tiddlers+shadows]tag[Takeaway]origin<currentTiddler>sort[title]]\\\">\\n  <div class=\\\"mm-intext-takeaway\\\">\\n    {{||$:/plugins/sobjornstad/TakeAway/TakeawayListItem}}\\n  </div>\\n</$list>\\n</div>\"},\"$:/plugins/sobjornstad/TakeAway/TakeawayListForIntextTiddler\":{\"title\":\"$:/plugins/sobjornstad/TakeAway/TakeawayListForIntextTiddler\",\"created\":\"20201230022017068\",\"modified\":\"20210408143437499\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\define help-button()\\n<$button class=\\\"tc-tiddlylink tc-btn-invisible\\\" to=\\\"TakeAway Help\\\">\\n  {{$:/core/images/help}} help\\n</$button>\\n\\\\end\\n<$macrocall $name=tabs\\n    tabsList=\\\"$:/plugins/sobjornstad/TakeAway/TakeawayIntextCards $:/plugins/sobjornstad/TakeAway/TakeawayIntextList\\\" \\n    default=\\\"$:/plugins/sobjornstad/TakeAway/TakeawayIntextCards\\\"/>\\n\\n<!--\\t\\t\\n    default={{{ [all[tiddlers+shadows]tag[Takeaway]origin<currentTiddler>!seen[yes]first[]then[$:/plugins/sobjornstad/TakeAway/TakeawayIntextCards]else[$:/plugins/sobjornstad/TakeAway/TakeawayIntextList]] }}}/>\\n-->\\n\\n<$list filter=\\\"[{$:/config/Authoring}match[no]]\\\" variable=_>\\n  <$reveal type=\\\"nomatch\\\" state=<<qualify \\\"$:/temp/ShowAddBox\\\">> text=\\\"yes\\\">\\n    <div style=\\\"text-align: center;\\\">\\n    <$button set=<<qualify \\\"$:/temp/ShowAddBox\\\">> setTo=\\\"yes\\\" class=\\\"tc-btn-invisible tc-tiddlylink\\\">\\n      {{$:/core/images/add-comment}} add your own takeaway\\n    </$button>&ensp;·&ensp;<<help-button>>\\n    </div>\\n  </$reveal>\\n\\n  <$reveal type=\\\"match\\\" state=<<qualify \\\"$:/temp/ShowAddBox\\\">> text=\\\"yes\\\">\\n    <div style=\\\"text-align: center;\\\">\\n    <$button set=<<qualify \\\"$:/temp/ShowAddBox\\\">> setTo=\\\"no\\\" class=\\\"tc-btn-invisible tc-tiddlylink\\\">\\n      {{$:/core/images/fold-button}} hide quick add\\n    </$button>&ensp;·&ensp;<<help-button>>\\n    </div>\\n    {{||$:/plugins/sobjornstad/TakeAway/CreateNewTrNote}}\\n  </$reveal>\\n</$list>\"},\"$:/plugins/sobjornstad/TakeAway/TakeawayListItem\":{\"title\":\"$:/plugins/sobjornstad/TakeAway/TakeawayListItem\",\"created\":\"20201229001314475\",\"modified\":\"20210407150354024\",\"seen\":\"yes\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<!-- Render a single TiddlyRemember note as shown in the list for a given tiddler (expected to be the current tiddler). -->\\n\\n<$list filter=\\\"[all[current]seen[no]] [all[current]!has[seen]]\\\" variable=_>\\n  <!-- not seen, hide the answer -->\\n  {{||$:/plugins/sobjornstad/TakeAway/TakeawayFrontSide}}\\n  <div class=\\\"tr-nav\\\">\\n    <<setSeennessLink \\\"show answer\\\" \\\"initial\\\">>\\n  </div>\\n</$list>\\n\\n<$list filter=\\\"[all[current]seen[initial]]\\\">\\n  <!-- in middle of initial in-text review -->\\n  <$set name=requireQtype value=\\\"yes\\\">\\n    {{||$:/plugins/sobjornstad/TakeAway/TakeawayBackSide}}\\n  </$set>\\n\\n  <div class=\\\"tr-nav\\\">\\n    <div>\\n      <$button class=\\\"tc-btn-invisible tc-tiddlylink\\\" tooltip=\\\"I didn't remember the answer.\\\">\\n        <<setSeennessAction \\\"yes\\\">>\\n        <<againAction>>\\n        forgot\\n      </$button>&nbsp;·\\n      <$button class=\\\"tc-btn-invisible tc-tiddlylink\\\" param={{!!title}} tooltip=\\\"I remembered the answer.\\\">\\n        <<setSeennessAction \\\"yes\\\">>\\n        <<initialRememberedAction>>\\n        remembered\\n      </$button>\\n    </div>\\n  </div>\\n\\n</$list>\\n\\n<$list filter=\\\"[<currentTiddler>seen[yes]]\\\" variable=_>\\n  <!-- seen, show full details -->\\n  <$set name=requireQtype value=\\\"yes\\\">\\n    {{||$:/plugins/sobjornstad/TakeAway/TakeawayBackSide}}\\n  </$set>\\n\\n  <div class=\\\"tr-nav\\\">\\n    <<nextDueLink>>&nbsp;·\\n    <<editLink>>&nbsp;·\\n    <<markUnseenLink>>&nbsp;·\\n    <<sendFeedbackLink>>&nbsp;·\\n    <<helpLink>>\\n  </div>\\n</$list>\\n\"},\"$:/plugins/sobjornstad/TakeAway/TakeawaySearchResults\":{\"title\":\"$:/plugins/sobjornstad/TakeAway/TakeawaySearchResults\",\"caption\":\"Takeaways\",\"created\":\"20210207160444220\",\"modified\":\"20210521202649773\",\"second-search-filter\":\"[all[tiddlers+shadows]tag[Takeaway]search:question,answer<userInput>sort[title]limit[250]]\",\"tags\":\"$:/tags/SearchResults\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"//<small>Takeaway matches:</small>//\\n\\n<$list filter=\\\"[<userInput>minlength[1]]\\\" variable=\\\"ignore\\\">\\n<$list filter={{{ [<configTiddler>get[second-search-filter]] }}}>\\n<span class={{{[<currentTiddler>addsuffix[-secondaryList]] -[<searchListState>get[text]] +[then[]else[tc-list-item-selected]] }}}>\\n<$transclude tiddler=\\\"$:/core/ui/ListItemTemplate\\\"/>\\n</span>\\n</$list>\\n</$list>\"},\"$:/plugins/sobjornstad/TakeAway/TakeawayTableBrowser\":{\"title\":\"$:/plugins/sobjornstad/TakeAway/TakeawayTableBrowser\",\"created\":\"20210124150840658\",\"modified\":\"20210408142359910\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<table width=\\\"100%\\\" class=\\\"mm-takeaway-browser\\\">\\n  <col style=\\\"width: 3em;\\\">\\n  <$list filter=\\\"[[$:/config/sobjornstad/GrokTiddlyWiki/TakeawayBrowserState]answer[yes]]\\\">\\n    <col style=\\\"width:40%;\\\">\\n    <col style=\\\"width:40%;\\\">\\n    <col style=\\\"width:20%;\\\">\\n  </$list>\\n  <$list filter=\\\"[[$:/config/sobjornstad/GrokTiddlyWiki/TakeawayBrowserState]answer[no]]\\\">\\n    <col style=\\\"width:70%;\\\">\\n    <col style=\\\"width:30%;\\\">\\n  </$list>\\n  <col style=\\\"width: 3.5em;\\\">\\n  <col style=\\\"width: 4em;\\\">\\n  <col style=\\\"width: 4em;\\\">\\n  <col style=\\\"width: 4.2em;\\\">\\n  <col style=\\\"width: 6em;\\\">\\n  <thead>\\n  <tr>\\n    <th/>\\n    <th>Question/Cloze</th>\\n    <$list filter=\\\"[[$:/config/sobjornstad/GrokTiddlyWiki/TakeawayBrowserState]answer[yes]]\\\">\\n      <th>Answer</th>\\n    </$list>\\n    <th>Section</th>\\n    <th>seen</th>\\n    <th>ivl</th>\\n    <th>ease</th>\\n    <th>lapses</th>\\n    <th>due</th>\\n  </tr>\\n  </thead>\\n  <tbody>\\n  <$vars invertsort={{$:/config/sobjornstad/GrokTiddlyWiki/TakeawayBrowserState!!invertsort}} sort={{$:/config/sobjornstad/GrokTiddlyWiki/TakeawayBrowserState!!sort}}>\\n    <$set name=thesortfrag value=<<sortfrag>>>\\n    <$list filter=<<curFilt>>>\\n    <tr>\\n      <td><$link to={{!!title}}>edit</$link></td>\\n      <td>{{!!question}}</td>\\n      <$list filter=\\\"[{$:/config/sobjornstad/GrokTiddlyWiki/TakeawayBrowserState!!answer}match[yes]]\\\" variable=_>\\n        <td>{{!!answer}}</td>\\n      </$list>\\n      <td><$link to={{!!origin}}/></td>\\n      <td><$view field=\\\"seen\\\">no</$view></td>\\n      <td><$view field=\\\"ivl\\\">(new)</$view></td>\\n      <td><$list filter=\\\"[all[current]has[ease]]\\\" emptyMessage=\\\"(new)\\\">{{!!ease}}%</$list></td>\\n      <td><$view field=\\\"lapses\\\">0</$view></td>\\n      <td><$view field=\\\"due\\\" format=\\\"date\\\" template=\\\"YYYY-0MM-0DD\\\">(new)</$view></td>\\n    </tr>\\n  </$list>\\n  </$set>\\n  </$vars>\\n  </tbody>\\n</table>\"},\"$:/plugins/sobjornstad/TakeAway/TakeawayViewTemplate\":{\"title\":\"$:/plugins/sobjornstad/TakeAway/TakeawayViewTemplate\",\"created\":\"20210101225613955\",\"list-after\":\"$:/core/ui/ViewTemplate/plugin\",\"modified\":\"20210511024219790\",\"tags\":\"$:/tags/ViewTemplate\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$list filter=\\\"[all[current]tag[Takeaway]]\\\">\\n  <div style=\\\"text-align: center;\\\">\\n    Viewing takeaway <$text text={{{ [all[current]get[title]removeprefix[Tr:]] }}}/> from section <$link to={{!!origin}}/>.\\n  </div>\\n  <div style=\\\"text-align: center;\\\">\\n    <<nextDueLink>>&nbsp;·\\n    <$list filter=\\\"[all[current]seen[yes]]\\\"><<markUnseenLink>>&nbsp;·</$list>\\n    <<sendFeedbackLink>>&nbsp;·\\n    <<helpLink>>\\n  </div>\\n\\n  <<tabs \\\"$:/plugins/sobjornstad/TakeAway/TakeawayBackSide $:/plugins/sobjornstad/TakeAway/EditViewTemplate $:/plugins/sobjornstad/TakeAway/SchedulingViewTemplate\\\" default:\\\"$:/plugins/sobjornstad/TakeAway/EditViewTemplate\\\">>\\n</$list>\\n\\n\"},\"$:/plugins/sobjornstad/TakeAway/TakeawaysCollected\":{\"title\":\"$:/plugins/sobjornstad/TakeAway/TakeawaysCollected\",\"created\":\"20210102000508798\",\"modified\":\"20210408140012474\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$text text={{{ [all[tiddlers+shadows]tag[Takeaway]seen[yes]count[]] }}}/>/<$text text={{{ [all[tiddlers+shadows]tag[Takeaway]count[]] }}}/> takeaways collected.\"},\"$:/plugins/sobjornstad/TakeAway/TrAnkiExportSettings\":{\"title\":\"$:/plugins/sobjornstad/TakeAway/TrAnkiExportSettings\",\"created\":\"20210407143206502\",\"modified\":\"20210407191304385\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"These settings affect how the [[Takeaway Export List]] displays takeaways and thus what cards look like when they are [[exported to Anki via TiddlyRemember|TakeAway Help/Studying with Anki]].\\n\\n<table class=\\\"gtw-form\\\">\\n<$list filter=\\\"[all[tiddlers+shadows]prefix[$:/config/sobjornstad/TakeAway/Exporter/]nsort[stackorder]]\\\">\\n<tr>\\n  <th width=\\\"180px\\\" style=\\\"text-align: left; vertical-align: top;\\\">{{!!caption}}</th>\\n  <td><$edit-text tag=input size=20/></td>\\n  <td>{{!!description}}</td>\\n</tr>\\n</$list>\\n</table>\\n\\n<$button>\\n  <!-- NOT all[tiddlers+shadows] -- delete only modified -->\\n  <$list filter=\\\"[prefix[$:/config/sobjornstad/TakeAway/Exporter/]]\\\">\\n    <$action-deletetiddler $tiddler=<<currentTiddler>>/>\\n  </$list>\\n  Reset Anki export settings to default\\n</$button>\"},\"$:/plugins/sobjornstad/TakeAway/dateadd.js\":{\"title\":\"$:/plugins/sobjornstad/TakeAway/dateadd.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/sobjornstad/TakeAway/dateadd.js\\ntype: application/javascript\\nmodule-type: macro\\n\\nCourtesy of stobot, adapted from Jed Carty:\\nhttps://groups.google.com/g/tiddlywiki/c/y_GjM302u60/m/u_aZ6GhEBwAJ\\nhttp://inmysocks.tiddlyspot.com/#$:/inmysocks/macros/add-time.js\\n\\nTakes a base date and adds days, months or years\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nInformation about this macro\\n*/\\n\\nexports.name = \\\"dateadd\\\";\\n\\nexports.params = [\\n    {name: \\\"basedate\\\"},\\n    {name: \\\"days\\\"},\\n    {name: \\\"months\\\"},\\n    {name: \\\"years\\\"},\\n    {name: \\\"template\\\"}\\n];\\n\\n/*\\nRun the macro\\n*/\\nexports.run = function(basedate, days, months, years, template) {\\n    \\n    //Make each date object.\\n    \\n    if (basedate === \\\"\\\") {\\n        var newdate = new Date();\\n    } else {\\n        var baseyear = basedate.substr(0,4);\\n        var basemonth = basedate.substr(4,2);\\n        var baseday = basedate.substr(6,2);\\n        var newdate = new Date(Number(baseyear), Number(basemonth)-1, Number(baseday), 0, 0, 0);\\n    }\\n\\n    var new_year = Number(newdate.getFullYear())+Number(years);\\n    var new_month = Number(newdate.getMonth())+Number(months);\\n    var new_day = Number(newdate.getDate())+Number(days);\\n\\n    var output_date = new Date(new_year, new_month, new_day, 0, 0, 0);\\n\\n    var result = (output_date.getFullYear()*10000) + ((output_date.getMonth()+1)*100) + (output_date.getDate());\\n\\n    if(template === \\\"\\\"){\\n        return result;\\n    } else {\\n        return $tw.utils.formatDateString(output_date,template);\\n    }\\n};\\n\\n})();\",\"type\":\"application/javascript\",\"module-type\":\"macro\",\"created\":\"20210408165752376\",\"modified\":\"20210408172623252\",\"tags\":\"\"},\"$:/plugins/sobjornstad/TakeAway/license\":{\"title\":\"$:/plugins/sobjornstad/TakeAway/license\",\"created\":\"20210131153434996\",\"modified\":\"20210131153336667\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"TakeAway is available under the same license as the rest of //Grok TiddlyWiki//, ''CC BY-NC-ND 4.0''. Unlike most TiddlyWiki plugins, at this time the license does ''not'' permit you to reuse this plugin in derivative works (i.e., wikis other than the official edition of Grok TiddlyWiki available at https://groktiddlywiki.com) if you intend to distribute them to others. This is likely to change in the future.\\n\\nFor details, please see the ''Copyright'' section at https://groktiddlywiki.com.\\n<p class=\\\"gtw-cc-copyright\\\" xmlns:cc=\\\"http://creativecommons.org/ns#\\\" xmlns:dct=\\\"http://purl.org/dc/terms/\\\"><a class=\\\"tc-tiddlylink-external\\\" property=\\\"dct:title\\\" rel=\\\"cc:attributionURL\\\" href=\\\"https://groktiddlywiki.com\\\">Grok TiddlyWiki</a> by <a class=\\\"tc-tiddlylink-external\\\" rel=\\\"cc:attributionURL dct:creator\\\" property=\\\"cc:attributionName\\\" href=\\\"https://sorenbjornstad.com\\\">Soren Bjornstad</a> is licensed under <a class=\\\"tc-tiddlylink-external\\\" href=\\\"http://creativecommons.org/licenses/by-nc-nd/4.0/?ref=chooser-v1\\\" target=\\\"_blank\\\" rel=\\\"license noopener noreferrer\\\" style=\\\"display:inline-block;\\\">CC BY-NC-ND 4.0.<img style=\\\"height:22px!important;margin-left:3px;vertical-align:text-bottom;\\\" src=\\\"https://mirrors.creativecommons.org/presskit/icons/cc.svg?ref=chooser-v1\\\"><img style=\\\"height:22px!important;margin-left:3px;vertical-align:text-bottom;\\\" src=\\\"https://mirrors.creativecommons.org/presskit/icons/by.svg?ref=chooser-v1\\\"><img style=\\\"height:22px!important;margin-left:3px;vertical-align:text-bottom;\\\" src=\\\"https://mirrors.creativecommons.org/presskit/icons/nc.svg?ref=chooser-v1\\\"><img style=\\\"height:22px!important;margin-left:3px;vertical-align:text-bottom;\\\" src=\\\"https://mirrors.creativecommons.org/presskit/icons/nd.svg?ref=chooser-v1\\\"></a></p>\\n\\n<style>\\n.gtw-cc-copyright {\\n  border: 1px solid;\\n  padding: 5px;\\n  text-align: center;\\n}\\n</style>\\n\"},\"$:/plugins/sobjornstad/TakeAway/readme\":{\"title\":\"$:/plugins/sobjornstad/TakeAway/readme\",\"created\":\"20210131153434996\",\"modified\":\"20210131153336667\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"TakeAway implements the mnemonic medium in TiddlyWiki.\\n\\nThis plugin is currently tightly coupled to [[Grok TiddlyWiki|https://groktiddlywiki.com]] and not licensed for reuse, but I hope to make it available for other applications in the future. Please [[contact me|https://sorenbjornstad.com]] if you have applications in mind.\\n\"},\"TakeAway Help\":{\"title\":\"TakeAway Help\",\"created\":\"20201229002232803\",\"description\":\"TakeAway is a tool that helps you remember what you read.\",\"list\":\"[[TakeAway Help/Saving Your Progress]] [[TakeAway Help/Studying In Text]] [[TakeAway Help/Reviewing]] [[TakeAway Help/Editing]] [[TakeAway Help/General Takeaway Functions]] [[TakeAway Help/Studying with Anki]] [[TakeAway Settings]]\",\"modified\":\"20210408140425070\",\"tags\":\"[[TakeAway Tools]]\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"{{TakeAway Help/About TakeAway}}\\n\\nSelect a tab to learn more about TakeAway.\\n\\n<<tabs \\\"[all[current]list[]]\\\" default:\\\"TakeAway Help/Saving Your Progress\\\">>\"},\"TakeAway Help/About TakeAway\":{\"title\":\"TakeAway Help/About TakeAway\",\"created\":\"20210110170118268\",\"modified\":\"20210317020057749\",\"tags\":\"Fragment\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"''TakeAway'' is a tool that helps you remember what you read. The author of a TakeAway-enabled text writes a series of short questions and answers or fill-in-the-blank prompts, collectively called //takeaways//, that appear in each section of the text as you read. Takeaways invite you to engage with the material in one of several ways:\\n\\n* By ''recalling raw facts'' that are prerequisites for a full understanding of the content (“How many strings does a standard guitar have?”)\\n* By ''connecting concepts'' and reflecting on their implications (“Why does keeping perishable food in the refrigerator help prevent it from spoiling?”)\\n* By ''applying facts'' to answer a question or perform a hypothetical task (“Identify the error in the following C++ code that prevents it from compiling.”)\\n* By ''generating a creative example'' of a possible application of your knowledge (“Suggest a situation in which you might prefer to ride a bicycle rather than drive a car.”) On this type of question, unlike the others, there are many possible answers, so the list of answers provided is not exhaustive; you will be asked to come up with an example you have never used before and assess yourself.\\n\\nAs you read a TakeAway-enabled text, you will first answer these prompts at the end of each section, to check your understanding. Then, TakeAway will bring the prompts back for you to review on a regular basis, keeping you actively engaged with the material so that you don't read it once and then forget most of it, as happens with most books and articles.\"},\"TakeAway Help/Editing\":{\"title\":\"TakeAway Help/Editing\",\"caption\":\"Editing takeaways\",\"created\":\"20210101235002229\",\"modified\":\"20210327150931913\",\"tags\":\"Fragment\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"When initially encountering or reviewing a takeaway, if you find that you knew the answer but you ''didn't understand what the question was asking'' or the prompt led you to ''suggest a different correct answer'' than the one shown, you can click the //edit// link and edit the question and/or answer text to suit you better. If you think the prompt is actually wrong or would be confusing for most people, please also take a moment to click //send feedback// so the author can consider improvements for the next edition.\\n\\nIt's usually possible to write takeaway prompts that work well for most people, but everyone is a bit different and sometimes an author's prompts won't quite work with the unique set of knowledge and experiences you have. When reviewing, you should remain open to the possibility that ''the prompt just isn't working for you'' -- if you don't, you might end up reviewing the same thing over and over again and never learning it.\\n\\nIf you ''don't think a takeaway is useful at all for you'', or you can't think of a way to edit it so that it works well, click //uncollect// to remove it from review. It will not appear again unless you answer it again in the text.\\n\\nTakeAway will help you identify prompts that you're struggling with via its [[leech|TakeAway Help/Leeches]] mechanism. If it notices that you've repeatedly forgotten the answer to a particular prompt, it will display a banner during review with further instructions.\"},\"TakeAway Help/General Takeaway Functions\":{\"title\":\"TakeAway Help/General Takeaway Functions\",\"caption\":\"General takeaway functions\",\"created\":\"20210101234652033\",\"description\":\"Once you've answered a takeaway for the first time, you'll see several options below it, whether you're seeing the takeaway [[in the text|TakeAway Help/Studying In Text]] (//List// tab), [[in the browser|Takeaway Browser]], or [[in review|TakeAway Help/Reviewing]].\",\"modified\":\"20210407194540991\",\"tags\":\"Fragment\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"{{TakeAway Help/General Takeaway Functions!!description}}\\n\\n* ''next review'' or ''due for review'' (only shown in the text and the browser) -- this indicates when you'll next see the takeaway, or //due for review// if it's time to review it now. See [[Reviewing takeaways|TakeAway Help/Reviewing]] for more information. If the takeaway is due later than tomorrow, you can click //forgot// to tell TakeAway that you've already forgotten the takeaway and would like to see it again right away tomorrow.\\n* ''edit'' -- Open the takeaway's tiddler to edit its text or view its scheduling information.\\n* ''uncollect'' -- If you don't want to see this takeaway at all in review anymore, this option will remove it from review, clear its scheduling history, and put the takeaway back to showing only the question in the text.\\n* ''send feedback'' -- If you think the prompt is unclear or could be improved, click here to send a quick note to the author.\\n* ''help'' -- Open the TakeAway help screen.\\n\\nIn the reviewer and the browser, you'll also notice a link and an ID number in square brackets over on the right. You can click the link to ''return to the section in the text where the takeaway was introduced'', if you need a refresher.\"},\"TakeAway Help/Leeches\":{\"title\":\"TakeAway Help/Leeches\",\"created\":\"20210123182104528\",\"lapses\":\"5\",\"modified\":\"20210407194337860\",\"tags\":\"Fragment\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"''Leeches'' are takeaways that you keep on forgetting. Because you keep forgetting them over and over, they cause frustration and take up a disproportionate amount of your review time. TakeAway will display a banner like this one when it finds a leech:\\n\\n{{||$:/plugins/sobjornstad/TakeAway/LeechBanner}}\\n\\nThe number of times you have to forget a takeaway before this banner appears is called the //leech threshold//. It defaults to 4, but can be adjusted in the [[settings|TakeAway Settings]]. For purposes of leech detection, you're only considered to have “forgotten” a takeaway if you answer something other than “forgot” and then forget it again. That is, pressing “forgot” several days in a row doesn't count as having forgotten the takeaway -- in that case, you never really knew it at all.\\n\\n\\n!! Why leeches happen\\n\\nLeeches are usually a symptom of some other problem, not the problem in themselves:\\n\\n* The takeaway might be worded in a way that's confusing to you (see [[Editing takeaways|TakeAway Help/Editing]]). This could be the result of the author writing the takeaway poorly, or you having a different mental model of the topic or different related knowledge than most other people.\\n* You may not fully understand the topic the takeaway is asking about.\\n* You may be confusing this takeaway with another one (//memory interference//).\\n\\n!! Fixing leeches\\n\\nWhen you see the leech banner, take a moment to see if you can ''identify why you're struggling'', then fix the problem, perhaps by doing some background reading or editing the takeaway text. Click //hide warning// when you've taken care of it. The warning will appear again at each multiple of the leech threshold; by default, this is when you've forgotten the takeaway 8 times, 12 times, 16 times, etc.\\n\\nAnother entirely reasonable option, if you don't believe the information in the takeaway is particularly valuable to you, is to simply ''uncollect it'', preventing it from showing up in reviews again. This will allow you to reallocate your limited study time to material that isn't as frustrating or difficult to retain.\\n\\nFor much more on leeches in spaced-repetition study, check out the article [[Dealing with Leeches|https://controlaltbackspace.org/memory/dealing-with-leeches/]]. The article is focused on Anki, but most of its guidance will apply to TakeAway too.\"},\"TakeAway Help/Reviewing\":{\"title\":\"TakeAway Help/Reviewing\",\"caption\":\"Reviewing takeaways\",\"created\":\"20210101234951214\",\"modified\":\"20210407150748605\",\"tags\":\"Fragment\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"When you open //Grok TiddlyWiki//, you may notice a banner in the sidebar that indicates you “have takeaways due for review.” When you see this banner, take a few minutes to review what you've read previously before diving into something new.\\n\\nAfter opening the [[TakeAway Reviewer]] by clicking the link in the banner, you'll see a question or fill-in-the-blank prompt, just like you did while reading the text initially. As you did before, try to recall the answer, then click //show answer// to see how you did. This time, however, you'll want to tell TakeAway ''whether you remembered the answer'', and optionally ''how well you knew it'':\\n\\n* ''Forgot'' -- you didn't remember the answer.\\n* ''Hard'' -- you remembered the answer, and you'd like to see this takeaway more often in the future (it was too hard to answer).\\n* ''Good'' -- you remembered the answer, and you had to think a little bit but not too hard.\\n* ''Easy'' -- you remembered the answer, and you'd like to see this takeaway less often in the future (it was too easy to answer).\\n\\nMost of the time you will choose //Forgot// or //Good//, depending on whether you forgot or remembered the takeaway. //Hard// and //Easy// allow you to give further ''hints to the scheduler'' if you don't like how often you're seeing a takeaway. If you don't find these choices helpful, you can hide them:\\n\\n<$checkbox tiddler=\\\"$:/config/sobjornstad/TakeAway/Reviewer/UseFourButtons\\\" field=text checked=\\\"yes\\\" unchecked=\\\"no\\\">&nbsp;Show //Hard// and //Easy// answer choices</$checkbox>\\n\\nOnce you answer, TakeAway will use your ''rating'' (again, hard, good, or easy) and your ''past performance'' on remembering this takeaway to determine what day to show it next. It will aim to show you the takeaway ''shortly before it thinks you'll forget it'', at a time when it thinks you have roughly a 90% chance of still remembering, so that you don't waste time reviewing ideas you already know well.\\n\\nAs long as you continue to remember the takeaway, the period between reviews will keep getting longer. If you have trouble remembering a takeaway, it will be scheduled less aggressively in the future. This study method is called //spaced repetition//, and it works spectacularly well. As long as you continue to review your takeaways regularly, the information in them will stay in your memory.\\n\\nAt the bottom of the reviewer, you'll see the number of takeaways you've //collected// (i.e., [[seen in the text|TakeAway Help/Studying In Text]] and answered for the first time) and the number of takeaways that are currently due. The latter number will go down as you study until it reaches 0, at which point you'll be told you're done for now.\"},\"TakeAway Help/Saving Your Progress\":{\"title\":\"TakeAway Help/Saving Your Progress\",\"caption\":\"Saving your progress\",\"created\":\"20201230143416078\",\"modified\":\"20210327145317991\",\"tags\":\"Fragment\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"TakeAway itself, and your learning history, is ''integrated directly into your copy of the book'', so in order to save your progress, you must have permission to edit the copy of the book you're reading from.\\n\\n{{SavingProgress}}\"},\"TakeAway Help/Studying In Text\":{\"title\":\"TakeAway Help/Studying In Text\",\"caption\":\"Studying takeaways in-text\",\"created\":\"20210101234933890\",\"modified\":\"20210818024620766\",\"tags\":\"Fragment\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"When you ''reach a takeaway in the text'' for the first time, you will see a question or prompt about something you just read. Think about the answer, then click //show answer//, check yourself, and choose //forgot// or //remembered// as appropriate.\\n\\nWhen you answer a takeaway in the text, whether you forgot or remembered it, TakeAway ''collects'' it, meaning it will be shown in future [[review|TakeAway Help/Reviewing]] sessions. If you later decide you don't care about the information in the takeaway and don't want to see it in review anymore, you'll be able to //uncollect// it.\\n\\nSometimes the provided takeaways ''won't cover everything'' you want to remember from the section. For instance, you may notice a connection between something you've just learned and another topic you study that the author of the book (or most of its audience) doesn't know about. In such cases, you can add your own takeaway by clicking the //add your own takeaway// link at the bottom of the list of takeaways. Enter a question and answer or a fill-in-the-blank/cloze deletion, then click the //Add takeaway// button. Your new takeaway will be added to the list, and once you've shown the answer it will begin appearing in review like any other takeaway.\"},\"TakeAway Help/Studying with Anki\":{\"title\":\"TakeAway Help/Studying with Anki\",\"caption\":\"Studying with Anki\",\"created\":\"20210101235013980\",\"modified\":\"20241009133319922\",\"tags\":\"Fragment\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"If you're a serious learner, you may already use a general-purpose spaced-repetition tool like [[Anki|https://apps.ankiweb.net]] to study other topics. TakeAway's built-in spaced-repetition reviewer is convenient for those new to spaced repetition but not as powerful as Anki, so if you prefer to take advantage of Anki's wide array of options and keep all the material you're studying in one place, you can use the [[TiddlyRemember|https://sobjornstad.github.io/TiddlyRemember/]] Anki add-on to ''sync takeaways into your Anki collection''. Once set up, TiddlyRemember will sync all collected takeaways to notes in Anki.\\n\\nThe first time a given takeaway is synced to Anki, the scheduling information from whatever reviews you have done directly in your wiki ''will be imported into Anki''. On subsequent syncs, any scheduling information in the wiki will be ignored and your scheduling information will be handled solely by Anki, but any changes you make to the text of takeaways will still sync into Anki.\\n\\nWhen using TiddlyRemember you ''should not edit the synced notes within Anki'' -- TiddlyRemember does a unidirectional sync, so you must edit the takeaways in the wiki and then sync them to Anki, or you will lose the changes next time you sync.\\n\\nSetting up reviewing in Anki is a little more involved than using TakeAway's integrated tooling, but if you're familiar with Anki it shouldn't be too bad:\\n\\n# Follow step 2 of the installation instructions on the [[TiddlyRemember homepage|https://sobjornstad.github.io/TiddlyRemember/]] to install Node.js on your computer, if you do not already have it.\\n# In Anki, install TiddlyRemember: choose //Tools > Add-ons > Get Add-ons// and paste in the code `60456529` (if you'd prefer to see what you're downloading before you download it, the AnkiWeb page is [[here|https://ankiweb.net/shared/info/60456529]]).\\n# Click //OK// and restart Anki as instructed.\\n# Choose //Tools > Add-ons//, select the TiddlyRemember add-on, and click the //Config// button on the right.\\n# Fill out the syncing options as desired. A full description of each option is provided [[here|https://sobjornstad.github.io/TiddlyRemember/#Configuring%20the%20Anki%20add-on]].\\n#* For the wiki settings, you need some way to access your wiki. If you're using TiddlyHost, the easiest option is to mark your wiki as //Public// in the TiddlyHost settings (the “sliders” icon for your copy of Grok TiddlyWiki at https://tiddlyhost.com/sites). Then you can choose //URL// here in the TiddlyRemember settings and enter the wiki's URL (e.g., `https://sorens-grok-tiddlywiki.tiddlyhost.com/`). The //Filter// should be `[[Takeaway Export List]]`.\\n# Choose //Tools > Sync from TiddlyWiki// to add all takeaways that you've seen in the text to your Anki collection. As you proceed through the book, you'll want to sync periodically to import the takeaways you've newly seen.\\n\\nHere's an example configuration:\\n\\n[img [anki-config-screenshot.png]]\\n\\nFor more ways you can customize TiddlyRemember, including sorting cards into different decks or adding tags, visit the [[TiddlyRemember documentation|https://sobjornstad.github.io/TiddlyRemember/]].\\n\\n\\n!! Settings for reviewing with Anki\\n\\nIf you review with Anki rather than with the integrated TakeAway spaced-repetition tool, your scheduling information won't get updated within this text, so you'll want to disable review notifications in TakeAway so it doesn't bug you about reviewing.\\n\\n<$checkbox tiddler=\\\"$:/config/sobjornstad/TakeAway/Reviewer/ShowDueNotifications\\\" field=text checked=\\\"yes\\\" unchecked=\\\"no\\\">&nbsp;Show banner in-text when takeaways are due for review</$checkbox>\\n\\n{{$:/plugins/sobjornstad/TakeAway/TrAnkiExportSettings}}\"},\"TakeAway Reviewer\":{\"title\":\"TakeAway Reviewer\",\"created\":\"20201229224422563\",\"modified\":\"20210818023338187\",\"tags\":\"[[TakeAway Tools]]\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"{{$:/plugins/sobjornstad/TakeAway/ContextualHelp/TakeawayReviewer}}\\n\\n<div class=\\\"tr-reviewer\\\">\\n<$list filter=\\\"[!days:due[-1]] [days:due[0]] +[tag[Takeaway]seen[yes]has[due]shuffle{$:/config/sobjornstad/TakeAway/ReviewerSeed}first[]]\\\" emptyMessage=\\\"<center>Congratulations! You're all caught up.</center>\\\">\\n  {{||$:/plugins/sobjornstad/TakeAway/LeechBanner}}\\n\\n  <$reveal type=\\\"nomatch\\\" text=\\\"answer\\\" state=\\\"$:/temp/TakeAwayReviewerAnswerState\\\">\\n    {{||$:/plugins/sobjornstad/TakeAway/TakeawayFrontSide}}\\n    <div class=\\\"tr-nav tr-actions\\\">\\n      <div>\\n        <$button class=\\\"tc-btn-invisible tc-tiddlylink\\\">\\n          <<forwardToAnswerAction>>\\n          show answer\\n        </$button>\\n      </div>\\n      <div>&nbsp;</div>\\n    </div>\\n  </$reveal>\\n\\n  <$reveal type=\\\"match\\\" text=\\\"answer\\\" state=\\\"$:/temp/TakeAwayReviewerAnswerState\\\">\\n  {{||$:/plugins/sobjornstad/TakeAway/TakeawayBackSide}}\\n  <div class=\\\"tr-actions\\\">\\n    <div>\\n      <$button class=\\\"tc-btn-invisible tc-tiddlylink\\\" tooltip=\\\"I didn't remember the answer to this takeaway.\\\">\\n        <<againAction>>\\n        forgot\\n      </$button>&nbsp;·\\n      <$reveal type=\\\"match\\\" text=\\\"yes\\\" state=\\\"$:/config/sobjornstad/TakeAway/Reviewer/UseFourButtons\\\">\\n      <$button class=\\\"tc-btn-invisible tc-tiddlylink\\\" param={{!!title}} tooltip=\\\"I remembered the answer, and I would like to see this takeaway more often in the future.\\\">\\n        <<hardAction>>\\n        hard\\n      </$button>&nbsp;·\\n      </$reveal>\\n      <$button class=\\\"tc-btn-invisible tc-tiddlylink\\\" param={{!!title}} tooltip=\\\"I remembered the answer.\\\">\\n        <<goodAction>>\\n        good\\n      </$button>\\n      <$reveal type=\\\"match\\\" text=\\\"yes\\\" state=\\\"$:/config/sobjornstad/TakeAway/Reviewer/UseFourButtons\\\">·\\n      <$button class=\\\"tc-btn-invisible tc-tiddlylink\\\" param={{!!title}} tooltip=\\\"I remembered the answer, and I would like to see this takeaway less often in the future.\\\">\\n        <<easyAction>>\\n        easy\\n      </$button>\\n      </$reveal>\\n    </div>\\n    <div>\\n      <$button class=\\\"tc-btn-invisible tc-tiddlylink\\\" tooltip=\\\"Return to showing only the question.\\\">\\n        <<backToQuestionAction>>\\n        hide answer\\n      </$button>&nbsp;·\\n      <<editLink>>&nbsp;·\\n      <<markUnseenLink>>&nbsp;·\\n      <<sendFeedbackLink>>\\n    </div>\\n  </div>\\n  </$reveal>\\n</$list>\\n</div>\\n\\n<div style=\\\"text-align: center;\\\">\\n  {{$:/plugins/sobjornstad/TakeAway/TakeawaysCollected}}\\n</div>\\n<div style=\\\"text-align: center;\\\">\\n  Due for review today: <$text text={{{ [!days:due[-1]] [days:due[0]] +[tag[Takeaway]seen[yes]has[due]count[]] }}}/>\\n</div>\\n<div style=\\\"text-align: center;\\\">\\n  [[browse takeaways|Takeaway Browser]]&nbsp;· [[help|TakeAway Help]]\\n</div>\"},\"TakeAway Settings\":{\"title\":\"TakeAway Settings\",\"caption\":\"Settings\",\"created\":\"20210101235730652\",\"modified\":\"20210408140435585\",\"tags\":\"[[TakeAway Tools]]\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"{{||$:/plugins/sobjornstad/TakeAway/Settings}}\"},\"Takeaway Browser\":{\"title\":\"Takeaway Browser\",\"created\":\"20210101173638727\",\"modified\":\"20210408142420098\",\"tags\":\"[[TakeAway Tools]] Index\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\define sortfrag() $(invertsort)$nsort[$(sort)$]\\n\\n\\\\define curFilt() [all[tiddlers+shadows]tag[Takeaway]search:question,answer{$:/temp/TakeAwayQuery}search:origin:literal,anchored{$:/temp/SelectedSection}regexp:seen{$:/config/sobjornstad/GrokTiddlyWiki/TakeawayBrowserState!!seen}$(thesortfrag)$]\\n\\n{{$:/plugins/sobjornstad/TakeAway/ReviewNotificationBanner}}\\n\\n<div style=\\\"float: right;\\\">\\n{{$:/plugins/sobjornstad/TakeAway/TakeawaysCollected}}\\n</div>\\n\\n<table class=\\\"gtw-form\\\">\\n  <tr>\\n    <th>Q/A text</th>\\n    <td><$edit-text tiddler=\\\"$:/temp/TakeAwayQuery\\\" type=\\\"text\\\" tag=\\\"input\\\" default=\\\"\\\"/></td>\\n  </tr>\\n  <tr>\\n    <th>Section</th>\\n    <td>\\n     \\t<$set name=\\\"selectorFilter\\\" value=\\\"[all[tiddlers+shadows]tag[Takeaway]each[origin]get[origin]sort[]]\\\">\\n      {{$:/sib/Navigator/SectionSelector}}\\n      </$set>\\n    </td>\\n  </tr>\\n  <tr>\\n    <th>Collected</th>\\n    <td>\\n      <$radio tiddler=\\\"$:/config/sobjornstad/GrokTiddlyWiki/TakeawayBrowserState\\\" field=\\\"seen\\\" value=\\\"yes\\\">&nbsp;Yes</$radio>&ensp;\\n      <$radio tiddler=\\\"$:/config/sobjornstad/GrokTiddlyWiki/TakeawayBrowserState\\\" field=\\\"seen\\\" value=\\\"^$|initial\\\">&nbsp;No</$radio>&ensp;\\n      <$radio tiddler=\\\"$:/config/sobjornstad/GrokTiddlyWiki/TakeawayBrowserState\\\" field=\\\"seen\\\" value=\\\".*\\\">&nbsp;Both</$radio>\\n    </td>\\n  </tr>\\n  <tr>\\n    <th>View</th>\\n    <td>\\n      <$radio tiddler=\\\"$:/config/sobjornstad/GrokTiddlyWiki/TakeawayBrowserState\\\" field=\\\"viewer\\\" value=\\\"table\\\">&nbsp;Table</$radio>&ensp;\\n      <$radio tiddler=\\\"$:/config/sobjornstad/GrokTiddlyWiki/TakeawayBrowserState\\\" field=\\\"viewer\\\" value=\\\"list\\\">&nbsp;List</$radio>\\n    </td>\\n  </tr>\\n\\n  <$list filter=\\\"[[$:/config/sobjornstad/GrokTiddlyWiki/TakeawayBrowserState]viewer[table]]\\\">\\n  <tr>\\n    <th>Show answers</th>\\n    <td><$checkbox tiddler=\\\"$:/config/sobjornstad/GrokTiddlyWiki/TakeawayBrowserState\\\" field=\\\"answer\\\" checked=\\\"yes\\\" unchecked=\\\"no\\\" default=\\\"no\\\"/></td>\\n  </tr>\\n  <tr>\\n    <th>Sort</th>\\n    <td>\\n      <$radio tiddler=\\\"$:/config/sobjornstad/GrokTiddlyWiki/TakeawayBrowserState\\\" field=\\\"sort\\\" value=\\\"question\\\">&nbsp;Question</$radio>&ensp;\\n      <$radio tiddler=\\\"$:/config/sobjornstad/GrokTiddlyWiki/TakeawayBrowserState\\\" field=\\\"sort\\\" value=\\\"origin\\\">&nbsp;Section</$radio>&ensp;\\n      <$radio tiddler=\\\"$:/config/sobjornstad/GrokTiddlyWiki/TakeawayBrowserState\\\" field=\\\"sort\\\" value=\\\"ivl\\\">&nbsp;ivl</$radio>&ensp;\\n      <$radio tiddler=\\\"$:/config/sobjornstad/GrokTiddlyWiki/TakeawayBrowserState\\\" field=\\\"sort\\\" value=\\\"ease\\\">&nbsp;ease</$radio>&ensp;\\n      <$radio tiddler=\\\"$:/config/sobjornstad/GrokTiddlyWiki/TakeawayBrowserState\\\" field=\\\"sort\\\" value=\\\"lapses\\\">&nbsp;lapses</$radio>&ensp;\\n      <$radio tiddler=\\\"$:/config/sobjornstad/GrokTiddlyWiki/TakeawayBrowserState\\\" field=\\\"sort\\\" value=\\\"due\\\">&nbsp;due</$radio>\\n    </td>\\n  </tr>\\n  <tr>\\n    <th>Invert sort</th>\\n    <td><$checkbox tiddler=\\\"$:/config/sobjornstad/GrokTiddlyWiki/TakeawayBrowserState\\\" field=\\\"invertsort\\\" checked=\\\"!\\\" unchecked=\\\"\\\"/></td>\\n  </tr>\\n  </$list>\\n</table>\\n\\n<$reveal type=\\\"match\\\" state=\\\"$:/config/sobjornstad/GrokTiddlyWiki/TakeawayBrowserState!!viewer\\\" text=\\\"table\\\">\\n\\n{{||$:/plugins/sobjornstad/TakeAway/TakeawayTableBrowser}}\\n\\n</$reveal>\\n\\n<$reveal type=\\\"match\\\" state=\\\"$:/config/sobjornstad/GrokTiddlyWiki/TakeawayBrowserState!!viewer\\\" text=\\\"list\\\" class=\\\"tr-nav-withref\\\">\\n  <$set name=mysuff value=\\\"+[first[25]]\\\">\\n    <$list filter={{{ [<curFilt>addsuffix<mysuff>] }}} emptyMessage=\\\"No results.\\\">\\n      {{||$:/plugins/sobjornstad/TakeAway/TakeawayListItem}}\\n    </$list>\\n  </$set>\\n  <$set name=mysuff value=\\\"+[count[]compare:number:gt[25]]\\\">\\n    <$list filter={{{ [<curFilt>addsuffix<mysuff>] }}}>\\n      There were more results, but only the first 25 were shown for performance reasons. If you didn't find what you were looking for above, try switching to table view or narrowing your search further.\\n    </$list>\\n  </$set>\\n</$reveal>\"},\"Takeaway Export List\":{\"title\":\"Takeaway Export List\",\"created\":\"20201229001011609\",\"modified\":\"20210408140409103\",\"tags\":\"[[TakeAway Tools]]\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"This tiddler shows all of the takeaways that you have seen in a form suitable for export to TiddlyRemember. A note is seen if you have clicked its \\\"show answer\\\" link and have not clicked \\\"forget\\\".\\n\\nYou can change the prefixes that are added to cards here in the [[export settings|$:/plugins/sobjornstad/TakeAway/Settings/Export]] screen.\\n\\nThis tiddler is not intended to be read by humans unless something is wrong -- it will slow your wiki to a crawl when viewed in the browser and is not searchable. If you're trying to get an overview of all the takeaways in the book, you should close this tiddler and visit the [[Takeaway Browser]].\\n\\n{{$:/plugins/sobjornstad/TakeAway/TakeawaysCollected}}\\n\\n<$set name=needsContext value=\\\"yes\\\">\\n<$list filter=\\\"[tag[Takeaway]seen[yes]]\\\">\\n  {{||$:/plugins/sobjornstad/TakeAway/TakeawayListItem}}\\n</$list>\\n</$set>\"},\"Takeaway\":{\"title\":\"Takeaway\",\"created\":\"20210408135946452\",\"modified\":\"20210408135819338\",\"type\":\"text/vnd.tiddlywiki\"},\"TakeawaysTemplate\":{\"title\":\"TakeawaysTemplate\",\"created\":\"20201228235038564\",\"modified\":\"20210819150443077\",\"tags\":\"Template\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\define when-empty() Takeaways are not available in the static version of //Grok TiddlyWiki//. Visit {{||$:/sib/Navigator/AnchorFromStaticPage}} to study takeaways.\\n\\n<$list filter=\\\"[<renderingStatic>!match[yes]]\\\" variable=_ emptyMessage=<<when-empty>>>\\n\\n{{$:/plugins/sobjornstad/TakeAway/ContextualHelp/TakeAway}}\\n\\n{{||$:/plugins/sobjornstad/TakeAway/TakeawayListForIntextTiddler}}\\n\\n</$list>\"}}}"
  },
  {
    "author": "Soren Bjornstad",
    "core-version": ">=5.1.21",
    "dependents": "",
    "description": "TiddlyRemember: Embed Anki notes in your TiddlyWiki",
    "list": "readme license",
    "plugin-type": "plugin",
    "source": "https://github.com/sobjornstad/TiddlyRemember",
    "title": "$:/plugins/sobjornstad/TiddlyRemember",
    "version": "1.3.6",
    "type": "application/json",
    "text": "{\"tiddlers\":{\"$:/config/ShortcutInfo/remembercz\":{\"title\":\"$:/config/ShortcutInfo/remembercz\",\"created\":\"20200926193600000\",\"modified\":\"20200926193600000\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Create a new `remembercz` macro snippet\"},\"$:/config/ShortcutInfo/rememberq\":{\"title\":\"$:/config/ShortcutInfo/rememberq\",\"created\":\"20200926193600000\",\"modified\":\"20200926193600000\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"Create a new `rememberq` macro snippet\"},\"$:/config/TiddlyRemember/DeckMapping\":{\"title\":\"$:/config/TiddlyRemember/DeckMapping\",\"created\":\"20200516223625569\",\"modified\":\"20200516223658777\",\"tags\":\"\"},\"$:/config/TiddlyRemember/DefaultClasses\":{\"title\":\"$:/config/TiddlyRemember/DefaultClasses\",\"created\":\"20210925145600000\",\"modified\":\"20210925145600000\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\"},\"$:/config/TiddlyRemember/IdPrefix\":{\"title\":\"$:/config/TiddlyRemember/IdPrefix\",\"created\":\"20200516223625569\",\"modified\":\"20200516223658777\",\"tags\":\"\"},\"$:/config/TiddlyRemember/TagMapping\":{\"title\":\"$:/config/TiddlyRemember/TagMapping\",\"created\":\"20200516190911842\",\"modified\":\"20200516223231730\",\"tags\":\"\"},\"$:/config/TiddlyRemember/snippets/remembercz\":{\"title\":\"$:/config/TiddlyRemember/snippets/remembercz\",\"created\":\"20210929144900000\",\"modified\":\"20210929144900000\",\"tags\":\"\",\"text\":\"<<remembercz \\\"%NOTE_ID%\\\"\\n\\t\\\"Cloze\\\">>\"},\"$:/config/TiddlyRemember/snippets/rememberq\":{\"title\":\"$:/config/TiddlyRemember/snippets/rememberq\",\"created\":\"20210929144900000\",\"modified\":\"20210929144900000\",\"tags\":\"\",\"text\":\"<<rememberq \\\"%NOTE_ID%\\\"\\n\\t\\\"Q\\\"\\n\\t\\\"A\\\">>\"},\"$:/config/shortcuts/remembercz\":{\"title\":\"$:/config/shortcuts/remembercz\",\"created\":\"20200926193600000\",\"modified\":\"20200926193600000\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"alt-shift-R\"},\"$:/config/shortcuts/rememberq\":{\"title\":\"$:/config/shortcuts/rememberq\",\"created\":\"20200926193600000\",\"modified\":\"20200926193600000\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"alt-R\"},\"$:/plugins/sobjornstad/TiddlyRemember/icons/lightbulb-black.svg\":{\"title\":\"$:/plugins/sobjornstad/TiddlyRemember/icons/lightbulb-black.svg\",\"text\":\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n<svg width=\\\"18px\\\" height=\\\"18px\\\" viewBox=\\\"0 0 1792 1792\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M1120 576q0 13-9.5 22.5t-22.5 9.5-22.5-9.5-9.5-22.5q0-46-54-71t-106-25q-13 0-22.5-9.5t-9.5-22.5 9.5-22.5 22.5-9.5q50 0 99.5 16t87 54 37.5 90zm160 0q0-72-34.5-134t-90-101.5-123-62-136.5-22.5-136.5 22.5-123 62-90 101.5-34.5 134q0 101 68 180 10 11 30.5 33t30.5 33q128 153 141 298h228q13-145 141-298 10-11 30.5-33t30.5-33q68-79 68-180zm128 0q0 155-103 268-45 49-74.5 87t-59.5 95.5-34 107.5q47 28 47 82 0 37-25 64 25 27 25 64 0 52-45 81 13 23 13 47 0 46-31.5 71t-77.5 25q-20 44-60 70t-87 26-87-26-60-70q-46 0-77.5-25t-31.5-71q0-24 13-47-45-29-45-81 0-37 25-64-25-27-25-64 0-54 47-82-4-50-34-107.5t-59.5-95.5-74.5-87q-103-113-103-268 0-99 44.5-184.5t117-142 164-89 186.5-32.5 186.5 32.5 164 89 117 142 44.5 184.5z\\\"/></svg>\\n<!-- Source: FontAwesome -->\",\"type\":\"image/svg+xml\",\"created\":\"20200517161140014\",\"modified\":\"20200517161732249\"},\"$:/plugins/sobjornstad/TiddlyRemember/icons/lightbulb-white.svg\":{\"title\":\"$:/plugins/sobjornstad/TiddlyRemember/icons/lightbulb-white.svg\",\"text\":\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n<svg width=\\\"18px\\\" height=\\\"18px\\\" viewBox=\\\"0 0 1792 1792\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M1120 576q0 13-9.5 22.5t-22.5 9.5-22.5-9.5-9.5-22.5q0-46-54-71t-106-25q-13 0-22.5-9.5t-9.5-22.5 9.5-22.5 22.5-9.5q50 0 99.5 16t87 54 37.5 90zm160 0q0-72-34.5-134t-90-101.5-123-62-136.5-22.5-136.5 22.5-123 62-90 101.5-34.5 134q0 101 68 180 10 11 30.5 33t30.5 33q128 153 141 298h228q13-145 141-298 10-11 30.5-33t30.5-33q68-79 68-180zm128 0q0 155-103 268-45 49-74.5 87t-59.5 95.5-34 107.5q47 28 47 82 0 37-25 64 25 27 25 64 0 52-45 81 13 23 13 47 0 46-31.5 71t-77.5 25q-20 44-60 70t-87 26-87-26-60-70q-46 0-77.5-25t-31.5-71q0-24 13-47-45-29-45-81 0-37 25-64-25-27-25-64 0-54 47-82-4-50-34-107.5t-59.5-95.5-74.5-87q-103-113-103-268 0-99 44.5-184.5t117-142 164-89 186.5-32.5 186.5 32.5 164 89 117 142 44.5 184.5z\\\" fill=\\\"#fff\\\"/></svg>\\n<!-- Source: FontAwesome -->\",\"type\":\"image/svg+xml\",\"created\":\"20200517161252694\",\"modified\":\"20200517161645377\"},\"$:/plugins/sobjornstad/TiddlyRemember/license\":{\"title\":\"$:/plugins/sobjornstad/TiddlyRemember/license\",\"text\":\"The MIT License (MIT)\\n\\nCopyright (c) 2020-2021 Soren Bjornstad and the TiddlyRemember community.\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \\\"Software\\\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n\",\"type\":\"text/plain\"},\"$:/plugins/sobjornstad/TiddlyRemember/macros/insert-snippet\":{\"title\":\"$:/plugins/sobjornstad/TiddlyRemember/macros/insert-snippet\",\"created\":\"20210929144300000\",\"modified\":\"20210929144300000\",\"tags\":\"$:/tags/Macro\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\define tr-insert-note(snippet)\\n\\t<$vars\\n\\t\\tthetime=<<now \\\"[UTC]YYYY0MM0DD0hh0mm0ss0XXX\\\">>\\n\\t\\ttheprefix={{$:/config/TiddlyRemember/IdPrefix}}>\\n\\t<$vars\\n\\t\\tnoteid={{{ [<theprefix>addsuffix<thetime>] }}}\\n\\t\\teditingtid={{{ [<storyTiddler>get[draft.of]] }}}>\\n\\t\\t<$action-sendmessage\\n\\t\\t\\t$message=\\\"tm-edit-text-operation\\\"\\n\\t\\t\\t$param=\\\"replace-selection\\\"\\n\\t\\t\\ttext={{{ [<__snippet__>search-replace[%NOTE_ID%],<noteid>search-replace[%EDITING_TIDDLER%],<editingtid>] }}}/>\\n\\t</$vars>\\n\\t</$vars>\\n\\\\end\\n\"},\"$:/plugins/sobjornstad/TiddlyRemember/macros/remember\":{\"title\":\"$:/plugins/sobjornstad/TiddlyRemember/macros/remember\",\"created\":\"20200510004110231\",\"modified\":\"20200925141800000\",\"tags\":\"$:/tags/Macro\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\define remembertwo(id, reference, sched)\\n\\t<div class=\\\"tr-selfidentification\\\">\\n\\t\\t<$set name=\\\"selfid\\\" filter=\\\"\\\"\\\"[enlist[$reference$]]\\\"\\\"\\\" value=\\\"\\\"\\\"[<$link to=\\\"$reference$\\\">$reference$</$link>: $id$]\\\"\\\"\\\" emptyValue=\\\"[$id$]\\\">\\n\\t\\t\\t<<selfid>>\\n\\t\\t</$set>\\n\\t</div>\\n\\t<div class=\\\"rid\\\">\\n\\t\\t[$id$]\\n\\t</div>\\n\\t<div class=\\\"tr-reference\\\">\\n\\t\\t<$text text=<<__reference__>>/>\\n\\t</div>\\n\\t<div class=\\\"tr-sched\\\">\\n\\t\\t<$text text=<<__sched__>>/>\\n\\t</div>\\n\\\\end\\n\\n\\\\define rememberq(id, question, answer, reference: \\\"\\\", sched: \\\"\\\", class:\\\"\\\")\\n    <div class={{{ [[rememberq remembertwo ]addsuffix<__class__>addsuffix[ ]addsuffix{$:/config/TiddlyRemember/DefaultClasses}] }}}>\\n        <div class=\\\"rquestion tr-ritem\\\">\\n            <div>Q:</div>\\n            <p>$question$</p>\\n        </div>\\n        <div class=\\\"ranswer tr-ritem\\\">\\n            <div>A:</div>\\n            <p>$answer$</p>\\n        </div>\\n\\t\\t<$macrocall $name=remembertwo id=<<__id__>> reference=<<__reference__>> sched=<<__sched__>>/>\\n    </div>\\n\\\\end\\n\\n\\\\define rememberp(id, first, second, reference: \\\"\\\", sched: \\\"\\\", class: \\\"\\\")\\n    <div class={{{ [[rememberp remembertwo ]addsuffix<__class__>addsuffix[ ]addsuffix{$:/config/TiddlyRemember/DefaultClasses}] }}}>\\n        <div class=\\\"rfirst tr-ritem\\\">\\n            <div>1:</div>\\n            <p>$first$</p>\\n        </div>\\n        <div class=\\\"rsecond tr-ritem\\\">\\n            <div>2:</div>\\n            <p>$second$</p>\\n        </div>\\n\\t\\t<$macrocall $name=remembertwo id=<<__id__>> reference=<<__reference__>> sched=<<__sched__>>/>\\n    </div>\\n\\\\end\\n\\n\\\\define remembercz(id, text, mode: \\\"block\\\", reference: \\\"\\\", sched: \\\"\\\", class: \\\"\\\")\\n\\t<$list filter=\\\"[[$mode$]match[inline]]\\\" variable=_>\\n\\t\\t<$macrocall $name=twRememberClozeInline id=<<__id__>> text=<<__text__>> reference=<<__reference__>> sched=<<__sched__>> class=<<__class__>>/>\\n\\t</$list>\\n\\t<$list filter=\\\"[[$mode$]!match[inline]]\\\" variable=_>\\n\\t\\t<$macrocall $name=twRememberClozeBlock id=<<__id__>> text=<<__text__>> reference=<<__reference__>> sched=<<__sched__>> class=<<__class__>>/>\\n\\t</$list>\\n\\\\end\\n\\n\\\\define twRememberMetadata(id, reference, sched)\\n\\t<div class=\\\"tr-selfidentification\\\">\\n\\t\\t<$set name=\\\"selfid\\\" filter=\\\"\\\"\\\"[enlist[$reference$]]\\\"\\\"\\\" value=\\\"\\\"\\\"[<$link to=\\\"$reference$\\\">$reference$</$link>: $id$]\\\"\\\"\\\" emptyValue=\\\"[$id$]\\\">\\n\\t\\t\\t<<selfid>>\\n\\t\\t</$set>\\n\\t</div>\\n\\t<div class=\\\"rid\\\">\\n\\t\\t[$id$]\\n\\t</div>\\n\\t<div class=\\\"tr-reference\\\">\\n\\t\\t<$text text=<<__reference__>>/>\\n\\t</div>\\n\\t<div class=\\\"tr-sched\\\">\\n\\t\\t<$text text=<<__sched__>>/>\\n\\t</div>\\n\\\\end\\n\\n\\\\define twRememberClozeBlock(id, text, reference, sched, class)\\n    <div class={{{ [[remembercz ]addsuffix<__class__>addsuffix[ ]addsuffix{$:/config/TiddlyRemember/DefaultClasses}] }}}>\\n\\t\\t<span class=\\\"cloze-identifier\\\"><span class=\\\"tr-name-cloze\\\">cloze: </span></span>\\n\\t\\t<span class=\\\"cloze-display\\\"><$set name=\\\"unescape\\\" value={{{ [<__text__>search-replace:g[\\\\{],[{]search-replace:g[\\\\}],[}]] }}}><<unescape>></$set></span>\\n\\t\\t<span class=\\\"cloze-text\\\">$text$</span>\\n\\t\\t<$macrocall $name=\\\"twRememberMetadata\\\" id=<<__id__>> reference=<<__reference__>> sched=<<__sched__>>/>\\n\\t</div>\\n\\\\end\\n\\n\\\\define twRememberClozeInline(id, text, reference, sched, class)\\n    <span class={{{ [[remembercz ]addsuffix<__class__>addsuffix[ ]addsuffix{$:/config/TiddlyRemember/DefaultClasses}] }}}>\\n\\t\\t<span class=\\\"cloze-identifier\\\">{<span class=\\\"tr-name-cloze\\\">cloze: </span></span>\\n\\t\\t<span class=\\\"cloze-display\\\"><$set name=\\\"unescape\\\" value={{{ [<__text__>search-replace:g[\\\\{],[{]search-replace:g[\\\\}],[}]] }}}><<unescape>></$set></span>\\n\\t\\t<span class=\\\"cloze-identifier\\\">}</span>\\n\\t\\t<span class=\\\"cloze-text\\\">$text$</span>\\n\\t\\t<$macrocall $name=\\\"twRememberMetadata\\\" id=<<__id__>> reference=<<__reference__>> sched=<<__sched__>>/>\\n\\t</span>\\n\\\\end\"},\"$:/plugins/sobjornstad/TiddlyRemember/readme\":{\"title\":\"$:/plugins/sobjornstad/TiddlyRemember/readme\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"TiddlyRemember is a tool that integrates TiddlyWiki with Anki.\\nYou can interleave questions with your notes in TiddlyWiki,\\n    then sync them into Anki notes with one click.\\nYou can edit and move the questions around your TiddlyWiki,\\n    and they will stay connected to the Anki notes.\\nScheduling information in Anki is preserved when editing notes in TiddlyWiki.\\n\\n* [[Documentation|https://sobjornstad.github.io/TiddlyRemember/]]\\n* [[GitHub|https://github.com/sobjornstad/TiddlyRemember]]\\n\"},\"$:/plugins/sobjornstad/TiddlyRemember/stylesheets/remember\":{\"title\":\"$:/plugins/sobjornstad/TiddlyRemember/stylesheets/remember\",\"created\":\"20200510004425508\",\"modified\":\"20200517155210548\",\"tags\":\"$:/tags/Stylesheet\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"div.remembertwo {\\n\\tborder-left: 3px solid <<colour tag-background>>;\\n\\tpadding-left: 0.5em;\\n\\tmargin-bottom: 22px; /* line-height of the selfidentification block */\\n}\\n\\ndiv.remembertwo .tr-ritem p {\\n\\tmargin-top: 0px;\\n\\tmargin-bottom: 0px;\\n\\tmargin-left: 2em;\\n}\\n\\ndiv.remembertwo .tr-ritem div {\\n\\tfont-weight: bold;\\n\\tcolor: <<colour primary>>;\\n\\tfloat: left;\\n}\\n\\ndiv.remembertwo div.tr-selfidentification {\\n\\tfloat: right;\\n\\tcolor: <<colour muted-foreground>>;\\n}\\n\\ndiv.remembercz {\\n\\tborder-left: 3px solid <<colour tag-background>>;\\n\\tpadding-left: 0.5em;\\n\\tline-height: 22px; /* default; setting explicitly */\\n}\\n\\n.remembercz > span.cloze-identifier {\\n\\tcolor: <<colour tag-background>>;\\n}\\n\\n.remembercz div.tr-selfidentification {\\n\\tfloat: right;\\n\\tmargin-left: 0.5em;\\n\\tcolor: <<colour muted-foreground>>;\\n}\\n\\n\\n/* these separate fields are only read by the TR parser */\\ndiv.remembertwo div.tr-reference, .remembercz div.tr-reference {\\n\\tdisplay: none;\\n}\\n\\ndiv.remembertwo div.rid, .remembercz div.rid {\\n\\tdisplay: none;\\n}\\n\\ndiv.remembertwo div.tr-sched, .remembercz div.tr-sched {\\n\\tdisplay: none;\\n}\\n\\n.remembercz > span.cloze-text {\\n\\tdisplay: none;\\n}\\n\\n\\n/***** Built-in classes for common format customizations; apply to the class: parameter to macros *****/\\n/* Hide the ID field */\\n.tr-hide-id div.tr-selfidentification {\\n\\tdisplay: none;\\n}\\n\\n/* Hide the ID only if it's an inline cloze */\\nspan.remembercz.tr-hide-inline-cloze-id div.tr-selfidentification {\\n\\tdisplay: none;\\n}\\n\\n/* Hide the word \\\"cloze\\\" on inline clozes */\\nspan.remembercz.tr-hide-inline-cloze-name span.cloze-identifier span.tr-name-cloze {\\n\\tdisplay: none;\\n}\"},\"$:/plugins/sobjornstad/TiddlyRemember/templates/AnkiDecks\":{\"title\":\"$:/plugins/sobjornstad/TiddlyRemember/templates/AnkiDecks\",\"created\":\"20200516223716380\",\"modified\":\"20200516232507031\",\"revision\":\"7\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<ul id=\\\"anki-decks\\\">\\n\\t<$list\\n\\t\\t\\tfilter=\\\"[[$:/config/TiddlyRemember/DeckMapping]get[text]splitregexp[\\\\n]!is[blank]]\\\"\\n\\t\\t\\tvariable=\\\"subfilter\\\">\\n\\t\\t<$list filter=\\\"[<currentTiddler>subfilter<subfilter>]\\\">\\n\\t\\t\\t<li><<currentTiddler>></li>\\n\\t\\t</$list>\\n\\t</$list>\\n</ul>\"},\"$:/plugins/sobjornstad/TiddlyRemember/templates/AnkiTags\":{\"title\":\"$:/plugins/sobjornstad/TiddlyRemember/templates/AnkiTags\",\"created\":\"20200516191131056\",\"modified\":\"20200516232427612\",\"revision\":\"174\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<ul id=\\\"anki-tags\\\">\\n\\t<$list\\n\\t\\t\\tfilter=\\\"[[$:/config/TiddlyRemember/TagMapping]get[text]splitregexp[\\\\n]!is[blank]]\\\"\\n\\t\\t\\tvariable=\\\"subfilter\\\">\\n\\t\\t<$list filter=\\\"[<currentTiddler>subfilter<subfilter>]\\\">\\n\\t\\t\\t<li><<currentTiddler>></li>\\n\\t\\t</$list>\\n\\t</$list>\\n</ul>\"},\"$:/plugins/sobjornstad/TiddlyRemember/templates/TiddlyRememberParseable\":{\"title\":\"$:/plugins/sobjornstad/TiddlyRemember/templates/TiddlyRememberParseable\",\"created\":\"20200510211830000\",\"modified\":\"20200516223853339\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"\\\\import [[$:/core/ui/PageMacros]] [all[shadows+tiddlers]tag[$:/tags/Macro]!has[draft.of]]\\n\\n<$set name=\\\"tr-rendering\\\" value=\\\"yes\\\">\\n\\n<span id=\\\"tr-version\\\">1.3.6</span>\\n\\n{{||$:/plugins/sobjornstad/TiddlyRemember/templates/AnkiDecks}}\\n{{||$:/plugins/sobjornstad/TiddlyRemember/templates/AnkiTags}}\\n\\n<$transclude mode=\\\"block\\\" />\\n\\n</$set>\\n\"},\"$:/plugins/sobjornstad/TiddlyRemember/toolbar/remembercz\":{\"title\":\"$:/plugins/sobjornstad/TiddlyRemember/toolbar/remembercz\",\"caption\":\"RememberCz\",\"condition\":\"[<targetTiddler>!has[type]] [<targetTiddler>type[text/vnd.tiddlywiki]]\",\"created\":\"20200517155905263\",\"description\":\"Remember Cloze Deletion\",\"icon\":\"$:/plugins/sobjornstad/TiddlyRemember/icons/lightbulb-black.svg\",\"list-after\":\"$:/plugins/sobjornstad/TiddlyRemember/toolbar/rememberq\",\"modified\":\"20200517162124307\",\"shortcuts\":\"((remembercz))\",\"tags\":\"$:/tags/EditorToolbar\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$macrocall $name=tr-insert-note snippet={{$:/config/TiddlyRemember/snippets/remembercz}}>\"},\"$:/plugins/sobjornstad/TiddlyRemember/toolbar/rememberq\":{\"title\":\"$:/plugins/sobjornstad/TiddlyRemember/toolbar/rememberq\",\"caption\":\"RememberQ\",\"condition\":\"[<targetTiddler>!has[type]] [<targetTiddler>type[text/vnd.tiddlywiki]]\",\"created\":\"20161118171456554\",\"description\":\"Remember Question/Answer\",\"icon\":\"$:/plugins/sobjornstad/TiddlyRemember/icons/lightbulb-white.svg\",\"modified\":\"20200517161709608\",\"shortcuts\":\"((rememberq))\",\"tags\":\"$:/tags/EditorToolbar\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"<$macrocall $name=tr-insert-note snippet={{$:/config/TiddlyRemember/snippets/rememberq}}>\"}}}"
  },
  {
    "author": "Thomas Elmiger",
    "core-version": "5.1.13",
    "created": "20170205215504722",
    "description": "Disclosure HTML element",
    "list": "readme support license",
    "modified": "20240106124548575",
    "name": "DetailsWidget",
    "packaged-by": "Gatha on 6th January 2024, 13:47:24",
    "plugin-type": "plugin",
    "source": "https://tid.li/tw5/plugins.html",
    "title": "$:/plugins/telmiger/details",
    "version": "0.8.0",
    "dependents": "",
    "type": "application/json",
    "text": "{\"tiddlers\":{\"$:/plugins/telmiger/details/about\":{\"title\":\"$:/plugins/telmiger/details/about\",\"created\":\"20200603211101398\",\"modified\":\"20200603211101398\",\"tags\":\"\",\"text\":\"Create HTML 5 `<details>` elements including a `<summary>` using this widget.\\n\\n<$details summary=\\\"The details element – W3C definition\\\">\\n\\n<<<\\nThe [[details|http://w3c.github.io/html/interactive-elements.html#elementdef-details]] element represents a disclosure widget from which the user can obtain additional information or controls.\\n<<< W3C\\n\\n</$details>\\n\\n<$details summary=\\\"Code example\\\" open=\\\"no\\\">\\n\\n```\\n<$details summary=\\\"This should be open\\\" open=\\\"yes\\\">\\n\\nContent will be immediately visible if open is set to \\\"yes\\\".\\n\\n</$details>\\n```\\n\\n</$details>\"},\"$:/plugins/telmiger/details/colours.css\":{\"title\":\"$:/plugins/telmiger/details/colours.css\",\"created\":\"20180925155320737\",\"creator\":\"Thomas Elmiger\",\"modified\":\"20240106124522075\",\"modifier\":\"Thomas Elmiger\",\"tags\":\"$:/tags/Stylesheet\",\"text\":\"/* details and summary colours */\\n\\ndetails {\\n   background-color: <<colour sidebar-tab-background-selected>>;\\n   color: <<colour sidebar-tab-foreground-selected>>;\\n}\\n\\ndetails summary {\\n   background-color: <<colour sidebar-tab-background>>;\\n   color: <<colour sidebar-tab-foreground>>;\\n}\\n\\ndetails.notification summary {\\n    background-color: <<colour notification-background>>;\\n   color: <<colour notification-foreground>>;\\n}\\n\\ndetails.warning summary {\\n    background-color: #ffbbaf;\\n    color: #000;\\n}\\n\\ndetails.success summary {\\n    background-color: #88edc5;\\n    color: #000;\\n}\\n\"},\"$:/plugins/telmiger/details/details.css\":{\"title\":\"$:/plugins/telmiger/details/details.css\",\"created\":\"20170122140815442\",\"creator\":\"Thomas Elmiger\",\"modified\":\"20180929131615369\",\"modifier\":\"Thomas Elmiger\",\"tags\":\"$:/tags/Stylesheet\",\"text\":\"/* details and summary */\\n\\ndetails {\\n   transition: height 1s ease;\\n   padding: 0 0.5em 0 0.66em;\\n   margin-top: 0.66em;\\n   margin-bottom: 0.66em;\\n}\\n\\ndetails + details {\\n   margin-top: -0.46em;\\n}\\n\\ndetails[open] {\\n   padding-bottom: 1em;\\n}\\n\\ndetails:not([open]) { \\n   cursor: pointer;\\n}\\n\\ndetails > summary {\\n   display: list-item;\\n   margin: 0 -0.5em 0 -0.66em;\\n   padding: 0.2em 0.5em 0.2em 0.66em;\\n   padding-left: 1.76em;  /* adjust for indentation */\\n   text-indent: -1.1em;\\n   cursor: pointer;\\n}\\n\\ndetails[open] > summary {\\n   margin-bottom: 1em;\\n}\\n\\ndetails[open] > *:first-child:not(summary) {\\n   margin-top: 1em;\\n}\\n\"},\"$:/plugins/telmiger/details/details.js\":{\"title\":\"$:/plugins/telmiger/details/details.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/telmiger/details/details.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nDetails widget v 0.8\\n\\nWill output an HTML 5 <details> section including a <summary>\\n\\n```\\n\\t<details>\\n\\t\\t<summary>This sums it up</summary> \\n\\t\\tAll the details follow here.\\n\\t</details>\\n```\\n\\n|Parameter |Description |h\\n|summary |Optional text to display as summary. Wins over field (see below). |\\n|open |Optional initial state, set to \\\"open\\\" to show details on load. Defaults to \\\"\\\". |\\n|state |An optional TextReference containing the state. Wins over open. |\\n|field |Optionally, the summary is taken from the field with this name in a given tiddler. Defaults to \\\"title\\\". |\\n|tiddler |Optional title of a tiddler to watch, connected to field. Defaults to current tiddler. |\\n|class |Optional CSS classes to be assigned to the details tag. |\\n\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar DetailsWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nDetailsWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nDetailsWidget.prototype.render = function(parent,nextSibling) {\\n\\t// Save the parent dom node\\n\\tthis.parentDomNode = parent;\\n\\t// Compute attributes\\n\\tthis.computeAttributes();\\n\\t// Execute logic\\n\\tthis.execute();\\n\\t// Create elements\\n\\tthis.detailsDomNode = this.document.createElement(\\\"details\\\");\\n\\tif(this.detailsClass !== \\\"\\\") {\\n\\t\\t// this.detailsClass += \\\" \\\";\\n\\t\\t// this.detailsClass += \\\"tc-details\\\";\\n\\t\\tthis.detailsDomNode.setAttribute(\\\"class\\\",this.detailsClass);\\n\\t}\\n\\tif(this.detailsOpen == \\\"open\\\") {\\n\\t\\tthis.detailsDomNode.setAttribute(\\\"open\\\",\\\"open\\\");\\n\\t}\\n\\tif(this.detailsSummary !== \\\"\\\") {\\n\\t\\tthis.summaryDomNode = this.document.createElement(\\\"summary\\\");\\n\\t\\t// this.summaryDomNode.setAttribute(\\\"class\\\",\\\"tc-summary\\\");\\n\\t\\tthis.detailsDomNode.appendChild(this.summaryDomNode);\\n\\t\\tthis.summaryDomNode.appendChild(this.document.createTextNode(this.detailsSummary));\\n\\t}\\n// register an event listener\\n/* Maybe this can be reactivated later, see below.\\n\\tif(this.detailsStateTitle) {\\n\\t\\t$tw.utils.addEventListeners(this.detailsDomNode,[\\n\\t\\t\\t{name: \\\"toggle\\\", handlerObject: this, handlerMethod: \\\"handleToggleEvent\\\"},\\n\\t\\t]);\\n\\t}\\n*/\\n// As iOS mobile browsers lack support of toggle events on details \\n// we emulate the toggle event using click\\n\\tif(this.detailsStateTitle && this.summaryDomNode) {\\n\\t\\t$tw.utils.addEventListeners(this.summaryDomNode,[\\n\\t\\t\\t{name: \\\"click\\\", handlerObject: this, handlerMethod: \\\"handleToggleEvent\\\"},\\n\\t\\t]);\\n\\t} else {\\n\\t\\tif(this.detailsStateTitle) {\\n\\t\\t\\t$tw.utils.addEventListeners(this.detailsDomNode,[\\n\\t\\t\\t\\t{name: \\\"click\\\", handlerObject: this, handlerMethod: \\\"handleToggleEvent\\\"},\\n\\t\\t\\t]);\\n\\t\\t}\\n\\t}\\n\\t// Insert the details into the DOM and render any children\\n\\tthis.parentDomNode.insertBefore(this.detailsDomNode,nextSibling);\\n\\tthis.renderChildren(this.detailsDomNode,null);\\n\\tthis.domNodes.push(this.detailsDomNode);\\n};\\n\\n/*\\nRetrieve the value of the summary\\n*/\\nDetailsWidget.prototype.getSummary = function() {\\n\\tvar summary = \\\"\\\";\\n\\tif(this.summaryTitle === \\\"Tiddler not found\\\" && this.summaryField === \\\"\\\") {\\n\\t// nothing defined: leave empty \\n\\t\\tsummary = \\\"\\\";\\n\\t} else {\\n\\t\\t// tiddler defined? use defined field or title\\n\\t\\tif(this.myTiddler) {\\n\\t\\t\\tif(this.summaryField === \\\"title\\\" || this.summaryField === \\\"\\\") {\\n\\t\\t\\t\\tsummary = this.summaryTitle;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tif(this.summaryField === \\\"text\\\") {\\n         \\t\\t// getTiddlerText() triggers lazy loading of skinny tiddlers\\n\\t\\t\\t\\t\\tsummary = this.wiki.getTiddlerText(this.summaryTitle);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tsummary = this.myTiddler.fields[this.summaryField];\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tif(this.summaryField !== \\\"\\\" && this.summaryField !== \\\"text\\\") {\\n\\t\\t\\t\\t// try defined field in current tiddler\\n\\t\\t\\t\\tvar tiddler = this.wiki.getTiddler(this.getVariable(\\\"currentTiddler\\\"));\\n\\t\\t\\t\\tsummary = tiddler.fields[this.summaryField];\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tsummary = \\\"\\\";\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n   return summary;\\n};\\n\\n/*\\nRetrieve the value of the state text reference\\n*/\\nDetailsWidget.prototype.getStateFromReference = function() {\\n    var state = this.detailsStateTitle ? this.wiki.getTextReference(this.detailsStateTitle,\\\"\\\",this.getVariable(\\\"currentTiddler\\\")) : \\\"\\\";\\n    return state;\\n};\\n\\n/*\\nCheck all open signals, state fields/tiddlers get priority\\n*/\\nDetailsWidget.prototype.getOpenState = function() {\\n\\tvar result = \\\"\\\";\\n\\tif((this.detailsOpenDefault !== \\\"\\\" && this.detailsOpenDefault !== \\\"no\\\") \\n\\t    || this.detailsState === \\\"open\\\") {\\n\\t\\tresult = \\\"open\\\";\\n\\t } \\n\\tif(this.detailsStateTitle !==\\\"\\\" && this.detailsState !== \\\"open\\\") {\\n\\t\\tresult = \\\"\\\";\\n\\t}\\n\\treturn result;\\n};\\n\\n/*\\nUpdate the state text reference after click event\\n*/\\nDetailsWidget.prototype.updateState = function(openState) {\\n\\tvar fieldValue = \\\"false\\\";\\n\\tvar currentTiddler = this.getVariable(\\\"currentTiddler\\\");\\n    // get the title for the (existing/new) tiddler\\n\\tvar tr = $tw.utils.parseTextReference(this.detailsStateTitle);\\n\\tvar tidTitle = tr.title || currentTiddler;\\n    // is it an existing state tiddler?\\n\\tvar isStateTiddler = (tr.title === this.detailsStateTitle);\\n\\tvar hasStateTiddler = this.wiki.tiddlerExists(tr.title);\\n\\tvar currentStateTiddler = (tr.title === currentTiddler);\\n\\tif(isStateTiddler || hasStateTiddler || (currentStateTiddler && tr.field !== \\\"text\\\")) { \\n\\t\\t// Set the state field (but never overwrite the current tiddler’s text field\\n\\t\\tthis.wiki.setText(tidTitle,tr.field,tr.index,openState);\\n\\t} else {\\n\\t\\tif(!hasStateTiddler && tidTitle !== currentTiddler) {\\n\\t\\t\\tthis.createTiddler(tidTitle);\\n\\t\\t\\tthis.wiki.setText(tidTitle,tr.field,tr.index,openState);\\n\\t\\t} else {\\n\\t\\t\\tconsole.log (\\\"Something went wrong in updateState\\\");\\n\\t\\t}\\n\\t}\\n};\\n\\n/*\\nCreate a tiddler with a title only\\n*/\\nDetailsWidget.prototype.createTiddler = function(tidTitle) {\\n\\tthis.wiki.addTiddler(new $tw.Tiddler(\\n\\t\\tthis.wiki.getCreationFields(),\\n\\t\\tthis.wiki.getModificationFields(),\\n\\t\\t{\\n\\t\\t\\ttitle: tidTitle,\\n\\t\\t\\ttags: []\\n\\t\\t}\\n\\t));\\n};\\n\\n/*\\nSet openState according to click\\n*/\\nDetailsWidget.prototype.handleToggleEvent = function(event) {\\n\\t// check if an open attribute is present\\n\\tvar newState = this.detailsDomNode.open ? \\\"\\\" : \\\"open\\\";\\n\\t// update only, if the node has a new state\\n\\tif(newState !== this.detailsState) {\\n\\t\\tthis.updateState(newState);\\n\\t}\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nDetailsWidget.prototype.execute = function() {\\n\\t// Get the parameters from the attributes \\n\\tvar tryTiddler = this.getAttribute(\\\"tiddler\\\");\\n\\tthis.myTiddler = this.wiki.getTiddler(tryTiddler);\\n\\tthis.summaryTitle = this.myTiddler ? tryTiddler : \\\"Tiddler not found\\\";\\n\\tthis.summaryField = this.getAttribute(\\\"field\\\",\\\"\\\");\\n\\tthis.detailsSummary = this.getAttribute(\\\"summary\\\") || this.getSummary();\\n\\tthis.detailsStateTitle = this.getAttribute(\\\"state\\\",\\\"\\\");\\n\\tthis.detailsState = this.getStateFromReference();\\n\\tthis.detailsOpenDefault = this.getAttribute(\\\"open\\\",\\\"\\\");\\n\\tthis.detailsOpen = this.getOpenState();\\n\\tthis.detailsClass = this.getAttribute(\\\"class\\\",\\\"\\\");\\n\\t// Construct the child widgets\\n\\tthis.makeChildWidgets();\\n};\\n\\n/*\\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n*/\\nDetailsWidget.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes();\\n\\tif(changedAttributes.tiddler || changedAttributes.field || changedAttributes.summary || changedAttributes.state || changedAttributes.open || changedAttributes[\\\"class\\\"]) {\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t} else {\\n\\t\\tvar refreshed = false;\\n\\t\\tvar testState = this.getStateFromReference();\\n\\t\\tif(testState !== this.detailsState) {\\n\\t\\t\\t// state change\\n\\t\\t\\tthis.refreshSelf();\\n\\t\\t\\trefreshed = true;\\n\\t\\t} \\n\\t\\treturn this.refreshChildren(changedTiddlers) || refreshed;\\n\\t}\\n};\\n\\nexports.details = DetailsWidget;\\n\\n})();\",\"type\":\"application/javascript\",\"module-type\":\"widget\",\"created\":\"20170124173619910\",\"creator\":\"Thomas Elmiger\",\"modified\":\"20180929212032187\",\"modifier\":\"Thomas Elmiger\",\"tags\":\"Plugins\"},\"$:/plugins/telmiger/details/history\":{\"title\":\"$:/plugins/telmiger/details/history\",\"created\":\"20240101144054993\",\"creator\":\"Thomas Elmiger\",\"modified\":\"20240106124706542\",\"modifier\":\"Thomas Elmiger\",\"tags\":\"\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"''Change Log''\\n\\n* ''0.8.0'' -- 2024-01-01 -- Colours update\\n** more robust color definitions (use sidebar tab colours)\\n\\n* ''0.7.7'' -- 2024-01-01 -- Icon update\\n** History added\\n* ''0.7.6'' -- 2022-04-27 -- (?)\\n* ''0.7.5'' -- 2020-06-04 -- (?)\\n* ''0.7.4'' -- 2018-09-25 -- (?)\\n\\n\"},\"$:/plugins/telmiger/details/icon\":{\"title\":\"$:/plugins/telmiger/details/icon\",\"created\":\"20170205205314072\",\"modified\":\"20240101145348360\",\"tags\":\"\",\"text\":\"<svg class=\\\"tc-image-button telmiger-icon\\\" viewBox=\\\"0 0 128 128\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"22pt\\\" height=\\\"22pt\\\">\\n  <path fill=\\\"#e2001a\\\" d=\\\"M64 2a62 62 0 1 0 0 124A62 62 0 0 0 64 2z\\\"/>\\n  <path transform=\\\"rotate(270,68,58)\\\" fill=\\\"#fff\\\" d=\\\"M100.4 63.3a26 26 0 0 1-14 2.8h-8c-4.2 0-7.3.9-9.2 2.6-2 1.7-3.5 5-4.6 10.2 0 0-.2 1.4-.5 1.4s-.4-.8-.5-1.5a37.9 37.9 0 0 0-.7-2.8c-.7-2.1-1.3-3.7-2-4.8a10 10 0 0 0-2.8-3.3 8.3 8.3 0 0 0-4-1.5L52 66H41.7c-6.1 0-10.7-1-13.7-2.8-5-3.2-7.6-9.2-8-18l.1-2.1h.6c.4 4 3.7 7 6.1 9.2 2.4 2.2 6.3 3.2 11.6 3.2h9.3c5.4 0 9.3 1.3 11.7 3.7a18 18 0 0 1 4.4 10.4c.1.5 0 .8.2.8s.1-.3.2-.8c.7-6.1 3-10.2 7.1-12.3 2.5-1.3 6.4-2 11.9-1.9l6.3.1c4.3.1 8-.7 11-2.5 2.9-1.8 6.4-5 6.8-10h.5c.2.6.2 1.6.2 2.4-.4 8.8-3 14.7-7.6 17.8z\\\"/>\\n</svg>\"},\"$:/plugins/telmiger/details/license\":{\"title\":\"$:/plugins/telmiger/details/license\",\"created\":\"20170205213335455\",\"modified\":\"20240101150231605\",\"tags\":\"\",\"text\":\"`The Details Plugin is published under the MIT License.`\\n\\n!! Details\\n\\nThe content of $:/plugins/telmiger/details is<br>\\nCopyright (c) 2017–2024 by Thomas Elmiger <br>\\nhttps://thomas-elmiger.ch\\n\\n!! The MIT License (MIT)\\n\\n\\n\\n<<<\\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n<<<\"},\"$:/plugins/telmiger/details/readme\":{\"title\":\"$:/plugins/telmiger/details/readme\",\"created\":\"20170205212323032\",\"modified\":\"20240101144915074\",\"tags\":\"\",\"text\":\"! ~DetailsWidget\\n\\n{{$:/plugins/telmiger/details/about}}\\n\\nDocumentation can be found at http://tid.li/tw5/plugins.html#DetailsWidget\\n\\n\\n!! History\\n\\n{{$:/plugins/telmiger/details/history}}\"},\"$:/plugins/telmiger/details/support\":{\"title\":\"$:/plugins/telmiger/details/support\",\"created\":\"20200603204816640\",\"modified\":\"20220425065858878\",\"tags\":\"\",\"text\":\"{{$:/plugins/telmiger/support}}\"},\"$:/plugins/telmiger/support\":{\"title\":\"$:/plugins/telmiger/support\",\"created\":\"20181103150753927\",\"creator\":\"Thomas Elmiger\",\"modified\":\"20240101143452135\",\"modifier\":\"Thomas Elmiger\",\"tags\":\"\",\"text\":\"!! Support the Author\\n\\n''Hi!'' I’m Thomas, the author of [[tid.li/tw5/plugins.html|https://tid.li/tw5/plugins.html]]. Feedback is always welcome, as well as funding for maintenance, support and new projects :)\\n\\n---\\n\\n!!! One Time Support\\n\\nIf using my plugins just makes you happy, consider a one time payment via ~PayPal to reward the effort:\\n\\nhttps://www.paypal.me/telmiger\\n\\n---\\n\\n!!! Permanent Support\\n\\nIf my tools make you more productive or save you time in your job or your everyday life, you can support me as a Patron: \\n\\nhttps://www.patreon.com/telmiger\\n\\n---\\n\\n!!! Thank You\\n\\nSubstantial parts of my availabe time go to the deveopment of useful plugins for [[TiddlyWiki|https://tiddlywiki.com/]]. – Many others do the same and I would like to thank them all, especially [[Jeremy Ruston|https://tiddlywiki.com/#JeremyRuston]] and all the active members of the community!\\n\\n//Hereby I promise to share future revenues (if any) with other developers who’s works I use or who inspired me.//\\n\\nIf you like my work, I would be very happy to hear from you.\\n\\n''Thank you very much for your support!''<br>\\n//Thomas//\\n\\nhttps://thomas-elmiger.ch\"}}}"
  },
  {
    "title": "$:/plugins/tiddlywiki/highlight",
    "name": "Highlight",
    "description": "Highlight.js syntax highlighting",
    "author": "Joao Bolila",
    "list": "readme usage license",
    "stability": "STABILITY_2_STABLE",
    "version": "5.3.5",
    "plugin-type": "plugin",
    "dependents": "",
    "type": "application/json",
    "text": "{\"tiddlers\":{\"$:/config/HighlightPlugin/TypeMappings/application/javascript\":{\"title\":\"$:/config/HighlightPlugin/TypeMappings/application/javascript\",\"text\":\"javascript\"},\"$:/config/HighlightPlugin/TypeMappings/application/json\":{\"title\":\"$:/config/HighlightPlugin/TypeMappings/application/json\",\"text\":\"json\"},\"$:/config/HighlightPlugin/TypeMappings/text/css\":{\"title\":\"$:/config/HighlightPlugin/TypeMappings/text/css\",\"text\":\"css\"},\"$:/config/HighlightPlugin/TypeMappings/text/html\":{\"title\":\"$:/config/HighlightPlugin/TypeMappings/text/html\",\"text\":\"html\"},\"$:/config/HighlightPlugin/TypeMappings/image/svg+xml\":{\"title\":\"$:/config/HighlightPlugin/TypeMappings/image/svg+xml\",\"text\":\"xml\"},\"$:/config/HighlightPlugin/TypeMappings/text/x-markdown\":{\"title\":\"$:/config/HighlightPlugin/TypeMappings/text/x-markdown\",\"text\":\"markdown\"},\"$:/config/HighlightPlugin/TypeMappings/text/markdown\":{\"title\":\"$:/config/HighlightPlugin/TypeMappings/text/markdown\",\"text\":\"markdown\"},\"$:/plugins/tiddlywiki/highlight/highlight.js\":{\"text\":\"/*!\\n  Highlight.js v11.4.0 (git: 2d0e7c1094)\\n  (c) 2006-2022 Ivan Sagalaev and other contributors\\n  License: BSD-3-Clause\\n */\\nvar hljs=function(){\\\"use strict\\\";var e={exports:{}};function t(e){\\nreturn e instanceof Map?e.clear=e.delete=e.set=()=>{\\nthrow Error(\\\"map is read-only\\\")}:e instanceof Set&&(e.add=e.clear=e.delete=()=>{\\nthrow Error(\\\"set is read-only\\\")\\n}),Object.freeze(e),Object.getOwnPropertyNames(e).forEach((n=>{var i=e[n]\\n;\\\"object\\\"!=typeof i||Object.isFrozen(i)||t(i)})),e}\\ne.exports=t,e.exports.default=t;var n=e.exports;class i{constructor(e){\\nvoid 0===e.data&&(e.data={}),this.data=e.data,this.isMatchIgnored=!1}\\nignoreMatch(){this.isMatchIgnored=!0}}function r(e){\\nreturn e.replace(/&/g,\\\"&amp;\\\").replace(/</g,\\\"&lt;\\\").replace(/>/g,\\\"&gt;\\\").replace(/\\\"/g,\\\"&quot;\\\").replace(/'/g,\\\"&#x27;\\\")\\n}function s(e,...t){const n=Object.create(null);for(const t in e)n[t]=e[t]\\n;return t.forEach((e=>{for(const t in e)n[t]=e[t]})),n}const o=e=>!!e.kind\\n;class a{constructor(e,t){\\nthis.buffer=\\\"\\\",this.classPrefix=t.classPrefix,e.walk(this)}addText(e){\\nthis.buffer+=r(e)}openNode(e){if(!o(e))return;let t=e.kind\\n;t=e.sublanguage?\\\"language-\\\"+t:((e,{prefix:t})=>{if(e.includes(\\\".\\\")){\\nconst n=e.split(\\\".\\\")\\n;return[`${t}${n.shift()}`,...n.map(((e,t)=>`${e}${\\\"_\\\".repeat(t+1)}`))].join(\\\" \\\")\\n}return`${t}${e}`})(t,{prefix:this.classPrefix}),this.span(t)}closeNode(e){\\no(e)&&(this.buffer+=\\\"</span>\\\")}value(){return this.buffer}span(e){\\nthis.buffer+=`<span class=\\\"${e}\\\">`}}class c{constructor(){this.rootNode={\\nchildren:[]},this.stack=[this.rootNode]}get top(){\\nreturn this.stack[this.stack.length-1]}get root(){return this.rootNode}add(e){\\nthis.top.children.push(e)}openNode(e){const t={kind:e,children:[]}\\n;this.add(t),this.stack.push(t)}closeNode(){\\nif(this.stack.length>1)return this.stack.pop()}closeAllNodes(){\\nfor(;this.closeNode(););}toJSON(){return JSON.stringify(this.rootNode,null,4)}\\nwalk(e){return this.constructor._walk(e,this.rootNode)}static _walk(e,t){\\nreturn\\\"string\\\"==typeof t?e.addText(t):t.children&&(e.openNode(t),\\nt.children.forEach((t=>this._walk(e,t))),e.closeNode(t)),e}static _collapse(e){\\n\\\"string\\\"!=typeof e&&e.children&&(e.children.every((e=>\\\"string\\\"==typeof e))?e.children=[e.children.join(\\\"\\\")]:e.children.forEach((e=>{\\nc._collapse(e)})))}}class l extends c{constructor(e){super(),this.options=e}\\naddKeyword(e,t){\\\"\\\"!==e&&(this.openNode(t),this.addText(e),this.closeNode())}\\naddText(e){\\\"\\\"!==e&&this.add(e)}addSublanguage(e,t){const n=e.root\\n;n.kind=t,n.sublanguage=!0,this.add(n)}toHTML(){\\nreturn new a(this,this.options).value()}finalize(){return!0}}function g(e){\\nreturn e?\\\"string\\\"==typeof e?e:e.source:null}function d(e){return f(\\\"(?=\\\",e,\\\")\\\")}\\nfunction u(e){return f(\\\"(?:\\\",e,\\\")*\\\")}function h(e){return f(\\\"(?:\\\",e,\\\")?\\\")}\\nfunction f(...e){return e.map((e=>g(e))).join(\\\"\\\")}function p(...e){const t=(e=>{\\nconst t=e[e.length-1]\\n;return\\\"object\\\"==typeof t&&t.constructor===Object?(e.splice(e.length-1,1),t):{}\\n})(e);return\\\"(\\\"+(t.capture?\\\"\\\":\\\"?:\\\")+e.map((e=>g(e))).join(\\\"|\\\")+\\\")\\\"}\\nfunction b(e){return RegExp(e.toString()+\\\"|\\\").exec(\\\"\\\").length-1}\\nconst m=/\\\\[(?:[^\\\\\\\\\\\\]]|\\\\\\\\.)*\\\\]|\\\\(\\\\??|\\\\\\\\([1-9][0-9]*)|\\\\\\\\./\\n;function E(e,{joinWith:t}){let n=0;return e.map((e=>{n+=1;const t=n\\n;let i=g(e),r=\\\"\\\";for(;i.length>0;){const e=m.exec(i);if(!e){r+=i;break}\\nr+=i.substring(0,e.index),\\ni=i.substring(e.index+e[0].length),\\\"\\\\\\\\\\\"===e[0][0]&&e[1]?r+=\\\"\\\\\\\\\\\"+(Number(e[1])+t):(r+=e[0],\\n\\\"(\\\"===e[0]&&n++)}return r})).map((e=>`(${e})`)).join(t)}\\nconst x=\\\"[a-zA-Z]\\\\\\\\w*\\\",w=\\\"[a-zA-Z_]\\\\\\\\w*\\\",y=\\\"\\\\\\\\b\\\\\\\\d+(\\\\\\\\.\\\\\\\\d+)?\\\",_=\\\"(-?)(\\\\\\\\b0[xX][a-fA-F0-9]+|(\\\\\\\\b\\\\\\\\d+(\\\\\\\\.\\\\\\\\d*)?|\\\\\\\\.\\\\\\\\d+)([eE][-+]?\\\\\\\\d+)?)\\\",v=\\\"\\\\\\\\b(0b[01]+)\\\",k={\\nbegin:\\\"\\\\\\\\\\\\\\\\[\\\\\\\\s\\\\\\\\S]\\\",relevance:0},O={scope:\\\"string\\\",begin:\\\"'\\\",end:\\\"'\\\",\\nillegal:\\\"\\\\\\\\n\\\",contains:[k]},N={scope:\\\"string\\\",begin:'\\\"',end:'\\\"',illegal:\\\"\\\\\\\\n\\\",\\ncontains:[k]},M=(e,t,n={})=>{const i=s({scope:\\\"comment\\\",begin:e,end:t,\\ncontains:[]},n);i.contains.push({scope:\\\"doctag\\\",\\nbegin:\\\"[ ]*(?=(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):)\\\",\\nend:/(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):/,excludeBegin:!0,relevance:0})\\n;const r=p(\\\"I\\\",\\\"a\\\",\\\"is\\\",\\\"so\\\",\\\"us\\\",\\\"to\\\",\\\"at\\\",\\\"if\\\",\\\"in\\\",\\\"it\\\",\\\"on\\\",/[A-Za-z]+['](d|ve|re|ll|t|s|n)/,/[A-Za-z]+[-][a-z]+/,/[A-Za-z][a-z]{2,}/)\\n;return i.contains.push({begin:f(/[ ]+/,\\\"(\\\",r,/[.]?[:]?([.][ ]|[ ])/,\\\"){3}\\\")}),i\\n},S=M(\\\"//\\\",\\\"$\\\"),R=M(\\\"/\\\\\\\\*\\\",\\\"\\\\\\\\*/\\\"),j=M(\\\"#\\\",\\\"$\\\");var A=Object.freeze({\\n__proto__:null,MATCH_NOTHING_RE:/\\\\b\\\\B/,IDENT_RE:x,UNDERSCORE_IDENT_RE:w,\\nNUMBER_RE:y,C_NUMBER_RE:_,BINARY_NUMBER_RE:v,\\nRE_STARTERS_RE:\\\"!|!=|!==|%|%=|&|&&|&=|\\\\\\\\*|\\\\\\\\*=|\\\\\\\\+|\\\\\\\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\\\\\\\?|\\\\\\\\[|\\\\\\\\{|\\\\\\\\(|\\\\\\\\^|\\\\\\\\^=|\\\\\\\\||\\\\\\\\|=|\\\\\\\\|\\\\\\\\||~\\\",\\nSHEBANG:(e={})=>{const t=/^#![ ]*\\\\//\\n;return e.binary&&(e.begin=f(t,/.*\\\\b/,e.binary,/\\\\b.*/)),s({scope:\\\"meta\\\",begin:t,\\nend:/$/,relevance:0,\\\"on:begin\\\":(e,t)=>{0!==e.index&&t.ignoreMatch()}},e)},\\nBACKSLASH_ESCAPE:k,APOS_STRING_MODE:O,QUOTE_STRING_MODE:N,PHRASAL_WORDS_MODE:{\\nbegin:/\\\\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\\\\b/\\n},COMMENT:M,C_LINE_COMMENT_MODE:S,C_BLOCK_COMMENT_MODE:R,HASH_COMMENT_MODE:j,\\nNUMBER_MODE:{scope:\\\"number\\\",begin:y,relevance:0},C_NUMBER_MODE:{scope:\\\"number\\\",\\nbegin:_,relevance:0},BINARY_NUMBER_MODE:{scope:\\\"number\\\",begin:v,relevance:0},\\nREGEXP_MODE:{begin:/(?=\\\\/[^/\\\\n]*\\\\/)/,contains:[{scope:\\\"regexp\\\",begin:/\\\\//,\\nend:/\\\\/[gimuy]*/,illegal:/\\\\n/,contains:[k,{begin:/\\\\[/,end:/\\\\]/,relevance:0,\\ncontains:[k]}]}]},TITLE_MODE:{scope:\\\"title\\\",begin:x,relevance:0},\\nUNDERSCORE_TITLE_MODE:{scope:\\\"title\\\",begin:w,relevance:0},METHOD_GUARD:{\\nbegin:\\\"\\\\\\\\.\\\\\\\\s*[a-zA-Z_]\\\\\\\\w*\\\",relevance:0},END_SAME_AS_BEGIN:e=>Object.assign(e,{\\n\\\"on:begin\\\":(e,t)=>{t.data._beginMatch=e[1]},\\\"on:end\\\":(e,t)=>{\\nt.data._beginMatch!==e[1]&&t.ignoreMatch()}})});function I(e,t){\\n\\\".\\\"===e.input[e.index-1]&&t.ignoreMatch()}function T(e,t){\\nvoid 0!==e.className&&(e.scope=e.className,delete e.className)}function L(e,t){\\nt&&e.beginKeywords&&(e.begin=\\\"\\\\\\\\b(\\\"+e.beginKeywords.split(\\\" \\\").join(\\\"|\\\")+\\\")(?!\\\\\\\\.)(?=\\\\\\\\b|\\\\\\\\s)\\\",\\ne.__beforeBegin=I,e.keywords=e.keywords||e.beginKeywords,delete e.beginKeywords,\\nvoid 0===e.relevance&&(e.relevance=0))}function B(e,t){\\nArray.isArray(e.illegal)&&(e.illegal=p(...e.illegal))}function D(e,t){\\nif(e.match){\\nif(e.begin||e.end)throw Error(\\\"begin & end are not supported with match\\\")\\n;e.begin=e.match,delete e.match}}function H(e,t){\\nvoid 0===e.relevance&&(e.relevance=1)}const P=(e,t)=>{if(!e.beforeMatch)return\\n;if(e.starts)throw Error(\\\"beforeMatch cannot be used with starts\\\")\\n;const n=Object.assign({},e);Object.keys(e).forEach((t=>{delete e[t]\\n})),e.keywords=n.keywords,e.begin=f(n.beforeMatch,d(n.begin)),e.starts={\\nrelevance:0,contains:[Object.assign(n,{endsParent:!0})]\\n},e.relevance=0,delete n.beforeMatch\\n},C=[\\\"of\\\",\\\"and\\\",\\\"for\\\",\\\"in\\\",\\\"not\\\",\\\"or\\\",\\\"if\\\",\\\"then\\\",\\\"parent\\\",\\\"list\\\",\\\"value\\\"]\\n;function $(e,t,n=\\\"keyword\\\"){const i=Object.create(null)\\n;return\\\"string\\\"==typeof e?r(n,e.split(\\\" \\\")):Array.isArray(e)?r(n,e):Object.keys(e).forEach((n=>{\\nObject.assign(i,$(e[n],t,n))})),i;function r(e,n){\\nt&&(n=n.map((e=>e.toLowerCase()))),n.forEach((t=>{const n=t.split(\\\"|\\\")\\n;i[n[0]]=[e,U(n[0],n[1])]}))}}function U(e,t){\\nreturn t?Number(t):(e=>C.includes(e.toLowerCase()))(e)?0:1}const z={},K=e=>{\\nconsole.error(e)},W=(e,...t)=>{console.log(\\\"WARN: \\\"+e,...t)},X=(e,t)=>{\\nz[`${e}/${t}`]||(console.log(`Deprecated as of ${e}. ${t}`),z[`${e}/${t}`]=!0)\\n},G=Error();function Z(e,t,{key:n}){let i=0;const r=e[n],s={},o={}\\n;for(let e=1;e<=t.length;e++)o[e+i]=r[e],s[e+i]=!0,i+=b(t[e-1])\\n;e[n]=o,e[n]._emit=s,e[n]._multi=!0}function F(e){(e=>{\\ne.scope&&\\\"object\\\"==typeof e.scope&&null!==e.scope&&(e.beginScope=e.scope,\\ndelete e.scope)})(e),\\\"string\\\"==typeof e.beginScope&&(e.beginScope={\\n_wrap:e.beginScope}),\\\"string\\\"==typeof e.endScope&&(e.endScope={_wrap:e.endScope\\n}),(e=>{if(Array.isArray(e.begin)){\\nif(e.skip||e.excludeBegin||e.returnBegin)throw K(\\\"skip, excludeBegin, returnBegin not compatible with beginScope: {}\\\"),\\nG\\n;if(\\\"object\\\"!=typeof e.beginScope||null===e.beginScope)throw K(\\\"beginScope must be object\\\"),\\nG;Z(e,e.begin,{key:\\\"beginScope\\\"}),e.begin=E(e.begin,{joinWith:\\\"\\\"})}})(e),(e=>{\\nif(Array.isArray(e.end)){\\nif(e.skip||e.excludeEnd||e.returnEnd)throw K(\\\"skip, excludeEnd, returnEnd not compatible with endScope: {}\\\"),\\nG\\n;if(\\\"object\\\"!=typeof e.endScope||null===e.endScope)throw K(\\\"endScope must be object\\\"),\\nG;Z(e,e.end,{key:\\\"endScope\\\"}),e.end=E(e.end,{joinWith:\\\"\\\"})}})(e)}function V(e){\\nfunction t(t,n){\\nreturn RegExp(g(t),\\\"m\\\"+(e.case_insensitive?\\\"i\\\":\\\"\\\")+(e.unicodeRegex?\\\"u\\\":\\\"\\\")+(n?\\\"g\\\":\\\"\\\"))\\n}class n{constructor(){\\nthis.matchIndexes={},this.regexes=[],this.matchAt=1,this.position=0}\\naddRule(e,t){\\nt.position=this.position++,this.matchIndexes[this.matchAt]=t,this.regexes.push([t,e]),\\nthis.matchAt+=b(e)+1}compile(){0===this.regexes.length&&(this.exec=()=>null)\\n;const e=this.regexes.map((e=>e[1]));this.matcherRe=t(E(e,{joinWith:\\\"|\\\"\\n}),!0),this.lastIndex=0}exec(e){this.matcherRe.lastIndex=this.lastIndex\\n;const t=this.matcherRe.exec(e);if(!t)return null\\n;const n=t.findIndex(((e,t)=>t>0&&void 0!==e)),i=this.matchIndexes[n]\\n;return t.splice(0,n),Object.assign(t,i)}}class i{constructor(){\\nthis.rules=[],this.multiRegexes=[],\\nthis.count=0,this.lastIndex=0,this.regexIndex=0}getMatcher(e){\\nif(this.multiRegexes[e])return this.multiRegexes[e];const t=new n\\n;return this.rules.slice(e).forEach((([e,n])=>t.addRule(e,n))),\\nt.compile(),this.multiRegexes[e]=t,t}resumingScanAtSamePosition(){\\nreturn 0!==this.regexIndex}considerAll(){this.regexIndex=0}addRule(e,t){\\nthis.rules.push([e,t]),\\\"begin\\\"===t.type&&this.count++}exec(e){\\nconst t=this.getMatcher(this.regexIndex);t.lastIndex=this.lastIndex\\n;let n=t.exec(e)\\n;if(this.resumingScanAtSamePosition())if(n&&n.index===this.lastIndex);else{\\nconst t=this.getMatcher(0);t.lastIndex=this.lastIndex+1,n=t.exec(e)}\\nreturn n&&(this.regexIndex+=n.position+1,\\nthis.regexIndex===this.count&&this.considerAll()),n}}\\nif(e.compilerExtensions||(e.compilerExtensions=[]),\\ne.contains&&e.contains.includes(\\\"self\\\"))throw Error(\\\"ERR: contains `self` is not supported at the top-level of a language.  See documentation.\\\")\\n;return e.classNameAliases=s(e.classNameAliases||{}),function n(r,o){const a=r\\n;if(r.isCompiled)return a\\n;[T,D,F,P].forEach((e=>e(r,o))),e.compilerExtensions.forEach((e=>e(r,o))),\\nr.__beforeBegin=null,[L,B,H].forEach((e=>e(r,o))),r.isCompiled=!0;let c=null\\n;return\\\"object\\\"==typeof r.keywords&&r.keywords.$pattern&&(r.keywords=Object.assign({},r.keywords),\\nc=r.keywords.$pattern,\\ndelete r.keywords.$pattern),c=c||/\\\\w+/,r.keywords&&(r.keywords=$(r.keywords,e.case_insensitive)),\\na.keywordPatternRe=t(c,!0),\\no&&(r.begin||(r.begin=/\\\\B|\\\\b/),a.beginRe=t(a.begin),r.end||r.endsWithParent||(r.end=/\\\\B|\\\\b/),\\nr.end&&(a.endRe=t(a.end)),\\na.terminatorEnd=g(a.end)||\\\"\\\",r.endsWithParent&&o.terminatorEnd&&(a.terminatorEnd+=(r.end?\\\"|\\\":\\\"\\\")+o.terminatorEnd)),\\nr.illegal&&(a.illegalRe=t(r.illegal)),\\nr.contains||(r.contains=[]),r.contains=[].concat(...r.contains.map((e=>(e=>(e.variants&&!e.cachedVariants&&(e.cachedVariants=e.variants.map((t=>s(e,{\\nvariants:null},t)))),e.cachedVariants?e.cachedVariants:q(e)?s(e,{\\nstarts:e.starts?s(e.starts):null\\n}):Object.isFrozen(e)?s(e):e))(\\\"self\\\"===e?r:e)))),r.contains.forEach((e=>{n(e,a)\\n})),r.starts&&n(r.starts,o),a.matcher=(e=>{const t=new i\\n;return e.contains.forEach((e=>t.addRule(e.begin,{rule:e,type:\\\"begin\\\"\\n}))),e.terminatorEnd&&t.addRule(e.terminatorEnd,{type:\\\"end\\\"\\n}),e.illegal&&t.addRule(e.illegal,{type:\\\"illegal\\\"}),t})(a),a}(e)}function q(e){\\nreturn!!e&&(e.endsWithParent||q(e.starts))}class J extends Error{\\nconstructor(e,t){super(e),this.name=\\\"HTMLInjectionError\\\",this.html=t}}\\nconst Y=r,Q=s,ee=Symbol(\\\"nomatch\\\");var te=(e=>{\\nconst t=Object.create(null),r=Object.create(null),s=[];let o=!0\\n;const a=\\\"Could not find the language '{}', did you forget to load/include a language module?\\\",c={\\ndisableAutodetect:!0,name:\\\"Plain text\\\",contains:[]};let g={\\nignoreUnescapedHTML:!1,throwUnescapedHTML:!1,noHighlightRe:/^(no-?highlight)$/i,\\nlanguageDetectRe:/\\\\blang(?:uage)?-([\\\\w-]+)\\\\b/i,classPrefix:\\\"hljs-\\\",\\ncssSelector:\\\"pre code\\\",languages:null,__emitter:l};function b(e){\\nreturn g.noHighlightRe.test(e)}function m(e,t,n){let i=\\\"\\\",r=\\\"\\\"\\n;\\\"object\\\"==typeof t?(i=e,\\nn=t.ignoreIllegals,r=t.language):(X(\\\"10.7.0\\\",\\\"highlight(lang, code, ...args) has been deprecated.\\\"),\\nX(\\\"10.7.0\\\",\\\"Please use highlight(code, options) instead.\\\\nhttps://github.com/highlightjs/highlight.js/issues/2277\\\"),\\nr=e,i=t),void 0===n&&(n=!0);const s={code:i,language:r};N(\\\"before:highlight\\\",s)\\n;const o=s.result?s.result:E(s.language,s.code,n)\\n;return o.code=s.code,N(\\\"after:highlight\\\",o),o}function E(e,n,r,s){\\nconst c=Object.create(null);function l(){if(!O.keywords)return void M.addText(S)\\n;let e=0;O.keywordPatternRe.lastIndex=0;let t=O.keywordPatternRe.exec(S),n=\\\"\\\"\\n;for(;t;){n+=S.substring(e,t.index)\\n;const r=y.case_insensitive?t[0].toLowerCase():t[0],s=(i=r,O.keywords[i]);if(s){\\nconst[e,i]=s\\n;if(M.addText(n),n=\\\"\\\",c[r]=(c[r]||0)+1,c[r]<=7&&(R+=i),e.startsWith(\\\"_\\\"))n+=t[0];else{\\nconst n=y.classNameAliases[e]||e;M.addKeyword(t[0],n)}}else n+=t[0]\\n;e=O.keywordPatternRe.lastIndex,t=O.keywordPatternRe.exec(S)}var i\\n;n+=S.substr(e),M.addText(n)}function d(){null!=O.subLanguage?(()=>{\\nif(\\\"\\\"===S)return;let e=null;if(\\\"string\\\"==typeof O.subLanguage){\\nif(!t[O.subLanguage])return void M.addText(S)\\n;e=E(O.subLanguage,S,!0,N[O.subLanguage]),N[O.subLanguage]=e._top\\n}else e=x(S,O.subLanguage.length?O.subLanguage:null)\\n;O.relevance>0&&(R+=e.relevance),M.addSublanguage(e._emitter,e.language)\\n})():l(),S=\\\"\\\"}function u(e,t){let n=1;for(;void 0!==t[n];){if(!e._emit[n]){n++\\n;continue}const i=y.classNameAliases[e[n]]||e[n],r=t[n]\\n;i?M.addKeyword(r,i):(S=r,l(),S=\\\"\\\"),n++}}function h(e,t){\\nreturn e.scope&&\\\"string\\\"==typeof e.scope&&M.openNode(y.classNameAliases[e.scope]||e.scope),\\ne.beginScope&&(e.beginScope._wrap?(M.addKeyword(S,y.classNameAliases[e.beginScope._wrap]||e.beginScope._wrap),\\nS=\\\"\\\"):e.beginScope._multi&&(u(e.beginScope,t),S=\\\"\\\")),O=Object.create(e,{parent:{\\nvalue:O}}),O}function f(e,t,n){let r=((e,t)=>{const n=e&&e.exec(t)\\n;return n&&0===n.index})(e.endRe,n);if(r){if(e[\\\"on:end\\\"]){const n=new i(e)\\n;e[\\\"on:end\\\"](t,n),n.isMatchIgnored&&(r=!1)}if(r){\\nfor(;e.endsParent&&e.parent;)e=e.parent;return e}}\\nif(e.endsWithParent)return f(e.parent,t,n)}function p(e){\\nreturn 0===O.matcher.regexIndex?(S+=e[0],1):(I=!0,0)}function b(e){\\nconst t=e[0],i=n.substr(e.index),r=f(O,e,i);if(!r)return ee;const s=O\\n;O.endScope&&O.endScope._wrap?(d(),\\nM.addKeyword(t,O.endScope._wrap)):O.endScope&&O.endScope._multi?(d(),\\nu(O.endScope,e)):s.skip?S+=t:(s.returnEnd||s.excludeEnd||(S+=t),\\nd(),s.excludeEnd&&(S=t));do{\\nO.scope&&M.closeNode(),O.skip||O.subLanguage||(R+=O.relevance),O=O.parent\\n}while(O!==r.parent);return r.starts&&h(r.starts,e),s.returnEnd?0:t.length}\\nlet m={};function w(t,s){const a=s&&s[0];if(S+=t,null==a)return d(),0\\n;if(\\\"begin\\\"===m.type&&\\\"end\\\"===s.type&&m.index===s.index&&\\\"\\\"===a){\\nif(S+=n.slice(s.index,s.index+1),!o){const t=Error(`0 width match regex (${e})`)\\n;throw t.languageName=e,t.badRule=m.rule,t}return 1}\\nif(m=s,\\\"begin\\\"===s.type)return(e=>{\\nconst t=e[0],n=e.rule,r=new i(n),s=[n.__beforeBegin,n[\\\"on:begin\\\"]]\\n;for(const n of s)if(n&&(n(e,r),r.isMatchIgnored))return p(t)\\n;return n.skip?S+=t:(n.excludeBegin&&(S+=t),\\nd(),n.returnBegin||n.excludeBegin||(S=t)),h(n,e),n.returnBegin?0:t.length})(s)\\n;if(\\\"illegal\\\"===s.type&&!r){\\nconst e=Error('Illegal lexeme \\\"'+a+'\\\" for mode \\\"'+(O.scope||\\\"<unnamed>\\\")+'\\\"')\\n;throw e.mode=O,e}if(\\\"end\\\"===s.type){const e=b(s);if(e!==ee)return e}\\nif(\\\"illegal\\\"===s.type&&\\\"\\\"===a)return 1\\n;if(A>1e5&&A>3*s.index)throw Error(\\\"potential infinite loop, way more iterations than matches\\\")\\n;return S+=a,a.length}const y=v(e)\\n;if(!y)throw K(a.replace(\\\"{}\\\",e)),Error('Unknown language: \\\"'+e+'\\\"')\\n;const _=V(y);let k=\\\"\\\",O=s||_;const N={},M=new g.__emitter(g);(()=>{const e=[]\\n;for(let t=O;t!==y;t=t.parent)t.scope&&e.unshift(t.scope)\\n;e.forEach((e=>M.openNode(e)))})();let S=\\\"\\\",R=0,j=0,A=0,I=!1;try{\\nfor(O.matcher.considerAll();;){\\nA++,I?I=!1:O.matcher.considerAll(),O.matcher.lastIndex=j\\n;const e=O.matcher.exec(n);if(!e)break;const t=w(n.substring(j,e.index),e)\\n;j=e.index+t}return w(n.substr(j)),M.closeAllNodes(),M.finalize(),k=M.toHTML(),{\\nlanguage:e,value:k,relevance:R,illegal:!1,_emitter:M,_top:O}}catch(t){\\nif(t.message&&t.message.includes(\\\"Illegal\\\"))return{language:e,value:Y(n),\\nillegal:!0,relevance:0,_illegalBy:{message:t.message,index:j,\\ncontext:n.slice(j-100,j+100),mode:t.mode,resultSoFar:k},_emitter:M};if(o)return{\\nlanguage:e,value:Y(n),illegal:!1,relevance:0,errorRaised:t,_emitter:M,_top:O}\\n;throw t}}function x(e,n){n=n||g.languages||Object.keys(t);const i=(e=>{\\nconst t={value:Y(e),illegal:!1,relevance:0,_top:c,_emitter:new g.__emitter(g)}\\n;return t._emitter.addText(e),t})(e),r=n.filter(v).filter(O).map((t=>E(t,e,!1)))\\n;r.unshift(i);const s=r.sort(((e,t)=>{\\nif(e.relevance!==t.relevance)return t.relevance-e.relevance\\n;if(e.language&&t.language){if(v(e.language).supersetOf===t.language)return 1\\n;if(v(t.language).supersetOf===e.language)return-1}return 0})),[o,a]=s,l=o\\n;return l.secondBest=a,l}function w(e){let t=null;const n=(e=>{\\nlet t=e.className+\\\" \\\";t+=e.parentNode?e.parentNode.className:\\\"\\\"\\n;const n=g.languageDetectRe.exec(t);if(n){const t=v(n[1])\\n;return t||(W(a.replace(\\\"{}\\\",n[1])),\\nW(\\\"Falling back to no-highlight mode for this block.\\\",e)),t?n[1]:\\\"no-highlight\\\"}\\nreturn t.split(/\\\\s+/).find((e=>b(e)||v(e)))})(e);if(b(n))return\\n;if(N(\\\"before:highlightElement\\\",{el:e,language:n\\n}),e.children.length>0&&(g.ignoreUnescapedHTML||(console.warn(\\\"One of your code blocks includes unescaped HTML. This is a potentially serious security risk.\\\"),\\nconsole.warn(\\\"https://github.com/highlightjs/highlight.js/wiki/security\\\"),\\nconsole.warn(\\\"The element with unescaped HTML:\\\"),\\nconsole.warn(e)),g.throwUnescapedHTML))throw new J(\\\"One of your code blocks includes unescaped HTML.\\\",e.innerHTML)\\n;t=e;const i=t.textContent,s=n?m(i,{language:n,ignoreIllegals:!0}):x(i)\\n;e.innerHTML=s.value,((e,t,n)=>{const i=t&&r[t]||n\\n;e.classList.add(\\\"hljs\\\"),e.classList.add(\\\"language-\\\"+i)\\n})(e,n,s.language),e.result={language:s.language,re:s.relevance,\\nrelevance:s.relevance},s.secondBest&&(e.secondBest={\\nlanguage:s.secondBest.language,relevance:s.secondBest.relevance\\n}),N(\\\"after:highlightElement\\\",{el:e,result:s,text:i})}let y=!1;function _(){\\n\\\"loading\\\"!==document.readyState?document.querySelectorAll(g.cssSelector).forEach(w):y=!0\\n}function v(e){return e=(e||\\\"\\\").toLowerCase(),t[e]||t[r[e]]}\\nfunction k(e,{languageName:t}){\\\"string\\\"==typeof e&&(e=[e]),e.forEach((e=>{\\nr[e.toLowerCase()]=t}))}function O(e){const t=v(e)\\n;return t&&!t.disableAutodetect}function N(e,t){const n=e;s.forEach((e=>{\\ne[n]&&e[n](t)}))}\\n\\\"undefined\\\"!=typeof window&&window.addEventListener&&window.addEventListener(\\\"DOMContentLoaded\\\",(()=>{\\ny&&_()}),!1),Object.assign(e,{highlight:m,highlightAuto:x,highlightAll:_,\\nhighlightElement:w,\\nhighlightBlock:e=>(X(\\\"10.7.0\\\",\\\"highlightBlock will be removed entirely in v12.0\\\"),\\nX(\\\"10.7.0\\\",\\\"Please use highlightElement now.\\\"),w(e)),configure:e=>{g=Q(g,e)},\\ninitHighlighting:()=>{\\n_(),X(\\\"10.6.0\\\",\\\"initHighlighting() deprecated.  Use highlightAll() now.\\\")},\\ninitHighlightingOnLoad:()=>{\\n_(),X(\\\"10.6.0\\\",\\\"initHighlightingOnLoad() deprecated.  Use highlightAll() now.\\\")\\n},registerLanguage:(n,i)=>{let r=null;try{r=i(e)}catch(e){\\nif(K(\\\"Language definition for '{}' could not be registered.\\\".replace(\\\"{}\\\",n)),\\n!o)throw e;K(e),r=c}\\nr.name||(r.name=n),t[n]=r,r.rawDefinition=i.bind(null,e),r.aliases&&k(r.aliases,{\\nlanguageName:n})},unregisterLanguage:e=>{delete t[e]\\n;for(const t of Object.keys(r))r[t]===e&&delete r[t]},\\nlistLanguages:()=>Object.keys(t),getLanguage:v,registerAliases:k,\\nautoDetection:O,inherit:Q,addPlugin:e=>{(e=>{\\ne[\\\"before:highlightBlock\\\"]&&!e[\\\"before:highlightElement\\\"]&&(e[\\\"before:highlightElement\\\"]=t=>{\\ne[\\\"before:highlightBlock\\\"](Object.assign({block:t.el},t))\\n}),e[\\\"after:highlightBlock\\\"]&&!e[\\\"after:highlightElement\\\"]&&(e[\\\"after:highlightElement\\\"]=t=>{\\ne[\\\"after:highlightBlock\\\"](Object.assign({block:t.el},t))})})(e),s.push(e)}\\n}),e.debugMode=()=>{o=!1},e.safeMode=()=>{o=!0\\n},e.versionString=\\\"11.4.0\\\",e.regex={concat:f,lookahead:d,either:p,optional:h,\\nanyNumberOfTimes:u};for(const e in A)\\\"object\\\"==typeof A[e]&&n(A[e])\\n;return Object.assign(e,A),e})({});return te}()\\n;\\\"object\\\"==typeof exports&&\\\"undefined\\\"!=typeof module&&(module.exports=hljs);/*! `c` grammar compiled for Highlight.js 11.4.0 */\\n(()=>{var e=(()=>{\\\"use strict\\\";return e=>{const n=e.regex,t=e.COMMENT(\\\"//\\\",\\\"$\\\",{\\ncontains:[{begin:/\\\\\\\\\\\\n/}]\\n}),s=\\\"[a-zA-Z_]\\\\\\\\w*::\\\",a=\\\"(decltype\\\\\\\\(auto\\\\\\\\)|\\\"+n.optional(s)+\\\"[a-zA-Z_]\\\\\\\\w*\\\"+n.optional(\\\"<[^<>]+>\\\")+\\\")\\\",r={\\nclassName:\\\"type\\\",variants:[{begin:\\\"\\\\\\\\b[a-z\\\\\\\\d_]*_t\\\\\\\\b\\\"},{\\nmatch:/\\\\batomic_[a-z]{3,6}\\\\b/}]},i={className:\\\"string\\\",variants:[{\\nbegin:'(u8?|U|L)?\\\"',end:'\\\"',illegal:\\\"\\\\\\\\n\\\",contains:[e.BACKSLASH_ESCAPE]},{\\nbegin:\\\"(u8?|U|L)?'(\\\\\\\\\\\\\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\\\\\\\S)|.)\\\",\\nend:\\\"'\\\",illegal:\\\".\\\"},e.END_SAME_AS_BEGIN({\\nbegin:/(?:u8?|U|L)?R\\\"([^()\\\\\\\\ ]{0,16})\\\\(/,end:/\\\\)([^()\\\\\\\\ ]{0,16})\\\"/})]},l={\\nclassName:\\\"number\\\",variants:[{begin:\\\"\\\\\\\\b(0b[01']+)\\\"},{\\nbegin:\\\"(-?)\\\\\\\\b([\\\\\\\\d']+(\\\\\\\\.[\\\\\\\\d']*)?|\\\\\\\\.[\\\\\\\\d']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)\\\"\\n},{\\nbegin:\\\"(-?)(\\\\\\\\b0[xX][a-fA-F0-9']+|(\\\\\\\\b[\\\\\\\\d']+(\\\\\\\\.[\\\\\\\\d']*)?|\\\\\\\\.[\\\\\\\\d']+)([eE][-+]?[\\\\\\\\d']+)?)\\\"\\n}],relevance:0},o={className:\\\"meta\\\",begin:/#\\\\s*[a-z]+\\\\b/,end:/$/,keywords:{\\nkeyword:\\\"if else elif endif define undef warning error line pragma _Pragma ifdef ifndef include\\\"\\n},contains:[{begin:/\\\\\\\\\\\\n/,relevance:0},e.inherit(i,{className:\\\"string\\\"}),{\\nclassName:\\\"string\\\",begin:/<.*?>/},t,e.C_BLOCK_COMMENT_MODE]},c={\\nclassName:\\\"title\\\",begin:n.optional(s)+e.IDENT_RE,relevance:0\\n},d=n.optional(s)+e.IDENT_RE+\\\"\\\\\\\\s*\\\\\\\\(\\\",u={\\nkeyword:[\\\"asm\\\",\\\"auto\\\",\\\"break\\\",\\\"case\\\",\\\"continue\\\",\\\"default\\\",\\\"do\\\",\\\"else\\\",\\\"enum\\\",\\\"extern\\\",\\\"for\\\",\\\"fortran\\\",\\\"goto\\\",\\\"if\\\",\\\"inline\\\",\\\"register\\\",\\\"restrict\\\",\\\"return\\\",\\\"sizeof\\\",\\\"struct\\\",\\\"switch\\\",\\\"typedef\\\",\\\"union\\\",\\\"volatile\\\",\\\"while\\\",\\\"_Alignas\\\",\\\"_Alignof\\\",\\\"_Atomic\\\",\\\"_Generic\\\",\\\"_Noreturn\\\",\\\"_Static_assert\\\",\\\"_Thread_local\\\",\\\"alignas\\\",\\\"alignof\\\",\\\"noreturn\\\",\\\"static_assert\\\",\\\"thread_local\\\",\\\"_Pragma\\\"],\\ntype:[\\\"float\\\",\\\"double\\\",\\\"signed\\\",\\\"unsigned\\\",\\\"int\\\",\\\"short\\\",\\\"long\\\",\\\"char\\\",\\\"void\\\",\\\"_Bool\\\",\\\"_Complex\\\",\\\"_Imaginary\\\",\\\"_Decimal32\\\",\\\"_Decimal64\\\",\\\"_Decimal128\\\",\\\"const\\\",\\\"static\\\",\\\"complex\\\",\\\"bool\\\",\\\"imaginary\\\"],\\nliteral:\\\"true false NULL\\\",\\nbuilt_in:\\\"std string wstring cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream auto_ptr deque list queue stack vector map set pair bitset multiset multimap unordered_set unordered_map unordered_multiset unordered_multimap priority_queue make_pair array shared_ptr abort terminate abs acos asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp fscanf future isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan vfprintf vprintf vsprintf endl initializer_list unique_ptr\\\"\\n},g=[o,r,t,e.C_BLOCK_COMMENT_MODE,l,i],m={variants:[{begin:/=/,end:/;/},{\\nbegin:/\\\\(/,end:/\\\\)/},{beginKeywords:\\\"new throw return else\\\",end:/;/}],\\nkeywords:u,contains:g.concat([{begin:/\\\\(/,end:/\\\\)/,keywords:u,\\ncontains:g.concat([\\\"self\\\"]),relevance:0}]),relevance:0},p={\\nbegin:\\\"(\\\"+a+\\\"[\\\\\\\\*&\\\\\\\\s]+)+\\\"+d,returnBegin:!0,end:/[{;=]/,excludeEnd:!0,\\nkeywords:u,illegal:/[^\\\\w\\\\s\\\\*&:<>.]/,contains:[{begin:\\\"decltype\\\\\\\\(auto\\\\\\\\)\\\",\\nkeywords:u,relevance:0},{begin:d,returnBegin:!0,contains:[e.inherit(c,{\\nclassName:\\\"title.function\\\"})],relevance:0},{relevance:0,match:/,/},{\\nclassName:\\\"params\\\",begin:/\\\\(/,end:/\\\\)/,keywords:u,relevance:0,\\ncontains:[t,e.C_BLOCK_COMMENT_MODE,i,l,r,{begin:/\\\\(/,end:/\\\\)/,keywords:u,\\nrelevance:0,contains:[\\\"self\\\",t,e.C_BLOCK_COMMENT_MODE,i,l,r]}]\\n},r,t,e.C_BLOCK_COMMENT_MODE,o]};return{name:\\\"C\\\",aliases:[\\\"h\\\"],keywords:u,\\ndisableAutodetect:!0,illegal:\\\"</\\\",contains:[].concat(m,p,g,[o,{\\nbegin:e.IDENT_RE+\\\"::\\\",keywords:u},{className:\\\"class\\\",\\nbeginKeywords:\\\"enum class struct union\\\",end:/[{;:<>=]/,contains:[{\\nbeginKeywords:\\\"final class struct\\\"},e.TITLE_MODE]}]),exports:{preprocessor:o,\\nstrings:i,keywords:u}}}})();hljs.registerLanguage(\\\"c\\\",e)})();/*! `xml` grammar compiled for Highlight.js 11.4.0 */\\n(()=>{var e=(()=>{\\\"use strict\\\";return e=>{\\nconst a=e.regex,n=a.concat(/[A-Z_]/,a.optional(/[A-Z0-9_.-]*:/),/[A-Z0-9_.-]*/),s={\\nclassName:\\\"symbol\\\",begin:/&[a-z]+;|&#[0-9]+;|&#x[a-f0-9]+;/},t={begin:/\\\\s/,\\ncontains:[{className:\\\"keyword\\\",begin:/#?[a-z_][a-z1-9_-]+/,illegal:/\\\\n/}]\\n},i=e.inherit(t,{begin:/\\\\(/,end:/\\\\)/}),c=e.inherit(e.APOS_STRING_MODE,{\\nclassName:\\\"string\\\"}),l=e.inherit(e.QUOTE_STRING_MODE,{className:\\\"string\\\"}),r={\\nendsWithParent:!0,illegal:/</,relevance:0,contains:[{className:\\\"attr\\\",\\nbegin:/[A-Za-z0-9._:-]+/,relevance:0},{begin:/=\\\\s*/,relevance:0,contains:[{\\nclassName:\\\"string\\\",endsParent:!0,variants:[{begin:/\\\"/,end:/\\\"/,contains:[s]},{\\nbegin:/'/,end:/'/,contains:[s]},{begin:/[^\\\\s\\\"'=<>`]+/}]}]}]};return{\\nname:\\\"HTML, XML\\\",\\naliases:[\\\"html\\\",\\\"xhtml\\\",\\\"rss\\\",\\\"atom\\\",\\\"xjb\\\",\\\"xsd\\\",\\\"xsl\\\",\\\"plist\\\",\\\"wsf\\\",\\\"svg\\\"],\\ncase_insensitive:!0,contains:[{className:\\\"meta\\\",begin:/<![a-z]/,end:/>/,\\nrelevance:10,contains:[t,l,c,i,{begin:/\\\\[/,end:/\\\\]/,contains:[{className:\\\"meta\\\",\\nbegin:/<![a-z]/,end:/>/,contains:[t,i,l,c]}]}]},e.COMMENT(/<!--/,/-->/,{\\nrelevance:10}),{begin:/<!\\\\[CDATA\\\\[/,end:/\\\\]\\\\]>/,relevance:10},s,{\\nclassName:\\\"meta\\\",begin:/<\\\\?xml/,end:/\\\\?>/,relevance:10},{className:\\\"tag\\\",\\nbegin:/<style(?=\\\\s|>)/,end:/>/,keywords:{name:\\\"style\\\"},contains:[r],starts:{\\nend:/<\\\\/style>/,returnEnd:!0,subLanguage:[\\\"css\\\",\\\"xml\\\"]}},{className:\\\"tag\\\",\\nbegin:/<script(?=\\\\s|>)/,end:/>/,keywords:{name:\\\"script\\\"},contains:[r],starts:{\\nend:/<\\\\/script>/,returnEnd:!0,subLanguage:[\\\"javascript\\\",\\\"handlebars\\\",\\\"xml\\\"]}},{\\nclassName:\\\"tag\\\",begin:/<>|<\\\\/>/},{className:\\\"tag\\\",\\nbegin:a.concat(/</,a.lookahead(a.concat(n,a.either(/\\\\/>/,/>/,/\\\\s/)))),\\nend:/\\\\/?>/,contains:[{className:\\\"name\\\",begin:n,relevance:0,starts:r}]},{\\nclassName:\\\"tag\\\",begin:a.concat(/<\\\\//,a.lookahead(a.concat(n,/>/))),contains:[{\\nclassName:\\\"name\\\",begin:n,relevance:0},{begin:/>/,relevance:0,endsParent:!0}]}]}}\\n})();hljs.registerLanguage(\\\"xml\\\",e)})();/*! `markdown` grammar compiled for Highlight.js 11.4.0 */\\n(()=>{var e=(()=>{\\\"use strict\\\";return e=>{const n={begin:/<\\\\/?[A-Za-z_]/,\\nend:\\\">\\\",subLanguage:\\\"xml\\\",relevance:0},a={variants:[{begin:/\\\\[.+?\\\\]\\\\[.*?\\\\]/,\\nrelevance:0},{\\nbegin:/\\\\[.+?\\\\]\\\\(((data|javascript|mailto):|(?:http|ftp)s?:\\\\/\\\\/).*?\\\\)/,\\nrelevance:2},{\\nbegin:e.regex.concat(/\\\\[.+?\\\\]\\\\(/,/[A-Za-z][A-Za-z0-9+.-]*/,/:\\\\/\\\\/.*?\\\\)/),\\nrelevance:2},{begin:/\\\\[.+?\\\\]\\\\([./?&#].*?\\\\)/,relevance:1},{\\nbegin:/\\\\[.*?\\\\]\\\\(.*?\\\\)/,relevance:0}],returnBegin:!0,contains:[{match:/\\\\[(?=\\\\])/\\n},{className:\\\"string\\\",relevance:0,begin:\\\"\\\\\\\\[\\\",end:\\\"\\\\\\\\]\\\",excludeBegin:!0,\\nreturnEnd:!0},{className:\\\"link\\\",relevance:0,begin:\\\"\\\\\\\\]\\\\\\\\(\\\",end:\\\"\\\\\\\\)\\\",\\nexcludeBegin:!0,excludeEnd:!0},{className:\\\"symbol\\\",relevance:0,begin:\\\"\\\\\\\\]\\\\\\\\[\\\",\\nend:\\\"\\\\\\\\]\\\",excludeBegin:!0,excludeEnd:!0}]},i={className:\\\"strong\\\",contains:[],\\nvariants:[{begin:/_{2}/,end:/_{2}/},{begin:/\\\\*{2}/,end:/\\\\*{2}/}]},s={\\nclassName:\\\"emphasis\\\",contains:[],variants:[{begin:/\\\\*(?!\\\\*)/,end:/\\\\*/},{\\nbegin:/_(?!_)/,end:/_/,relevance:0}]};i.contains.push(s),s.contains.push(i)\\n;let c=[n,a]\\n;return i.contains=i.contains.concat(c),s.contains=s.contains.concat(c),\\nc=c.concat(i,s),{name:\\\"Markdown\\\",aliases:[\\\"md\\\",\\\"mkdown\\\",\\\"mkd\\\"],contains:[{\\nclassName:\\\"section\\\",variants:[{begin:\\\"^#{1,6}\\\",end:\\\"$\\\",contains:c},{\\nbegin:\\\"(?=^.+?\\\\\\\\n[=-]{2,}$)\\\",contains:[{begin:\\\"^[=-]*$\\\"},{begin:\\\"^\\\",end:\\\"\\\\\\\\n\\\",\\ncontains:c}]}]},n,{className:\\\"bullet\\\",begin:\\\"^[ \\\\t]*([*+-]|(\\\\\\\\d+\\\\\\\\.))(?=\\\\\\\\s+)\\\",\\nend:\\\"\\\\\\\\s+\\\",excludeEnd:!0},i,s,{className:\\\"quote\\\",begin:\\\"^>\\\\\\\\s+\\\",contains:c,\\nend:\\\"$\\\"},{className:\\\"code\\\",variants:[{begin:\\\"(`{3,})[^`](.|\\\\\\\\n)*?\\\\\\\\1`*[ ]*\\\"},{\\nbegin:\\\"(~{3,})[^~](.|\\\\\\\\n)*?\\\\\\\\1~*[ ]*\\\"},{begin:\\\"```\\\",end:\\\"```+[ ]*$\\\"},{\\nbegin:\\\"~~~\\\",end:\\\"~~~+[ ]*$\\\"},{begin:\\\"`.+?`\\\"},{begin:\\\"(?=^( {4}|\\\\\\\\t))\\\",\\ncontains:[{begin:\\\"^( {4}|\\\\\\\\t)\\\",end:\\\"(\\\\\\\\n)$\\\"}],relevance:0}]},{\\nbegin:\\\"^[-\\\\\\\\*]{3,}\\\",end:\\\"$\\\"},a,{begin:/^\\\\[[^\\\\n]+\\\\]:/,returnBegin:!0,contains:[{\\nclassName:\\\"symbol\\\",begin:/\\\\[/,end:/\\\\]/,excludeBegin:!0,excludeEnd:!0},{\\nclassName:\\\"link\\\",begin:/:\\\\s*/,end:/$/,excludeBegin:!0}]}]}}})()\\n;hljs.registerLanguage(\\\"markdown\\\",e)})();/*! `bash` grammar compiled for Highlight.js 11.4.0 */\\n(()=>{var e=(()=>{\\\"use strict\\\";return e=>{const s=e.regex,t={},n={begin:/\\\\$\\\\{/,\\nend:/\\\\}/,contains:[\\\"self\\\",{begin:/:-/,contains:[t]}]};Object.assign(t,{\\nclassName:\\\"variable\\\",variants:[{\\nbegin:s.concat(/\\\\$[\\\\w\\\\d#@][\\\\w\\\\d_]*/,\\\"(?![\\\\\\\\w\\\\\\\\d])(?![$])\\\")},n]});const a={\\nclassName:\\\"subst\\\",begin:/\\\\$\\\\(/,end:/\\\\)/,contains:[e.BACKSLASH_ESCAPE]},i={\\nbegin:/<<-?\\\\s*(?=\\\\w+)/,starts:{contains:[e.END_SAME_AS_BEGIN({begin:/(\\\\w+)/,\\nend:/(\\\\w+)/,className:\\\"string\\\"})]}},c={className:\\\"string\\\",begin:/\\\"/,end:/\\\"/,\\ncontains:[e.BACKSLASH_ESCAPE,t,a]};a.contains.push(c);const o={begin:/\\\\$\\\\(\\\\(/,\\nend:/\\\\)\\\\)/,contains:[{begin:/\\\\d+#[0-9a-f]+/,className:\\\"number\\\"},e.NUMBER_MODE,t]\\n},r=e.SHEBANG({binary:\\\"(fish|bash|zsh|sh|csh|ksh|tcsh|dash|scsh)\\\",relevance:10\\n}),l={className:\\\"function\\\",begin:/\\\\w[\\\\w\\\\d_]*\\\\s*\\\\(\\\\s*\\\\)\\\\s*\\\\{/,returnBegin:!0,\\ncontains:[e.inherit(e.TITLE_MODE,{begin:/\\\\w[\\\\w\\\\d_]*/})],relevance:0};return{\\nname:\\\"Bash\\\",aliases:[\\\"sh\\\"],keywords:{$pattern:/\\\\b[a-z._-]+\\\\b/,\\nkeyword:[\\\"if\\\",\\\"then\\\",\\\"else\\\",\\\"elif\\\",\\\"fi\\\",\\\"for\\\",\\\"while\\\",\\\"in\\\",\\\"do\\\",\\\"done\\\",\\\"case\\\",\\\"esac\\\",\\\"function\\\"],\\nliteral:[\\\"true\\\",\\\"false\\\"],\\nbuilt_in:[\\\"break\\\",\\\"cd\\\",\\\"continue\\\",\\\"eval\\\",\\\"exec\\\",\\\"exit\\\",\\\"export\\\",\\\"getopts\\\",\\\"hash\\\",\\\"pwd\\\",\\\"readonly\\\",\\\"return\\\",\\\"shift\\\",\\\"test\\\",\\\"times\\\",\\\"trap\\\",\\\"umask\\\",\\\"unset\\\",\\\"alias\\\",\\\"bind\\\",\\\"builtin\\\",\\\"caller\\\",\\\"command\\\",\\\"declare\\\",\\\"echo\\\",\\\"enable\\\",\\\"help\\\",\\\"let\\\",\\\"local\\\",\\\"logout\\\",\\\"mapfile\\\",\\\"printf\\\",\\\"read\\\",\\\"readarray\\\",\\\"source\\\",\\\"type\\\",\\\"typeset\\\",\\\"ulimit\\\",\\\"unalias\\\",\\\"set\\\",\\\"shopt\\\",\\\"autoload\\\",\\\"bg\\\",\\\"bindkey\\\",\\\"bye\\\",\\\"cap\\\",\\\"chdir\\\",\\\"clone\\\",\\\"comparguments\\\",\\\"compcall\\\",\\\"compctl\\\",\\\"compdescribe\\\",\\\"compfiles\\\",\\\"compgroups\\\",\\\"compquote\\\",\\\"comptags\\\",\\\"comptry\\\",\\\"compvalues\\\",\\\"dirs\\\",\\\"disable\\\",\\\"disown\\\",\\\"echotc\\\",\\\"echoti\\\",\\\"emulate\\\",\\\"fc\\\",\\\"fg\\\",\\\"float\\\",\\\"functions\\\",\\\"getcap\\\",\\\"getln\\\",\\\"history\\\",\\\"integer\\\",\\\"jobs\\\",\\\"kill\\\",\\\"limit\\\",\\\"log\\\",\\\"noglob\\\",\\\"popd\\\",\\\"print\\\",\\\"pushd\\\",\\\"pushln\\\",\\\"rehash\\\",\\\"sched\\\",\\\"setcap\\\",\\\"setopt\\\",\\\"stat\\\",\\\"suspend\\\",\\\"ttyctl\\\",\\\"unfunction\\\",\\\"unhash\\\",\\\"unlimit\\\",\\\"unsetopt\\\",\\\"vared\\\",\\\"wait\\\",\\\"whence\\\",\\\"where\\\",\\\"which\\\",\\\"zcompile\\\",\\\"zformat\\\",\\\"zftp\\\",\\\"zle\\\",\\\"zmodload\\\",\\\"zparseopts\\\",\\\"zprof\\\",\\\"zpty\\\",\\\"zregexparse\\\",\\\"zsocket\\\",\\\"zstyle\\\",\\\"ztcp\\\",\\\"chcon\\\",\\\"chgrp\\\",\\\"chown\\\",\\\"chmod\\\",\\\"cp\\\",\\\"dd\\\",\\\"df\\\",\\\"dir\\\",\\\"dircolors\\\",\\\"ln\\\",\\\"ls\\\",\\\"mkdir\\\",\\\"mkfifo\\\",\\\"mknod\\\",\\\"mktemp\\\",\\\"mv\\\",\\\"realpath\\\",\\\"rm\\\",\\\"rmdir\\\",\\\"shred\\\",\\\"sync\\\",\\\"touch\\\",\\\"truncate\\\",\\\"vdir\\\",\\\"b2sum\\\",\\\"base32\\\",\\\"base64\\\",\\\"cat\\\",\\\"cksum\\\",\\\"comm\\\",\\\"csplit\\\",\\\"cut\\\",\\\"expand\\\",\\\"fmt\\\",\\\"fold\\\",\\\"head\\\",\\\"join\\\",\\\"md5sum\\\",\\\"nl\\\",\\\"numfmt\\\",\\\"od\\\",\\\"paste\\\",\\\"ptx\\\",\\\"pr\\\",\\\"sha1sum\\\",\\\"sha224sum\\\",\\\"sha256sum\\\",\\\"sha384sum\\\",\\\"sha512sum\\\",\\\"shuf\\\",\\\"sort\\\",\\\"split\\\",\\\"sum\\\",\\\"tac\\\",\\\"tail\\\",\\\"tr\\\",\\\"tsort\\\",\\\"unexpand\\\",\\\"uniq\\\",\\\"wc\\\",\\\"arch\\\",\\\"basename\\\",\\\"chroot\\\",\\\"date\\\",\\\"dirname\\\",\\\"du\\\",\\\"echo\\\",\\\"env\\\",\\\"expr\\\",\\\"factor\\\",\\\"groups\\\",\\\"hostid\\\",\\\"id\\\",\\\"link\\\",\\\"logname\\\",\\\"nice\\\",\\\"nohup\\\",\\\"nproc\\\",\\\"pathchk\\\",\\\"pinky\\\",\\\"printenv\\\",\\\"printf\\\",\\\"pwd\\\",\\\"readlink\\\",\\\"runcon\\\",\\\"seq\\\",\\\"sleep\\\",\\\"stat\\\",\\\"stdbuf\\\",\\\"stty\\\",\\\"tee\\\",\\\"test\\\",\\\"timeout\\\",\\\"tty\\\",\\\"uname\\\",\\\"unlink\\\",\\\"uptime\\\",\\\"users\\\",\\\"who\\\",\\\"whoami\\\",\\\"yes\\\"]\\n},contains:[r,e.SHEBANG(),l,o,e.HASH_COMMENT_MODE,i,{match:/(\\\\/[a-z._-]+)+/},c,{\\nclassName:\\\"\\\",begin:/\\\\\\\\\\\"/},{className:\\\"string\\\",begin:/'/,end:/'/},t]}}})()\\n;hljs.registerLanguage(\\\"bash\\\",e)})();/*! `dockerfile` grammar compiled for Highlight.js 11.4.0 */\\n(()=>{var e=(()=>{\\\"use strict\\\";return e=>({name:\\\"Dockerfile\\\",aliases:[\\\"docker\\\"],\\ncase_insensitive:!0,\\nkeywords:[\\\"from\\\",\\\"maintainer\\\",\\\"expose\\\",\\\"env\\\",\\\"arg\\\",\\\"user\\\",\\\"onbuild\\\",\\\"stopsignal\\\"],\\ncontains:[e.HASH_COMMENT_MODE,e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,e.NUMBER_MODE,{\\nbeginKeywords:\\\"run cmd entrypoint volume add copy workdir label healthcheck shell\\\",\\nstarts:{end:/[^\\\\\\\\]$/,subLanguage:\\\"bash\\\"}}],illegal:\\\"</\\\"})})()\\n;hljs.registerLanguage(\\\"dockerfile\\\",e)})();/*! `kotlin` grammar compiled for Highlight.js 11.4.0 */\\n(()=>{var e=(()=>{\\\"use strict\\\"\\n;var e=\\\"\\\\\\\\.([0-9](_*[0-9])*)\\\",n=\\\"[0-9a-fA-F](_*[0-9a-fA-F])*\\\",a={\\nclassName:\\\"number\\\",variants:[{\\nbegin:`(\\\\\\\\b([0-9](_*[0-9])*)((${e})|\\\\\\\\.)?|(${e}))[eE][+-]?([0-9](_*[0-9])*)[fFdD]?\\\\\\\\b`\\n},{begin:`\\\\\\\\b([0-9](_*[0-9])*)((${e})[fFdD]?\\\\\\\\b|\\\\\\\\.([fFdD]\\\\\\\\b)?)`},{\\nbegin:`(${e})[fFdD]?\\\\\\\\b`},{begin:\\\"\\\\\\\\b([0-9](_*[0-9])*)[fFdD]\\\\\\\\b\\\"},{\\nbegin:`\\\\\\\\b0[xX]((${n})\\\\\\\\.?|(${n})?\\\\\\\\.(${n}))[pP][+-]?([0-9](_*[0-9])*)[fFdD]?\\\\\\\\b`\\n},{begin:\\\"\\\\\\\\b(0|[1-9](_*[0-9])*)[lL]?\\\\\\\\b\\\"},{begin:`\\\\\\\\b0[xX](${n})[lL]?\\\\\\\\b`},{\\nbegin:\\\"\\\\\\\\b0(_*[0-7])*[lL]?\\\\\\\\b\\\"},{begin:\\\"\\\\\\\\b0[bB][01](_*[01])*[lL]?\\\\\\\\b\\\"}],\\nrelevance:0};return e=>{const n={\\nkeyword:\\\"abstract as val var vararg get set class object open private protected public noinline crossinline dynamic final enum if else do while for when throw try catch finally import package is in fun override companion reified inline lateinit init interface annotation data sealed internal infix operator out by constructor super tailrec where const inner suspend typealias external expect actual\\\",\\nbuilt_in:\\\"Byte Short Char Int Long Boolean Float Double Void Unit Nothing\\\",\\nliteral:\\\"true false null\\\"},i={className:\\\"symbol\\\",begin:e.UNDERSCORE_IDENT_RE+\\\"@\\\"\\n},s={className:\\\"subst\\\",begin:/\\\\$\\\\{/,end:/\\\\}/,contains:[e.C_NUMBER_MODE]},t={\\nclassName:\\\"variable\\\",begin:\\\"\\\\\\\\$\\\"+e.UNDERSCORE_IDENT_RE},r={className:\\\"string\\\",\\nvariants:[{begin:'\\\"\\\"\\\"',end:'\\\"\\\"\\\"(?=[^\\\"])',contains:[t,s]},{begin:\\\"'\\\",end:\\\"'\\\",\\nillegal:/\\\\n/,contains:[e.BACKSLASH_ESCAPE]},{begin:'\\\"',end:'\\\"',illegal:/\\\\n/,\\ncontains:[e.BACKSLASH_ESCAPE,t,s]}]};s.contains.push(r);const l={\\nclassName:\\\"meta\\\",\\nbegin:\\\"@(?:file|property|field|get|set|receiver|param|setparam|delegate)\\\\\\\\s*:(?:\\\\\\\\s*\\\"+e.UNDERSCORE_IDENT_RE+\\\")?\\\"\\n},c={className:\\\"meta\\\",begin:\\\"@\\\"+e.UNDERSCORE_IDENT_RE,contains:[{begin:/\\\\(/,\\nend:/\\\\)/,contains:[e.inherit(r,{className:\\\"string\\\"})]}]\\n},o=a,b=e.COMMENT(\\\"/\\\\\\\\*\\\",\\\"\\\\\\\\*/\\\",{contains:[e.C_BLOCK_COMMENT_MODE]}),E={\\nvariants:[{className:\\\"type\\\",begin:e.UNDERSCORE_IDENT_RE},{begin:/\\\\(/,end:/\\\\)/,\\ncontains:[]}]},d=E;return d.variants[1].contains=[E],E.variants[1].contains=[d],\\n{name:\\\"Kotlin\\\",aliases:[\\\"kt\\\",\\\"kts\\\"],keywords:n,\\ncontains:[e.COMMENT(\\\"/\\\\\\\\*\\\\\\\\*\\\",\\\"\\\\\\\\*/\\\",{relevance:0,contains:[{className:\\\"doctag\\\",\\nbegin:\\\"@[A-Za-z]+\\\"}]}),e.C_LINE_COMMENT_MODE,b,{className:\\\"keyword\\\",\\nbegin:/\\\\b(break|continue|return|this)\\\\b/,starts:{contains:[{className:\\\"symbol\\\",\\nbegin:/@\\\\w+/}]}},i,l,c,{className:\\\"function\\\",beginKeywords:\\\"fun\\\",end:\\\"[(]|$\\\",\\nreturnBegin:!0,excludeEnd:!0,keywords:n,relevance:5,contains:[{\\nbegin:e.UNDERSCORE_IDENT_RE+\\\"\\\\\\\\s*\\\\\\\\(\\\",returnBegin:!0,relevance:0,\\ncontains:[e.UNDERSCORE_TITLE_MODE]},{className:\\\"type\\\",begin:/</,end:/>/,\\nkeywords:\\\"reified\\\",relevance:0},{className:\\\"params\\\",begin:/\\\\(/,end:/\\\\)/,\\nendsParent:!0,keywords:n,relevance:0,contains:[{begin:/:/,end:/[=,\\\\/]/,\\nendsWithParent:!0,contains:[E,e.C_LINE_COMMENT_MODE,b],relevance:0\\n},e.C_LINE_COMMENT_MODE,b,l,c,r,e.C_NUMBER_MODE]},b]},{className:\\\"class\\\",\\nbeginKeywords:\\\"class interface trait\\\",end:/[:\\\\{(]|$/,excludeEnd:!0,\\nillegal:\\\"extends implements\\\",contains:[{\\nbeginKeywords:\\\"public protected internal private constructor\\\"\\n},e.UNDERSCORE_TITLE_MODE,{className:\\\"type\\\",begin:/</,end:/>/,excludeBegin:!0,\\nexcludeEnd:!0,relevance:0},{className:\\\"type\\\",begin:/[,:]\\\\s*/,end:/[<\\\\(,]|$/,\\nexcludeBegin:!0,returnEnd:!0},l,c]},r,{className:\\\"meta\\\",begin:\\\"^#!/usr/bin/env\\\",\\nend:\\\"$\\\",illegal:\\\"\\\\n\\\"},o]}}})();hljs.registerLanguage(\\\"kotlin\\\",e)})();/*! `typescript` grammar compiled for Highlight.js 11.4.0 */\\n(()=>{var e=(()=>{\\\"use strict\\\"\\n;const e=\\\"[A-Za-z$_][0-9A-Za-z$_]*\\\",n=[\\\"as\\\",\\\"in\\\",\\\"of\\\",\\\"if\\\",\\\"for\\\",\\\"while\\\",\\\"finally\\\",\\\"var\\\",\\\"new\\\",\\\"function\\\",\\\"do\\\",\\\"return\\\",\\\"void\\\",\\\"else\\\",\\\"break\\\",\\\"catch\\\",\\\"instanceof\\\",\\\"with\\\",\\\"throw\\\",\\\"case\\\",\\\"default\\\",\\\"try\\\",\\\"switch\\\",\\\"continue\\\",\\\"typeof\\\",\\\"delete\\\",\\\"let\\\",\\\"yield\\\",\\\"const\\\",\\\"class\\\",\\\"debugger\\\",\\\"async\\\",\\\"await\\\",\\\"static\\\",\\\"import\\\",\\\"from\\\",\\\"export\\\",\\\"extends\\\"],a=[\\\"true\\\",\\\"false\\\",\\\"null\\\",\\\"undefined\\\",\\\"NaN\\\",\\\"Infinity\\\"],t=[\\\"Object\\\",\\\"Function\\\",\\\"Boolean\\\",\\\"Symbol\\\",\\\"Math\\\",\\\"Date\\\",\\\"Number\\\",\\\"BigInt\\\",\\\"String\\\",\\\"RegExp\\\",\\\"Array\\\",\\\"Float32Array\\\",\\\"Float64Array\\\",\\\"Int8Array\\\",\\\"Uint8Array\\\",\\\"Uint8ClampedArray\\\",\\\"Int16Array\\\",\\\"Int32Array\\\",\\\"Uint16Array\\\",\\\"Uint32Array\\\",\\\"BigInt64Array\\\",\\\"BigUint64Array\\\",\\\"Set\\\",\\\"Map\\\",\\\"WeakSet\\\",\\\"WeakMap\\\",\\\"ArrayBuffer\\\",\\\"SharedArrayBuffer\\\",\\\"Atomics\\\",\\\"DataView\\\",\\\"JSON\\\",\\\"Promise\\\",\\\"Generator\\\",\\\"GeneratorFunction\\\",\\\"AsyncFunction\\\",\\\"Reflect\\\",\\\"Proxy\\\",\\\"Intl\\\",\\\"WebAssembly\\\"],s=[\\\"Error\\\",\\\"EvalError\\\",\\\"InternalError\\\",\\\"RangeError\\\",\\\"ReferenceError\\\",\\\"SyntaxError\\\",\\\"TypeError\\\",\\\"URIError\\\"],r=[\\\"setInterval\\\",\\\"setTimeout\\\",\\\"clearInterval\\\",\\\"clearTimeout\\\",\\\"require\\\",\\\"exports\\\",\\\"eval\\\",\\\"isFinite\\\",\\\"isNaN\\\",\\\"parseFloat\\\",\\\"parseInt\\\",\\\"decodeURI\\\",\\\"decodeURIComponent\\\",\\\"encodeURI\\\",\\\"encodeURIComponent\\\",\\\"escape\\\",\\\"unescape\\\"],c=[\\\"arguments\\\",\\\"this\\\",\\\"super\\\",\\\"console\\\",\\\"window\\\",\\\"document\\\",\\\"localStorage\\\",\\\"module\\\",\\\"global\\\"],i=[].concat(r,t,s)\\n;function o(o){const l=o.regex,d=e,b={begin:/<[A-Za-z0-9\\\\\\\\._:-]+/,\\nend:/\\\\/[A-Za-z0-9\\\\\\\\._:-]+>|\\\\/>/,isTrulyOpeningTag:(e,n)=>{\\nconst a=e[0].length+e.index,t=e.input[a]\\n;if(\\\"<\\\"===t||\\\",\\\"===t)return void n.ignoreMatch();let s\\n;\\\">\\\"===t&&(((e,{after:n})=>{const a=\\\"</\\\"+e[0].slice(1)\\n;return-1!==e.input.indexOf(a,n)})(e,{after:a\\n})||n.ignoreMatch()),(s=e.input.substr(a).match(/^\\\\s+extends\\\\s+/))&&0===s.index&&n.ignoreMatch()\\n}},g={$pattern:e,keyword:n,literal:a,built_in:i,\\\"variable.language\\\":c\\n},u=\\\"\\\\\\\\.([0-9](_?[0-9])*)\\\",m=\\\"0|[1-9](_?[0-9])*|0[0-7]*[89][0-9]*\\\",E={\\nclassName:\\\"number\\\",variants:[{\\nbegin:`(\\\\\\\\b(${m})((${u})|\\\\\\\\.)?|(${u}))[eE][+-]?([0-9](_?[0-9])*)\\\\\\\\b`},{\\nbegin:`\\\\\\\\b(${m})\\\\\\\\b((${u})\\\\\\\\b|\\\\\\\\.)?|(${u})\\\\\\\\b`},{\\nbegin:\\\"\\\\\\\\b(0|[1-9](_?[0-9])*)n\\\\\\\\b\\\"},{\\nbegin:\\\"\\\\\\\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*n?\\\\\\\\b\\\"},{\\nbegin:\\\"\\\\\\\\b0[bB][0-1](_?[0-1])*n?\\\\\\\\b\\\"},{begin:\\\"\\\\\\\\b0[oO][0-7](_?[0-7])*n?\\\\\\\\b\\\"},{\\nbegin:\\\"\\\\\\\\b0[0-7]+n?\\\\\\\\b\\\"}],relevance:0},y={className:\\\"subst\\\",begin:\\\"\\\\\\\\$\\\\\\\\{\\\",\\nend:\\\"\\\\\\\\}\\\",keywords:g,contains:[]},A={begin:\\\"html`\\\",end:\\\"\\\",starts:{end:\\\"`\\\",\\nreturnEnd:!1,contains:[o.BACKSLASH_ESCAPE,y],subLanguage:\\\"xml\\\"}},p={\\nbegin:\\\"css`\\\",end:\\\"\\\",starts:{end:\\\"`\\\",returnEnd:!1,\\ncontains:[o.BACKSLASH_ESCAPE,y],subLanguage:\\\"css\\\"}},_={className:\\\"string\\\",\\nbegin:\\\"`\\\",end:\\\"`\\\",contains:[o.BACKSLASH_ESCAPE,y]},f={className:\\\"comment\\\",\\nvariants:[o.COMMENT(/\\\\/\\\\*\\\\*(?!\\\\/)/,\\\"\\\\\\\\*/\\\",{relevance:0,contains:[{\\nbegin:\\\"(?=@[A-Za-z]+)\\\",relevance:0,contains:[{className:\\\"doctag\\\",\\nbegin:\\\"@[A-Za-z]+\\\"},{className:\\\"type\\\",begin:\\\"\\\\\\\\{\\\",end:\\\"\\\\\\\\}\\\",excludeEnd:!0,\\nexcludeBegin:!0,relevance:0},{className:\\\"variable\\\",begin:d+\\\"(?=\\\\\\\\s*(-)|$)\\\",\\nendsParent:!0,relevance:0},{begin:/(?=[^\\\\n])\\\\s/,relevance:0}]}]\\n}),o.C_BLOCK_COMMENT_MODE,o.C_LINE_COMMENT_MODE]\\n},N=[o.APOS_STRING_MODE,o.QUOTE_STRING_MODE,A,p,_,E];y.contains=N.concat({\\nbegin:/\\\\{/,end:/\\\\}/,keywords:g,contains:[\\\"self\\\"].concat(N)})\\n;const h=[].concat(f,y.contains),v=h.concat([{begin:/\\\\(/,end:/\\\\)/,keywords:g,\\ncontains:[\\\"self\\\"].concat(h)}]),S={className:\\\"params\\\",begin:/\\\\(/,end:/\\\\)/,\\nexcludeBegin:!0,excludeEnd:!0,keywords:g,contains:v},w={variants:[{\\nmatch:[/class/,/\\\\s+/,d,/\\\\s+/,/extends/,/\\\\s+/,l.concat(d,\\\"(\\\",l.concat(/\\\\./,d),\\\")*\\\")],\\nscope:{1:\\\"keyword\\\",3:\\\"title.class\\\",5:\\\"keyword\\\",7:\\\"title.class.inherited\\\"}},{\\nmatch:[/class/,/\\\\s+/,d],scope:{1:\\\"keyword\\\",3:\\\"title.class\\\"}}]},R={relevance:0,\\nmatch:l.either(/\\\\bJSON/,/\\\\b[A-Z][a-z]+([A-Z][a-z]*|\\\\d)*/,/\\\\b[A-Z]{2,}([A-Z][a-z]+|\\\\d)+([A-Z][a-z]*)*/,/\\\\b[A-Z]{2,}[a-z]+([A-Z][a-z]+|\\\\d)*([A-Z][a-z]*)*/),\\nclassName:\\\"title.class\\\",keywords:{_:[...t,...s]}},x={variants:[{\\nmatch:[/function/,/\\\\s+/,d,/(?=\\\\s*\\\\()/]},{match:[/function/,/\\\\s*(?=\\\\()/]}],\\nclassName:{1:\\\"keyword\\\",3:\\\"title.function\\\"},label:\\\"func.def\\\",contains:[S],\\nillegal:/%/},k={\\nmatch:l.concat(/\\\\b/,(O=[...r,\\\"super\\\"],l.concat(\\\"(?!\\\",O.join(\\\"|\\\"),\\\")\\\")),d,l.lookahead(/\\\\(/)),\\nclassName:\\\"title.function\\\",relevance:0};var O;const I={\\nbegin:l.concat(/\\\\./,l.lookahead(l.concat(d,/(?![0-9A-Za-z$_(])/))),end:d,\\nexcludeBegin:!0,keywords:\\\"prototype\\\",className:\\\"property\\\",relevance:0},C={\\nmatch:[/get|set/,/\\\\s+/,d,/(?=\\\\()/],className:{1:\\\"keyword\\\",3:\\\"title.function\\\"},\\ncontains:[{begin:/\\\\(\\\\)/},S]\\n},T=\\\"(\\\\\\\\([^()]*(\\\\\\\\([^()]*(\\\\\\\\([^()]*\\\\\\\\)[^()]*)*\\\\\\\\)[^()]*)*\\\\\\\\)|\\\"+o.UNDERSCORE_IDENT_RE+\\\")\\\\\\\\s*=>\\\",M={\\nmatch:[/const|var|let/,/\\\\s+/,d,/\\\\s*/,/=\\\\s*/,/(async\\\\s*)?/,l.lookahead(T)],\\nkeywords:\\\"async\\\",className:{1:\\\"keyword\\\",3:\\\"title.function\\\"},contains:[S]}\\n;return{name:\\\"Javascript\\\",aliases:[\\\"js\\\",\\\"jsx\\\",\\\"mjs\\\",\\\"cjs\\\"],keywords:g,exports:{\\nPARAMS_CONTAINS:v,CLASS_REFERENCE:R},illegal:/#(?![$_A-z])/,\\ncontains:[o.SHEBANG({label:\\\"shebang\\\",binary:\\\"node\\\",relevance:5}),{\\nlabel:\\\"use_strict\\\",className:\\\"meta\\\",relevance:10,\\nbegin:/^\\\\s*['\\\"]use (strict|asm)['\\\"]/\\n},o.APOS_STRING_MODE,o.QUOTE_STRING_MODE,A,p,_,f,E,R,{className:\\\"attr\\\",\\nbegin:d+l.lookahead(\\\":\\\"),relevance:0},M,{\\nbegin:\\\"(\\\"+o.RE_STARTERS_RE+\\\"|\\\\\\\\b(case|return|throw)\\\\\\\\b)\\\\\\\\s*\\\",\\nkeywords:\\\"return throw case\\\",relevance:0,contains:[f,o.REGEXP_MODE,{\\nclassName:\\\"function\\\",begin:T,returnBegin:!0,end:\\\"\\\\\\\\s*=>\\\",contains:[{\\nclassName:\\\"params\\\",variants:[{begin:o.UNDERSCORE_IDENT_RE,relevance:0},{\\nclassName:null,begin:/\\\\(\\\\s*\\\\)/,skip:!0},{begin:/\\\\(/,end:/\\\\)/,excludeBegin:!0,\\nexcludeEnd:!0,keywords:g,contains:v}]}]},{begin:/,/,relevance:0},{match:/\\\\s+/,\\nrelevance:0},{variants:[{begin:\\\"<>\\\",end:\\\"</>\\\"},{\\nmatch:/<[A-Za-z0-9\\\\\\\\._:-]+\\\\s*\\\\/>/},{begin:b.begin,\\n\\\"on:begin\\\":b.isTrulyOpeningTag,end:b.end}],subLanguage:\\\"xml\\\",contains:[{\\nbegin:b.begin,end:b.end,skip:!0,contains:[\\\"self\\\"]}]}]},x,{\\nbeginKeywords:\\\"while if switch catch for\\\"},{\\nbegin:\\\"\\\\\\\\b(?!function)\\\"+o.UNDERSCORE_IDENT_RE+\\\"\\\\\\\\([^()]*(\\\\\\\\([^()]*(\\\\\\\\([^()]*\\\\\\\\)[^()]*)*\\\\\\\\)[^()]*)*\\\\\\\\)\\\\\\\\s*\\\\\\\\{\\\",\\nreturnBegin:!0,label:\\\"func.def\\\",contains:[S,o.inherit(o.TITLE_MODE,{begin:d,\\nclassName:\\\"title.function\\\"})]},{match:/\\\\.\\\\.\\\\./,relevance:0},I,{match:\\\"\\\\\\\\$\\\"+d,\\nrelevance:0},{match:[/\\\\bconstructor(?=\\\\s*\\\\()/],className:{1:\\\"title.function\\\"},\\ncontains:[S]},k,{relevance:0,match:/\\\\b[A-Z][A-Z_0-9]+\\\\b/,\\nclassName:\\\"variable.constant\\\"},w,C,{match:/\\\\$[(.]/}]}}return t=>{\\nconst s=o(t),r=[\\\"any\\\",\\\"void\\\",\\\"number\\\",\\\"boolean\\\",\\\"string\\\",\\\"object\\\",\\\"never\\\",\\\"enum\\\"],l={\\nbeginKeywords:\\\"namespace\\\",end:/\\\\{/,excludeEnd:!0,\\ncontains:[s.exports.CLASS_REFERENCE]},d={beginKeywords:\\\"interface\\\",end:/\\\\{/,\\nexcludeEnd:!0,keywords:{keyword:\\\"interface extends\\\",built_in:r},\\ncontains:[s.exports.CLASS_REFERENCE]},b={$pattern:e,\\nkeyword:n.concat([\\\"type\\\",\\\"namespace\\\",\\\"typedef\\\",\\\"interface\\\",\\\"public\\\",\\\"private\\\",\\\"protected\\\",\\\"implements\\\",\\\"declare\\\",\\\"abstract\\\",\\\"readonly\\\"]),\\nliteral:a,built_in:i.concat(r),\\\"variable.language\\\":c},g={className:\\\"meta\\\",\\nbegin:\\\"@[A-Za-z$_][0-9A-Za-z$_]*\\\"},u=(e,n,a)=>{\\nconst t=e.contains.findIndex((e=>e.label===n))\\n;if(-1===t)throw Error(\\\"can not find mode to replace\\\");e.contains.splice(t,1,a)}\\n;return Object.assign(s.keywords,b),\\ns.exports.PARAMS_CONTAINS.push(g),s.contains=s.contains.concat([g,l,d]),\\nu(s,\\\"shebang\\\",t.SHEBANG()),u(s,\\\"use_strict\\\",{className:\\\"meta\\\",relevance:10,\\nbegin:/^\\\\s*['\\\"]use strict['\\\"]/\\n}),s.contains.find((e=>\\\"func.def\\\"===e.label)).relevance=0,Object.assign(s,{\\nname:\\\"TypeScript\\\",aliases:[\\\"ts\\\",\\\"tsx\\\"]}),s}})()\\n;hljs.registerLanguage(\\\"typescript\\\",e)})();/*! `python` grammar compiled for Highlight.js 11.4.0 */\\n(()=>{var e=(()=>{\\\"use strict\\\";return e=>{\\nconst n=e.regex,a=/[\\\\p{XID_Start}_]\\\\p{XID_Continue}*/u,i=[\\\"and\\\",\\\"as\\\",\\\"assert\\\",\\\"async\\\",\\\"await\\\",\\\"break\\\",\\\"class\\\",\\\"continue\\\",\\\"def\\\",\\\"del\\\",\\\"elif\\\",\\\"else\\\",\\\"except\\\",\\\"finally\\\",\\\"for\\\",\\\"from\\\",\\\"global\\\",\\\"if\\\",\\\"import\\\",\\\"in\\\",\\\"is\\\",\\\"lambda\\\",\\\"nonlocal|10\\\",\\\"not\\\",\\\"or\\\",\\\"pass\\\",\\\"raise\\\",\\\"return\\\",\\\"try\\\",\\\"while\\\",\\\"with\\\",\\\"yield\\\"],s={\\n$pattern:/[A-Za-z]\\\\w+|__\\\\w+__/,keyword:i,\\nbuilt_in:[\\\"__import__\\\",\\\"abs\\\",\\\"all\\\",\\\"any\\\",\\\"ascii\\\",\\\"bin\\\",\\\"bool\\\",\\\"breakpoint\\\",\\\"bytearray\\\",\\\"bytes\\\",\\\"callable\\\",\\\"chr\\\",\\\"classmethod\\\",\\\"compile\\\",\\\"complex\\\",\\\"delattr\\\",\\\"dict\\\",\\\"dir\\\",\\\"divmod\\\",\\\"enumerate\\\",\\\"eval\\\",\\\"exec\\\",\\\"filter\\\",\\\"float\\\",\\\"format\\\",\\\"frozenset\\\",\\\"getattr\\\",\\\"globals\\\",\\\"hasattr\\\",\\\"hash\\\",\\\"help\\\",\\\"hex\\\",\\\"id\\\",\\\"input\\\",\\\"int\\\",\\\"isinstance\\\",\\\"issubclass\\\",\\\"iter\\\",\\\"len\\\",\\\"list\\\",\\\"locals\\\",\\\"map\\\",\\\"max\\\",\\\"memoryview\\\",\\\"min\\\",\\\"next\\\",\\\"object\\\",\\\"oct\\\",\\\"open\\\",\\\"ord\\\",\\\"pow\\\",\\\"print\\\",\\\"property\\\",\\\"range\\\",\\\"repr\\\",\\\"reversed\\\",\\\"round\\\",\\\"set\\\",\\\"setattr\\\",\\\"slice\\\",\\\"sorted\\\",\\\"staticmethod\\\",\\\"str\\\",\\\"sum\\\",\\\"super\\\",\\\"tuple\\\",\\\"type\\\",\\\"vars\\\",\\\"zip\\\"],\\nliteral:[\\\"__debug__\\\",\\\"Ellipsis\\\",\\\"False\\\",\\\"None\\\",\\\"NotImplemented\\\",\\\"True\\\"],\\ntype:[\\\"Any\\\",\\\"Callable\\\",\\\"Coroutine\\\",\\\"Dict\\\",\\\"List\\\",\\\"Literal\\\",\\\"Generic\\\",\\\"Optional\\\",\\\"Sequence\\\",\\\"Set\\\",\\\"Tuple\\\",\\\"Type\\\",\\\"Union\\\"]\\n},t={className:\\\"meta\\\",begin:/^(>>>|\\\\.\\\\.\\\\.) /},r={className:\\\"subst\\\",begin:/\\\\{/,\\nend:/\\\\}/,keywords:s,illegal:/#/},l={begin:/\\\\{\\\\{/,relevance:0},b={\\nclassName:\\\"string\\\",contains:[e.BACKSLASH_ESCAPE],variants:[{\\nbegin:/([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?'''/,end:/'''/,\\ncontains:[e.BACKSLASH_ESCAPE,t],relevance:10},{\\nbegin:/([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?\\\"\\\"\\\"/,end:/\\\"\\\"\\\"/,\\ncontains:[e.BACKSLASH_ESCAPE,t],relevance:10},{\\nbegin:/([fF][rR]|[rR][fF]|[fF])'''/,end:/'''/,\\ncontains:[e.BACKSLASH_ESCAPE,t,l,r]},{begin:/([fF][rR]|[rR][fF]|[fF])\\\"\\\"\\\"/,\\nend:/\\\"\\\"\\\"/,contains:[e.BACKSLASH_ESCAPE,t,l,r]},{begin:/([uU]|[rR])'/,end:/'/,\\nrelevance:10},{begin:/([uU]|[rR])\\\"/,end:/\\\"/,relevance:10},{\\nbegin:/([bB]|[bB][rR]|[rR][bB])'/,end:/'/},{begin:/([bB]|[bB][rR]|[rR][bB])\\\"/,\\nend:/\\\"/},{begin:/([fF][rR]|[rR][fF]|[fF])'/,end:/'/,\\ncontains:[e.BACKSLASH_ESCAPE,l,r]},{begin:/([fF][rR]|[rR][fF]|[fF])\\\"/,end:/\\\"/,\\ncontains:[e.BACKSLASH_ESCAPE,l,r]},e.APOS_STRING_MODE,e.QUOTE_STRING_MODE]\\n},o=\\\"[0-9](_?[0-9])*\\\",c=`(\\\\\\\\b(${o}))?\\\\\\\\.(${o})|\\\\\\\\b(${o})\\\\\\\\.`,d=\\\"\\\\\\\\b|\\\"+i.join(\\\"|\\\"),g={\\nclassName:\\\"number\\\",relevance:0,variants:[{\\nbegin:`(\\\\\\\\b(${o})|(${c}))[eE][+-]?(${o})[jJ]?(?=${d})`},{begin:`(${c})[jJ]?`},{\\nbegin:`\\\\\\\\b([1-9](_?[0-9])*|0+(_?0)*)[lLjJ]?(?=${d})`},{\\nbegin:`\\\\\\\\b0[bB](_?[01])+[lL]?(?=${d})`},{begin:`\\\\\\\\b0[oO](_?[0-7])+[lL]?(?=${d})`\\n},{begin:`\\\\\\\\b0[xX](_?[0-9a-fA-F])+[lL]?(?=${d})`},{begin:`\\\\\\\\b(${o})[jJ](?=${d})`\\n}]},p={className:\\\"comment\\\",begin:n.lookahead(/# type:/),end:/$/,keywords:s,\\ncontains:[{begin:/# type:/},{begin:/#/,end:/\\\\b\\\\B/,endsWithParent:!0}]},m={\\nclassName:\\\"params\\\",variants:[{className:\\\"\\\",begin:/\\\\(\\\\s*\\\\)/,skip:!0},{begin:/\\\\(/,\\nend:/\\\\)/,excludeBegin:!0,excludeEnd:!0,keywords:s,\\ncontains:[\\\"self\\\",t,g,b,e.HASH_COMMENT_MODE]}]};return r.contains=[b,g,t],{\\nname:\\\"Python\\\",aliases:[\\\"py\\\",\\\"gyp\\\",\\\"ipython\\\"],unicodeRegex:!0,keywords:s,\\nillegal:/(<\\\\/|->|\\\\?)|=>/,contains:[t,g,{begin:/\\\\bself\\\\b/},{beginKeywords:\\\"if\\\",\\nrelevance:0},b,p,e.HASH_COMMENT_MODE,{match:[/\\\\bdef/,/\\\\s+/,a],scope:{\\n1:\\\"keyword\\\",3:\\\"title.function\\\"},contains:[m]},{variants:[{\\nmatch:[/\\\\bclass/,/\\\\s+/,a,/\\\\s*/,/\\\\(\\\\s*/,a,/\\\\s*\\\\)/]},{match:[/\\\\bclass/,/\\\\s+/,a]}],\\nscope:{1:\\\"keyword\\\",3:\\\"title.class\\\",6:\\\"title.class.inherited\\\"}},{\\nclassName:\\\"meta\\\",begin:/^[\\\\t ]*@/,end:/(?=#)|$/,contains:[g,m,b]}]}}})()\\n;hljs.registerLanguage(\\\"python\\\",e)})();/*! `python-repl` grammar compiled for Highlight.js 11.4.0 */\\n(()=>{var a=(()=>{\\\"use strict\\\";return a=>({aliases:[\\\"pycon\\\"],contains:[{\\nclassName:\\\"meta\\\",starts:{end:/ |$/,starts:{end:\\\"$\\\",subLanguage:\\\"python\\\"}},\\nvariants:[{begin:/^>>>(?=[ ]|$)/},{begin:/^\\\\.\\\\.\\\\.(?=[ ]|$)/}]}]})})()\\n;hljs.registerLanguage(\\\"python-repl\\\",a)})();/*! `php` grammar compiled for Highlight.js 11.4.0 */\\n(()=>{var e=(()=>{\\\"use strict\\\";return e=>{\\nconst t=e.regex,r=\\\"[a-zA-Z0-9_\\\\x7f-\\\\xff]*(?![A-Za-z0-9])(?![$]))\\\",a=t.concat(\\\"([a-zA-Z_\\\\\\\\x7f-\\\\\\\\xff]\\\",r),n=t.concat(\\\"([A-Z]\\\",r),o={\\nscope:\\\"variable\\\",match:\\\"\\\\\\\\$+\\\"+a},c={scope:\\\"subst\\\",variants:[{begin:/\\\\$\\\\w+/},{\\nbegin:/\\\\{\\\\$/,end:/\\\\}/}]},i=e.inherit(e.APOS_STRING_MODE,{illegal:null\\n}),l=\\\"[ \\\\t\\\\n]\\\",s={scope:\\\"string\\\",variants:[e.inherit(e.QUOTE_STRING_MODE,{\\nillegal:null,contains:e.QUOTE_STRING_MODE.contains.concat(c)\\n}),i,e.END_SAME_AS_BEGIN({begin:/<<<[ \\\\t]*(\\\\w+)\\\\n/,end:/[ \\\\t]*(\\\\w+)\\\\b/,\\ncontains:e.QUOTE_STRING_MODE.contains.concat(c)})]},p={scope:\\\"number\\\",\\nvariants:[{begin:\\\"\\\\\\\\b0[bB][01]+(?:_[01]+)*\\\\\\\\b\\\"},{\\nbegin:\\\"\\\\\\\\b0[oO][0-7]+(?:_[0-7]+)*\\\\\\\\b\\\"},{\\nbegin:\\\"\\\\\\\\b0[xX][\\\\\\\\da-fA-F]+(?:_[\\\\\\\\da-fA-F]+)*\\\\\\\\b\\\"},{\\nbegin:\\\"(?:\\\\\\\\b\\\\\\\\d+(?:_\\\\\\\\d+)*(\\\\\\\\.(?:\\\\\\\\d+(?:_\\\\\\\\d+)*))?|\\\\\\\\B\\\\\\\\.\\\\\\\\d+)(?:[eE][+-]?\\\\\\\\d+)?\\\"\\n}],relevance:0\\n},_=[\\\"__CLASS__\\\",\\\"__DIR__\\\",\\\"__FILE__\\\",\\\"__FUNCTION__\\\",\\\"__COMPILER_HALT_OFFSET__\\\",\\\"__LINE__\\\",\\\"__METHOD__\\\",\\\"__NAMESPACE__\\\",\\\"__TRAIT__\\\",\\\"die\\\",\\\"echo\\\",\\\"exit\\\",\\\"include\\\",\\\"include_once\\\",\\\"print\\\",\\\"require\\\",\\\"require_once\\\",\\\"array\\\",\\\"abstract\\\",\\\"and\\\",\\\"as\\\",\\\"binary\\\",\\\"bool\\\",\\\"boolean\\\",\\\"break\\\",\\\"callable\\\",\\\"case\\\",\\\"catch\\\",\\\"class\\\",\\\"clone\\\",\\\"const\\\",\\\"continue\\\",\\\"declare\\\",\\\"default\\\",\\\"do\\\",\\\"double\\\",\\\"else\\\",\\\"elseif\\\",\\\"empty\\\",\\\"enddeclare\\\",\\\"endfor\\\",\\\"endforeach\\\",\\\"endif\\\",\\\"endswitch\\\",\\\"endwhile\\\",\\\"enum\\\",\\\"eval\\\",\\\"extends\\\",\\\"final\\\",\\\"finally\\\",\\\"float\\\",\\\"for\\\",\\\"foreach\\\",\\\"from\\\",\\\"global\\\",\\\"goto\\\",\\\"if\\\",\\\"implements\\\",\\\"instanceof\\\",\\\"insteadof\\\",\\\"int\\\",\\\"integer\\\",\\\"interface\\\",\\\"isset\\\",\\\"iterable\\\",\\\"list\\\",\\\"match|0\\\",\\\"mixed\\\",\\\"new\\\",\\\"never\\\",\\\"object\\\",\\\"or\\\",\\\"private\\\",\\\"protected\\\",\\\"public\\\",\\\"readonly\\\",\\\"real\\\",\\\"return\\\",\\\"string\\\",\\\"switch\\\",\\\"throw\\\",\\\"trait\\\",\\\"try\\\",\\\"unset\\\",\\\"use\\\",\\\"var\\\",\\\"void\\\",\\\"while\\\",\\\"xor\\\",\\\"yield\\\"],d=[\\\"Error|0\\\",\\\"AppendIterator\\\",\\\"ArgumentCountError\\\",\\\"ArithmeticError\\\",\\\"ArrayIterator\\\",\\\"ArrayObject\\\",\\\"AssertionError\\\",\\\"BadFunctionCallException\\\",\\\"BadMethodCallException\\\",\\\"CachingIterator\\\",\\\"CallbackFilterIterator\\\",\\\"CompileError\\\",\\\"Countable\\\",\\\"DirectoryIterator\\\",\\\"DivisionByZeroError\\\",\\\"DomainException\\\",\\\"EmptyIterator\\\",\\\"ErrorException\\\",\\\"Exception\\\",\\\"FilesystemIterator\\\",\\\"FilterIterator\\\",\\\"GlobIterator\\\",\\\"InfiniteIterator\\\",\\\"InvalidArgumentException\\\",\\\"IteratorIterator\\\",\\\"LengthException\\\",\\\"LimitIterator\\\",\\\"LogicException\\\",\\\"MultipleIterator\\\",\\\"NoRewindIterator\\\",\\\"OutOfBoundsException\\\",\\\"OutOfRangeException\\\",\\\"OuterIterator\\\",\\\"OverflowException\\\",\\\"ParentIterator\\\",\\\"ParseError\\\",\\\"RangeException\\\",\\\"RecursiveArrayIterator\\\",\\\"RecursiveCachingIterator\\\",\\\"RecursiveCallbackFilterIterator\\\",\\\"RecursiveDirectoryIterator\\\",\\\"RecursiveFilterIterator\\\",\\\"RecursiveIterator\\\",\\\"RecursiveIteratorIterator\\\",\\\"RecursiveRegexIterator\\\",\\\"RecursiveTreeIterator\\\",\\\"RegexIterator\\\",\\\"RuntimeException\\\",\\\"SeekableIterator\\\",\\\"SplDoublyLinkedList\\\",\\\"SplFileInfo\\\",\\\"SplFileObject\\\",\\\"SplFixedArray\\\",\\\"SplHeap\\\",\\\"SplMaxHeap\\\",\\\"SplMinHeap\\\",\\\"SplObjectStorage\\\",\\\"SplObserver\\\",\\\"SplPriorityQueue\\\",\\\"SplQueue\\\",\\\"SplStack\\\",\\\"SplSubject\\\",\\\"SplTempFileObject\\\",\\\"TypeError\\\",\\\"UnderflowException\\\",\\\"UnexpectedValueException\\\",\\\"UnhandledMatchError\\\",\\\"ArrayAccess\\\",\\\"BackedEnum\\\",\\\"Closure\\\",\\\"Fiber\\\",\\\"Generator\\\",\\\"Iterator\\\",\\\"IteratorAggregate\\\",\\\"Serializable\\\",\\\"Stringable\\\",\\\"Throwable\\\",\\\"Traversable\\\",\\\"UnitEnum\\\",\\\"WeakReference\\\",\\\"WeakMap\\\",\\\"Directory\\\",\\\"__PHP_Incomplete_Class\\\",\\\"parent\\\",\\\"php_user_filter\\\",\\\"self\\\",\\\"static\\\",\\\"stdClass\\\"],b={\\nkeyword:_,literal:(e=>{const t=[];return[\\\"false\\\",\\\"null\\\",\\\"true\\\"].forEach((e=>{\\nt.push(e),e.toLowerCase()===e?t.push(e.toUpperCase()):t.push(e.toLowerCase())\\n})),t})(),built_in:d},u=e=>e.map((e=>e.replace(/\\\\|\\\\d+$/,\\\"\\\"))),E={variants:[{\\nmatch:[/new/,t.concat(l,\\\"+\\\"),t.concat(\\\"(?!\\\",u(d).join(\\\"\\\\\\\\b|\\\"),\\\"\\\\\\\\b)\\\"),t.concat(/\\\\\\\\?/,a),t.concat(l,\\\"*\\\",/\\\\(/)],\\nscope:{1:\\\"keyword\\\",4:\\\"title.class\\\"}}]},g={relevance:0,\\nmatch:[/\\\\b/,t.concat(\\\"(?!fn\\\\\\\\b|function\\\\\\\\b|\\\",u(_).join(\\\"\\\\\\\\b|\\\"),\\\"|\\\",u(d).join(\\\"\\\\\\\\b|\\\"),\\\"\\\\\\\\b)\\\"),a,t.concat(l,\\\"*\\\"),t.lookahead(/(?=\\\\()/)],\\nscope:{3:\\\"title.function.invoke\\\"}},I=t.concat(a,\\\"\\\\\\\\b(?!\\\\\\\\()\\\"),h={variants:[{\\nmatch:[t.concat(/::/,t.lookahead(/(?!class\\\\b)/)),I],scope:{2:\\\"variable.constant\\\"\\n}},{match:[/::/,/class/],scope:{2:\\\"variable.language\\\"}},{\\nmatch:[n,t.concat(\\\"::\\\",t.lookahead(/(?!class\\\\b)/))],scope:{1:\\\"title.class\\\"}},{\\nmatch:[n,/::/,/class/],scope:{1:\\\"title.class\\\",3:\\\"variable.language\\\"}}]};return{\\ncase_insensitive:!1,keywords:b,\\ncontains:[e.HASH_COMMENT_MODE,e.COMMENT(\\\"//\\\",\\\"$\\\"),e.COMMENT(\\\"/\\\\\\\\*\\\",\\\"\\\\\\\\*/\\\",{\\ncontains:[{scope:\\\"doctag\\\",match:\\\"@[A-Za-z]+\\\"}]}),{match:/__halt_compiler\\\\(\\\\);/,\\nkeywords:\\\"__halt_compiler\\\",starts:{scope:\\\"comment\\\",end:e.MATCH_NOTHING_RE,\\ncontains:[{match:/\\\\?>/,scope:\\\"meta\\\",endsParent:!0}]}},{scope:\\\"meta\\\",variants:[{\\nbegin:/<\\\\?php/,relevance:10},{begin:/<\\\\?[=]?/},{begin:/\\\\?>/}]},{\\nscope:\\\"variable.language\\\",match:/\\\\$this\\\\b/},o,g,h,{\\nmatch:[/const/,/\\\\s/,a,/\\\\s*=/],scope:{1:\\\"keyword\\\",3:\\\"variable.constant\\\"}},E,{\\nscope:\\\"function\\\",relevance:0,beginKeywords:\\\"fn function\\\",end:/[;{]/,\\nexcludeEnd:!0,illegal:\\\"[$%\\\\\\\\[]\\\",contains:[{beginKeywords:\\\"use\\\"\\n},e.UNDERSCORE_TITLE_MODE,{begin:\\\"=>\\\",endsParent:!0},{scope:\\\"params\\\",\\nbegin:\\\"\\\\\\\\(\\\",end:\\\"\\\\\\\\)\\\",excludeBegin:!0,excludeEnd:!0,keywords:b,\\ncontains:[\\\"self\\\",o,h,e.C_BLOCK_COMMENT_MODE,s,p]}]},{scope:\\\"class\\\",variants:[{\\nbeginKeywords:\\\"enum\\\",illegal:/[($\\\"]/},{beginKeywords:\\\"class interface trait\\\",\\nillegal:/[:($\\\"]/}],relevance:0,end:/\\\\{/,excludeEnd:!0,contains:[{\\nbeginKeywords:\\\"extends implements\\\"},e.UNDERSCORE_TITLE_MODE]},{\\nbeginKeywords:\\\"namespace\\\",relevance:0,end:\\\";\\\",illegal:/[.']/,\\ncontains:[e.inherit(e.UNDERSCORE_TITLE_MODE,{scope:\\\"title.class\\\"})]},{\\nbeginKeywords:\\\"use\\\",relevance:0,end:\\\";\\\",contains:[{\\nmatch:/\\\\b(as|const|function)\\\\b/,scope:\\\"keyword\\\"},e.UNDERSCORE_TITLE_MODE]},s,p]}\\n}})();hljs.registerLanguage(\\\"php\\\",e)})();/*! `scss` grammar compiled for Highlight.js 11.4.0 */\\n(()=>{var e=(()=>{\\\"use strict\\\"\\n;const e=[\\\"a\\\",\\\"abbr\\\",\\\"address\\\",\\\"article\\\",\\\"aside\\\",\\\"audio\\\",\\\"b\\\",\\\"blockquote\\\",\\\"body\\\",\\\"button\\\",\\\"canvas\\\",\\\"caption\\\",\\\"cite\\\",\\\"code\\\",\\\"dd\\\",\\\"del\\\",\\\"details\\\",\\\"dfn\\\",\\\"div\\\",\\\"dl\\\",\\\"dt\\\",\\\"em\\\",\\\"fieldset\\\",\\\"figcaption\\\",\\\"figure\\\",\\\"footer\\\",\\\"form\\\",\\\"h1\\\",\\\"h2\\\",\\\"h3\\\",\\\"h4\\\",\\\"h5\\\",\\\"h6\\\",\\\"header\\\",\\\"hgroup\\\",\\\"html\\\",\\\"i\\\",\\\"iframe\\\",\\\"img\\\",\\\"input\\\",\\\"ins\\\",\\\"kbd\\\",\\\"label\\\",\\\"legend\\\",\\\"li\\\",\\\"main\\\",\\\"mark\\\",\\\"menu\\\",\\\"nav\\\",\\\"object\\\",\\\"ol\\\",\\\"p\\\",\\\"q\\\",\\\"quote\\\",\\\"samp\\\",\\\"section\\\",\\\"span\\\",\\\"strong\\\",\\\"summary\\\",\\\"sup\\\",\\\"table\\\",\\\"tbody\\\",\\\"td\\\",\\\"textarea\\\",\\\"tfoot\\\",\\\"th\\\",\\\"thead\\\",\\\"time\\\",\\\"tr\\\",\\\"ul\\\",\\\"var\\\",\\\"video\\\"],t=[\\\"any-hover\\\",\\\"any-pointer\\\",\\\"aspect-ratio\\\",\\\"color\\\",\\\"color-gamut\\\",\\\"color-index\\\",\\\"device-aspect-ratio\\\",\\\"device-height\\\",\\\"device-width\\\",\\\"display-mode\\\",\\\"forced-colors\\\",\\\"grid\\\",\\\"height\\\",\\\"hover\\\",\\\"inverted-colors\\\",\\\"monochrome\\\",\\\"orientation\\\",\\\"overflow-block\\\",\\\"overflow-inline\\\",\\\"pointer\\\",\\\"prefers-color-scheme\\\",\\\"prefers-contrast\\\",\\\"prefers-reduced-motion\\\",\\\"prefers-reduced-transparency\\\",\\\"resolution\\\",\\\"scan\\\",\\\"scripting\\\",\\\"update\\\",\\\"width\\\",\\\"min-width\\\",\\\"max-width\\\",\\\"min-height\\\",\\\"max-height\\\"],i=[\\\"active\\\",\\\"any-link\\\",\\\"blank\\\",\\\"checked\\\",\\\"current\\\",\\\"default\\\",\\\"defined\\\",\\\"dir\\\",\\\"disabled\\\",\\\"drop\\\",\\\"empty\\\",\\\"enabled\\\",\\\"first\\\",\\\"first-child\\\",\\\"first-of-type\\\",\\\"fullscreen\\\",\\\"future\\\",\\\"focus\\\",\\\"focus-visible\\\",\\\"focus-within\\\",\\\"has\\\",\\\"host\\\",\\\"host-context\\\",\\\"hover\\\",\\\"indeterminate\\\",\\\"in-range\\\",\\\"invalid\\\",\\\"is\\\",\\\"lang\\\",\\\"last-child\\\",\\\"last-of-type\\\",\\\"left\\\",\\\"link\\\",\\\"local-link\\\",\\\"not\\\",\\\"nth-child\\\",\\\"nth-col\\\",\\\"nth-last-child\\\",\\\"nth-last-col\\\",\\\"nth-last-of-type\\\",\\\"nth-of-type\\\",\\\"only-child\\\",\\\"only-of-type\\\",\\\"optional\\\",\\\"out-of-range\\\",\\\"past\\\",\\\"placeholder-shown\\\",\\\"read-only\\\",\\\"read-write\\\",\\\"required\\\",\\\"right\\\",\\\"root\\\",\\\"scope\\\",\\\"target\\\",\\\"target-within\\\",\\\"user-invalid\\\",\\\"valid\\\",\\\"visited\\\",\\\"where\\\"],r=[\\\"after\\\",\\\"backdrop\\\",\\\"before\\\",\\\"cue\\\",\\\"cue-region\\\",\\\"first-letter\\\",\\\"first-line\\\",\\\"grammar-error\\\",\\\"marker\\\",\\\"part\\\",\\\"placeholder\\\",\\\"selection\\\",\\\"slotted\\\",\\\"spelling-error\\\"],o=[\\\"align-content\\\",\\\"align-items\\\",\\\"align-self\\\",\\\"all\\\",\\\"animation\\\",\\\"animation-delay\\\",\\\"animation-direction\\\",\\\"animation-duration\\\",\\\"animation-fill-mode\\\",\\\"animation-iteration-count\\\",\\\"animation-name\\\",\\\"animation-play-state\\\",\\\"animation-timing-function\\\",\\\"backface-visibility\\\",\\\"background\\\",\\\"background-attachment\\\",\\\"background-clip\\\",\\\"background-color\\\",\\\"background-image\\\",\\\"background-origin\\\",\\\"background-position\\\",\\\"background-repeat\\\",\\\"background-size\\\",\\\"border\\\",\\\"border-bottom\\\",\\\"border-bottom-color\\\",\\\"border-bottom-left-radius\\\",\\\"border-bottom-right-radius\\\",\\\"border-bottom-style\\\",\\\"border-bottom-width\\\",\\\"border-collapse\\\",\\\"border-color\\\",\\\"border-image\\\",\\\"border-image-outset\\\",\\\"border-image-repeat\\\",\\\"border-image-slice\\\",\\\"border-image-source\\\",\\\"border-image-width\\\",\\\"border-left\\\",\\\"border-left-color\\\",\\\"border-left-style\\\",\\\"border-left-width\\\",\\\"border-radius\\\",\\\"border-right\\\",\\\"border-right-color\\\",\\\"border-right-style\\\",\\\"border-right-width\\\",\\\"border-spacing\\\",\\\"border-style\\\",\\\"border-top\\\",\\\"border-top-color\\\",\\\"border-top-left-radius\\\",\\\"border-top-right-radius\\\",\\\"border-top-style\\\",\\\"border-top-width\\\",\\\"border-width\\\",\\\"bottom\\\",\\\"box-decoration-break\\\",\\\"box-shadow\\\",\\\"box-sizing\\\",\\\"break-after\\\",\\\"break-before\\\",\\\"break-inside\\\",\\\"caption-side\\\",\\\"caret-color\\\",\\\"clear\\\",\\\"clip\\\",\\\"clip-path\\\",\\\"clip-rule\\\",\\\"color\\\",\\\"column-count\\\",\\\"column-fill\\\",\\\"column-gap\\\",\\\"column-rule\\\",\\\"column-rule-color\\\",\\\"column-rule-style\\\",\\\"column-rule-width\\\",\\\"column-span\\\",\\\"column-width\\\",\\\"columns\\\",\\\"contain\\\",\\\"content\\\",\\\"content-visibility\\\",\\\"counter-increment\\\",\\\"counter-reset\\\",\\\"cue\\\",\\\"cue-after\\\",\\\"cue-before\\\",\\\"cursor\\\",\\\"direction\\\",\\\"display\\\",\\\"empty-cells\\\",\\\"filter\\\",\\\"flex\\\",\\\"flex-basis\\\",\\\"flex-direction\\\",\\\"flex-flow\\\",\\\"flex-grow\\\",\\\"flex-shrink\\\",\\\"flex-wrap\\\",\\\"float\\\",\\\"flow\\\",\\\"font\\\",\\\"font-display\\\",\\\"font-family\\\",\\\"font-feature-settings\\\",\\\"font-kerning\\\",\\\"font-language-override\\\",\\\"font-size\\\",\\\"font-size-adjust\\\",\\\"font-smoothing\\\",\\\"font-stretch\\\",\\\"font-style\\\",\\\"font-synthesis\\\",\\\"font-variant\\\",\\\"font-variant-caps\\\",\\\"font-variant-east-asian\\\",\\\"font-variant-ligatures\\\",\\\"font-variant-numeric\\\",\\\"font-variant-position\\\",\\\"font-variation-settings\\\",\\\"font-weight\\\",\\\"gap\\\",\\\"glyph-orientation-vertical\\\",\\\"grid\\\",\\\"grid-area\\\",\\\"grid-auto-columns\\\",\\\"grid-auto-flow\\\",\\\"grid-auto-rows\\\",\\\"grid-column\\\",\\\"grid-column-end\\\",\\\"grid-column-start\\\",\\\"grid-gap\\\",\\\"grid-row\\\",\\\"grid-row-end\\\",\\\"grid-row-start\\\",\\\"grid-template\\\",\\\"grid-template-areas\\\",\\\"grid-template-columns\\\",\\\"grid-template-rows\\\",\\\"hanging-punctuation\\\",\\\"height\\\",\\\"hyphens\\\",\\\"icon\\\",\\\"image-orientation\\\",\\\"image-rendering\\\",\\\"image-resolution\\\",\\\"ime-mode\\\",\\\"isolation\\\",\\\"justify-content\\\",\\\"left\\\",\\\"letter-spacing\\\",\\\"line-break\\\",\\\"line-height\\\",\\\"list-style\\\",\\\"list-style-image\\\",\\\"list-style-position\\\",\\\"list-style-type\\\",\\\"margin\\\",\\\"margin-bottom\\\",\\\"margin-left\\\",\\\"margin-right\\\",\\\"margin-top\\\",\\\"marks\\\",\\\"mask\\\",\\\"mask-border\\\",\\\"mask-border-mode\\\",\\\"mask-border-outset\\\",\\\"mask-border-repeat\\\",\\\"mask-border-slice\\\",\\\"mask-border-source\\\",\\\"mask-border-width\\\",\\\"mask-clip\\\",\\\"mask-composite\\\",\\\"mask-image\\\",\\\"mask-mode\\\",\\\"mask-origin\\\",\\\"mask-position\\\",\\\"mask-repeat\\\",\\\"mask-size\\\",\\\"mask-type\\\",\\\"max-height\\\",\\\"max-width\\\",\\\"min-height\\\",\\\"min-width\\\",\\\"mix-blend-mode\\\",\\\"nav-down\\\",\\\"nav-index\\\",\\\"nav-left\\\",\\\"nav-right\\\",\\\"nav-up\\\",\\\"none\\\",\\\"normal\\\",\\\"object-fit\\\",\\\"object-position\\\",\\\"opacity\\\",\\\"order\\\",\\\"orphans\\\",\\\"outline\\\",\\\"outline-color\\\",\\\"outline-offset\\\",\\\"outline-style\\\",\\\"outline-width\\\",\\\"overflow\\\",\\\"overflow-wrap\\\",\\\"overflow-x\\\",\\\"overflow-y\\\",\\\"padding\\\",\\\"padding-bottom\\\",\\\"padding-left\\\",\\\"padding-right\\\",\\\"padding-top\\\",\\\"page-break-after\\\",\\\"page-break-before\\\",\\\"page-break-inside\\\",\\\"pause\\\",\\\"pause-after\\\",\\\"pause-before\\\",\\\"perspective\\\",\\\"perspective-origin\\\",\\\"pointer-events\\\",\\\"position\\\",\\\"quotes\\\",\\\"resize\\\",\\\"rest\\\",\\\"rest-after\\\",\\\"rest-before\\\",\\\"right\\\",\\\"row-gap\\\",\\\"scroll-margin\\\",\\\"scroll-margin-block\\\",\\\"scroll-margin-block-end\\\",\\\"scroll-margin-block-start\\\",\\\"scroll-margin-bottom\\\",\\\"scroll-margin-inline\\\",\\\"scroll-margin-inline-end\\\",\\\"scroll-margin-inline-start\\\",\\\"scroll-margin-left\\\",\\\"scroll-margin-right\\\",\\\"scroll-margin-top\\\",\\\"scroll-padding\\\",\\\"scroll-padding-block\\\",\\\"scroll-padding-block-end\\\",\\\"scroll-padding-block-start\\\",\\\"scroll-padding-bottom\\\",\\\"scroll-padding-inline\\\",\\\"scroll-padding-inline-end\\\",\\\"scroll-padding-inline-start\\\",\\\"scroll-padding-left\\\",\\\"scroll-padding-right\\\",\\\"scroll-padding-top\\\",\\\"scroll-snap-align\\\",\\\"scroll-snap-stop\\\",\\\"scroll-snap-type\\\",\\\"shape-image-threshold\\\",\\\"shape-margin\\\",\\\"shape-outside\\\",\\\"speak\\\",\\\"speak-as\\\",\\\"src\\\",\\\"tab-size\\\",\\\"table-layout\\\",\\\"text-align\\\",\\\"text-align-all\\\",\\\"text-align-last\\\",\\\"text-combine-upright\\\",\\\"text-decoration\\\",\\\"text-decoration-color\\\",\\\"text-decoration-line\\\",\\\"text-decoration-style\\\",\\\"text-emphasis\\\",\\\"text-emphasis-color\\\",\\\"text-emphasis-position\\\",\\\"text-emphasis-style\\\",\\\"text-indent\\\",\\\"text-justify\\\",\\\"text-orientation\\\",\\\"text-overflow\\\",\\\"text-rendering\\\",\\\"text-shadow\\\",\\\"text-transform\\\",\\\"text-underline-position\\\",\\\"top\\\",\\\"transform\\\",\\\"transform-box\\\",\\\"transform-origin\\\",\\\"transform-style\\\",\\\"transition\\\",\\\"transition-delay\\\",\\\"transition-duration\\\",\\\"transition-property\\\",\\\"transition-timing-function\\\",\\\"unicode-bidi\\\",\\\"vertical-align\\\",\\\"visibility\\\",\\\"voice-balance\\\",\\\"voice-duration\\\",\\\"voice-family\\\",\\\"voice-pitch\\\",\\\"voice-range\\\",\\\"voice-rate\\\",\\\"voice-stress\\\",\\\"voice-volume\\\",\\\"white-space\\\",\\\"widows\\\",\\\"width\\\",\\\"will-change\\\",\\\"word-break\\\",\\\"word-spacing\\\",\\\"word-wrap\\\",\\\"writing-mode\\\",\\\"z-index\\\"].reverse()\\n;return a=>{const n=(e=>({IMPORTANT:{scope:\\\"meta\\\",begin:\\\"!important\\\"},\\nBLOCK_COMMENT:e.C_BLOCK_COMMENT_MODE,HEXCOLOR:{scope:\\\"number\\\",\\nbegin:/#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\\\\b/},FUNCTION_DISPATCH:{\\nclassName:\\\"built_in\\\",begin:/[\\\\w-]+(?=\\\\()/},ATTRIBUTE_SELECTOR_MODE:{\\nscope:\\\"selector-attr\\\",begin:/\\\\[/,end:/\\\\]/,illegal:\\\"$\\\",\\ncontains:[e.APOS_STRING_MODE,e.QUOTE_STRING_MODE]},CSS_NUMBER_MODE:{\\nscope:\\\"number\\\",\\nbegin:e.NUMBER_RE+\\\"(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?\\\",\\nrelevance:0},CSS_VARIABLE:{className:\\\"attr\\\",begin:/--[A-Za-z][A-Za-z0-9_-]*/}\\n}))(a),l=r,s=i,d=\\\"@[a-z-]+\\\",c={className:\\\"variable\\\",\\nbegin:\\\"(\\\\\\\\$[a-zA-Z-][a-zA-Z0-9_-]*)\\\\\\\\b\\\"};return{name:\\\"SCSS\\\",case_insensitive:!0,\\nillegal:\\\"[=/|']\\\",\\ncontains:[a.C_LINE_COMMENT_MODE,a.C_BLOCK_COMMENT_MODE,n.CSS_NUMBER_MODE,{\\nclassName:\\\"selector-id\\\",begin:\\\"#[A-Za-z0-9_-]+\\\",relevance:0},{\\nclassName:\\\"selector-class\\\",begin:\\\"\\\\\\\\.[A-Za-z0-9_-]+\\\",relevance:0\\n},n.ATTRIBUTE_SELECTOR_MODE,{className:\\\"selector-tag\\\",\\nbegin:\\\"\\\\\\\\b(\\\"+e.join(\\\"|\\\")+\\\")\\\\\\\\b\\\",relevance:0},{className:\\\"selector-pseudo\\\",\\nbegin:\\\":(\\\"+s.join(\\\"|\\\")+\\\")\\\"},{className:\\\"selector-pseudo\\\",\\nbegin:\\\":(:)?(\\\"+l.join(\\\"|\\\")+\\\")\\\"},c,{begin:/\\\\(/,end:/\\\\)/,\\ncontains:[n.CSS_NUMBER_MODE]},n.CSS_VARIABLE,{className:\\\"attribute\\\",\\nbegin:\\\"\\\\\\\\b(\\\"+o.join(\\\"|\\\")+\\\")\\\\\\\\b\\\"},{\\nbegin:\\\"\\\\\\\\b(whitespace|wait|w-resize|visible|vertical-text|vertical-ideographic|uppercase|upper-roman|upper-alpha|underline|transparent|top|thin|thick|text|text-top|text-bottom|tb-rl|table-header-group|table-footer-group|sw-resize|super|strict|static|square|solid|small-caps|separate|se-resize|scroll|s-resize|rtl|row-resize|ridge|right|repeat|repeat-y|repeat-x|relative|progress|pointer|overline|outside|outset|oblique|nowrap|not-allowed|normal|none|nw-resize|no-repeat|no-drop|newspaper|ne-resize|n-resize|move|middle|medium|ltr|lr-tb|lowercase|lower-roman|lower-alpha|loose|list-item|line|line-through|line-edge|lighter|left|keep-all|justify|italic|inter-word|inter-ideograph|inside|inset|inline|inline-block|inherit|inactive|ideograph-space|ideograph-parenthesis|ideograph-numeric|ideograph-alpha|horizontal|hidden|help|hand|groove|fixed|ellipsis|e-resize|double|dotted|distribute|distribute-space|distribute-letter|distribute-all-lines|disc|disabled|default|decimal|dashed|crosshair|collapse|col-resize|circle|char|center|capitalize|break-word|break-all|bottom|both|bolder|bold|block|bidi-override|below|baseline|auto|always|all-scroll|absolute|table|table-cell)\\\\\\\\b\\\"\\n},{begin:/:/,end:/[;}{]/,\\ncontains:[n.BLOCK_COMMENT,c,n.HEXCOLOR,n.CSS_NUMBER_MODE,a.QUOTE_STRING_MODE,a.APOS_STRING_MODE,n.IMPORTANT]\\n},{begin:\\\"@(page|font-face)\\\",keywords:{$pattern:d,keyword:\\\"@page @font-face\\\"}},{\\nbegin:\\\"@\\\",end:\\\"[{;]\\\",returnBegin:!0,keywords:{$pattern:/[a-z-]+/,\\nkeyword:\\\"and or not only\\\",attribute:t.join(\\\" \\\")},contains:[{begin:d,\\nclassName:\\\"keyword\\\"},{begin:/[a-z-]+(?=:)/,className:\\\"attribute\\\"\\n},c,a.QUOTE_STRING_MODE,a.APOS_STRING_MODE,n.HEXCOLOR,n.CSS_NUMBER_MODE]\\n},n.FUNCTION_DISPATCH]}}})();hljs.registerLanguage(\\\"scss\\\",e)})();/*! `latex` grammar compiled for Highlight.js 11.4.0 */\\n(()=>{var e=(()=>{\\\"use strict\\\";return e=>{const n=[{begin:/\\\\^{6}[0-9a-f]{6}/},{\\nbegin:/\\\\^{5}[0-9a-f]{5}/},{begin:/\\\\^{4}[0-9a-f]{4}/},{begin:/\\\\^{3}[0-9a-f]{3}/\\n},{begin:/\\\\^{2}[0-9a-f]{2}/},{begin:/\\\\^{2}[\\\\u0000-\\\\u007f]/}],a=[{\\nclassName:\\\"keyword\\\",begin:/\\\\\\\\/,relevance:0,contains:[{endsParent:!0,\\nbegin:e.regex.either(...[\\\"(?:NeedsTeXFormat|RequirePackage|GetIdInfo)\\\",\\\"Provides(?:Expl)?(?:Package|Class|File)\\\",\\\"(?:DeclareOption|ProcessOptions)\\\",\\\"(?:documentclass|usepackage|input|include)\\\",\\\"makeat(?:letter|other)\\\",\\\"ExplSyntax(?:On|Off)\\\",\\\"(?:new|renew|provide)?command\\\",\\\"(?:re)newenvironment\\\",\\\"(?:New|Renew|Provide|Declare)(?:Expandable)?DocumentCommand\\\",\\\"(?:New|Renew|Provide|Declare)DocumentEnvironment\\\",\\\"(?:(?:e|g|x)?def|let)\\\",\\\"(?:begin|end)\\\",\\\"(?:part|chapter|(?:sub){0,2}section|(?:sub)?paragraph)\\\",\\\"caption\\\",\\\"(?:label|(?:eq|page|name)?ref|(?:paren|foot|super)?cite)\\\",\\\"(?:alpha|beta|[Gg]amma|[Dd]elta|(?:var)?epsilon|zeta|eta|[Tt]heta|vartheta)\\\",\\\"(?:iota|(?:var)?kappa|[Ll]ambda|mu|nu|[Xx]i|[Pp]i|varpi|(?:var)rho)\\\",\\\"(?:[Ss]igma|varsigma|tau|[Uu]psilon|[Pp]hi|varphi|chi|[Pp]si|[Oo]mega)\\\",\\\"(?:frac|sum|prod|lim|infty|times|sqrt|leq|geq|left|right|middle|[bB]igg?)\\\",\\\"(?:[lr]angle|q?quad|[lcvdi]?dots|d?dot|hat|tilde|bar)\\\"].map((e=>e+\\\"(?![a-zA-Z@:_])\\\")))\\n},{endsParent:!0,\\nbegin:RegExp([\\\"(?:__)?[a-zA-Z]{2,}_[a-zA-Z](?:_?[a-zA-Z])+:[a-zA-Z]*\\\",\\\"[lgc]__?[a-zA-Z](?:_?[a-zA-Z])*_[a-zA-Z]{2,}\\\",\\\"[qs]__?[a-zA-Z](?:_?[a-zA-Z])+\\\",\\\"use(?:_i)?:[a-zA-Z]*\\\",\\\"(?:else|fi|or):\\\",\\\"(?:if|cs|exp):w\\\",\\\"(?:hbox|vbox):n\\\",\\\"::[a-zA-Z]_unbraced\\\",\\\"::[a-zA-Z:]\\\"].map((e=>e+\\\"(?![a-zA-Z:_])\\\")).join(\\\"|\\\"))\\n},{endsParent:!0,variants:n},{endsParent:!0,relevance:0,variants:[{\\nbegin:/[a-zA-Z@]+/},{begin:/[^a-zA-Z@]?/}]}]},{className:\\\"params\\\",relevance:0,\\nbegin:/#+\\\\d?/},{variants:n},{className:\\\"built_in\\\",relevance:0,begin:/[$&^_]/},{\\nclassName:\\\"meta\\\",begin:/% ?!(T[eE]X|tex|BIB|bib)/,end:\\\"$\\\",relevance:10\\n},e.COMMENT(\\\"%\\\",\\\"$\\\",{relevance:0})],i={begin:/\\\\{/,end:/\\\\}/,relevance:0,\\ncontains:[\\\"self\\\",...a]},t=e.inherit(i,{relevance:0,endsParent:!0,\\ncontains:[i,...a]}),r={begin:/\\\\[/,end:/\\\\]/,endsParent:!0,relevance:0,\\ncontains:[i,...a]},s={begin:/\\\\s+/,relevance:0},c=[t],l=[r],o=(e,n)=>({\\ncontains:[s],starts:{relevance:0,contains:e,starts:n}}),d=(e,n)=>({\\nbegin:\\\"\\\\\\\\\\\\\\\\\\\"+e+\\\"(?![a-zA-Z@:_])\\\",keywords:{$pattern:/\\\\\\\\[a-zA-Z]+/,keyword:\\\"\\\\\\\\\\\"+e\\n},relevance:0,contains:[s],starts:n}),g=(n,a)=>e.inherit({\\nbegin:\\\"\\\\\\\\\\\\\\\\begin(?=[ \\\\t]*(\\\\\\\\r?\\\\\\\\n[ \\\\t]*)?\\\\\\\\{\\\"+n+\\\"\\\\\\\\})\\\",keywords:{\\n$pattern:/\\\\\\\\[a-zA-Z]+/,keyword:\\\"\\\\\\\\begin\\\"},relevance:0\\n},o(c,a)),m=(n=\\\"string\\\")=>e.END_SAME_AS_BEGIN({className:n,begin:/(.|\\\\r?\\\\n)/,\\nend:/(.|\\\\r?\\\\n)/,excludeBegin:!0,excludeEnd:!0,endsParent:!0}),b=e=>({\\nclassName:\\\"string\\\",end:\\\"(?=\\\\\\\\\\\\\\\\end\\\\\\\\{\\\"+e+\\\"\\\\\\\\})\\\"}),p=(e=\\\"string\\\")=>({relevance:0,\\nbegin:/\\\\{/,starts:{endsParent:!0,contains:[{className:e,end:/(?=\\\\})/,\\nendsParent:!0,contains:[{begin:/\\\\{/,end:/\\\\}/,relevance:0,contains:[\\\"self\\\"]}]}]}\\n});return{name:\\\"LaTeX\\\",aliases:[\\\"tex\\\"],\\ncontains:[...[\\\"verb\\\",\\\"lstinline\\\"].map((e=>d(e,{contains:[m()]}))),d(\\\"mint\\\",o(c,{\\ncontains:[m()]})),d(\\\"mintinline\\\",o(c,{contains:[p(),m()]})),d(\\\"url\\\",{\\ncontains:[p(\\\"link\\\"),p(\\\"link\\\")]}),d(\\\"hyperref\\\",{contains:[p(\\\"link\\\")]\\n}),d(\\\"href\\\",o(l,{contains:[p(\\\"link\\\")]\\n})),...[].concat(...[\\\"\\\",\\\"\\\\\\\\*\\\"].map((e=>[g(\\\"verbatim\\\"+e,b(\\\"verbatim\\\"+e)),g(\\\"filecontents\\\"+e,o(c,b(\\\"filecontents\\\"+e))),...[\\\"\\\",\\\"B\\\",\\\"L\\\"].map((n=>g(n+\\\"Verbatim\\\"+e,o(l,b(n+\\\"Verbatim\\\"+e)))))]))),g(\\\"minted\\\",o(l,o(c,b(\\\"minted\\\")))),...a]\\n}}})();hljs.registerLanguage(\\\"latex\\\",e)})();/*! `vbnet` grammar compiled for Highlight.js 11.4.0 */\\n(()=>{var e=(()=>{\\\"use strict\\\";return e=>{\\nconst n=e.regex,t=/\\\\d{1,2}\\\\/\\\\d{1,2}\\\\/\\\\d{4}/,a=/\\\\d{4}-\\\\d{1,2}-\\\\d{1,2}/,i=/(\\\\d|1[012])(:\\\\d+){0,2} *(AM|PM)/,s=/\\\\d{1,2}(:\\\\d{1,2}){1,2}/,r={\\nclassName:\\\"literal\\\",variants:[{begin:n.concat(/# */,n.either(a,t),/ *#/)},{\\nbegin:n.concat(/# */,s,/ *#/)},{begin:n.concat(/# */,i,/ *#/)},{\\nbegin:n.concat(/# */,n.either(a,t),/ +/,n.either(i,s),/ *#/)}]\\n},l=e.COMMENT(/'''/,/$/,{contains:[{className:\\\"doctag\\\",begin:/<\\\\/?/,end:/>/}]\\n}),o=e.COMMENT(null,/$/,{variants:[{begin:/'/},{begin:/([\\\\t ]|^)REM(?=\\\\s)/}]})\\n;return{name:\\\"Visual Basic .NET\\\",aliases:[\\\"vb\\\"],case_insensitive:!0,\\nclassNameAliases:{label:\\\"symbol\\\"},keywords:{\\nkeyword:\\\"addhandler alias aggregate ansi as async assembly auto binary by byref byval call case catch class compare const continue custom declare default delegate dim distinct do each equals else elseif end enum erase error event exit explicit finally for friend from function get global goto group handles if implements imports in inherits interface into iterator join key let lib loop me mid module mustinherit mustoverride mybase myclass namespace narrowing new next notinheritable notoverridable of off on operator option optional order overloads overridable overrides paramarray partial preserve private property protected public raiseevent readonly redim removehandler resume return select set shadows shared skip static step stop structure strict sub synclock take text then throw to try unicode until using when where while widening with withevents writeonly yield\\\",\\nbuilt_in:\\\"addressof and andalso await directcast gettype getxmlnamespace is isfalse isnot istrue like mod nameof new not or orelse trycast typeof xor cbool cbyte cchar cdate cdbl cdec cint clng cobj csbyte cshort csng cstr cuint culng cushort\\\",\\ntype:\\\"boolean byte char date decimal double integer long object sbyte short single string uinteger ulong ushort\\\",\\nliteral:\\\"true false nothing\\\"},\\nillegal:\\\"//|\\\\\\\\{|\\\\\\\\}|endif|gosub|variant|wend|^\\\\\\\\$ \\\",contains:[{\\nclassName:\\\"string\\\",begin:/\\\"(\\\"\\\"|[^/n])\\\"C\\\\b/},{className:\\\"string\\\",begin:/\\\"/,\\nend:/\\\"/,illegal:/\\\\n/,contains:[{begin:/\\\"\\\"/}]},r,{className:\\\"number\\\",relevance:0,\\nvariants:[{begin:/\\\\b\\\\d[\\\\d_]*((\\\\.[\\\\d_]+(E[+-]?[\\\\d_]+)?)|(E[+-]?[\\\\d_]+))[RFD@!#]?/\\n},{begin:/\\\\b\\\\d[\\\\d_]*((U?[SIL])|[%&])?/},{begin:/&H[\\\\dA-F_]+((U?[SIL])|[%&])?/},{\\nbegin:/&O[0-7_]+((U?[SIL])|[%&])?/},{begin:/&B[01_]+((U?[SIL])|[%&])?/}]},{\\nclassName:\\\"label\\\",begin:/^\\\\w+:/},l,o,{className:\\\"meta\\\",\\nbegin:/[\\\\t ]*#(const|disable|else|elseif|enable|end|externalsource|if|region)\\\\b/,\\nend:/$/,keywords:{\\nkeyword:\\\"const disable else elseif enable end externalsource if region then\\\"},\\ncontains:[o]}]}}})();hljs.registerLanguage(\\\"vbnet\\\",e)})();/*! `diff` grammar compiled for Highlight.js 11.4.0 */\\n(()=>{var e=(()=>{\\\"use strict\\\";return e=>{const a=e.regex;return{name:\\\"Diff\\\",\\naliases:[\\\"patch\\\"],contains:[{className:\\\"meta\\\",relevance:10,\\nmatch:a.either(/^@@ +-\\\\d+,\\\\d+ +\\\\+\\\\d+,\\\\d+ +@@/,/^\\\\*\\\\*\\\\* +\\\\d+,\\\\d+ +\\\\*\\\\*\\\\*\\\\*$/,/^--- +\\\\d+,\\\\d+ +----$/)\\n},{className:\\\"comment\\\",variants:[{\\nbegin:a.either(/Index: /,/^index/,/={3,}/,/^-{3}/,/^\\\\*{3} /,/^\\\\+{3}/,/^diff --git/),\\nend:/$/},{match:/^\\\\*{15}$/}]},{className:\\\"addition\\\",begin:/^\\\\+/,end:/$/},{\\nclassName:\\\"deletion\\\",begin:/^-/,end:/$/},{className:\\\"addition\\\",begin:/^!/,\\nend:/$/}]}}})();hljs.registerLanguage(\\\"diff\\\",e)})();/*! `makefile` grammar compiled for Highlight.js 11.4.0 */\\n(()=>{var e=(()=>{\\\"use strict\\\";return e=>{const i={className:\\\"variable\\\",\\nvariants:[{begin:\\\"\\\\\\\\$\\\\\\\\(\\\"+e.UNDERSCORE_IDENT_RE+\\\"\\\\\\\\)\\\",\\ncontains:[e.BACKSLASH_ESCAPE]},{begin:/\\\\$[@%<?\\\\^\\\\+\\\\*]/}]},a={className:\\\"string\\\",\\nbegin:/\\\"/,end:/\\\"/,contains:[e.BACKSLASH_ESCAPE,i]},n={className:\\\"variable\\\",\\nbegin:/\\\\$\\\\([\\\\w-]+\\\\s/,end:/\\\\)/,keywords:{\\nbuilt_in:\\\"subst patsubst strip findstring filter filter-out sort word wordlist firstword lastword dir notdir suffix basename addsuffix addprefix join wildcard realpath abspath error warning shell origin flavor foreach if or and call eval file value\\\"\\n},contains:[i]},s={begin:\\\"^\\\"+e.UNDERSCORE_IDENT_RE+\\\"\\\\\\\\s*(?=[:+?]?=)\\\"},r={\\nclassName:\\\"section\\\",begin:/^[^\\\\s]+:/,end:/$/,contains:[i]};return{\\nname:\\\"Makefile\\\",aliases:[\\\"mk\\\",\\\"mak\\\",\\\"make\\\"],keywords:{$pattern:/[\\\\w-]+/,\\nkeyword:\\\"define endef undefine ifdef ifndef ifeq ifneq else endif include -include sinclude override export unexport private vpath\\\"\\n},contains:[e.HASH_COMMENT_MODE,i,a,n,s,{className:\\\"meta\\\",begin:/^\\\\.PHONY:/,\\nend:/$/,keywords:{$pattern:/[\\\\.\\\\w]+/,keyword:\\\".PHONY\\\"}},r]}}})()\\n;hljs.registerLanguage(\\\"makefile\\\",e)})();/*! `lua` grammar compiled for Highlight.js 11.4.0 */\\n(()=>{var e=(()=>{\\\"use strict\\\";return e=>{const t=\\\"\\\\\\\\[=*\\\\\\\\[\\\",a=\\\"\\\\\\\\]=*\\\\\\\\]\\\",n={\\nbegin:t,end:a,contains:[\\\"self\\\"]\\n},o=[e.COMMENT(\\\"--(?!\\\\\\\\[=*\\\\\\\\[)\\\",\\\"$\\\"),e.COMMENT(\\\"--\\\\\\\\[=*\\\\\\\\[\\\",a,{contains:[n],\\nrelevance:10})];return{name:\\\"Lua\\\",keywords:{$pattern:e.UNDERSCORE_IDENT_RE,\\nliteral:\\\"true false nil\\\",\\nkeyword:\\\"and break do else elseif end for goto if in local not or repeat return then until while\\\",\\nbuilt_in:\\\"_G _ENV _VERSION __index __newindex __mode __call __metatable __tostring __len __gc __add __sub __mul __div __mod __pow __concat __unm __eq __lt __le assert collectgarbage dofile error getfenv getmetatable ipairs load loadfile loadstring module next pairs pcall print rawequal rawget rawset require select setfenv setmetatable tonumber tostring type unpack xpcall arg self coroutine resume yield status wrap create running debug getupvalue debug sethook getmetatable gethook setmetatable setlocal traceback setfenv getinfo setupvalue getlocal getregistry getfenv io lines write close flush open output type read stderr stdin input stdout popen tmpfile math log max acos huge ldexp pi cos tanh pow deg tan cosh sinh random randomseed frexp ceil floor rad abs sqrt modf asin min mod fmod log10 atan2 exp sin atan os exit setlocale date getenv difftime remove time clock tmpname rename execute package preload loadlib loaded loaders cpath config path seeall string sub upper len gfind rep find match char dump gmatch reverse byte format gsub lower table setn insert getn foreachi maxn foreach concat sort remove\\\"\\n},contains:o.concat([{className:\\\"function\\\",beginKeywords:\\\"function\\\",end:\\\"\\\\\\\\)\\\",\\ncontains:[e.inherit(e.TITLE_MODE,{\\nbegin:\\\"([_a-zA-Z]\\\\\\\\w*\\\\\\\\.)*([_a-zA-Z]\\\\\\\\w*:)?[_a-zA-Z]\\\\\\\\w*\\\"}),{className:\\\"params\\\",\\nbegin:\\\"\\\\\\\\(\\\",endsWithParent:!0,contains:o}].concat(o)\\n},e.C_NUMBER_MODE,e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,{className:\\\"string\\\",\\nbegin:t,end:a,contains:[n],relevance:5}])}}})();hljs.registerLanguage(\\\"lua\\\",e)\\n})();/*! `csharp` grammar compiled for Highlight.js 11.4.0 */\\n(()=>{var e=(()=>{\\\"use strict\\\";return e=>{const n={\\nkeyword:[\\\"abstract\\\",\\\"as\\\",\\\"base\\\",\\\"break\\\",\\\"case\\\",\\\"catch\\\",\\\"class\\\",\\\"const\\\",\\\"continue\\\",\\\"do\\\",\\\"else\\\",\\\"event\\\",\\\"explicit\\\",\\\"extern\\\",\\\"finally\\\",\\\"fixed\\\",\\\"for\\\",\\\"foreach\\\",\\\"goto\\\",\\\"if\\\",\\\"implicit\\\",\\\"in\\\",\\\"interface\\\",\\\"internal\\\",\\\"is\\\",\\\"lock\\\",\\\"namespace\\\",\\\"new\\\",\\\"operator\\\",\\\"out\\\",\\\"override\\\",\\\"params\\\",\\\"private\\\",\\\"protected\\\",\\\"public\\\",\\\"readonly\\\",\\\"record\\\",\\\"ref\\\",\\\"return\\\",\\\"sealed\\\",\\\"sizeof\\\",\\\"stackalloc\\\",\\\"static\\\",\\\"struct\\\",\\\"switch\\\",\\\"this\\\",\\\"throw\\\",\\\"try\\\",\\\"typeof\\\",\\\"unchecked\\\",\\\"unsafe\\\",\\\"using\\\",\\\"virtual\\\",\\\"void\\\",\\\"volatile\\\",\\\"while\\\"].concat([\\\"add\\\",\\\"alias\\\",\\\"and\\\",\\\"ascending\\\",\\\"async\\\",\\\"await\\\",\\\"by\\\",\\\"descending\\\",\\\"equals\\\",\\\"from\\\",\\\"get\\\",\\\"global\\\",\\\"group\\\",\\\"init\\\",\\\"into\\\",\\\"join\\\",\\\"let\\\",\\\"nameof\\\",\\\"not\\\",\\\"notnull\\\",\\\"on\\\",\\\"or\\\",\\\"orderby\\\",\\\"partial\\\",\\\"remove\\\",\\\"select\\\",\\\"set\\\",\\\"unmanaged\\\",\\\"value|0\\\",\\\"var\\\",\\\"when\\\",\\\"where\\\",\\\"with\\\",\\\"yield\\\"]),\\nbuilt_in:[\\\"bool\\\",\\\"byte\\\",\\\"char\\\",\\\"decimal\\\",\\\"delegate\\\",\\\"double\\\",\\\"dynamic\\\",\\\"enum\\\",\\\"float\\\",\\\"int\\\",\\\"long\\\",\\\"nint\\\",\\\"nuint\\\",\\\"object\\\",\\\"sbyte\\\",\\\"short\\\",\\\"string\\\",\\\"ulong\\\",\\\"uint\\\",\\\"ushort\\\"],\\nliteral:[\\\"default\\\",\\\"false\\\",\\\"null\\\",\\\"true\\\"]},a=e.inherit(e.TITLE_MODE,{\\nbegin:\\\"[a-zA-Z](\\\\\\\\.?\\\\\\\\w)*\\\"}),i={className:\\\"number\\\",variants:[{\\nbegin:\\\"\\\\\\\\b(0b[01']+)\\\"},{\\nbegin:\\\"(-?)\\\\\\\\b([\\\\\\\\d']+(\\\\\\\\.[\\\\\\\\d']*)?|\\\\\\\\.[\\\\\\\\d']+)(u|U|l|L|ul|UL|f|F|b|B)\\\"},{\\nbegin:\\\"(-?)(\\\\\\\\b0[xX][a-fA-F0-9']+|(\\\\\\\\b[\\\\\\\\d']+(\\\\\\\\.[\\\\\\\\d']*)?|\\\\\\\\.[\\\\\\\\d']+)([eE][-+]?[\\\\\\\\d']+)?)\\\"\\n}],relevance:0},s={className:\\\"string\\\",begin:'@\\\"',end:'\\\"',contains:[{begin:'\\\"\\\"'}]\\n},t=e.inherit(s,{illegal:/\\\\n/}),r={className:\\\"subst\\\",begin:/\\\\{/,end:/\\\\}/,\\nkeywords:n},l=e.inherit(r,{illegal:/\\\\n/}),c={className:\\\"string\\\",begin:/\\\\$\\\"/,\\nend:'\\\"',illegal:/\\\\n/,contains:[{begin:/\\\\{\\\\{/},{begin:/\\\\}\\\\}/\\n},e.BACKSLASH_ESCAPE,l]},o={className:\\\"string\\\",begin:/\\\\$@\\\"/,end:'\\\"',contains:[{\\nbegin:/\\\\{\\\\{/},{begin:/\\\\}\\\\}/},{begin:'\\\"\\\"'},r]},d=e.inherit(o,{illegal:/\\\\n/,\\ncontains:[{begin:/\\\\{\\\\{/},{begin:/\\\\}\\\\}/},{begin:'\\\"\\\"'},l]})\\n;r.contains=[o,c,s,e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,i,e.C_BLOCK_COMMENT_MODE],\\nl.contains=[d,c,t,e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,i,e.inherit(e.C_BLOCK_COMMENT_MODE,{\\nillegal:/\\\\n/})];const g={variants:[o,c,s,e.APOS_STRING_MODE,e.QUOTE_STRING_MODE]\\n},E={begin:\\\"<\\\",end:\\\">\\\",contains:[{beginKeywords:\\\"in out\\\"},a]\\n},_=e.IDENT_RE+\\\"(<\\\"+e.IDENT_RE+\\\"(\\\\\\\\s*,\\\\\\\\s*\\\"+e.IDENT_RE+\\\")*>)?(\\\\\\\\[\\\\\\\\])?\\\",b={\\nbegin:\\\"@\\\"+e.IDENT_RE,relevance:0};return{name:\\\"C#\\\",aliases:[\\\"cs\\\",\\\"c#\\\"],\\nkeywords:n,illegal:/::/,contains:[e.COMMENT(\\\"///\\\",\\\"$\\\",{returnBegin:!0,\\ncontains:[{className:\\\"doctag\\\",variants:[{begin:\\\"///\\\",relevance:0},{\\nbegin:\\\"\\\\x3c!--|--\\\\x3e\\\"},{begin:\\\"</?\\\",end:\\\">\\\"}]}]\\n}),e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,{className:\\\"meta\\\",begin:\\\"#\\\",\\nend:\\\"$\\\",keywords:{\\nkeyword:\\\"if else elif endif define undef warning error line region endregion pragma checksum\\\"\\n}},g,i,{beginKeywords:\\\"class interface\\\",relevance:0,end:/[{;=]/,\\nillegal:/[^\\\\s:,]/,contains:[{beginKeywords:\\\"where class\\\"\\n},a,E,e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE]},{beginKeywords:\\\"namespace\\\",\\nrelevance:0,end:/[{;=]/,illegal:/[^\\\\s:]/,\\ncontains:[a,e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE]},{\\nbeginKeywords:\\\"record\\\",relevance:0,end:/[{;=]/,illegal:/[^\\\\s:]/,\\ncontains:[a,E,e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE]},{className:\\\"meta\\\",\\nbegin:\\\"^\\\\\\\\s*\\\\\\\\[(?=[\\\\\\\\w])\\\",excludeBegin:!0,end:\\\"\\\\\\\\]\\\",excludeEnd:!0,contains:[{\\nclassName:\\\"string\\\",begin:/\\\"/,end:/\\\"/}]},{\\nbeginKeywords:\\\"new return throw await else\\\",relevance:0},{className:\\\"function\\\",\\nbegin:\\\"(\\\"+_+\\\"\\\\\\\\s+)+\\\"+e.IDENT_RE+\\\"\\\\\\\\s*(<[^=]+>\\\\\\\\s*)?\\\\\\\\(\\\",returnBegin:!0,\\nend:/\\\\s*[{;=]/,excludeEnd:!0,keywords:n,contains:[{\\nbeginKeywords:\\\"public private protected static internal protected abstract async extern override unsafe virtual new sealed partial\\\",\\nrelevance:0},{begin:e.IDENT_RE+\\\"\\\\\\\\s*(<[^=]+>\\\\\\\\s*)?\\\\\\\\(\\\",returnBegin:!0,\\ncontains:[e.TITLE_MODE,E],relevance:0},{match:/\\\\(\\\\)/},{className:\\\"params\\\",\\nbegin:/\\\\(/,end:/\\\\)/,excludeBegin:!0,excludeEnd:!0,keywords:n,relevance:0,\\ncontains:[g,i,e.C_BLOCK_COMMENT_MODE]\\n},e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE]},b]}}})()\\n;hljs.registerLanguage(\\\"csharp\\\",e)})();/*! `json` grammar compiled for Highlight.js 11.4.0 */\\n(()=>{var e=(()=>{\\\"use strict\\\";return e=>({name:\\\"JSON\\\",contains:[{\\nclassName:\\\"attr\\\",begin:/\\\"(\\\\\\\\.|[^\\\\\\\\\\\"\\\\r\\\\n])*\\\"(?=\\\\s*:)/,relevance:1.01},{\\nmatch:/[{}[\\\\],:]/,className:\\\"punctuation\\\",relevance:0},e.QUOTE_STRING_MODE,{\\nbeginKeywords:\\\"true false null\\\"\\n},e.C_NUMBER_MODE,e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE],illegal:\\\"\\\\\\\\S\\\"})\\n})();hljs.registerLanguage(\\\"json\\\",e)})();/*! `nginx` grammar compiled for Highlight.js 11.4.0 */\\n(()=>{var e=(()=>{\\\"use strict\\\";return e=>{const n=e.regex,a={\\nclassName:\\\"variable\\\",variants:[{begin:/\\\\$\\\\d+/},{begin:/\\\\$\\\\{\\\\w+\\\\}/},{\\nbegin:n.concat(/[$@]/,e.UNDERSCORE_IDENT_RE)}]},s={endsWithParent:!0,keywords:{\\n$pattern:/[a-z_]{2,}|\\\\/dev\\\\/poll/,\\nliteral:[\\\"on\\\",\\\"off\\\",\\\"yes\\\",\\\"no\\\",\\\"true\\\",\\\"false\\\",\\\"none\\\",\\\"blocked\\\",\\\"debug\\\",\\\"info\\\",\\\"notice\\\",\\\"warn\\\",\\\"error\\\",\\\"crit\\\",\\\"select\\\",\\\"break\\\",\\\"last\\\",\\\"permanent\\\",\\\"redirect\\\",\\\"kqueue\\\",\\\"rtsig\\\",\\\"epoll\\\",\\\"poll\\\",\\\"/dev/poll\\\"]\\n},relevance:0,illegal:\\\"=>\\\",contains:[e.HASH_COMMENT_MODE,{className:\\\"string\\\",\\ncontains:[e.BACKSLASH_ESCAPE,a],variants:[{begin:/\\\"/,end:/\\\"/},{begin:/'/,end:/'/\\n}]},{begin:\\\"([a-z]+):/\\\",end:\\\"\\\\\\\\s\\\",endsWithParent:!0,excludeEnd:!0,contains:[a]\\n},{className:\\\"regexp\\\",contains:[e.BACKSLASH_ESCAPE,a],variants:[{begin:\\\"\\\\\\\\s\\\\\\\\^\\\",\\nend:\\\"\\\\\\\\s|\\\\\\\\{|;\\\",returnEnd:!0},{begin:\\\"~\\\\\\\\*?\\\\\\\\s+\\\",end:\\\"\\\\\\\\s|\\\\\\\\{|;\\\",returnEnd:!0},{\\nbegin:\\\"\\\\\\\\*(\\\\\\\\.[a-z\\\\\\\\-]+)+\\\"},{begin:\\\"([a-z\\\\\\\\-]+\\\\\\\\.)+\\\\\\\\*\\\"}]},{className:\\\"number\\\",\\nbegin:\\\"\\\\\\\\b\\\\\\\\d{1,3}\\\\\\\\.\\\\\\\\d{1,3}\\\\\\\\.\\\\\\\\d{1,3}\\\\\\\\.\\\\\\\\d{1,3}(:\\\\\\\\d{1,5})?\\\\\\\\b\\\"},{\\nclassName:\\\"number\\\",begin:\\\"\\\\\\\\b\\\\\\\\d+[kKmMgGdshdwy]?\\\\\\\\b\\\",relevance:0},a]};return{\\nname:\\\"Nginx config\\\",aliases:[\\\"nginxconf\\\"],contains:[e.HASH_COMMENT_MODE,{\\nbeginKeywords:\\\"upstream location\\\",end:/;|\\\\{/,contains:s.contains,keywords:{\\nsection:\\\"upstream location\\\"}},{className:\\\"section\\\",\\nbegin:n.concat(e.UNDERSCORE_IDENT_RE+n.lookahead(/\\\\s+\\\\{/)),relevance:0},{\\nbegin:n.lookahead(e.UNDERSCORE_IDENT_RE+\\\"\\\\\\\\s\\\"),end:\\\";|\\\\\\\\{\\\",contains:[{\\nclassName:\\\"attribute\\\",begin:e.UNDERSCORE_IDENT_RE,starts:s}],relevance:0}],\\nillegal:\\\"[^\\\\\\\\s\\\\\\\\}\\\\\\\\{]\\\"}}})();hljs.registerLanguage(\\\"nginx\\\",e)})();/*! `ruby` grammar compiled for Highlight.js 11.4.0 */\\n(()=>{var e=(()=>{\\\"use strict\\\";return e=>{\\nconst n=e.regex,a=\\\"([a-zA-Z_]\\\\\\\\w*[!?=]?|[-+~]@|<<|>>|=~|===?|<=>|[<>]=?|\\\\\\\\*\\\\\\\\*|[-/+%^&*~`|]|\\\\\\\\[\\\\\\\\]=?)\\\",i={\\nkeyword:\\\"and then defined module in return redo if BEGIN retry end for self when next until do begin unless END rescue else break undef not super class case require yield alias while ensure elsif or include attr_reader attr_writer attr_accessor __FILE__\\\",\\nbuilt_in:\\\"proc lambda\\\",literal:\\\"true false nil\\\"},s={className:\\\"doctag\\\",\\nbegin:\\\"@[A-Za-z]+\\\"},b={begin:\\\"#<\\\",end:\\\">\\\"},r=[e.COMMENT(\\\"#\\\",\\\"$\\\",{contains:[s]\\n}),e.COMMENT(\\\"^=begin\\\",\\\"^=end\\\",{contains:[s],relevance:10\\n}),e.COMMENT(\\\"^__END__\\\",\\\"\\\\\\\\n$\\\")],c={className:\\\"subst\\\",begin:/#\\\\{/,end:/\\\\}/,\\nkeywords:i},t={className:\\\"string\\\",contains:[e.BACKSLASH_ESCAPE,c],variants:[{\\nbegin:/'/,end:/'/},{begin:/\\\"/,end:/\\\"/},{begin:/`/,end:/`/},{begin:/%[qQwWx]?\\\\(/,\\nend:/\\\\)/},{begin:/%[qQwWx]?\\\\[/,end:/\\\\]/},{begin:/%[qQwWx]?\\\\{/,end:/\\\\}/},{\\nbegin:/%[qQwWx]?</,end:/>/},{begin:/%[qQwWx]?\\\\//,end:/\\\\//},{begin:/%[qQwWx]?%/,\\nend:/%/},{begin:/%[qQwWx]?-/,end:/-/},{begin:/%[qQwWx]?\\\\|/,end:/\\\\|/},{\\nbegin:/\\\\B\\\\?(\\\\\\\\\\\\d{1,3})/},{begin:/\\\\B\\\\?(\\\\\\\\x[A-Fa-f0-9]{1,2})/},{\\nbegin:/\\\\B\\\\?(\\\\\\\\u\\\\{?[A-Fa-f0-9]{1,6}\\\\}?)/},{\\nbegin:/\\\\B\\\\?(\\\\\\\\M-\\\\\\\\C-|\\\\\\\\M-\\\\\\\\c|\\\\\\\\c\\\\\\\\M-|\\\\\\\\M-|\\\\\\\\C-\\\\\\\\M-)[\\\\x20-\\\\x7e]/},{\\nbegin:/\\\\B\\\\?\\\\\\\\(c|C-)[\\\\x20-\\\\x7e]/},{begin:/\\\\B\\\\?\\\\\\\\?\\\\S/},{\\nbegin:n.concat(/<<[-~]?'?/,n.lookahead(/(\\\\w+)(?=\\\\W)[^\\\\n]*\\\\n(?:[^\\\\n]*\\\\n)*?\\\\s*\\\\1\\\\b/)),\\ncontains:[e.END_SAME_AS_BEGIN({begin:/(\\\\w+)/,end:/(\\\\w+)/,\\ncontains:[e.BACKSLASH_ESCAPE,c]})]}]},d=\\\"[0-9](_?[0-9])*\\\",g={className:\\\"number\\\",\\nrelevance:0,variants:[{\\nbegin:`\\\\\\\\b([1-9](_?[0-9])*|0)(\\\\\\\\.(${d}))?([eE][+-]?(${d})|r)?i?\\\\\\\\b`},{\\nbegin:\\\"\\\\\\\\b0[dD][0-9](_?[0-9])*r?i?\\\\\\\\b\\\"},{begin:\\\"\\\\\\\\b0[bB][0-1](_?[0-1])*r?i?\\\\\\\\b\\\"\\n},{begin:\\\"\\\\\\\\b0[oO][0-7](_?[0-7])*r?i?\\\\\\\\b\\\"},{\\nbegin:\\\"\\\\\\\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*r?i?\\\\\\\\b\\\"},{\\nbegin:\\\"\\\\\\\\b0(_?[0-7])+r?i?\\\\\\\\b\\\"}]},l={className:\\\"params\\\",begin:\\\"\\\\\\\\(\\\",end:\\\"\\\\\\\\)\\\",\\nendsParent:!0,keywords:i},o=[t,{className:\\\"class\\\",beginKeywords:\\\"class module\\\",\\nend:\\\"$|;\\\",illegal:/=/,contains:[e.inherit(e.TITLE_MODE,{\\nbegin:\\\"[A-Za-z_]\\\\\\\\w*(::\\\\\\\\w+)*(\\\\\\\\?|!)?\\\"}),{begin:\\\"<\\\\\\\\s*\\\",contains:[{\\nbegin:\\\"(\\\"+e.IDENT_RE+\\\"::)?\\\"+e.IDENT_RE,relevance:0}]}].concat(r)},{\\nclassName:\\\"function\\\",begin:n.concat(/def\\\\s+/,n.lookahead(a+\\\"\\\\\\\\s*(\\\\\\\\(|;|$)\\\")),\\nrelevance:0,keywords:\\\"def\\\",end:\\\"$|;\\\",contains:[e.inherit(e.TITLE_MODE,{begin:a\\n}),l].concat(r)},{begin:e.IDENT_RE+\\\"::\\\"},{className:\\\"symbol\\\",\\nbegin:e.UNDERSCORE_IDENT_RE+\\\"(!|\\\\\\\\?)?:\\\",relevance:0},{className:\\\"symbol\\\",\\nbegin:\\\":(?!\\\\\\\\s)\\\",contains:[t,{begin:a}],relevance:0},g,{className:\\\"variable\\\",\\nbegin:\\\"(\\\\\\\\$\\\\\\\\W)|((\\\\\\\\$|@@?)(\\\\\\\\w+))(?=[^@$?])(?![A-Za-z])(?![@$?'])\\\"},{\\nclassName:\\\"params\\\",begin:/\\\\|/,end:/\\\\|/,relevance:0,keywords:i},{\\nbegin:\\\"(\\\"+e.RE_STARTERS_RE+\\\"|unless)\\\\\\\\s*\\\",keywords:\\\"unless\\\",contains:[{\\nclassName:\\\"regexp\\\",contains:[e.BACKSLASH_ESCAPE,c],illegal:/\\\\n/,variants:[{\\nbegin:\\\"/\\\",end:\\\"/[a-z]*\\\"},{begin:/%r\\\\{/,end:/\\\\}[a-z]*/},{begin:\\\"%r\\\\\\\\(\\\",\\nend:\\\"\\\\\\\\)[a-z]*\\\"},{begin:\\\"%r!\\\",end:\\\"![a-z]*\\\"},{begin:\\\"%r\\\\\\\\[\\\",end:\\\"\\\\\\\\][a-z]*\\\"}]\\n}].concat(b,r),relevance:0}].concat(b,r);c.contains=o,l.contains=o;const _=[{\\nbegin:/^\\\\s*=>/,starts:{end:\\\"$\\\",contains:o}},{className:\\\"meta\\\",\\nbegin:\\\"^([>?]>|[\\\\\\\\w#]+\\\\\\\\(\\\\\\\\w+\\\\\\\\):\\\\\\\\d+:\\\\\\\\d+>|(\\\\\\\\w+-)?\\\\\\\\d+\\\\\\\\.\\\\\\\\d+\\\\\\\\.\\\\\\\\d+(p\\\\\\\\d+)?[^\\\\\\\\d][^>]+>)(?=[ ])\\\",\\nstarts:{end:\\\"$\\\",contains:o}}];return r.unshift(b),{name:\\\"Ruby\\\",\\naliases:[\\\"rb\\\",\\\"gemspec\\\",\\\"podspec\\\",\\\"thor\\\",\\\"irb\\\"],keywords:i,illegal:/\\\\/\\\\*/,\\ncontains:[e.SHEBANG({binary:\\\"ruby\\\"})].concat(_).concat(r).concat(o)}}})()\\n;hljs.registerLanguage(\\\"ruby\\\",e)})();/*! `yaml` grammar compiled for Highlight.js 11.4.0 */\\n(()=>{var e=(()=>{\\\"use strict\\\";return e=>{\\nconst n=\\\"true false yes no null\\\",a=\\\"[\\\\\\\\w#;/?:@&=+$,.~*'()[\\\\\\\\]]+\\\",s={\\nclassName:\\\"string\\\",relevance:0,variants:[{begin:/'/,end:/'/},{begin:/\\\"/,end:/\\\"/\\n},{begin:/\\\\S+/}],contains:[e.BACKSLASH_ESCAPE,{className:\\\"template-variable\\\",\\nvariants:[{begin:/\\\\{\\\\{/,end:/\\\\}\\\\}/},{begin:/%\\\\{/,end:/\\\\}/}]}]},i=e.inherit(s,{\\nvariants:[{begin:/'/,end:/'/},{begin:/\\\"/,end:/\\\"/},{begin:/[^\\\\s,{}[\\\\]]+/}]}),l={\\nend:\\\",\\\",endsWithParent:!0,excludeEnd:!0,keywords:n,relevance:0},t={begin:/\\\\{/,\\nend:/\\\\}/,contains:[l],illegal:\\\"\\\\\\\\n\\\",relevance:0},g={begin:\\\"\\\\\\\\[\\\",end:\\\"\\\\\\\\]\\\",\\ncontains:[l],illegal:\\\"\\\\\\\\n\\\",relevance:0},b=[{className:\\\"attr\\\",variants:[{\\nbegin:\\\"\\\\\\\\w[\\\\\\\\w :\\\\\\\\/.-]*:(?=[ \\\\t]|$)\\\"},{begin:'\\\"\\\\\\\\w[\\\\\\\\w :\\\\\\\\/.-]*\\\":(?=[ \\\\t]|$)'},{\\nbegin:\\\"'\\\\\\\\w[\\\\\\\\w :\\\\\\\\/.-]*':(?=[ \\\\t]|$)\\\"}]},{className:\\\"meta\\\",begin:\\\"^---\\\\\\\\s*$\\\",\\nrelevance:10},{className:\\\"string\\\",\\nbegin:\\\"[\\\\\\\\|>]([1-9]?[+-])?[ ]*\\\\\\\\n( +)[^ ][^\\\\\\\\n]*\\\\\\\\n(\\\\\\\\2[^\\\\\\\\n]+\\\\\\\\n?)*\\\"},{\\nbegin:\\\"<%[%=-]?\\\",end:\\\"[%-]?%>\\\",subLanguage:\\\"ruby\\\",excludeBegin:!0,excludeEnd:!0,\\nrelevance:0},{className:\\\"type\\\",begin:\\\"!\\\\\\\\w+!\\\"+a},{className:\\\"type\\\",\\nbegin:\\\"!<\\\"+a+\\\">\\\"},{className:\\\"type\\\",begin:\\\"!\\\"+a},{className:\\\"type\\\",begin:\\\"!!\\\"+a\\n},{className:\\\"meta\\\",begin:\\\"&\\\"+e.UNDERSCORE_IDENT_RE+\\\"$\\\"},{className:\\\"meta\\\",\\nbegin:\\\"\\\\\\\\*\\\"+e.UNDERSCORE_IDENT_RE+\\\"$\\\"},{className:\\\"bullet\\\",begin:\\\"-(?=[ ]|$)\\\",\\nrelevance:0},e.HASH_COMMENT_MODE,{beginKeywords:n,keywords:{literal:n}},{\\nclassName:\\\"number\\\",\\nbegin:\\\"\\\\\\\\b[0-9]{4}(-[0-9][0-9]){0,2}([Tt \\\\\\\\t][0-9][0-9]?(:[0-9][0-9]){2})?(\\\\\\\\.[0-9]*)?([ \\\\\\\\t])*(Z|[-+][0-9][0-9]?(:[0-9][0-9])?)?\\\\\\\\b\\\"\\n},{className:\\\"number\\\",begin:e.C_NUMBER_RE+\\\"\\\\\\\\b\\\",relevance:0},t,g,s],r=[...b]\\n;return r.pop(),r.push(i),l.contains=r,{name:\\\"YAML\\\",case_insensitive:!0,\\naliases:[\\\"yml\\\"],contains:b}}})();hljs.registerLanguage(\\\"yaml\\\",e)})();/*! `php-template` grammar compiled for Highlight.js 11.4.0 */\\n(()=>{var n=(()=>{\\\"use strict\\\";return n=>({name:\\\"PHP template\\\",\\nsubLanguage:\\\"xml\\\",contains:[{begin:/<\\\\?(php|=)?/,end:/\\\\?>/,subLanguage:\\\"php\\\",\\ncontains:[{begin:\\\"/\\\\\\\\*\\\",end:\\\"\\\\\\\\*/\\\",skip:!0},{begin:'b\\\"',end:'\\\"',skip:!0},{\\nbegin:\\\"b'\\\",end:\\\"'\\\",skip:!0},n.inherit(n.APOS_STRING_MODE,{illegal:null,\\nclassName:null,contains:null,skip:!0}),n.inherit(n.QUOTE_STRING_MODE,{\\nillegal:null,className:null,contains:null,skip:!0})]}]})})()\\n;hljs.registerLanguage(\\\"php-template\\\",n)})();/*! `sql` grammar compiled for Highlight.js 11.4.0 */\\n(()=>{var e=(()=>{\\\"use strict\\\";return e=>{\\nconst r=e.regex,t=e.COMMENT(\\\"--\\\",\\\"$\\\"),n=[\\\"true\\\",\\\"false\\\",\\\"unknown\\\"],a=[\\\"bigint\\\",\\\"binary\\\",\\\"blob\\\",\\\"boolean\\\",\\\"char\\\",\\\"character\\\",\\\"clob\\\",\\\"date\\\",\\\"dec\\\",\\\"decfloat\\\",\\\"decimal\\\",\\\"float\\\",\\\"int\\\",\\\"integer\\\",\\\"interval\\\",\\\"nchar\\\",\\\"nclob\\\",\\\"national\\\",\\\"numeric\\\",\\\"real\\\",\\\"row\\\",\\\"smallint\\\",\\\"time\\\",\\\"timestamp\\\",\\\"varchar\\\",\\\"varying\\\",\\\"varbinary\\\"],i=[\\\"abs\\\",\\\"acos\\\",\\\"array_agg\\\",\\\"asin\\\",\\\"atan\\\",\\\"avg\\\",\\\"cast\\\",\\\"ceil\\\",\\\"ceiling\\\",\\\"coalesce\\\",\\\"corr\\\",\\\"cos\\\",\\\"cosh\\\",\\\"count\\\",\\\"covar_pop\\\",\\\"covar_samp\\\",\\\"cume_dist\\\",\\\"dense_rank\\\",\\\"deref\\\",\\\"element\\\",\\\"exp\\\",\\\"extract\\\",\\\"first_value\\\",\\\"floor\\\",\\\"json_array\\\",\\\"json_arrayagg\\\",\\\"json_exists\\\",\\\"json_object\\\",\\\"json_objectagg\\\",\\\"json_query\\\",\\\"json_table\\\",\\\"json_table_primitive\\\",\\\"json_value\\\",\\\"lag\\\",\\\"last_value\\\",\\\"lead\\\",\\\"listagg\\\",\\\"ln\\\",\\\"log\\\",\\\"log10\\\",\\\"lower\\\",\\\"max\\\",\\\"min\\\",\\\"mod\\\",\\\"nth_value\\\",\\\"ntile\\\",\\\"nullif\\\",\\\"percent_rank\\\",\\\"percentile_cont\\\",\\\"percentile_disc\\\",\\\"position\\\",\\\"position_regex\\\",\\\"power\\\",\\\"rank\\\",\\\"regr_avgx\\\",\\\"regr_avgy\\\",\\\"regr_count\\\",\\\"regr_intercept\\\",\\\"regr_r2\\\",\\\"regr_slope\\\",\\\"regr_sxx\\\",\\\"regr_sxy\\\",\\\"regr_syy\\\",\\\"row_number\\\",\\\"sin\\\",\\\"sinh\\\",\\\"sqrt\\\",\\\"stddev_pop\\\",\\\"stddev_samp\\\",\\\"substring\\\",\\\"substring_regex\\\",\\\"sum\\\",\\\"tan\\\",\\\"tanh\\\",\\\"translate\\\",\\\"translate_regex\\\",\\\"treat\\\",\\\"trim\\\",\\\"trim_array\\\",\\\"unnest\\\",\\\"upper\\\",\\\"value_of\\\",\\\"var_pop\\\",\\\"var_samp\\\",\\\"width_bucket\\\"],s=[\\\"create table\\\",\\\"insert into\\\",\\\"primary key\\\",\\\"foreign key\\\",\\\"not null\\\",\\\"alter table\\\",\\\"add constraint\\\",\\\"grouping sets\\\",\\\"on overflow\\\",\\\"character set\\\",\\\"respect nulls\\\",\\\"ignore nulls\\\",\\\"nulls first\\\",\\\"nulls last\\\",\\\"depth first\\\",\\\"breadth first\\\"],o=i,c=[\\\"abs\\\",\\\"acos\\\",\\\"all\\\",\\\"allocate\\\",\\\"alter\\\",\\\"and\\\",\\\"any\\\",\\\"are\\\",\\\"array\\\",\\\"array_agg\\\",\\\"array_max_cardinality\\\",\\\"as\\\",\\\"asensitive\\\",\\\"asin\\\",\\\"asymmetric\\\",\\\"at\\\",\\\"atan\\\",\\\"atomic\\\",\\\"authorization\\\",\\\"avg\\\",\\\"begin\\\",\\\"begin_frame\\\",\\\"begin_partition\\\",\\\"between\\\",\\\"bigint\\\",\\\"binary\\\",\\\"blob\\\",\\\"boolean\\\",\\\"both\\\",\\\"by\\\",\\\"call\\\",\\\"called\\\",\\\"cardinality\\\",\\\"cascaded\\\",\\\"case\\\",\\\"cast\\\",\\\"ceil\\\",\\\"ceiling\\\",\\\"char\\\",\\\"char_length\\\",\\\"character\\\",\\\"character_length\\\",\\\"check\\\",\\\"classifier\\\",\\\"clob\\\",\\\"close\\\",\\\"coalesce\\\",\\\"collate\\\",\\\"collect\\\",\\\"column\\\",\\\"commit\\\",\\\"condition\\\",\\\"connect\\\",\\\"constraint\\\",\\\"contains\\\",\\\"convert\\\",\\\"copy\\\",\\\"corr\\\",\\\"corresponding\\\",\\\"cos\\\",\\\"cosh\\\",\\\"count\\\",\\\"covar_pop\\\",\\\"covar_samp\\\",\\\"create\\\",\\\"cross\\\",\\\"cube\\\",\\\"cume_dist\\\",\\\"current\\\",\\\"current_catalog\\\",\\\"current_date\\\",\\\"current_default_transform_group\\\",\\\"current_path\\\",\\\"current_role\\\",\\\"current_row\\\",\\\"current_schema\\\",\\\"current_time\\\",\\\"current_timestamp\\\",\\\"current_path\\\",\\\"current_role\\\",\\\"current_transform_group_for_type\\\",\\\"current_user\\\",\\\"cursor\\\",\\\"cycle\\\",\\\"date\\\",\\\"day\\\",\\\"deallocate\\\",\\\"dec\\\",\\\"decimal\\\",\\\"decfloat\\\",\\\"declare\\\",\\\"default\\\",\\\"define\\\",\\\"delete\\\",\\\"dense_rank\\\",\\\"deref\\\",\\\"describe\\\",\\\"deterministic\\\",\\\"disconnect\\\",\\\"distinct\\\",\\\"double\\\",\\\"drop\\\",\\\"dynamic\\\",\\\"each\\\",\\\"element\\\",\\\"else\\\",\\\"empty\\\",\\\"end\\\",\\\"end_frame\\\",\\\"end_partition\\\",\\\"end-exec\\\",\\\"equals\\\",\\\"escape\\\",\\\"every\\\",\\\"except\\\",\\\"exec\\\",\\\"execute\\\",\\\"exists\\\",\\\"exp\\\",\\\"external\\\",\\\"extract\\\",\\\"false\\\",\\\"fetch\\\",\\\"filter\\\",\\\"first_value\\\",\\\"float\\\",\\\"floor\\\",\\\"for\\\",\\\"foreign\\\",\\\"frame_row\\\",\\\"free\\\",\\\"from\\\",\\\"full\\\",\\\"function\\\",\\\"fusion\\\",\\\"get\\\",\\\"global\\\",\\\"grant\\\",\\\"group\\\",\\\"grouping\\\",\\\"groups\\\",\\\"having\\\",\\\"hold\\\",\\\"hour\\\",\\\"identity\\\",\\\"in\\\",\\\"indicator\\\",\\\"initial\\\",\\\"inner\\\",\\\"inout\\\",\\\"insensitive\\\",\\\"insert\\\",\\\"int\\\",\\\"integer\\\",\\\"intersect\\\",\\\"intersection\\\",\\\"interval\\\",\\\"into\\\",\\\"is\\\",\\\"join\\\",\\\"json_array\\\",\\\"json_arrayagg\\\",\\\"json_exists\\\",\\\"json_object\\\",\\\"json_objectagg\\\",\\\"json_query\\\",\\\"json_table\\\",\\\"json_table_primitive\\\",\\\"json_value\\\",\\\"lag\\\",\\\"language\\\",\\\"large\\\",\\\"last_value\\\",\\\"lateral\\\",\\\"lead\\\",\\\"leading\\\",\\\"left\\\",\\\"like\\\",\\\"like_regex\\\",\\\"listagg\\\",\\\"ln\\\",\\\"local\\\",\\\"localtime\\\",\\\"localtimestamp\\\",\\\"log\\\",\\\"log10\\\",\\\"lower\\\",\\\"match\\\",\\\"match_number\\\",\\\"match_recognize\\\",\\\"matches\\\",\\\"max\\\",\\\"member\\\",\\\"merge\\\",\\\"method\\\",\\\"min\\\",\\\"minute\\\",\\\"mod\\\",\\\"modifies\\\",\\\"module\\\",\\\"month\\\",\\\"multiset\\\",\\\"national\\\",\\\"natural\\\",\\\"nchar\\\",\\\"nclob\\\",\\\"new\\\",\\\"no\\\",\\\"none\\\",\\\"normalize\\\",\\\"not\\\",\\\"nth_value\\\",\\\"ntile\\\",\\\"null\\\",\\\"nullif\\\",\\\"numeric\\\",\\\"octet_length\\\",\\\"occurrences_regex\\\",\\\"of\\\",\\\"offset\\\",\\\"old\\\",\\\"omit\\\",\\\"on\\\",\\\"one\\\",\\\"only\\\",\\\"open\\\",\\\"or\\\",\\\"order\\\",\\\"out\\\",\\\"outer\\\",\\\"over\\\",\\\"overlaps\\\",\\\"overlay\\\",\\\"parameter\\\",\\\"partition\\\",\\\"pattern\\\",\\\"per\\\",\\\"percent\\\",\\\"percent_rank\\\",\\\"percentile_cont\\\",\\\"percentile_disc\\\",\\\"period\\\",\\\"portion\\\",\\\"position\\\",\\\"position_regex\\\",\\\"power\\\",\\\"precedes\\\",\\\"precision\\\",\\\"prepare\\\",\\\"primary\\\",\\\"procedure\\\",\\\"ptf\\\",\\\"range\\\",\\\"rank\\\",\\\"reads\\\",\\\"real\\\",\\\"recursive\\\",\\\"ref\\\",\\\"references\\\",\\\"referencing\\\",\\\"regr_avgx\\\",\\\"regr_avgy\\\",\\\"regr_count\\\",\\\"regr_intercept\\\",\\\"regr_r2\\\",\\\"regr_slope\\\",\\\"regr_sxx\\\",\\\"regr_sxy\\\",\\\"regr_syy\\\",\\\"release\\\",\\\"result\\\",\\\"return\\\",\\\"returns\\\",\\\"revoke\\\",\\\"right\\\",\\\"rollback\\\",\\\"rollup\\\",\\\"row\\\",\\\"row_number\\\",\\\"rows\\\",\\\"running\\\",\\\"savepoint\\\",\\\"scope\\\",\\\"scroll\\\",\\\"search\\\",\\\"second\\\",\\\"seek\\\",\\\"select\\\",\\\"sensitive\\\",\\\"session_user\\\",\\\"set\\\",\\\"show\\\",\\\"similar\\\",\\\"sin\\\",\\\"sinh\\\",\\\"skip\\\",\\\"smallint\\\",\\\"some\\\",\\\"specific\\\",\\\"specifictype\\\",\\\"sql\\\",\\\"sqlexception\\\",\\\"sqlstate\\\",\\\"sqlwarning\\\",\\\"sqrt\\\",\\\"start\\\",\\\"static\\\",\\\"stddev_pop\\\",\\\"stddev_samp\\\",\\\"submultiset\\\",\\\"subset\\\",\\\"substring\\\",\\\"substring_regex\\\",\\\"succeeds\\\",\\\"sum\\\",\\\"symmetric\\\",\\\"system\\\",\\\"system_time\\\",\\\"system_user\\\",\\\"table\\\",\\\"tablesample\\\",\\\"tan\\\",\\\"tanh\\\",\\\"then\\\",\\\"time\\\",\\\"timestamp\\\",\\\"timezone_hour\\\",\\\"timezone_minute\\\",\\\"to\\\",\\\"trailing\\\",\\\"translate\\\",\\\"translate_regex\\\",\\\"translation\\\",\\\"treat\\\",\\\"trigger\\\",\\\"trim\\\",\\\"trim_array\\\",\\\"true\\\",\\\"truncate\\\",\\\"uescape\\\",\\\"union\\\",\\\"unique\\\",\\\"unknown\\\",\\\"unnest\\\",\\\"update\\\",\\\"upper\\\",\\\"user\\\",\\\"using\\\",\\\"value\\\",\\\"values\\\",\\\"value_of\\\",\\\"var_pop\\\",\\\"var_samp\\\",\\\"varbinary\\\",\\\"varchar\\\",\\\"varying\\\",\\\"versioning\\\",\\\"when\\\",\\\"whenever\\\",\\\"where\\\",\\\"width_bucket\\\",\\\"window\\\",\\\"with\\\",\\\"within\\\",\\\"without\\\",\\\"year\\\",\\\"add\\\",\\\"asc\\\",\\\"collation\\\",\\\"desc\\\",\\\"final\\\",\\\"first\\\",\\\"last\\\",\\\"view\\\"].filter((e=>!i.includes(e))),l={\\nbegin:r.concat(/\\\\b/,r.either(...o),/\\\\s*\\\\(/),relevance:0,keywords:{built_in:o}}\\n;return{name:\\\"SQL\\\",case_insensitive:!0,illegal:/[{}]|<\\\\//,keywords:{\\n$pattern:/\\\\b[\\\\w\\\\.]+/,keyword:((e,{exceptions:r,when:t}={})=>{const n=t\\n;return r=r||[],e.map((e=>e.match(/\\\\|\\\\d+$/)||r.includes(e)?e:n(e)?e+\\\"|0\\\":e))\\n})(c,{when:e=>e.length<3}),literal:n,type:a,\\nbuilt_in:[\\\"current_catalog\\\",\\\"current_date\\\",\\\"current_default_transform_group\\\",\\\"current_path\\\",\\\"current_role\\\",\\\"current_schema\\\",\\\"current_transform_group_for_type\\\",\\\"current_user\\\",\\\"session_user\\\",\\\"system_time\\\",\\\"system_user\\\",\\\"current_time\\\",\\\"localtime\\\",\\\"current_timestamp\\\",\\\"localtimestamp\\\"]\\n},contains:[{begin:r.either(...s),relevance:0,keywords:{$pattern:/[\\\\w\\\\.]+/,\\nkeyword:c.concat(s),literal:n,type:a}},{className:\\\"type\\\",\\nbegin:r.either(\\\"double precision\\\",\\\"large object\\\",\\\"with timezone\\\",\\\"without timezone\\\")\\n},l,{className:\\\"variable\\\",begin:/@[a-z0-9]+/},{className:\\\"string\\\",variants:[{\\nbegin:/'/,end:/'/,contains:[{begin:/''/}]}]},{begin:/\\\"/,end:/\\\"/,contains:[{\\nbegin:/\\\"\\\"/}]},e.C_NUMBER_MODE,e.C_BLOCK_COMMENT_MODE,t,{className:\\\"operator\\\",\\nbegin:/[-+*/=%^~]|&&?|\\\\|\\\\|?|!=?|<(?:=>?|<|>)?|>[>=]?/,relevance:0}]}}})()\\n;hljs.registerLanguage(\\\"sql\\\",e)})();/*! `objectivec` grammar compiled for Highlight.js 11.4.0 */\\n(()=>{var e=(()=>{\\\"use strict\\\";return e=>{const n=/[a-zA-Z@][a-zA-Z0-9_]*/,_={\\n$pattern:n,keyword:[\\\"@interface\\\",\\\"@class\\\",\\\"@protocol\\\",\\\"@implementation\\\"]}\\n;return{name:\\\"Objective-C\\\",\\naliases:[\\\"mm\\\",\\\"objc\\\",\\\"obj-c\\\",\\\"obj-c++\\\",\\\"objective-c++\\\"],keywords:{$pattern:n,\\nkeyword:[\\\"int\\\",\\\"float\\\",\\\"while\\\",\\\"char\\\",\\\"export\\\",\\\"sizeof\\\",\\\"typedef\\\",\\\"const\\\",\\\"struct\\\",\\\"for\\\",\\\"union\\\",\\\"unsigned\\\",\\\"long\\\",\\\"volatile\\\",\\\"static\\\",\\\"bool\\\",\\\"mutable\\\",\\\"if\\\",\\\"do\\\",\\\"return\\\",\\\"goto\\\",\\\"void\\\",\\\"enum\\\",\\\"else\\\",\\\"break\\\",\\\"extern\\\",\\\"asm\\\",\\\"case\\\",\\\"short\\\",\\\"default\\\",\\\"double\\\",\\\"register\\\",\\\"explicit\\\",\\\"signed\\\",\\\"typename\\\",\\\"this\\\",\\\"switch\\\",\\\"continue\\\",\\\"wchar_t\\\",\\\"inline\\\",\\\"readonly\\\",\\\"assign\\\",\\\"readwrite\\\",\\\"self\\\",\\\"@synchronized\\\",\\\"id\\\",\\\"typeof\\\",\\\"nonatomic\\\",\\\"super\\\",\\\"unichar\\\",\\\"IBOutlet\\\",\\\"IBAction\\\",\\\"strong\\\",\\\"weak\\\",\\\"copy\\\",\\\"in\\\",\\\"out\\\",\\\"inout\\\",\\\"bycopy\\\",\\\"byref\\\",\\\"oneway\\\",\\\"__strong\\\",\\\"__weak\\\",\\\"__block\\\",\\\"__autoreleasing\\\",\\\"@private\\\",\\\"@protected\\\",\\\"@public\\\",\\\"@try\\\",\\\"@property\\\",\\\"@end\\\",\\\"@throw\\\",\\\"@catch\\\",\\\"@finally\\\",\\\"@autoreleasepool\\\",\\\"@synthesize\\\",\\\"@dynamic\\\",\\\"@selector\\\",\\\"@optional\\\",\\\"@required\\\",\\\"@encode\\\",\\\"@package\\\",\\\"@import\\\",\\\"@defs\\\",\\\"@compatibility_alias\\\",\\\"__bridge\\\",\\\"__bridge_transfer\\\",\\\"__bridge_retained\\\",\\\"__bridge_retain\\\",\\\"__covariant\\\",\\\"__contravariant\\\",\\\"__kindof\\\",\\\"_Nonnull\\\",\\\"_Nullable\\\",\\\"_Null_unspecified\\\",\\\"__FUNCTION__\\\",\\\"__PRETTY_FUNCTION__\\\",\\\"__attribute__\\\",\\\"getter\\\",\\\"setter\\\",\\\"retain\\\",\\\"unsafe_unretained\\\",\\\"nonnull\\\",\\\"nullable\\\",\\\"null_unspecified\\\",\\\"null_resettable\\\",\\\"class\\\",\\\"instancetype\\\",\\\"NS_DESIGNATED_INITIALIZER\\\",\\\"NS_UNAVAILABLE\\\",\\\"NS_REQUIRES_SUPER\\\",\\\"NS_RETURNS_INNER_POINTER\\\",\\\"NS_INLINE\\\",\\\"NS_AVAILABLE\\\",\\\"NS_DEPRECATED\\\",\\\"NS_ENUM\\\",\\\"NS_OPTIONS\\\",\\\"NS_SWIFT_UNAVAILABLE\\\",\\\"NS_ASSUME_NONNULL_BEGIN\\\",\\\"NS_ASSUME_NONNULL_END\\\",\\\"NS_REFINED_FOR_SWIFT\\\",\\\"NS_SWIFT_NAME\\\",\\\"NS_SWIFT_NOTHROW\\\",\\\"NS_DURING\\\",\\\"NS_HANDLER\\\",\\\"NS_ENDHANDLER\\\",\\\"NS_VALUERETURN\\\",\\\"NS_VOIDRETURN\\\"],\\nliteral:[\\\"false\\\",\\\"true\\\",\\\"FALSE\\\",\\\"TRUE\\\",\\\"nil\\\",\\\"YES\\\",\\\"NO\\\",\\\"NULL\\\"],\\nbuilt_in:[\\\"BOOL\\\",\\\"dispatch_once_t\\\",\\\"dispatch_queue_t\\\",\\\"dispatch_sync\\\",\\\"dispatch_async\\\",\\\"dispatch_once\\\"]\\n},illegal:\\\"</\\\",contains:[{className:\\\"built_in\\\",\\nbegin:\\\"\\\\\\\\b(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)\\\\\\\\w+\\\"\\n},e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,e.C_NUMBER_MODE,e.QUOTE_STRING_MODE,e.APOS_STRING_MODE,{\\nclassName:\\\"string\\\",variants:[{begin:'@\\\"',end:'\\\"',illegal:\\\"\\\\\\\\n\\\",\\ncontains:[e.BACKSLASH_ESCAPE]}]},{className:\\\"meta\\\",begin:/#\\\\s*[a-z]+\\\\b/,end:/$/,\\nkeywords:{\\nkeyword:\\\"if else elif endif define undef warning error line pragma ifdef ifndef include\\\"\\n},contains:[{begin:/\\\\\\\\\\\\n/,relevance:0},e.inherit(e.QUOTE_STRING_MODE,{\\nclassName:\\\"string\\\"}),{className:\\\"string\\\",begin:/<.*?>/,end:/$/,illegal:\\\"\\\\\\\\n\\\"\\n},e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE]},{className:\\\"class\\\",\\nbegin:\\\"(\\\"+_.keyword.join(\\\"|\\\")+\\\")\\\\\\\\b\\\",end:/(\\\\{|$)/,excludeEnd:!0,keywords:_,\\ncontains:[e.UNDERSCORE_TITLE_MODE]},{begin:\\\"\\\\\\\\.\\\"+e.UNDERSCORE_IDENT_RE,\\nrelevance:0}]}}})();hljs.registerLanguage(\\\"objectivec\\\",e)})();/*! `cpp` grammar compiled for Highlight.js 11.4.0 */\\n(()=>{var e=(()=>{\\\"use strict\\\";return e=>{const t=e.regex,a=e.COMMENT(\\\"//\\\",\\\"$\\\",{\\ncontains:[{begin:/\\\\\\\\\\\\n/}]\\n}),n=\\\"[a-zA-Z_]\\\\\\\\w*::\\\",r=\\\"(?!struct)(decltype\\\\\\\\(auto\\\\\\\\)|\\\"+t.optional(n)+\\\"[a-zA-Z_]\\\\\\\\w*\\\"+t.optional(\\\"<[^<>]+>\\\")+\\\")\\\",i={\\nclassName:\\\"type\\\",begin:\\\"\\\\\\\\b[a-z\\\\\\\\d_]*_t\\\\\\\\b\\\"},s={className:\\\"string\\\",variants:[{\\nbegin:'(u8?|U|L)?\\\"',end:'\\\"',illegal:\\\"\\\\\\\\n\\\",contains:[e.BACKSLASH_ESCAPE]},{\\nbegin:\\\"(u8?|U|L)?'(\\\\\\\\\\\\\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\\\\\\\S)|.)\\\",\\nend:\\\"'\\\",illegal:\\\".\\\"},e.END_SAME_AS_BEGIN({\\nbegin:/(?:u8?|U|L)?R\\\"([^()\\\\\\\\ ]{0,16})\\\\(/,end:/\\\\)([^()\\\\\\\\ ]{0,16})\\\"/})]},c={\\nclassName:\\\"number\\\",variants:[{begin:\\\"\\\\\\\\b(0b[01']+)\\\"},{\\nbegin:\\\"(-?)\\\\\\\\b([\\\\\\\\d']+(\\\\\\\\.[\\\\\\\\d']*)?|\\\\\\\\.[\\\\\\\\d']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)\\\"\\n},{\\nbegin:\\\"(-?)(\\\\\\\\b0[xX][a-fA-F0-9']+|(\\\\\\\\b[\\\\\\\\d']+(\\\\\\\\.[\\\\\\\\d']*)?|\\\\\\\\.[\\\\\\\\d']+)([eE][-+]?[\\\\\\\\d']+)?)\\\"\\n}],relevance:0},o={className:\\\"meta\\\",begin:/#\\\\s*[a-z]+\\\\b/,end:/$/,keywords:{\\nkeyword:\\\"if else elif endif define undef warning error line pragma _Pragma ifdef ifndef include\\\"\\n},contains:[{begin:/\\\\\\\\\\\\n/,relevance:0},e.inherit(s,{className:\\\"string\\\"}),{\\nclassName:\\\"string\\\",begin:/<.*?>/},a,e.C_BLOCK_COMMENT_MODE]},l={\\nclassName:\\\"title\\\",begin:t.optional(n)+e.IDENT_RE,relevance:0\\n},d=t.optional(n)+e.IDENT_RE+\\\"\\\\\\\\s*\\\\\\\\(\\\",u={\\ntype:[\\\"bool\\\",\\\"char\\\",\\\"char16_t\\\",\\\"char32_t\\\",\\\"char8_t\\\",\\\"double\\\",\\\"float\\\",\\\"int\\\",\\\"long\\\",\\\"short\\\",\\\"void\\\",\\\"wchar_t\\\",\\\"unsigned\\\",\\\"signed\\\",\\\"const\\\",\\\"static\\\"],\\nkeyword:[\\\"alignas\\\",\\\"alignof\\\",\\\"and\\\",\\\"and_eq\\\",\\\"asm\\\",\\\"atomic_cancel\\\",\\\"atomic_commit\\\",\\\"atomic_noexcept\\\",\\\"auto\\\",\\\"bitand\\\",\\\"bitor\\\",\\\"break\\\",\\\"case\\\",\\\"catch\\\",\\\"class\\\",\\\"co_await\\\",\\\"co_return\\\",\\\"co_yield\\\",\\\"compl\\\",\\\"concept\\\",\\\"const_cast|10\\\",\\\"consteval\\\",\\\"constexpr\\\",\\\"constinit\\\",\\\"continue\\\",\\\"decltype\\\",\\\"default\\\",\\\"delete\\\",\\\"do\\\",\\\"dynamic_cast|10\\\",\\\"else\\\",\\\"enum\\\",\\\"explicit\\\",\\\"export\\\",\\\"extern\\\",\\\"false\\\",\\\"final\\\",\\\"for\\\",\\\"friend\\\",\\\"goto\\\",\\\"if\\\",\\\"import\\\",\\\"inline\\\",\\\"module\\\",\\\"mutable\\\",\\\"namespace\\\",\\\"new\\\",\\\"noexcept\\\",\\\"not\\\",\\\"not_eq\\\",\\\"nullptr\\\",\\\"operator\\\",\\\"or\\\",\\\"or_eq\\\",\\\"override\\\",\\\"private\\\",\\\"protected\\\",\\\"public\\\",\\\"reflexpr\\\",\\\"register\\\",\\\"reinterpret_cast|10\\\",\\\"requires\\\",\\\"return\\\",\\\"sizeof\\\",\\\"static_assert\\\",\\\"static_cast|10\\\",\\\"struct\\\",\\\"switch\\\",\\\"synchronized\\\",\\\"template\\\",\\\"this\\\",\\\"thread_local\\\",\\\"throw\\\",\\\"transaction_safe\\\",\\\"transaction_safe_dynamic\\\",\\\"true\\\",\\\"try\\\",\\\"typedef\\\",\\\"typeid\\\",\\\"typename\\\",\\\"union\\\",\\\"using\\\",\\\"virtual\\\",\\\"volatile\\\",\\\"while\\\",\\\"xor\\\",\\\"xor_eq\\\"],\\nliteral:[\\\"NULL\\\",\\\"false\\\",\\\"nullopt\\\",\\\"nullptr\\\",\\\"true\\\"],built_in:[\\\"_Pragma\\\"],\\n_type_hints:[\\\"any\\\",\\\"auto_ptr\\\",\\\"barrier\\\",\\\"binary_semaphore\\\",\\\"bitset\\\",\\\"complex\\\",\\\"condition_variable\\\",\\\"condition_variable_any\\\",\\\"counting_semaphore\\\",\\\"deque\\\",\\\"false_type\\\",\\\"future\\\",\\\"imaginary\\\",\\\"initializer_list\\\",\\\"istringstream\\\",\\\"jthread\\\",\\\"latch\\\",\\\"lock_guard\\\",\\\"multimap\\\",\\\"multiset\\\",\\\"mutex\\\",\\\"optional\\\",\\\"ostringstream\\\",\\\"packaged_task\\\",\\\"pair\\\",\\\"promise\\\",\\\"priority_queue\\\",\\\"queue\\\",\\\"recursive_mutex\\\",\\\"recursive_timed_mutex\\\",\\\"scoped_lock\\\",\\\"set\\\",\\\"shared_future\\\",\\\"shared_lock\\\",\\\"shared_mutex\\\",\\\"shared_timed_mutex\\\",\\\"shared_ptr\\\",\\\"stack\\\",\\\"string_view\\\",\\\"stringstream\\\",\\\"timed_mutex\\\",\\\"thread\\\",\\\"true_type\\\",\\\"tuple\\\",\\\"unique_lock\\\",\\\"unique_ptr\\\",\\\"unordered_map\\\",\\\"unordered_multimap\\\",\\\"unordered_multiset\\\",\\\"unordered_set\\\",\\\"variant\\\",\\\"vector\\\",\\\"weak_ptr\\\",\\\"wstring\\\",\\\"wstring_view\\\"]\\n},p={className:\\\"function.dispatch\\\",relevance:0,keywords:{\\n_hint:[\\\"abort\\\",\\\"abs\\\",\\\"acos\\\",\\\"apply\\\",\\\"as_const\\\",\\\"asin\\\",\\\"atan\\\",\\\"atan2\\\",\\\"calloc\\\",\\\"ceil\\\",\\\"cerr\\\",\\\"cin\\\",\\\"clog\\\",\\\"cos\\\",\\\"cosh\\\",\\\"cout\\\",\\\"declval\\\",\\\"endl\\\",\\\"exchange\\\",\\\"exit\\\",\\\"exp\\\",\\\"fabs\\\",\\\"floor\\\",\\\"fmod\\\",\\\"forward\\\",\\\"fprintf\\\",\\\"fputs\\\",\\\"free\\\",\\\"frexp\\\",\\\"fscanf\\\",\\\"future\\\",\\\"invoke\\\",\\\"isalnum\\\",\\\"isalpha\\\",\\\"iscntrl\\\",\\\"isdigit\\\",\\\"isgraph\\\",\\\"islower\\\",\\\"isprint\\\",\\\"ispunct\\\",\\\"isspace\\\",\\\"isupper\\\",\\\"isxdigit\\\",\\\"labs\\\",\\\"launder\\\",\\\"ldexp\\\",\\\"log\\\",\\\"log10\\\",\\\"make_pair\\\",\\\"make_shared\\\",\\\"make_shared_for_overwrite\\\",\\\"make_tuple\\\",\\\"make_unique\\\",\\\"malloc\\\",\\\"memchr\\\",\\\"memcmp\\\",\\\"memcpy\\\",\\\"memset\\\",\\\"modf\\\",\\\"move\\\",\\\"pow\\\",\\\"printf\\\",\\\"putchar\\\",\\\"puts\\\",\\\"realloc\\\",\\\"scanf\\\",\\\"sin\\\",\\\"sinh\\\",\\\"snprintf\\\",\\\"sprintf\\\",\\\"sqrt\\\",\\\"sscanf\\\",\\\"std\\\",\\\"stderr\\\",\\\"stdin\\\",\\\"stdout\\\",\\\"strcat\\\",\\\"strchr\\\",\\\"strcmp\\\",\\\"strcpy\\\",\\\"strcspn\\\",\\\"strlen\\\",\\\"strncat\\\",\\\"strncmp\\\",\\\"strncpy\\\",\\\"strpbrk\\\",\\\"strrchr\\\",\\\"strspn\\\",\\\"strstr\\\",\\\"swap\\\",\\\"tan\\\",\\\"tanh\\\",\\\"terminate\\\",\\\"to_underlying\\\",\\\"tolower\\\",\\\"toupper\\\",\\\"vfprintf\\\",\\\"visit\\\",\\\"vprintf\\\",\\\"vsprintf\\\"]\\n},\\nbegin:t.concat(/\\\\b/,/(?!decltype)/,/(?!if)/,/(?!for)/,/(?!switch)/,/(?!while)/,e.IDENT_RE,t.lookahead(/(<[^<>]+>|)\\\\s*\\\\(/))\\n},_=[p,o,i,a,e.C_BLOCK_COMMENT_MODE,c,s],m={variants:[{begin:/=/,end:/;/},{\\nbegin:/\\\\(/,end:/\\\\)/},{beginKeywords:\\\"new throw return else\\\",end:/;/}],\\nkeywords:u,contains:_.concat([{begin:/\\\\(/,end:/\\\\)/,keywords:u,\\ncontains:_.concat([\\\"self\\\"]),relevance:0}]),relevance:0},g={className:\\\"function\\\",\\nbegin:\\\"(\\\"+r+\\\"[\\\\\\\\*&\\\\\\\\s]+)+\\\"+d,returnBegin:!0,end:/[{;=]/,excludeEnd:!0,\\nkeywords:u,illegal:/[^\\\\w\\\\s\\\\*&:<>.]/,contains:[{begin:\\\"decltype\\\\\\\\(auto\\\\\\\\)\\\",\\nkeywords:u,relevance:0},{begin:d,returnBegin:!0,contains:[l],relevance:0},{\\nbegin:/::/,relevance:0},{begin:/:/,endsWithParent:!0,contains:[s,c]},{\\nrelevance:0,match:/,/},{className:\\\"params\\\",begin:/\\\\(/,end:/\\\\)/,keywords:u,\\nrelevance:0,contains:[a,e.C_BLOCK_COMMENT_MODE,s,c,i,{begin:/\\\\(/,end:/\\\\)/,\\nkeywords:u,relevance:0,contains:[\\\"self\\\",a,e.C_BLOCK_COMMENT_MODE,s,c,i]}]\\n},i,a,e.C_BLOCK_COMMENT_MODE,o]};return{name:\\\"C++\\\",\\naliases:[\\\"cc\\\",\\\"c++\\\",\\\"h++\\\",\\\"hpp\\\",\\\"hh\\\",\\\"hxx\\\",\\\"cxx\\\"],keywords:u,illegal:\\\"</\\\",\\nclassNameAliases:{\\\"function.dispatch\\\":\\\"built_in\\\"},\\ncontains:[].concat(m,g,p,_,[o,{\\nbegin:\\\"\\\\\\\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array|tuple|optional|variant|function)\\\\\\\\s*<(?!<)\\\",\\nend:\\\">\\\",keywords:u,contains:[\\\"self\\\",i]},{begin:e.IDENT_RE+\\\"::\\\",keywords:u},{\\nmatch:[/\\\\b(?:enum(?:\\\\s+(?:class|struct))?|class|struct|union)/,/\\\\s+/,/\\\\w+/],\\nclassName:{1:\\\"keyword\\\",3:\\\"title.class\\\"}}])}}})();hljs.registerLanguage(\\\"cpp\\\",e)\\n})();/*! `apache` grammar compiled for Highlight.js 11.4.0 */\\n(()=>{var e=(()=>{\\\"use strict\\\";return e=>{const n={className:\\\"number\\\",\\nbegin:/\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}(:\\\\d{1,5})?/};return{\\nname:\\\"Apache config\\\",aliases:[\\\"apacheconf\\\"],case_insensitive:!0,\\ncontains:[e.HASH_COMMENT_MODE,{className:\\\"section\\\",begin:/<\\\\/?/,end:/>/,\\ncontains:[n,{className:\\\"number\\\",begin:/:\\\\d{1,5}/\\n},e.inherit(e.QUOTE_STRING_MODE,{relevance:0})]},{className:\\\"attribute\\\",\\nbegin:/\\\\w+/,relevance:0,keywords:{\\n_:[\\\"order\\\",\\\"deny\\\",\\\"allow\\\",\\\"setenv\\\",\\\"rewriterule\\\",\\\"rewriteengine\\\",\\\"rewritecond\\\",\\\"documentroot\\\",\\\"sethandler\\\",\\\"errordocument\\\",\\\"loadmodule\\\",\\\"options\\\",\\\"header\\\",\\\"listen\\\",\\\"serverroot\\\",\\\"servername\\\"]\\n},starts:{end:/$/,relevance:0,keywords:{literal:\\\"on off all deny allow\\\"},\\ncontains:[{className:\\\"meta\\\",begin:/\\\\s\\\\[/,end:/\\\\]$/},{className:\\\"variable\\\",\\nbegin:/[\\\\$%]\\\\{/,end:/\\\\}/,contains:[\\\"self\\\",{className:\\\"number\\\",begin:/[$%]\\\\d+/}]\\n},n,{className:\\\"number\\\",begin:/\\\\b\\\\d+/},e.QUOTE_STRING_MODE]}}],illegal:/\\\\S/}}\\n})();hljs.registerLanguage(\\\"apache\\\",e)})();/*! `plaintext` grammar compiled for Highlight.js 11.4.0 */\\n(()=>{var t=(()=>{\\\"use strict\\\";return t=>({name:\\\"Plain text\\\",\\naliases:[\\\"text\\\",\\\"txt\\\"],disableAutodetect:!0})})()\\n;hljs.registerLanguage(\\\"plaintext\\\",t)})();/*! `shell` grammar compiled for Highlight.js 11.4.0 */\\n(()=>{var s=(()=>{\\\"use strict\\\";return s=>({name:\\\"Shell Session\\\",\\naliases:[\\\"console\\\",\\\"shellsession\\\"],contains:[{className:\\\"meta\\\",\\nbegin:/^\\\\s{0,3}[/~\\\\w\\\\d[\\\\]()@-]*[>%$#][ ]?/,starts:{end:/[^\\\\\\\\](?=\\\\s*$)/,\\nsubLanguage:\\\"bash\\\"}}]})})();hljs.registerLanguage(\\\"shell\\\",s)})();/*! `r` grammar compiled for Highlight.js 11.4.0 */\\n(()=>{var e=(()=>{\\\"use strict\\\";return e=>{\\nconst a=e.regex,n=/(?:(?:[a-zA-Z]|\\\\.[._a-zA-Z])[._a-zA-Z0-9]*)|\\\\.(?!\\\\d)/,i=a.either(/0[xX][0-9a-fA-F]+\\\\.[0-9a-fA-F]*[pP][+-]?\\\\d+i?/,/0[xX][0-9a-fA-F]+(?:[pP][+-]?\\\\d+)?[Li]?/,/(?:\\\\d+(?:\\\\.\\\\d*)?|\\\\.\\\\d+)(?:[eE][+-]?\\\\d+)?[Li]?/),s=/[=!<>:]=|\\\\|\\\\||&&|:::?|<-|<<-|->>|->|\\\\|>|[-+*\\\\/?!$&|:<=>@^~]|\\\\*\\\\*/,t=a.either(/[()]/,/[{}]/,/\\\\[\\\\[/,/[[\\\\]]/,/\\\\\\\\/,/,/)\\n;return{name:\\\"R\\\",keywords:{$pattern:n,\\nkeyword:\\\"function if in break next repeat else for while\\\",\\nliteral:\\\"NULL NA TRUE FALSE Inf NaN NA_integer_|10 NA_real_|10 NA_character_|10 NA_complex_|10\\\",\\nbuilt_in:\\\"LETTERS letters month.abb month.name pi T F abs acos acosh all any anyNA Arg as.call as.character as.complex as.double as.environment as.integer as.logical as.null.default as.numeric as.raw asin asinh atan atanh attr attributes baseenv browser c call ceiling class Conj cos cosh cospi cummax cummin cumprod cumsum digamma dim dimnames emptyenv exp expression floor forceAndCall gamma gc.time globalenv Im interactive invisible is.array is.atomic is.call is.character is.complex is.double is.environment is.expression is.finite is.function is.infinite is.integer is.language is.list is.logical is.matrix is.na is.name is.nan is.null is.numeric is.object is.pairlist is.raw is.recursive is.single is.symbol lazyLoadDBfetch length lgamma list log max min missing Mod names nargs nzchar oldClass on.exit pos.to.env proc.time prod quote range Re rep retracemem return round seq_along seq_len seq.int sign signif sin sinh sinpi sqrt standardGeneric substitute sum switch tan tanh tanpi tracemem trigamma trunc unclass untracemem UseMethod xtfrm\\\"\\n},contains:[e.COMMENT(/#'/,/$/,{contains:[{scope:\\\"doctag\\\",match:/@examples/,\\nstarts:{end:a.lookahead(a.either(/\\\\n^#'\\\\s*(?=@[a-zA-Z]+)/,/\\\\n^(?!#')/)),\\nendsParent:!0}},{scope:\\\"doctag\\\",begin:\\\"@param\\\",end:/$/,contains:[{\\nscope:\\\"variable\\\",variants:[{match:n},{match:/`(?:\\\\\\\\.|[^`\\\\\\\\])+`/}],endsParent:!0\\n}]},{scope:\\\"doctag\\\",match:/@[a-zA-Z]+/},{scope:\\\"keyword\\\",match:/\\\\\\\\[a-zA-Z]+/}]\\n}),e.HASH_COMMENT_MODE,{scope:\\\"string\\\",contains:[e.BACKSLASH_ESCAPE],\\nvariants:[e.END_SAME_AS_BEGIN({begin:/[rR]\\\"(-*)\\\\(/,end:/\\\\)(-*)\\\"/\\n}),e.END_SAME_AS_BEGIN({begin:/[rR]\\\"(-*)\\\\{/,end:/\\\\}(-*)\\\"/\\n}),e.END_SAME_AS_BEGIN({begin:/[rR]\\\"(-*)\\\\[/,end:/\\\\](-*)\\\"/\\n}),e.END_SAME_AS_BEGIN({begin:/[rR]'(-*)\\\\(/,end:/\\\\)(-*)'/\\n}),e.END_SAME_AS_BEGIN({begin:/[rR]'(-*)\\\\{/,end:/\\\\}(-*)'/\\n}),e.END_SAME_AS_BEGIN({begin:/[rR]'(-*)\\\\[/,end:/\\\\](-*)'/}),{begin:'\\\"',end:'\\\"',\\nrelevance:0},{begin:\\\"'\\\",end:\\\"'\\\",relevance:0}]},{relevance:0,variants:[{scope:{\\n1:\\\"operator\\\",2:\\\"number\\\"},match:[s,i]},{scope:{1:\\\"operator\\\",2:\\\"number\\\"},\\nmatch:[/%[^%]*%/,i]},{scope:{1:\\\"punctuation\\\",2:\\\"number\\\"},match:[t,i]},{scope:{\\n2:\\\"number\\\"},match:[/[^a-zA-Z0-9._]|^/,i]}]},{scope:{3:\\\"operator\\\"},\\nmatch:[n,/\\\\s+/,/<-/,/\\\\s+/]},{scope:\\\"operator\\\",relevance:0,variants:[{match:s},{\\nmatch:/%[^%]*%/}]},{scope:\\\"punctuation\\\",relevance:0,match:t},{begin:\\\"`\\\",end:\\\"`\\\",\\ncontains:[{begin:/\\\\\\\\./}]}]}}})();hljs.registerLanguage(\\\"r\\\",e)})();/*! `ini` grammar compiled for Highlight.js 11.4.0 */\\n(()=>{var e=(()=>{\\\"use strict\\\";return e=>{const n=e.regex,a={className:\\\"number\\\",\\nrelevance:0,variants:[{begin:/([+-]+)?[\\\\d]+_[\\\\d_]+/},{begin:e.NUMBER_RE}]\\n},s=e.COMMENT();s.variants=[{begin:/;/,end:/$/},{begin:/#/,end:/$/}];const i={\\nclassName:\\\"variable\\\",variants:[{begin:/\\\\$[\\\\w\\\\d\\\"][\\\\w\\\\d_]*/},{begin:/\\\\$\\\\{(.*?)\\\\}/\\n}]},t={className:\\\"literal\\\",begin:/\\\\bon|off|true|false|yes|no\\\\b/},r={\\nclassName:\\\"string\\\",contains:[e.BACKSLASH_ESCAPE],variants:[{begin:\\\"'''\\\",\\nend:\\\"'''\\\",relevance:10},{begin:'\\\"\\\"\\\"',end:'\\\"\\\"\\\"',relevance:10},{begin:'\\\"',end:'\\\"'\\n},{begin:\\\"'\\\",end:\\\"'\\\"}]},l={begin:/\\\\[/,end:/\\\\]/,contains:[s,t,i,r,a,\\\"self\\\"],\\nrelevance:0},c=n.either(/[A-Za-z0-9_-]+/,/\\\"(\\\\\\\\\\\"|[^\\\"])*\\\"/,/'[^']*'/);return{\\nname:\\\"TOML, also INI\\\",aliases:[\\\"toml\\\"],case_insensitive:!0,illegal:/\\\\S/,\\ncontains:[s,{className:\\\"section\\\",begin:/\\\\[+/,end:/\\\\]+/},{\\nbegin:n.concat(c,\\\"(\\\\\\\\s*\\\\\\\\.\\\\\\\\s*\\\",c,\\\")*\\\",n.lookahead(/\\\\s*=\\\\s*[^#\\\\s]/)),\\nclassName:\\\"attr\\\",starts:{end:/$/,contains:[s,l,t,i,r,a]}}]}}})()\\n;hljs.registerLanguage(\\\"ini\\\",e)})();/*! `less` grammar compiled for Highlight.js 11.4.0 */\\n(()=>{var e=(()=>{\\\"use strict\\\"\\n;const e=[\\\"a\\\",\\\"abbr\\\",\\\"address\\\",\\\"article\\\",\\\"aside\\\",\\\"audio\\\",\\\"b\\\",\\\"blockquote\\\",\\\"body\\\",\\\"button\\\",\\\"canvas\\\",\\\"caption\\\",\\\"cite\\\",\\\"code\\\",\\\"dd\\\",\\\"del\\\",\\\"details\\\",\\\"dfn\\\",\\\"div\\\",\\\"dl\\\",\\\"dt\\\",\\\"em\\\",\\\"fieldset\\\",\\\"figcaption\\\",\\\"figure\\\",\\\"footer\\\",\\\"form\\\",\\\"h1\\\",\\\"h2\\\",\\\"h3\\\",\\\"h4\\\",\\\"h5\\\",\\\"h6\\\",\\\"header\\\",\\\"hgroup\\\",\\\"html\\\",\\\"i\\\",\\\"iframe\\\",\\\"img\\\",\\\"input\\\",\\\"ins\\\",\\\"kbd\\\",\\\"label\\\",\\\"legend\\\",\\\"li\\\",\\\"main\\\",\\\"mark\\\",\\\"menu\\\",\\\"nav\\\",\\\"object\\\",\\\"ol\\\",\\\"p\\\",\\\"q\\\",\\\"quote\\\",\\\"samp\\\",\\\"section\\\",\\\"span\\\",\\\"strong\\\",\\\"summary\\\",\\\"sup\\\",\\\"table\\\",\\\"tbody\\\",\\\"td\\\",\\\"textarea\\\",\\\"tfoot\\\",\\\"th\\\",\\\"thead\\\",\\\"time\\\",\\\"tr\\\",\\\"ul\\\",\\\"var\\\",\\\"video\\\"],t=[\\\"any-hover\\\",\\\"any-pointer\\\",\\\"aspect-ratio\\\",\\\"color\\\",\\\"color-gamut\\\",\\\"color-index\\\",\\\"device-aspect-ratio\\\",\\\"device-height\\\",\\\"device-width\\\",\\\"display-mode\\\",\\\"forced-colors\\\",\\\"grid\\\",\\\"height\\\",\\\"hover\\\",\\\"inverted-colors\\\",\\\"monochrome\\\",\\\"orientation\\\",\\\"overflow-block\\\",\\\"overflow-inline\\\",\\\"pointer\\\",\\\"prefers-color-scheme\\\",\\\"prefers-contrast\\\",\\\"prefers-reduced-motion\\\",\\\"prefers-reduced-transparency\\\",\\\"resolution\\\",\\\"scan\\\",\\\"scripting\\\",\\\"update\\\",\\\"width\\\",\\\"min-width\\\",\\\"max-width\\\",\\\"min-height\\\",\\\"max-height\\\"],i=[\\\"active\\\",\\\"any-link\\\",\\\"blank\\\",\\\"checked\\\",\\\"current\\\",\\\"default\\\",\\\"defined\\\",\\\"dir\\\",\\\"disabled\\\",\\\"drop\\\",\\\"empty\\\",\\\"enabled\\\",\\\"first\\\",\\\"first-child\\\",\\\"first-of-type\\\",\\\"fullscreen\\\",\\\"future\\\",\\\"focus\\\",\\\"focus-visible\\\",\\\"focus-within\\\",\\\"has\\\",\\\"host\\\",\\\"host-context\\\",\\\"hover\\\",\\\"indeterminate\\\",\\\"in-range\\\",\\\"invalid\\\",\\\"is\\\",\\\"lang\\\",\\\"last-child\\\",\\\"last-of-type\\\",\\\"left\\\",\\\"link\\\",\\\"local-link\\\",\\\"not\\\",\\\"nth-child\\\",\\\"nth-col\\\",\\\"nth-last-child\\\",\\\"nth-last-col\\\",\\\"nth-last-of-type\\\",\\\"nth-of-type\\\",\\\"only-child\\\",\\\"only-of-type\\\",\\\"optional\\\",\\\"out-of-range\\\",\\\"past\\\",\\\"placeholder-shown\\\",\\\"read-only\\\",\\\"read-write\\\",\\\"required\\\",\\\"right\\\",\\\"root\\\",\\\"scope\\\",\\\"target\\\",\\\"target-within\\\",\\\"user-invalid\\\",\\\"valid\\\",\\\"visited\\\",\\\"where\\\"],r=[\\\"after\\\",\\\"backdrop\\\",\\\"before\\\",\\\"cue\\\",\\\"cue-region\\\",\\\"first-letter\\\",\\\"first-line\\\",\\\"grammar-error\\\",\\\"marker\\\",\\\"part\\\",\\\"placeholder\\\",\\\"selection\\\",\\\"slotted\\\",\\\"spelling-error\\\"],o=[\\\"align-content\\\",\\\"align-items\\\",\\\"align-self\\\",\\\"all\\\",\\\"animation\\\",\\\"animation-delay\\\",\\\"animation-direction\\\",\\\"animation-duration\\\",\\\"animation-fill-mode\\\",\\\"animation-iteration-count\\\",\\\"animation-name\\\",\\\"animation-play-state\\\",\\\"animation-timing-function\\\",\\\"backface-visibility\\\",\\\"background\\\",\\\"background-attachment\\\",\\\"background-clip\\\",\\\"background-color\\\",\\\"background-image\\\",\\\"background-origin\\\",\\\"background-position\\\",\\\"background-repeat\\\",\\\"background-size\\\",\\\"border\\\",\\\"border-bottom\\\",\\\"border-bottom-color\\\",\\\"border-bottom-left-radius\\\",\\\"border-bottom-right-radius\\\",\\\"border-bottom-style\\\",\\\"border-bottom-width\\\",\\\"border-collapse\\\",\\\"border-color\\\",\\\"border-image\\\",\\\"border-image-outset\\\",\\\"border-image-repeat\\\",\\\"border-image-slice\\\",\\\"border-image-source\\\",\\\"border-image-width\\\",\\\"border-left\\\",\\\"border-left-color\\\",\\\"border-left-style\\\",\\\"border-left-width\\\",\\\"border-radius\\\",\\\"border-right\\\",\\\"border-right-color\\\",\\\"border-right-style\\\",\\\"border-right-width\\\",\\\"border-spacing\\\",\\\"border-style\\\",\\\"border-top\\\",\\\"border-top-color\\\",\\\"border-top-left-radius\\\",\\\"border-top-right-radius\\\",\\\"border-top-style\\\",\\\"border-top-width\\\",\\\"border-width\\\",\\\"bottom\\\",\\\"box-decoration-break\\\",\\\"box-shadow\\\",\\\"box-sizing\\\",\\\"break-after\\\",\\\"break-before\\\",\\\"break-inside\\\",\\\"caption-side\\\",\\\"caret-color\\\",\\\"clear\\\",\\\"clip\\\",\\\"clip-path\\\",\\\"clip-rule\\\",\\\"color\\\",\\\"column-count\\\",\\\"column-fill\\\",\\\"column-gap\\\",\\\"column-rule\\\",\\\"column-rule-color\\\",\\\"column-rule-style\\\",\\\"column-rule-width\\\",\\\"column-span\\\",\\\"column-width\\\",\\\"columns\\\",\\\"contain\\\",\\\"content\\\",\\\"content-visibility\\\",\\\"counter-increment\\\",\\\"counter-reset\\\",\\\"cue\\\",\\\"cue-after\\\",\\\"cue-before\\\",\\\"cursor\\\",\\\"direction\\\",\\\"display\\\",\\\"empty-cells\\\",\\\"filter\\\",\\\"flex\\\",\\\"flex-basis\\\",\\\"flex-direction\\\",\\\"flex-flow\\\",\\\"flex-grow\\\",\\\"flex-shrink\\\",\\\"flex-wrap\\\",\\\"float\\\",\\\"flow\\\",\\\"font\\\",\\\"font-display\\\",\\\"font-family\\\",\\\"font-feature-settings\\\",\\\"font-kerning\\\",\\\"font-language-override\\\",\\\"font-size\\\",\\\"font-size-adjust\\\",\\\"font-smoothing\\\",\\\"font-stretch\\\",\\\"font-style\\\",\\\"font-synthesis\\\",\\\"font-variant\\\",\\\"font-variant-caps\\\",\\\"font-variant-east-asian\\\",\\\"font-variant-ligatures\\\",\\\"font-variant-numeric\\\",\\\"font-variant-position\\\",\\\"font-variation-settings\\\",\\\"font-weight\\\",\\\"gap\\\",\\\"glyph-orientation-vertical\\\",\\\"grid\\\",\\\"grid-area\\\",\\\"grid-auto-columns\\\",\\\"grid-auto-flow\\\",\\\"grid-auto-rows\\\",\\\"grid-column\\\",\\\"grid-column-end\\\",\\\"grid-column-start\\\",\\\"grid-gap\\\",\\\"grid-row\\\",\\\"grid-row-end\\\",\\\"grid-row-start\\\",\\\"grid-template\\\",\\\"grid-template-areas\\\",\\\"grid-template-columns\\\",\\\"grid-template-rows\\\",\\\"hanging-punctuation\\\",\\\"height\\\",\\\"hyphens\\\",\\\"icon\\\",\\\"image-orientation\\\",\\\"image-rendering\\\",\\\"image-resolution\\\",\\\"ime-mode\\\",\\\"isolation\\\",\\\"justify-content\\\",\\\"left\\\",\\\"letter-spacing\\\",\\\"line-break\\\",\\\"line-height\\\",\\\"list-style\\\",\\\"list-style-image\\\",\\\"list-style-position\\\",\\\"list-style-type\\\",\\\"margin\\\",\\\"margin-bottom\\\",\\\"margin-left\\\",\\\"margin-right\\\",\\\"margin-top\\\",\\\"marks\\\",\\\"mask\\\",\\\"mask-border\\\",\\\"mask-border-mode\\\",\\\"mask-border-outset\\\",\\\"mask-border-repeat\\\",\\\"mask-border-slice\\\",\\\"mask-border-source\\\",\\\"mask-border-width\\\",\\\"mask-clip\\\",\\\"mask-composite\\\",\\\"mask-image\\\",\\\"mask-mode\\\",\\\"mask-origin\\\",\\\"mask-position\\\",\\\"mask-repeat\\\",\\\"mask-size\\\",\\\"mask-type\\\",\\\"max-height\\\",\\\"max-width\\\",\\\"min-height\\\",\\\"min-width\\\",\\\"mix-blend-mode\\\",\\\"nav-down\\\",\\\"nav-index\\\",\\\"nav-left\\\",\\\"nav-right\\\",\\\"nav-up\\\",\\\"none\\\",\\\"normal\\\",\\\"object-fit\\\",\\\"object-position\\\",\\\"opacity\\\",\\\"order\\\",\\\"orphans\\\",\\\"outline\\\",\\\"outline-color\\\",\\\"outline-offset\\\",\\\"outline-style\\\",\\\"outline-width\\\",\\\"overflow\\\",\\\"overflow-wrap\\\",\\\"overflow-x\\\",\\\"overflow-y\\\",\\\"padding\\\",\\\"padding-bottom\\\",\\\"padding-left\\\",\\\"padding-right\\\",\\\"padding-top\\\",\\\"page-break-after\\\",\\\"page-break-before\\\",\\\"page-break-inside\\\",\\\"pause\\\",\\\"pause-after\\\",\\\"pause-before\\\",\\\"perspective\\\",\\\"perspective-origin\\\",\\\"pointer-events\\\",\\\"position\\\",\\\"quotes\\\",\\\"resize\\\",\\\"rest\\\",\\\"rest-after\\\",\\\"rest-before\\\",\\\"right\\\",\\\"row-gap\\\",\\\"scroll-margin\\\",\\\"scroll-margin-block\\\",\\\"scroll-margin-block-end\\\",\\\"scroll-margin-block-start\\\",\\\"scroll-margin-bottom\\\",\\\"scroll-margin-inline\\\",\\\"scroll-margin-inline-end\\\",\\\"scroll-margin-inline-start\\\",\\\"scroll-margin-left\\\",\\\"scroll-margin-right\\\",\\\"scroll-margin-top\\\",\\\"scroll-padding\\\",\\\"scroll-padding-block\\\",\\\"scroll-padding-block-end\\\",\\\"scroll-padding-block-start\\\",\\\"scroll-padding-bottom\\\",\\\"scroll-padding-inline\\\",\\\"scroll-padding-inline-end\\\",\\\"scroll-padding-inline-start\\\",\\\"scroll-padding-left\\\",\\\"scroll-padding-right\\\",\\\"scroll-padding-top\\\",\\\"scroll-snap-align\\\",\\\"scroll-snap-stop\\\",\\\"scroll-snap-type\\\",\\\"shape-image-threshold\\\",\\\"shape-margin\\\",\\\"shape-outside\\\",\\\"speak\\\",\\\"speak-as\\\",\\\"src\\\",\\\"tab-size\\\",\\\"table-layout\\\",\\\"text-align\\\",\\\"text-align-all\\\",\\\"text-align-last\\\",\\\"text-combine-upright\\\",\\\"text-decoration\\\",\\\"text-decoration-color\\\",\\\"text-decoration-line\\\",\\\"text-decoration-style\\\",\\\"text-emphasis\\\",\\\"text-emphasis-color\\\",\\\"text-emphasis-position\\\",\\\"text-emphasis-style\\\",\\\"text-indent\\\",\\\"text-justify\\\",\\\"text-orientation\\\",\\\"text-overflow\\\",\\\"text-rendering\\\",\\\"text-shadow\\\",\\\"text-transform\\\",\\\"text-underline-position\\\",\\\"top\\\",\\\"transform\\\",\\\"transform-box\\\",\\\"transform-origin\\\",\\\"transform-style\\\",\\\"transition\\\",\\\"transition-delay\\\",\\\"transition-duration\\\",\\\"transition-property\\\",\\\"transition-timing-function\\\",\\\"unicode-bidi\\\",\\\"vertical-align\\\",\\\"visibility\\\",\\\"voice-balance\\\",\\\"voice-duration\\\",\\\"voice-family\\\",\\\"voice-pitch\\\",\\\"voice-range\\\",\\\"voice-rate\\\",\\\"voice-stress\\\",\\\"voice-volume\\\",\\\"white-space\\\",\\\"widows\\\",\\\"width\\\",\\\"will-change\\\",\\\"word-break\\\",\\\"word-spacing\\\",\\\"word-wrap\\\",\\\"writing-mode\\\",\\\"z-index\\\"].reverse(),n=i.concat(r)\\n;return a=>{const s=(e=>({IMPORTANT:{scope:\\\"meta\\\",begin:\\\"!important\\\"},\\nBLOCK_COMMENT:e.C_BLOCK_COMMENT_MODE,HEXCOLOR:{scope:\\\"number\\\",\\nbegin:/#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\\\\b/},FUNCTION_DISPATCH:{\\nclassName:\\\"built_in\\\",begin:/[\\\\w-]+(?=\\\\()/},ATTRIBUTE_SELECTOR_MODE:{\\nscope:\\\"selector-attr\\\",begin:/\\\\[/,end:/\\\\]/,illegal:\\\"$\\\",\\ncontains:[e.APOS_STRING_MODE,e.QUOTE_STRING_MODE]},CSS_NUMBER_MODE:{\\nscope:\\\"number\\\",\\nbegin:e.NUMBER_RE+\\\"(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?\\\",\\nrelevance:0},CSS_VARIABLE:{className:\\\"attr\\\",begin:/--[A-Za-z][A-Za-z0-9_-]*/}\\n}))(a),l=n,d=\\\"([\\\\\\\\w-]+|@\\\\\\\\{[\\\\\\\\w-]+\\\\\\\\})\\\",c=[],g=[],m=e=>({className:\\\"string\\\",\\nbegin:\\\"~?\\\"+e+\\\".*?\\\"+e}),p=(e,t,i)=>({className:e,begin:t,relevance:i}),b={\\n$pattern:/[a-z-]+/,keyword:\\\"and or not only\\\",attribute:t.join(\\\" \\\")},u={\\nbegin:\\\"\\\\\\\\(\\\",end:\\\"\\\\\\\\)\\\",contains:g,keywords:b,relevance:0}\\n;g.push(a.C_LINE_COMMENT_MODE,a.C_BLOCK_COMMENT_MODE,m(\\\"'\\\"),m('\\\"'),s.CSS_NUMBER_MODE,{\\nbegin:\\\"(url|data-uri)\\\\\\\\(\\\",starts:{className:\\\"string\\\",end:\\\"[\\\\\\\\)\\\\\\\\n]\\\",\\nexcludeEnd:!0}\\n},s.HEXCOLOR,u,p(\\\"variable\\\",\\\"@@?[\\\\\\\\w-]+\\\",10),p(\\\"variable\\\",\\\"@\\\\\\\\{[\\\\\\\\w-]+\\\\\\\\}\\\"),p(\\\"built_in\\\",\\\"~?`[^`]*?`\\\"),{\\nclassName:\\\"attribute\\\",begin:\\\"[\\\\\\\\w-]+\\\\\\\\s*:\\\",end:\\\":\\\",returnBegin:!0,excludeEnd:!0\\n},s.IMPORTANT);const h=g.concat({begin:/\\\\{/,end:/\\\\}/,contains:c}),f={\\nbeginKeywords:\\\"when\\\",endsWithParent:!0,contains:[{beginKeywords:\\\"and not\\\"\\n}].concat(g)},v={begin:d+\\\"\\\\\\\\s*:\\\",returnBegin:!0,end:/[;}]/,relevance:0,\\ncontains:[{begin:/-(webkit|moz|ms|o)-/},s.CSS_VARIABLE,{className:\\\"attribute\\\",\\nbegin:\\\"\\\\\\\\b(\\\"+o.join(\\\"|\\\")+\\\")\\\\\\\\b\\\",end:/(?=:)/,starts:{endsWithParent:!0,\\nillegal:\\\"[<=$]\\\",relevance:0,contains:g}}]},w={className:\\\"keyword\\\",\\nbegin:\\\"@(import|media|charset|font-face|(-[a-z]+-)?keyframes|supports|document|namespace|page|viewport|host)\\\\\\\\b\\\",\\nstarts:{end:\\\"[;{}]\\\",keywords:b,returnEnd:!0,contains:g,relevance:0}},k={\\nclassName:\\\"variable\\\",variants:[{begin:\\\"@[\\\\\\\\w-]+\\\\\\\\s*:\\\",relevance:15},{\\nbegin:\\\"@[\\\\\\\\w-]+\\\"}],starts:{end:\\\"[;}]\\\",returnEnd:!0,contains:h}},y={variants:[{\\nbegin:\\\"[\\\\\\\\.#:&\\\\\\\\[>]\\\",end:\\\"[;{}]\\\"},{begin:d,end:/\\\\{/}],returnBegin:!0,\\nreturnEnd:!0,illegal:\\\"[<='$\\\\\\\"]\\\",relevance:0,\\ncontains:[a.C_LINE_COMMENT_MODE,a.C_BLOCK_COMMENT_MODE,f,p(\\\"keyword\\\",\\\"all\\\\\\\\b\\\"),p(\\\"variable\\\",\\\"@\\\\\\\\{[\\\\\\\\w-]+\\\\\\\\}\\\"),{\\nbegin:\\\"\\\\\\\\b(\\\"+e.join(\\\"|\\\")+\\\")\\\\\\\\b\\\",className:\\\"selector-tag\\\"\\n},s.CSS_NUMBER_MODE,p(\\\"selector-tag\\\",d,0),p(\\\"selector-id\\\",\\\"#\\\"+d),p(\\\"selector-class\\\",\\\"\\\\\\\\.\\\"+d,0),p(\\\"selector-tag\\\",\\\"&\\\",0),s.ATTRIBUTE_SELECTOR_MODE,{\\nclassName:\\\"selector-pseudo\\\",begin:\\\":(\\\"+i.join(\\\"|\\\")+\\\")\\\"},{\\nclassName:\\\"selector-pseudo\\\",begin:\\\":(:)?(\\\"+r.join(\\\"|\\\")+\\\")\\\"},{begin:/\\\\(/,\\nend:/\\\\)/,relevance:0,contains:h},{begin:\\\"!important\\\"},s.FUNCTION_DISPATCH]},x={\\nbegin:`[\\\\\\\\w-]+:(:)?(${l.join(\\\"|\\\")})`,returnBegin:!0,contains:[y]}\\n;return c.push(a.C_LINE_COMMENT_MODE,a.C_BLOCK_COMMENT_MODE,w,k,x,v,y),{\\nname:\\\"Less\\\",case_insensitive:!0,illegal:\\\"[=>'/<($\\\\\\\"]\\\",contains:c}}})()\\n;hljs.registerLanguage(\\\"less\\\",e)})();/*! `fortran` grammar compiled for Highlight.js 11.4.0 */\\n(()=>{var e=(()=>{\\\"use strict\\\";return e=>{const n=e.regex,a={\\nvariants:[e.COMMENT(\\\"!\\\",\\\"$\\\",{relevance:0}),e.COMMENT(\\\"^C[ ]\\\",\\\"$\\\",{relevance:0\\n}),e.COMMENT(\\\"^C$\\\",\\\"$\\\",{relevance:0})]\\n},t=/(_[a-z_\\\\d]+)?/,i=/([de][+-]?\\\\d+)?/,c={className:\\\"number\\\",variants:[{\\nbegin:n.concat(/\\\\b\\\\d+/,/\\\\.(\\\\d*)/,i,t)},{begin:n.concat(/\\\\b\\\\d+/,i,t)},{\\nbegin:n.concat(/\\\\.\\\\d+/,i,t)}],relevance:0},o={className:\\\"function\\\",\\nbeginKeywords:\\\"subroutine function program\\\",illegal:\\\"[${=\\\\\\\\n]\\\",\\ncontains:[e.UNDERSCORE_TITLE_MODE,{className:\\\"params\\\",begin:\\\"\\\\\\\\(\\\",end:\\\"\\\\\\\\)\\\"}]}\\n;return{name:\\\"Fortran\\\",case_insensitive:!0,aliases:[\\\"f90\\\",\\\"f95\\\"],keywords:{\\nkeyword:[\\\"kind\\\",\\\"do\\\",\\\"concurrent\\\",\\\"local\\\",\\\"shared\\\",\\\"while\\\",\\\"private\\\",\\\"call\\\",\\\"intrinsic\\\",\\\"where\\\",\\\"elsewhere\\\",\\\"type\\\",\\\"endtype\\\",\\\"endmodule\\\",\\\"endselect\\\",\\\"endinterface\\\",\\\"end\\\",\\\"enddo\\\",\\\"endif\\\",\\\"if\\\",\\\"forall\\\",\\\"endforall\\\",\\\"only\\\",\\\"contains\\\",\\\"default\\\",\\\"return\\\",\\\"stop\\\",\\\"then\\\",\\\"block\\\",\\\"endblock\\\",\\\"endassociate\\\",\\\"public\\\",\\\"subroutine|10\\\",\\\"function\\\",\\\"program\\\",\\\".and.\\\",\\\".or.\\\",\\\".not.\\\",\\\".le.\\\",\\\".eq.\\\",\\\".ge.\\\",\\\".gt.\\\",\\\".lt.\\\",\\\"goto\\\",\\\"save\\\",\\\"else\\\",\\\"use\\\",\\\"module\\\",\\\"select\\\",\\\"case\\\",\\\"access\\\",\\\"blank\\\",\\\"direct\\\",\\\"exist\\\",\\\"file\\\",\\\"fmt\\\",\\\"form\\\",\\\"formatted\\\",\\\"iostat\\\",\\\"name\\\",\\\"named\\\",\\\"nextrec\\\",\\\"number\\\",\\\"opened\\\",\\\"rec\\\",\\\"recl\\\",\\\"sequential\\\",\\\"status\\\",\\\"unformatted\\\",\\\"unit\\\",\\\"continue\\\",\\\"format\\\",\\\"pause\\\",\\\"cycle\\\",\\\"exit\\\",\\\"c_null_char\\\",\\\"c_alert\\\",\\\"c_backspace\\\",\\\"c_form_feed\\\",\\\"flush\\\",\\\"wait\\\",\\\"decimal\\\",\\\"round\\\",\\\"iomsg\\\",\\\"synchronous\\\",\\\"nopass\\\",\\\"non_overridable\\\",\\\"pass\\\",\\\"protected\\\",\\\"volatile\\\",\\\"abstract\\\",\\\"extends\\\",\\\"import\\\",\\\"non_intrinsic\\\",\\\"value\\\",\\\"deferred\\\",\\\"generic\\\",\\\"final\\\",\\\"enumerator\\\",\\\"class\\\",\\\"associate\\\",\\\"bind\\\",\\\"enum\\\",\\\"c_int\\\",\\\"c_short\\\",\\\"c_long\\\",\\\"c_long_long\\\",\\\"c_signed_char\\\",\\\"c_size_t\\\",\\\"c_int8_t\\\",\\\"c_int16_t\\\",\\\"c_int32_t\\\",\\\"c_int64_t\\\",\\\"c_int_least8_t\\\",\\\"c_int_least16_t\\\",\\\"c_int_least32_t\\\",\\\"c_int_least64_t\\\",\\\"c_int_fast8_t\\\",\\\"c_int_fast16_t\\\",\\\"c_int_fast32_t\\\",\\\"c_int_fast64_t\\\",\\\"c_intmax_t\\\",\\\"C_intptr_t\\\",\\\"c_float\\\",\\\"c_double\\\",\\\"c_long_double\\\",\\\"c_float_complex\\\",\\\"c_double_complex\\\",\\\"c_long_double_complex\\\",\\\"c_bool\\\",\\\"c_char\\\",\\\"c_null_ptr\\\",\\\"c_null_funptr\\\",\\\"c_new_line\\\",\\\"c_carriage_return\\\",\\\"c_horizontal_tab\\\",\\\"c_vertical_tab\\\",\\\"iso_c_binding\\\",\\\"c_loc\\\",\\\"c_funloc\\\",\\\"c_associated\\\",\\\"c_f_pointer\\\",\\\"c_ptr\\\",\\\"c_funptr\\\",\\\"iso_fortran_env\\\",\\\"character_storage_size\\\",\\\"error_unit\\\",\\\"file_storage_size\\\",\\\"input_unit\\\",\\\"iostat_end\\\",\\\"iostat_eor\\\",\\\"numeric_storage_size\\\",\\\"output_unit\\\",\\\"c_f_procpointer\\\",\\\"ieee_arithmetic\\\",\\\"ieee_support_underflow_control\\\",\\\"ieee_get_underflow_mode\\\",\\\"ieee_set_underflow_mode\\\",\\\"newunit\\\",\\\"contiguous\\\",\\\"recursive\\\",\\\"pad\\\",\\\"position\\\",\\\"action\\\",\\\"delim\\\",\\\"readwrite\\\",\\\"eor\\\",\\\"advance\\\",\\\"nml\\\",\\\"interface\\\",\\\"procedure\\\",\\\"namelist\\\",\\\"include\\\",\\\"sequence\\\",\\\"elemental\\\",\\\"pure\\\",\\\"impure\\\",\\\"integer\\\",\\\"real\\\",\\\"character\\\",\\\"complex\\\",\\\"logical\\\",\\\"codimension\\\",\\\"dimension\\\",\\\"allocatable|10\\\",\\\"parameter\\\",\\\"external\\\",\\\"implicit|10\\\",\\\"none\\\",\\\"double\\\",\\\"precision\\\",\\\"assign\\\",\\\"intent\\\",\\\"optional\\\",\\\"pointer\\\",\\\"target\\\",\\\"in\\\",\\\"out\\\",\\\"common\\\",\\\"equivalence\\\",\\\"data\\\"],\\nliteral:[\\\".False.\\\",\\\".True.\\\"],\\nbuilt_in:[\\\"alog\\\",\\\"alog10\\\",\\\"amax0\\\",\\\"amax1\\\",\\\"amin0\\\",\\\"amin1\\\",\\\"amod\\\",\\\"cabs\\\",\\\"ccos\\\",\\\"cexp\\\",\\\"clog\\\",\\\"csin\\\",\\\"csqrt\\\",\\\"dabs\\\",\\\"dacos\\\",\\\"dasin\\\",\\\"datan\\\",\\\"datan2\\\",\\\"dcos\\\",\\\"dcosh\\\",\\\"ddim\\\",\\\"dexp\\\",\\\"dint\\\",\\\"dlog\\\",\\\"dlog10\\\",\\\"dmax1\\\",\\\"dmin1\\\",\\\"dmod\\\",\\\"dnint\\\",\\\"dsign\\\",\\\"dsin\\\",\\\"dsinh\\\",\\\"dsqrt\\\",\\\"dtan\\\",\\\"dtanh\\\",\\\"float\\\",\\\"iabs\\\",\\\"idim\\\",\\\"idint\\\",\\\"idnint\\\",\\\"ifix\\\",\\\"isign\\\",\\\"max0\\\",\\\"max1\\\",\\\"min0\\\",\\\"min1\\\",\\\"sngl\\\",\\\"algama\\\",\\\"cdabs\\\",\\\"cdcos\\\",\\\"cdexp\\\",\\\"cdlog\\\",\\\"cdsin\\\",\\\"cdsqrt\\\",\\\"cqabs\\\",\\\"cqcos\\\",\\\"cqexp\\\",\\\"cqlog\\\",\\\"cqsin\\\",\\\"cqsqrt\\\",\\\"dcmplx\\\",\\\"dconjg\\\",\\\"derf\\\",\\\"derfc\\\",\\\"dfloat\\\",\\\"dgamma\\\",\\\"dimag\\\",\\\"dlgama\\\",\\\"iqint\\\",\\\"qabs\\\",\\\"qacos\\\",\\\"qasin\\\",\\\"qatan\\\",\\\"qatan2\\\",\\\"qcmplx\\\",\\\"qconjg\\\",\\\"qcos\\\",\\\"qcosh\\\",\\\"qdim\\\",\\\"qerf\\\",\\\"qerfc\\\",\\\"qexp\\\",\\\"qgamma\\\",\\\"qimag\\\",\\\"qlgama\\\",\\\"qlog\\\",\\\"qlog10\\\",\\\"qmax1\\\",\\\"qmin1\\\",\\\"qmod\\\",\\\"qnint\\\",\\\"qsign\\\",\\\"qsin\\\",\\\"qsinh\\\",\\\"qsqrt\\\",\\\"qtan\\\",\\\"qtanh\\\",\\\"abs\\\",\\\"acos\\\",\\\"aimag\\\",\\\"aint\\\",\\\"anint\\\",\\\"asin\\\",\\\"atan\\\",\\\"atan2\\\",\\\"char\\\",\\\"cmplx\\\",\\\"conjg\\\",\\\"cos\\\",\\\"cosh\\\",\\\"exp\\\",\\\"ichar\\\",\\\"index\\\",\\\"int\\\",\\\"log\\\",\\\"log10\\\",\\\"max\\\",\\\"min\\\",\\\"nint\\\",\\\"sign\\\",\\\"sin\\\",\\\"sinh\\\",\\\"sqrt\\\",\\\"tan\\\",\\\"tanh\\\",\\\"print\\\",\\\"write\\\",\\\"dim\\\",\\\"lge\\\",\\\"lgt\\\",\\\"lle\\\",\\\"llt\\\",\\\"mod\\\",\\\"nullify\\\",\\\"allocate\\\",\\\"deallocate\\\",\\\"adjustl\\\",\\\"adjustr\\\",\\\"all\\\",\\\"allocated\\\",\\\"any\\\",\\\"associated\\\",\\\"bit_size\\\",\\\"btest\\\",\\\"ceiling\\\",\\\"count\\\",\\\"cshift\\\",\\\"date_and_time\\\",\\\"digits\\\",\\\"dot_product\\\",\\\"eoshift\\\",\\\"epsilon\\\",\\\"exponent\\\",\\\"floor\\\",\\\"fraction\\\",\\\"huge\\\",\\\"iand\\\",\\\"ibclr\\\",\\\"ibits\\\",\\\"ibset\\\",\\\"ieor\\\",\\\"ior\\\",\\\"ishft\\\",\\\"ishftc\\\",\\\"lbound\\\",\\\"len_trim\\\",\\\"matmul\\\",\\\"maxexponent\\\",\\\"maxloc\\\",\\\"maxval\\\",\\\"merge\\\",\\\"minexponent\\\",\\\"minloc\\\",\\\"minval\\\",\\\"modulo\\\",\\\"mvbits\\\",\\\"nearest\\\",\\\"pack\\\",\\\"present\\\",\\\"product\\\",\\\"radix\\\",\\\"random_number\\\",\\\"random_seed\\\",\\\"range\\\",\\\"repeat\\\",\\\"reshape\\\",\\\"rrspacing\\\",\\\"scale\\\",\\\"scan\\\",\\\"selected_int_kind\\\",\\\"selected_real_kind\\\",\\\"set_exponent\\\",\\\"shape\\\",\\\"size\\\",\\\"spacing\\\",\\\"spread\\\",\\\"sum\\\",\\\"system_clock\\\",\\\"tiny\\\",\\\"transpose\\\",\\\"trim\\\",\\\"ubound\\\",\\\"unpack\\\",\\\"verify\\\",\\\"achar\\\",\\\"iachar\\\",\\\"transfer\\\",\\\"dble\\\",\\\"entry\\\",\\\"dprod\\\",\\\"cpu_time\\\",\\\"command_argument_count\\\",\\\"get_command\\\",\\\"get_command_argument\\\",\\\"get_environment_variable\\\",\\\"is_iostat_end\\\",\\\"ieee_arithmetic\\\",\\\"ieee_support_underflow_control\\\",\\\"ieee_get_underflow_mode\\\",\\\"ieee_set_underflow_mode\\\",\\\"is_iostat_eor\\\",\\\"move_alloc\\\",\\\"new_line\\\",\\\"selected_char_kind\\\",\\\"same_type_as\\\",\\\"extends_type_of\\\",\\\"acosh\\\",\\\"asinh\\\",\\\"atanh\\\",\\\"bessel_j0\\\",\\\"bessel_j1\\\",\\\"bessel_jn\\\",\\\"bessel_y0\\\",\\\"bessel_y1\\\",\\\"bessel_yn\\\",\\\"erf\\\",\\\"erfc\\\",\\\"erfc_scaled\\\",\\\"gamma\\\",\\\"log_gamma\\\",\\\"hypot\\\",\\\"norm2\\\",\\\"atomic_define\\\",\\\"atomic_ref\\\",\\\"execute_command_line\\\",\\\"leadz\\\",\\\"trailz\\\",\\\"storage_size\\\",\\\"merge_bits\\\",\\\"bge\\\",\\\"bgt\\\",\\\"ble\\\",\\\"blt\\\",\\\"dshiftl\\\",\\\"dshiftr\\\",\\\"findloc\\\",\\\"iall\\\",\\\"iany\\\",\\\"iparity\\\",\\\"image_index\\\",\\\"lcobound\\\",\\\"ucobound\\\",\\\"maskl\\\",\\\"maskr\\\",\\\"num_images\\\",\\\"parity\\\",\\\"popcnt\\\",\\\"poppar\\\",\\\"shifta\\\",\\\"shiftl\\\",\\\"shiftr\\\",\\\"this_image\\\",\\\"sync\\\",\\\"change\\\",\\\"team\\\",\\\"co_broadcast\\\",\\\"co_max\\\",\\\"co_min\\\",\\\"co_sum\\\",\\\"co_reduce\\\"]\\n},illegal:/\\\\/\\\\*/,contains:[{className:\\\"string\\\",relevance:0,\\nvariants:[e.APOS_STRING_MODE,e.QUOTE_STRING_MODE]},o,{begin:/^C\\\\s*=(?!=)/,\\nrelevance:0},a,c]}}})();hljs.registerLanguage(\\\"fortran\\\",e)})();/*! `css` grammar compiled for Highlight.js 11.4.0 */\\n(()=>{var e=(()=>{\\\"use strict\\\"\\n;const e=[\\\"a\\\",\\\"abbr\\\",\\\"address\\\",\\\"article\\\",\\\"aside\\\",\\\"audio\\\",\\\"b\\\",\\\"blockquote\\\",\\\"body\\\",\\\"button\\\",\\\"canvas\\\",\\\"caption\\\",\\\"cite\\\",\\\"code\\\",\\\"dd\\\",\\\"del\\\",\\\"details\\\",\\\"dfn\\\",\\\"div\\\",\\\"dl\\\",\\\"dt\\\",\\\"em\\\",\\\"fieldset\\\",\\\"figcaption\\\",\\\"figure\\\",\\\"footer\\\",\\\"form\\\",\\\"h1\\\",\\\"h2\\\",\\\"h3\\\",\\\"h4\\\",\\\"h5\\\",\\\"h6\\\",\\\"header\\\",\\\"hgroup\\\",\\\"html\\\",\\\"i\\\",\\\"iframe\\\",\\\"img\\\",\\\"input\\\",\\\"ins\\\",\\\"kbd\\\",\\\"label\\\",\\\"legend\\\",\\\"li\\\",\\\"main\\\",\\\"mark\\\",\\\"menu\\\",\\\"nav\\\",\\\"object\\\",\\\"ol\\\",\\\"p\\\",\\\"q\\\",\\\"quote\\\",\\\"samp\\\",\\\"section\\\",\\\"span\\\",\\\"strong\\\",\\\"summary\\\",\\\"sup\\\",\\\"table\\\",\\\"tbody\\\",\\\"td\\\",\\\"textarea\\\",\\\"tfoot\\\",\\\"th\\\",\\\"thead\\\",\\\"time\\\",\\\"tr\\\",\\\"ul\\\",\\\"var\\\",\\\"video\\\"],t=[\\\"any-hover\\\",\\\"any-pointer\\\",\\\"aspect-ratio\\\",\\\"color\\\",\\\"color-gamut\\\",\\\"color-index\\\",\\\"device-aspect-ratio\\\",\\\"device-height\\\",\\\"device-width\\\",\\\"display-mode\\\",\\\"forced-colors\\\",\\\"grid\\\",\\\"height\\\",\\\"hover\\\",\\\"inverted-colors\\\",\\\"monochrome\\\",\\\"orientation\\\",\\\"overflow-block\\\",\\\"overflow-inline\\\",\\\"pointer\\\",\\\"prefers-color-scheme\\\",\\\"prefers-contrast\\\",\\\"prefers-reduced-motion\\\",\\\"prefers-reduced-transparency\\\",\\\"resolution\\\",\\\"scan\\\",\\\"scripting\\\",\\\"update\\\",\\\"width\\\",\\\"min-width\\\",\\\"max-width\\\",\\\"min-height\\\",\\\"max-height\\\"],i=[\\\"active\\\",\\\"any-link\\\",\\\"blank\\\",\\\"checked\\\",\\\"current\\\",\\\"default\\\",\\\"defined\\\",\\\"dir\\\",\\\"disabled\\\",\\\"drop\\\",\\\"empty\\\",\\\"enabled\\\",\\\"first\\\",\\\"first-child\\\",\\\"first-of-type\\\",\\\"fullscreen\\\",\\\"future\\\",\\\"focus\\\",\\\"focus-visible\\\",\\\"focus-within\\\",\\\"has\\\",\\\"host\\\",\\\"host-context\\\",\\\"hover\\\",\\\"indeterminate\\\",\\\"in-range\\\",\\\"invalid\\\",\\\"is\\\",\\\"lang\\\",\\\"last-child\\\",\\\"last-of-type\\\",\\\"left\\\",\\\"link\\\",\\\"local-link\\\",\\\"not\\\",\\\"nth-child\\\",\\\"nth-col\\\",\\\"nth-last-child\\\",\\\"nth-last-col\\\",\\\"nth-last-of-type\\\",\\\"nth-of-type\\\",\\\"only-child\\\",\\\"only-of-type\\\",\\\"optional\\\",\\\"out-of-range\\\",\\\"past\\\",\\\"placeholder-shown\\\",\\\"read-only\\\",\\\"read-write\\\",\\\"required\\\",\\\"right\\\",\\\"root\\\",\\\"scope\\\",\\\"target\\\",\\\"target-within\\\",\\\"user-invalid\\\",\\\"valid\\\",\\\"visited\\\",\\\"where\\\"],o=[\\\"after\\\",\\\"backdrop\\\",\\\"before\\\",\\\"cue\\\",\\\"cue-region\\\",\\\"first-letter\\\",\\\"first-line\\\",\\\"grammar-error\\\",\\\"marker\\\",\\\"part\\\",\\\"placeholder\\\",\\\"selection\\\",\\\"slotted\\\",\\\"spelling-error\\\"],r=[\\\"align-content\\\",\\\"align-items\\\",\\\"align-self\\\",\\\"all\\\",\\\"animation\\\",\\\"animation-delay\\\",\\\"animation-direction\\\",\\\"animation-duration\\\",\\\"animation-fill-mode\\\",\\\"animation-iteration-count\\\",\\\"animation-name\\\",\\\"animation-play-state\\\",\\\"animation-timing-function\\\",\\\"backface-visibility\\\",\\\"background\\\",\\\"background-attachment\\\",\\\"background-clip\\\",\\\"background-color\\\",\\\"background-image\\\",\\\"background-origin\\\",\\\"background-position\\\",\\\"background-repeat\\\",\\\"background-size\\\",\\\"border\\\",\\\"border-bottom\\\",\\\"border-bottom-color\\\",\\\"border-bottom-left-radius\\\",\\\"border-bottom-right-radius\\\",\\\"border-bottom-style\\\",\\\"border-bottom-width\\\",\\\"border-collapse\\\",\\\"border-color\\\",\\\"border-image\\\",\\\"border-image-outset\\\",\\\"border-image-repeat\\\",\\\"border-image-slice\\\",\\\"border-image-source\\\",\\\"border-image-width\\\",\\\"border-left\\\",\\\"border-left-color\\\",\\\"border-left-style\\\",\\\"border-left-width\\\",\\\"border-radius\\\",\\\"border-right\\\",\\\"border-right-color\\\",\\\"border-right-style\\\",\\\"border-right-width\\\",\\\"border-spacing\\\",\\\"border-style\\\",\\\"border-top\\\",\\\"border-top-color\\\",\\\"border-top-left-radius\\\",\\\"border-top-right-radius\\\",\\\"border-top-style\\\",\\\"border-top-width\\\",\\\"border-width\\\",\\\"bottom\\\",\\\"box-decoration-break\\\",\\\"box-shadow\\\",\\\"box-sizing\\\",\\\"break-after\\\",\\\"break-before\\\",\\\"break-inside\\\",\\\"caption-side\\\",\\\"caret-color\\\",\\\"clear\\\",\\\"clip\\\",\\\"clip-path\\\",\\\"clip-rule\\\",\\\"color\\\",\\\"column-count\\\",\\\"column-fill\\\",\\\"column-gap\\\",\\\"column-rule\\\",\\\"column-rule-color\\\",\\\"column-rule-style\\\",\\\"column-rule-width\\\",\\\"column-span\\\",\\\"column-width\\\",\\\"columns\\\",\\\"contain\\\",\\\"content\\\",\\\"content-visibility\\\",\\\"counter-increment\\\",\\\"counter-reset\\\",\\\"cue\\\",\\\"cue-after\\\",\\\"cue-before\\\",\\\"cursor\\\",\\\"direction\\\",\\\"display\\\",\\\"empty-cells\\\",\\\"filter\\\",\\\"flex\\\",\\\"flex-basis\\\",\\\"flex-direction\\\",\\\"flex-flow\\\",\\\"flex-grow\\\",\\\"flex-shrink\\\",\\\"flex-wrap\\\",\\\"float\\\",\\\"flow\\\",\\\"font\\\",\\\"font-display\\\",\\\"font-family\\\",\\\"font-feature-settings\\\",\\\"font-kerning\\\",\\\"font-language-override\\\",\\\"font-size\\\",\\\"font-size-adjust\\\",\\\"font-smoothing\\\",\\\"font-stretch\\\",\\\"font-style\\\",\\\"font-synthesis\\\",\\\"font-variant\\\",\\\"font-variant-caps\\\",\\\"font-variant-east-asian\\\",\\\"font-variant-ligatures\\\",\\\"font-variant-numeric\\\",\\\"font-variant-position\\\",\\\"font-variation-settings\\\",\\\"font-weight\\\",\\\"gap\\\",\\\"glyph-orientation-vertical\\\",\\\"grid\\\",\\\"grid-area\\\",\\\"grid-auto-columns\\\",\\\"grid-auto-flow\\\",\\\"grid-auto-rows\\\",\\\"grid-column\\\",\\\"grid-column-end\\\",\\\"grid-column-start\\\",\\\"grid-gap\\\",\\\"grid-row\\\",\\\"grid-row-end\\\",\\\"grid-row-start\\\",\\\"grid-template\\\",\\\"grid-template-areas\\\",\\\"grid-template-columns\\\",\\\"grid-template-rows\\\",\\\"hanging-punctuation\\\",\\\"height\\\",\\\"hyphens\\\",\\\"icon\\\",\\\"image-orientation\\\",\\\"image-rendering\\\",\\\"image-resolution\\\",\\\"ime-mode\\\",\\\"isolation\\\",\\\"justify-content\\\",\\\"left\\\",\\\"letter-spacing\\\",\\\"line-break\\\",\\\"line-height\\\",\\\"list-style\\\",\\\"list-style-image\\\",\\\"list-style-position\\\",\\\"list-style-type\\\",\\\"margin\\\",\\\"margin-bottom\\\",\\\"margin-left\\\",\\\"margin-right\\\",\\\"margin-top\\\",\\\"marks\\\",\\\"mask\\\",\\\"mask-border\\\",\\\"mask-border-mode\\\",\\\"mask-border-outset\\\",\\\"mask-border-repeat\\\",\\\"mask-border-slice\\\",\\\"mask-border-source\\\",\\\"mask-border-width\\\",\\\"mask-clip\\\",\\\"mask-composite\\\",\\\"mask-image\\\",\\\"mask-mode\\\",\\\"mask-origin\\\",\\\"mask-position\\\",\\\"mask-repeat\\\",\\\"mask-size\\\",\\\"mask-type\\\",\\\"max-height\\\",\\\"max-width\\\",\\\"min-height\\\",\\\"min-width\\\",\\\"mix-blend-mode\\\",\\\"nav-down\\\",\\\"nav-index\\\",\\\"nav-left\\\",\\\"nav-right\\\",\\\"nav-up\\\",\\\"none\\\",\\\"normal\\\",\\\"object-fit\\\",\\\"object-position\\\",\\\"opacity\\\",\\\"order\\\",\\\"orphans\\\",\\\"outline\\\",\\\"outline-color\\\",\\\"outline-offset\\\",\\\"outline-style\\\",\\\"outline-width\\\",\\\"overflow\\\",\\\"overflow-wrap\\\",\\\"overflow-x\\\",\\\"overflow-y\\\",\\\"padding\\\",\\\"padding-bottom\\\",\\\"padding-left\\\",\\\"padding-right\\\",\\\"padding-top\\\",\\\"page-break-after\\\",\\\"page-break-before\\\",\\\"page-break-inside\\\",\\\"pause\\\",\\\"pause-after\\\",\\\"pause-before\\\",\\\"perspective\\\",\\\"perspective-origin\\\",\\\"pointer-events\\\",\\\"position\\\",\\\"quotes\\\",\\\"resize\\\",\\\"rest\\\",\\\"rest-after\\\",\\\"rest-before\\\",\\\"right\\\",\\\"row-gap\\\",\\\"scroll-margin\\\",\\\"scroll-margin-block\\\",\\\"scroll-margin-block-end\\\",\\\"scroll-margin-block-start\\\",\\\"scroll-margin-bottom\\\",\\\"scroll-margin-inline\\\",\\\"scroll-margin-inline-end\\\",\\\"scroll-margin-inline-start\\\",\\\"scroll-margin-left\\\",\\\"scroll-margin-right\\\",\\\"scroll-margin-top\\\",\\\"scroll-padding\\\",\\\"scroll-padding-block\\\",\\\"scroll-padding-block-end\\\",\\\"scroll-padding-block-start\\\",\\\"scroll-padding-bottom\\\",\\\"scroll-padding-inline\\\",\\\"scroll-padding-inline-end\\\",\\\"scroll-padding-inline-start\\\",\\\"scroll-padding-left\\\",\\\"scroll-padding-right\\\",\\\"scroll-padding-top\\\",\\\"scroll-snap-align\\\",\\\"scroll-snap-stop\\\",\\\"scroll-snap-type\\\",\\\"shape-image-threshold\\\",\\\"shape-margin\\\",\\\"shape-outside\\\",\\\"speak\\\",\\\"speak-as\\\",\\\"src\\\",\\\"tab-size\\\",\\\"table-layout\\\",\\\"text-align\\\",\\\"text-align-all\\\",\\\"text-align-last\\\",\\\"text-combine-upright\\\",\\\"text-decoration\\\",\\\"text-decoration-color\\\",\\\"text-decoration-line\\\",\\\"text-decoration-style\\\",\\\"text-emphasis\\\",\\\"text-emphasis-color\\\",\\\"text-emphasis-position\\\",\\\"text-emphasis-style\\\",\\\"text-indent\\\",\\\"text-justify\\\",\\\"text-orientation\\\",\\\"text-overflow\\\",\\\"text-rendering\\\",\\\"text-shadow\\\",\\\"text-transform\\\",\\\"text-underline-position\\\",\\\"top\\\",\\\"transform\\\",\\\"transform-box\\\",\\\"transform-origin\\\",\\\"transform-style\\\",\\\"transition\\\",\\\"transition-delay\\\",\\\"transition-duration\\\",\\\"transition-property\\\",\\\"transition-timing-function\\\",\\\"unicode-bidi\\\",\\\"vertical-align\\\",\\\"visibility\\\",\\\"voice-balance\\\",\\\"voice-duration\\\",\\\"voice-family\\\",\\\"voice-pitch\\\",\\\"voice-range\\\",\\\"voice-rate\\\",\\\"voice-stress\\\",\\\"voice-volume\\\",\\\"white-space\\\",\\\"widows\\\",\\\"width\\\",\\\"will-change\\\",\\\"word-break\\\",\\\"word-spacing\\\",\\\"word-wrap\\\",\\\"writing-mode\\\",\\\"z-index\\\"].reverse()\\n;return a=>{const n=a.regex,l=(e=>({IMPORTANT:{scope:\\\"meta\\\",begin:\\\"!important\\\"},\\nBLOCK_COMMENT:e.C_BLOCK_COMMENT_MODE,HEXCOLOR:{scope:\\\"number\\\",\\nbegin:/#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\\\\b/},FUNCTION_DISPATCH:{\\nclassName:\\\"built_in\\\",begin:/[\\\\w-]+(?=\\\\()/},ATTRIBUTE_SELECTOR_MODE:{\\nscope:\\\"selector-attr\\\",begin:/\\\\[/,end:/\\\\]/,illegal:\\\"$\\\",\\ncontains:[e.APOS_STRING_MODE,e.QUOTE_STRING_MODE]},CSS_NUMBER_MODE:{\\nscope:\\\"number\\\",\\nbegin:e.NUMBER_RE+\\\"(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?\\\",\\nrelevance:0},CSS_VARIABLE:{className:\\\"attr\\\",begin:/--[A-Za-z][A-Za-z0-9_-]*/}\\n}))(a),s=[a.APOS_STRING_MODE,a.QUOTE_STRING_MODE];return{name:\\\"CSS\\\",\\ncase_insensitive:!0,illegal:/[=|'\\\\$]/,keywords:{keyframePosition:\\\"from to\\\"},\\nclassNameAliases:{keyframePosition:\\\"selector-tag\\\"},contains:[l.BLOCK_COMMENT,{\\nbegin:/-(webkit|moz|ms|o)-(?=[a-z])/},l.CSS_NUMBER_MODE,{\\nclassName:\\\"selector-id\\\",begin:/#[A-Za-z0-9_-]+/,relevance:0},{\\nclassName:\\\"selector-class\\\",begin:\\\"\\\\\\\\.[a-zA-Z-][a-zA-Z0-9_-]*\\\",relevance:0\\n},l.ATTRIBUTE_SELECTOR_MODE,{className:\\\"selector-pseudo\\\",variants:[{\\nbegin:\\\":(\\\"+i.join(\\\"|\\\")+\\\")\\\"},{begin:\\\":(:)?(\\\"+o.join(\\\"|\\\")+\\\")\\\"}]},l.CSS_VARIABLE,{\\nclassName:\\\"attribute\\\",begin:\\\"\\\\\\\\b(\\\"+r.join(\\\"|\\\")+\\\")\\\\\\\\b\\\"},{begin:/:/,end:/[;}{]/,\\ncontains:[l.BLOCK_COMMENT,l.HEXCOLOR,l.IMPORTANT,l.CSS_NUMBER_MODE,...s,{\\nbegin:/(url|data-uri)\\\\(/,end:/\\\\)/,relevance:0,keywords:{built_in:\\\"url data-uri\\\"\\n},contains:[{className:\\\"string\\\",begin:/[^)]/,endsWithParent:!0,excludeEnd:!0}]\\n},l.FUNCTION_DISPATCH]},{begin:n.lookahead(/@/),end:\\\"[{;]\\\",relevance:0,\\nillegal:/:/,contains:[{className:\\\"keyword\\\",begin:/@-?\\\\w[\\\\w]*(-\\\\w+)*/},{\\nbegin:/\\\\s/,endsWithParent:!0,excludeEnd:!0,relevance:0,keywords:{\\n$pattern:/[a-z-]+/,keyword:\\\"and or not only\\\",attribute:t.join(\\\" \\\")},contains:[{\\nbegin:/[a-z-]+(?=:)/,className:\\\"attribute\\\"},...s,l.CSS_NUMBER_MODE]}]},{\\nclassName:\\\"selector-tag\\\",begin:\\\"\\\\\\\\b(\\\"+e.join(\\\"|\\\")+\\\")\\\\\\\\b\\\"}]}}})()\\n;hljs.registerLanguage(\\\"css\\\",e)})();/*! `perl` grammar compiled for Highlight.js 11.4.0 */\\n(()=>{var e=(()=>{\\\"use strict\\\";return e=>{\\nconst n=e.regex,t=/[dualxmsipngr]{0,12}/,r={$pattern:/[\\\\w.]+/,\\nkeyword:\\\"abs accept alarm and atan2 bind binmode bless break caller chdir chmod chomp chop chown chr chroot close closedir connect continue cos crypt dbmclose dbmopen defined delete die do dump each else elsif endgrent endhostent endnetent endprotoent endpwent endservent eof eval exec exists exit exp fcntl fileno flock for foreach fork format formline getc getgrent getgrgid getgrnam gethostbyaddr gethostbyname gethostent getlogin getnetbyaddr getnetbyname getnetent getpeername getpgrp getpriority getprotobyname getprotobynumber getprotoent getpwent getpwnam getpwuid getservbyname getservbyport getservent getsockname getsockopt given glob gmtime goto grep gt hex if index int ioctl join keys kill last lc lcfirst length link listen local localtime log lstat lt ma map mkdir msgctl msgget msgrcv msgsnd my ne next no not oct open opendir or ord our pack package pipe pop pos print printf prototype push q|0 qq quotemeta qw qx rand read readdir readline readlink readpipe recv redo ref rename require reset return reverse rewinddir rindex rmdir say scalar seek seekdir select semctl semget semop send setgrent sethostent setnetent setpgrp setpriority setprotoent setpwent setservent setsockopt shift shmctl shmget shmread shmwrite shutdown sin sleep socket socketpair sort splice split sprintf sqrt srand stat state study sub substr symlink syscall sysopen sysread sysseek system syswrite tell telldir tie tied time times tr truncate uc ucfirst umask undef unless unlink unpack unshift untie until use utime values vec wait waitpid wantarray warn when while write x|0 xor y|0\\\"\\n},s={className:\\\"subst\\\",begin:\\\"[$@]\\\\\\\\{\\\",end:\\\"\\\\\\\\}\\\",keywords:r},i={begin:/->\\\\{/,\\nend:/\\\\}/},a={variants:[{begin:/\\\\$\\\\d/},{\\nbegin:n.concat(/[$%@](\\\\^\\\\w\\\\b|#\\\\w+(::\\\\w+)*|\\\\{\\\\w+\\\\}|\\\\w+(::\\\\w*)*)/,\\\"(?![A-Za-z])(?![@$%])\\\")\\n},{begin:/[$%@][^\\\\s\\\\w{]/,relevance:0}]\\n},c=[e.BACKSLASH_ESCAPE,s,a],o=[/!/,/\\\\//,/\\\\|/,/\\\\?/,/'/,/\\\"/,/#/],g=(e,r,s=\\\"\\\\\\\\1\\\")=>{\\nconst i=\\\"\\\\\\\\1\\\"===s?s:n.concat(s,r)\\n;return n.concat(n.concat(\\\"(?:\\\",e,\\\")\\\"),r,/(?:\\\\\\\\.|[^\\\\\\\\\\\\/])*?/,i,/(?:\\\\\\\\.|[^\\\\\\\\\\\\/])*?/,s,t)\\n},l=(e,r,s)=>n.concat(n.concat(\\\"(?:\\\",e,\\\")\\\"),r,/(?:\\\\\\\\.|[^\\\\\\\\\\\\/])*?/,s,t),d=[a,e.HASH_COMMENT_MODE,e.COMMENT(/^=\\\\w/,/=cut/,{\\nendsWithParent:!0}),i,{className:\\\"string\\\",contains:c,variants:[{\\nbegin:\\\"q[qwxr]?\\\\\\\\s*\\\\\\\\(\\\",end:\\\"\\\\\\\\)\\\",relevance:5},{begin:\\\"q[qwxr]?\\\\\\\\s*\\\\\\\\[\\\",\\nend:\\\"\\\\\\\\]\\\",relevance:5},{begin:\\\"q[qwxr]?\\\\\\\\s*\\\\\\\\{\\\",end:\\\"\\\\\\\\}\\\",relevance:5},{\\nbegin:\\\"q[qwxr]?\\\\\\\\s*\\\\\\\\|\\\",end:\\\"\\\\\\\\|\\\",relevance:5},{begin:\\\"q[qwxr]?\\\\\\\\s*<\\\",end:\\\">\\\",\\nrelevance:5},{begin:\\\"qw\\\\\\\\s+q\\\",end:\\\"q\\\",relevance:5},{begin:\\\"'\\\",end:\\\"'\\\",\\ncontains:[e.BACKSLASH_ESCAPE]},{begin:'\\\"',end:'\\\"'},{begin:\\\"`\\\",end:\\\"`\\\",\\ncontains:[e.BACKSLASH_ESCAPE]},{begin:/\\\\{\\\\w+\\\\}/,relevance:0},{\\nbegin:\\\"-?\\\\\\\\w+\\\\\\\\s*=>\\\",relevance:0}]},{className:\\\"number\\\",\\nbegin:\\\"(\\\\\\\\b0[0-7_]+)|(\\\\\\\\b0x[0-9a-fA-F_]+)|(\\\\\\\\b[1-9][0-9_]*(\\\\\\\\.[0-9_]+)?)|[0_]\\\\\\\\b\\\",\\nrelevance:0},{\\nbegin:\\\"(\\\\\\\\/\\\\\\\\/|\\\"+e.RE_STARTERS_RE+\\\"|\\\\\\\\b(split|return|print|reverse|grep)\\\\\\\\b)\\\\\\\\s*\\\",\\nkeywords:\\\"split return print reverse grep\\\",relevance:0,\\ncontains:[e.HASH_COMMENT_MODE,{className:\\\"regexp\\\",variants:[{\\nbegin:g(\\\"s|tr|y\\\",n.either(...o,{capture:!0}))},{begin:g(\\\"s|tr|y\\\",\\\"\\\\\\\\(\\\",\\\"\\\\\\\\)\\\")},{\\nbegin:g(\\\"s|tr|y\\\",\\\"\\\\\\\\[\\\",\\\"\\\\\\\\]\\\")},{begin:g(\\\"s|tr|y\\\",\\\"\\\\\\\\{\\\",\\\"\\\\\\\\}\\\")}],relevance:2},{\\nclassName:\\\"regexp\\\",variants:[{begin:/(m|qr)\\\\/\\\\//,relevance:0},{\\nbegin:l(\\\"(?:m|qr)?\\\",/\\\\//,/\\\\//)},{begin:l(\\\"m|qr\\\",n.either(...o,{capture:!0\\n}),/\\\\1/)},{begin:l(\\\"m|qr\\\",/\\\\(/,/\\\\)/)},{begin:l(\\\"m|qr\\\",/\\\\[/,/\\\\]/)},{\\nbegin:l(\\\"m|qr\\\",/\\\\{/,/\\\\}/)}]}]},{className:\\\"function\\\",beginKeywords:\\\"sub\\\",\\nend:\\\"(\\\\\\\\s*\\\\\\\\(.*?\\\\\\\\))?[;{]\\\",excludeEnd:!0,relevance:5,contains:[e.TITLE_MODE]},{\\nbegin:\\\"-\\\\\\\\w\\\\\\\\b\\\",relevance:0},{begin:\\\"^__DATA__$\\\",end:\\\"^__END__$\\\",\\nsubLanguage:\\\"mojolicious\\\",contains:[{begin:\\\"^@@.*\\\",end:\\\"$\\\",className:\\\"comment\\\"}]\\n}];return s.contains=d,i.contains=d,{name:\\\"Perl\\\",aliases:[\\\"pl\\\",\\\"pm\\\"],keywords:r,\\ncontains:d}}})();hljs.registerLanguage(\\\"perl\\\",e)})();/*! `swift` grammar compiled for Highlight.js 11.4.0 */\\n(()=>{var e=(()=>{\\\"use strict\\\";function e(e){\\nreturn e?\\\"string\\\"==typeof e?e:e.source:null}function a(e){return t(\\\"(?=\\\",e,\\\")\\\")}\\nfunction t(...a){return a.map((a=>e(a))).join(\\\"\\\")}function n(...a){const t=(e=>{\\nconst a=e[e.length-1]\\n;return\\\"object\\\"==typeof a&&a.constructor===Object?(e.splice(e.length-1,1),a):{}\\n})(a);return\\\"(\\\"+(t.capture?\\\"\\\":\\\"?:\\\")+a.map((a=>e(a))).join(\\\"|\\\")+\\\")\\\"}\\nconst i=e=>t(/\\\\b/,e,/\\\\w$/.test(e)?/\\\\b/:/\\\\B/),s=[\\\"Protocol\\\",\\\"Type\\\"].map(i),u=[\\\"init\\\",\\\"self\\\"].map(i),c=[\\\"Any\\\",\\\"Self\\\"],r=[\\\"actor\\\",\\\"associatedtype\\\",\\\"async\\\",\\\"await\\\",/as\\\\?/,/as!/,\\\"as\\\",\\\"break\\\",\\\"case\\\",\\\"catch\\\",\\\"class\\\",\\\"continue\\\",\\\"convenience\\\",\\\"default\\\",\\\"defer\\\",\\\"deinit\\\",\\\"didSet\\\",\\\"do\\\",\\\"dynamic\\\",\\\"else\\\",\\\"enum\\\",\\\"extension\\\",\\\"fallthrough\\\",/fileprivate\\\\(set\\\\)/,\\\"fileprivate\\\",\\\"final\\\",\\\"for\\\",\\\"func\\\",\\\"get\\\",\\\"guard\\\",\\\"if\\\",\\\"import\\\",\\\"indirect\\\",\\\"infix\\\",/init\\\\?/,/init!/,\\\"inout\\\",/internal\\\\(set\\\\)/,\\\"internal\\\",\\\"in\\\",\\\"is\\\",\\\"isolated\\\",\\\"nonisolated\\\",\\\"lazy\\\",\\\"let\\\",\\\"mutating\\\",\\\"nonmutating\\\",/open\\\\(set\\\\)/,\\\"open\\\",\\\"operator\\\",\\\"optional\\\",\\\"override\\\",\\\"postfix\\\",\\\"precedencegroup\\\",\\\"prefix\\\",/private\\\\(set\\\\)/,\\\"private\\\",\\\"protocol\\\",/public\\\\(set\\\\)/,\\\"public\\\",\\\"repeat\\\",\\\"required\\\",\\\"rethrows\\\",\\\"return\\\",\\\"set\\\",\\\"some\\\",\\\"static\\\",\\\"struct\\\",\\\"subscript\\\",\\\"super\\\",\\\"switch\\\",\\\"throws\\\",\\\"throw\\\",/try\\\\?/,/try!/,\\\"try\\\",\\\"typealias\\\",/unowned\\\\(safe\\\\)/,/unowned\\\\(unsafe\\\\)/,\\\"unowned\\\",\\\"var\\\",\\\"weak\\\",\\\"where\\\",\\\"while\\\",\\\"willSet\\\"],o=[\\\"false\\\",\\\"nil\\\",\\\"true\\\"],l=[\\\"assignment\\\",\\\"associativity\\\",\\\"higherThan\\\",\\\"left\\\",\\\"lowerThan\\\",\\\"none\\\",\\\"right\\\"],m=[\\\"#colorLiteral\\\",\\\"#column\\\",\\\"#dsohandle\\\",\\\"#else\\\",\\\"#elseif\\\",\\\"#endif\\\",\\\"#error\\\",\\\"#file\\\",\\\"#fileID\\\",\\\"#fileLiteral\\\",\\\"#filePath\\\",\\\"#function\\\",\\\"#if\\\",\\\"#imageLiteral\\\",\\\"#keyPath\\\",\\\"#line\\\",\\\"#selector\\\",\\\"#sourceLocation\\\",\\\"#warn_unqualified_access\\\",\\\"#warning\\\"],p=[\\\"abs\\\",\\\"all\\\",\\\"any\\\",\\\"assert\\\",\\\"assertionFailure\\\",\\\"debugPrint\\\",\\\"dump\\\",\\\"fatalError\\\",\\\"getVaList\\\",\\\"isKnownUniquelyReferenced\\\",\\\"max\\\",\\\"min\\\",\\\"numericCast\\\",\\\"pointwiseMax\\\",\\\"pointwiseMin\\\",\\\"precondition\\\",\\\"preconditionFailure\\\",\\\"print\\\",\\\"readLine\\\",\\\"repeatElement\\\",\\\"sequence\\\",\\\"stride\\\",\\\"swap\\\",\\\"swift_unboxFromSwiftValueWithType\\\",\\\"transcode\\\",\\\"type\\\",\\\"unsafeBitCast\\\",\\\"unsafeDowncast\\\",\\\"withExtendedLifetime\\\",\\\"withUnsafeMutablePointer\\\",\\\"withUnsafePointer\\\",\\\"withVaList\\\",\\\"withoutActuallyEscaping\\\",\\\"zip\\\"],d=n(/[/=\\\\-+!*%<>&|^~?]/,/[\\\\u00A1-\\\\u00A7]/,/[\\\\u00A9\\\\u00AB]/,/[\\\\u00AC\\\\u00AE]/,/[\\\\u00B0\\\\u00B1]/,/[\\\\u00B6\\\\u00BB\\\\u00BF\\\\u00D7\\\\u00F7]/,/[\\\\u2016-\\\\u2017]/,/[\\\\u2020-\\\\u2027]/,/[\\\\u2030-\\\\u203E]/,/[\\\\u2041-\\\\u2053]/,/[\\\\u2055-\\\\u205E]/,/[\\\\u2190-\\\\u23FF]/,/[\\\\u2500-\\\\u2775]/,/[\\\\u2794-\\\\u2BFF]/,/[\\\\u2E00-\\\\u2E7F]/,/[\\\\u3001-\\\\u3003]/,/[\\\\u3008-\\\\u3020]/,/[\\\\u3030]/),F=n(d,/[\\\\u0300-\\\\u036F]/,/[\\\\u1DC0-\\\\u1DFF]/,/[\\\\u20D0-\\\\u20FF]/,/[\\\\uFE00-\\\\uFE0F]/,/[\\\\uFE20-\\\\uFE2F]/),b=t(d,F,\\\"*\\\"),h=n(/[a-zA-Z_]/,/[\\\\u00A8\\\\u00AA\\\\u00AD\\\\u00AF\\\\u00B2-\\\\u00B5\\\\u00B7-\\\\u00BA]/,/[\\\\u00BC-\\\\u00BE\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u00FF]/,/[\\\\u0100-\\\\u02FF\\\\u0370-\\\\u167F\\\\u1681-\\\\u180D\\\\u180F-\\\\u1DBF]/,/[\\\\u1E00-\\\\u1FFF]/,/[\\\\u200B-\\\\u200D\\\\u202A-\\\\u202E\\\\u203F-\\\\u2040\\\\u2054\\\\u2060-\\\\u206F]/,/[\\\\u2070-\\\\u20CF\\\\u2100-\\\\u218F\\\\u2460-\\\\u24FF\\\\u2776-\\\\u2793]/,/[\\\\u2C00-\\\\u2DFF\\\\u2E80-\\\\u2FFF]/,/[\\\\u3004-\\\\u3007\\\\u3021-\\\\u302F\\\\u3031-\\\\u303F\\\\u3040-\\\\uD7FF]/,/[\\\\uF900-\\\\uFD3D\\\\uFD40-\\\\uFDCF\\\\uFDF0-\\\\uFE1F\\\\uFE30-\\\\uFE44]/,/[\\\\uFE47-\\\\uFEFE\\\\uFF00-\\\\uFFFD]/),f=n(h,/\\\\d/,/[\\\\u0300-\\\\u036F\\\\u1DC0-\\\\u1DFF\\\\u20D0-\\\\u20FF\\\\uFE20-\\\\uFE2F]/),w=t(h,f,\\\"*\\\"),y=t(/[A-Z]/,f,\\\"*\\\"),g=[\\\"autoclosure\\\",t(/convention\\\\(/,n(\\\"swift\\\",\\\"block\\\",\\\"c\\\"),/\\\\)/),\\\"discardableResult\\\",\\\"dynamicCallable\\\",\\\"dynamicMemberLookup\\\",\\\"escaping\\\",\\\"frozen\\\",\\\"GKInspectable\\\",\\\"IBAction\\\",\\\"IBDesignable\\\",\\\"IBInspectable\\\",\\\"IBOutlet\\\",\\\"IBSegueAction\\\",\\\"inlinable\\\",\\\"main\\\",\\\"nonobjc\\\",\\\"NSApplicationMain\\\",\\\"NSCopying\\\",\\\"NSManaged\\\",t(/objc\\\\(/,w,/\\\\)/),\\\"objc\\\",\\\"objcMembers\\\",\\\"propertyWrapper\\\",\\\"requires_stored_property_inits\\\",\\\"resultBuilder\\\",\\\"testable\\\",\\\"UIApplicationMain\\\",\\\"unknown\\\",\\\"usableFromInline\\\"],E=[\\\"iOS\\\",\\\"iOSApplicationExtension\\\",\\\"macOS\\\",\\\"macOSApplicationExtension\\\",\\\"macCatalyst\\\",\\\"macCatalystApplicationExtension\\\",\\\"watchOS\\\",\\\"watchOSApplicationExtension\\\",\\\"tvOS\\\",\\\"tvOSApplicationExtension\\\",\\\"swift\\\"]\\n;return e=>{const d={match:/\\\\s+/,relevance:0},h=e.COMMENT(\\\"/\\\\\\\\*\\\",\\\"\\\\\\\\*/\\\",{\\ncontains:[\\\"self\\\"]}),v=[e.C_LINE_COMMENT_MODE,h],A={match:[/\\\\./,n(...s,...u)],\\nclassName:{2:\\\"keyword\\\"}},N={match:t(/\\\\./,n(...r)),relevance:0\\n},C=r.filter((e=>\\\"string\\\"==typeof e)).concat([\\\"_|0\\\"]),D={variants:[{\\nclassName:\\\"keyword\\\",\\nmatch:n(...r.filter((e=>\\\"string\\\"!=typeof e)).concat(c).map(i),...u)}]},k={\\n$pattern:n(/\\\\b\\\\w+/,/#\\\\w+/),keyword:C.concat(m),literal:o},B=[A,N,D],_=[{\\nmatch:t(/\\\\./,n(...p)),relevance:0},{className:\\\"built_in\\\",\\nmatch:t(/\\\\b/,n(...p),/(?=\\\\()/)}],S={match:/->/,relevance:0},M=[S,{\\nclassName:\\\"operator\\\",relevance:0,variants:[{match:b},{match:`\\\\\\\\.(\\\\\\\\.|${F})+`}]\\n}],x=\\\"([0-9a-fA-F]_*)+\\\",I={className:\\\"number\\\",relevance:0,variants:[{\\nmatch:\\\"\\\\\\\\b(([0-9]_*)+)(\\\\\\\\.(([0-9]_*)+))?([eE][+-]?(([0-9]_*)+))?\\\\\\\\b\\\"},{\\nmatch:`\\\\\\\\b0x(${x})(\\\\\\\\.(${x}))?([pP][+-]?(([0-9]_*)+))?\\\\\\\\b`},{\\nmatch:/\\\\b0o([0-7]_*)+\\\\b/},{match:/\\\\b0b([01]_*)+\\\\b/}]},L=(e=\\\"\\\")=>({\\nclassName:\\\"subst\\\",variants:[{match:t(/\\\\\\\\/,e,/[0\\\\\\\\tnr\\\"']/)},{\\nmatch:t(/\\\\\\\\/,e,/u\\\\{[0-9a-fA-F]{1,8}\\\\}/)}]}),O=(e=\\\"\\\")=>({className:\\\"subst\\\",\\nmatch:t(/\\\\\\\\/,e,/[\\\\t ]*(?:[\\\\r\\\\n]|\\\\r\\\\n)/)}),T=(e=\\\"\\\")=>({className:\\\"subst\\\",\\nlabel:\\\"interpol\\\",begin:t(/\\\\\\\\/,e,/\\\\(/),end:/\\\\)/}),$=(e=\\\"\\\")=>({begin:t(e,/\\\"\\\"\\\"/),\\nend:t(/\\\"\\\"\\\"/,e),contains:[L(e),O(e),T(e)]}),j=(e=\\\"\\\")=>({begin:t(e,/\\\"/),\\nend:t(/\\\"/,e),contains:[L(e),T(e)]}),P={className:\\\"string\\\",\\nvariants:[$(),$(\\\"#\\\"),$(\\\"##\\\"),$(\\\"###\\\"),j(),j(\\\"#\\\"),j(\\\"##\\\"),j(\\\"###\\\")]},K={\\nmatch:t(/`/,w,/`/)},z=[K,{className:\\\"variable\\\",match:/\\\\$\\\\d+/},{\\nclassName:\\\"variable\\\",match:`\\\\\\\\$${f}+`}],q=[{match:/(@|#(un)?)available/,\\nclassName:\\\"keyword\\\",starts:{contains:[{begin:/\\\\(/,end:/\\\\)/,keywords:E,\\ncontains:[...M,I,P]}]}},{className:\\\"keyword\\\",match:t(/@/,n(...g))},{\\nclassName:\\\"meta\\\",match:t(/@/,w)}],U={match:a(/\\\\b[A-Z]/),relevance:0,contains:[{\\nclassName:\\\"type\\\",\\nmatch:t(/(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)/,f,\\\"+\\\")\\n},{className:\\\"type\\\",match:y,relevance:0},{match:/[?!]+/,relevance:0},{\\nmatch:/\\\\.\\\\.\\\\./,relevance:0},{match:t(/\\\\s+&\\\\s+/,a(y)),relevance:0}]},Z={\\nbegin:/</,end:/>/,keywords:k,contains:[...v,...B,...q,S,U]};U.contains.push(Z)\\n;const V={begin:/\\\\(/,end:/\\\\)/,relevance:0,keywords:k,contains:[\\\"self\\\",{\\nmatch:t(w,/\\\\s*:/),keywords:\\\"_|0\\\",relevance:0\\n},...v,...B,..._,...M,I,P,...z,...q,U]},W={begin:/</,end:/>/,contains:[...v,U]\\n},G={begin:/\\\\(/,end:/\\\\)/,keywords:k,contains:[{\\nbegin:n(a(t(w,/\\\\s*:/)),a(t(w,/\\\\s+/,w,/\\\\s*:/))),end:/:/,relevance:0,contains:[{\\nclassName:\\\"keyword\\\",match:/\\\\b_\\\\b/},{className:\\\"params\\\",match:w}]\\n},...v,...B,...M,I,P,...q,U,V],endsParent:!0,illegal:/[\\\"']/},R={\\nmatch:[/func/,/\\\\s+/,n(K.match,w,b)],className:{1:\\\"keyword\\\",3:\\\"title.function\\\"},\\ncontains:[W,G,d],illegal:[/\\\\[/,/%/]},X={\\nmatch:[/\\\\b(?:subscript|init[?!]?)/,/\\\\s*(?=[<(])/],className:{1:\\\"keyword\\\"},\\ncontains:[W,G,d],illegal:/\\\\[|%/},H={match:[/operator/,/\\\\s+/,b],className:{\\n1:\\\"keyword\\\",3:\\\"title\\\"}},J={begin:[/precedencegroup/,/\\\\s+/,y],className:{\\n1:\\\"keyword\\\",3:\\\"title\\\"},contains:[U],keywords:[...l,...o],end:/}/}\\n;for(const e of P.variants){const a=e.contains.find((e=>\\\"interpol\\\"===e.label))\\n;a.keywords=k;const t=[...B,..._,...M,I,P,...z];a.contains=[...t,{begin:/\\\\(/,\\nend:/\\\\)/,contains:[\\\"self\\\",...t]}]}return{name:\\\"Swift\\\",keywords:k,\\ncontains:[...v,R,X,{beginKeywords:\\\"struct protocol class extension enum actor\\\",\\nend:\\\"\\\\\\\\{\\\",excludeEnd:!0,keywords:k,contains:[e.inherit(e.TITLE_MODE,{\\nclassName:\\\"title.class\\\",begin:/[A-Za-z$_][\\\\u00C0-\\\\u02B80-9A-Za-z$_]*/}),...B]\\n},H,J,{beginKeywords:\\\"import\\\",end:/$/,contains:[...v],relevance:0\\n},...B,..._,...M,I,P,...z,...q,U,V]}}})();hljs.registerLanguage(\\\"swift\\\",e)})();/*! `go` grammar compiled for Highlight.js 11.4.0 */\\n(()=>{var e=(()=>{\\\"use strict\\\";return e=>{const n={\\nkeyword:[\\\"break\\\",\\\"case\\\",\\\"chan\\\",\\\"const\\\",\\\"continue\\\",\\\"default\\\",\\\"defer\\\",\\\"else\\\",\\\"fallthrough\\\",\\\"for\\\",\\\"func\\\",\\\"go\\\",\\\"goto\\\",\\\"if\\\",\\\"import\\\",\\\"interface\\\",\\\"map\\\",\\\"package\\\",\\\"range\\\",\\\"return\\\",\\\"select\\\",\\\"struct\\\",\\\"switch\\\",\\\"type\\\",\\\"var\\\"],\\ntype:[\\\"bool\\\",\\\"byte\\\",\\\"complex64\\\",\\\"complex128\\\",\\\"error\\\",\\\"float32\\\",\\\"float64\\\",\\\"int8\\\",\\\"int16\\\",\\\"int32\\\",\\\"int64\\\",\\\"string\\\",\\\"uint8\\\",\\\"uint16\\\",\\\"uint32\\\",\\\"uint64\\\",\\\"int\\\",\\\"uint\\\",\\\"uintptr\\\",\\\"rune\\\"],\\nliteral:[\\\"true\\\",\\\"false\\\",\\\"iota\\\",\\\"nil\\\"],\\nbuilt_in:[\\\"append\\\",\\\"cap\\\",\\\"close\\\",\\\"complex\\\",\\\"copy\\\",\\\"imag\\\",\\\"len\\\",\\\"make\\\",\\\"new\\\",\\\"panic\\\",\\\"print\\\",\\\"println\\\",\\\"real\\\",\\\"recover\\\",\\\"delete\\\"]\\n};return{name:\\\"Go\\\",aliases:[\\\"golang\\\"],keywords:n,illegal:\\\"</\\\",\\ncontains:[e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,{className:\\\"string\\\",\\nvariants:[e.QUOTE_STRING_MODE,e.APOS_STRING_MODE,{begin:\\\"`\\\",end:\\\"`\\\"}]},{\\nclassName:\\\"number\\\",variants:[{begin:e.C_NUMBER_RE+\\\"[i]\\\",relevance:1\\n},e.C_NUMBER_MODE]},{begin:/:=/},{className:\\\"function\\\",beginKeywords:\\\"func\\\",\\nend:\\\"\\\\\\\\s*(\\\\\\\\{|$)\\\",excludeEnd:!0,contains:[e.TITLE_MODE,{className:\\\"params\\\",\\nbegin:/\\\\(/,end:/\\\\)/,endsParent:!0,keywords:n,illegal:/[\\\"']/}]}]}}})()\\n;hljs.registerLanguage(\\\"go\\\",e)})();/*! `javascript` grammar compiled for Highlight.js 11.4.0 */\\n(()=>{var e=(()=>{\\\"use strict\\\"\\n;const e=\\\"[A-Za-z$_][0-9A-Za-z$_]*\\\",n=[\\\"as\\\",\\\"in\\\",\\\"of\\\",\\\"if\\\",\\\"for\\\",\\\"while\\\",\\\"finally\\\",\\\"var\\\",\\\"new\\\",\\\"function\\\",\\\"do\\\",\\\"return\\\",\\\"void\\\",\\\"else\\\",\\\"break\\\",\\\"catch\\\",\\\"instanceof\\\",\\\"with\\\",\\\"throw\\\",\\\"case\\\",\\\"default\\\",\\\"try\\\",\\\"switch\\\",\\\"continue\\\",\\\"typeof\\\",\\\"delete\\\",\\\"let\\\",\\\"yield\\\",\\\"const\\\",\\\"class\\\",\\\"debugger\\\",\\\"async\\\",\\\"await\\\",\\\"static\\\",\\\"import\\\",\\\"from\\\",\\\"export\\\",\\\"extends\\\"],a=[\\\"true\\\",\\\"false\\\",\\\"null\\\",\\\"undefined\\\",\\\"NaN\\\",\\\"Infinity\\\"],t=[\\\"Object\\\",\\\"Function\\\",\\\"Boolean\\\",\\\"Symbol\\\",\\\"Math\\\",\\\"Date\\\",\\\"Number\\\",\\\"BigInt\\\",\\\"String\\\",\\\"RegExp\\\",\\\"Array\\\",\\\"Float32Array\\\",\\\"Float64Array\\\",\\\"Int8Array\\\",\\\"Uint8Array\\\",\\\"Uint8ClampedArray\\\",\\\"Int16Array\\\",\\\"Int32Array\\\",\\\"Uint16Array\\\",\\\"Uint32Array\\\",\\\"BigInt64Array\\\",\\\"BigUint64Array\\\",\\\"Set\\\",\\\"Map\\\",\\\"WeakSet\\\",\\\"WeakMap\\\",\\\"ArrayBuffer\\\",\\\"SharedArrayBuffer\\\",\\\"Atomics\\\",\\\"DataView\\\",\\\"JSON\\\",\\\"Promise\\\",\\\"Generator\\\",\\\"GeneratorFunction\\\",\\\"AsyncFunction\\\",\\\"Reflect\\\",\\\"Proxy\\\",\\\"Intl\\\",\\\"WebAssembly\\\"],s=[\\\"Error\\\",\\\"EvalError\\\",\\\"InternalError\\\",\\\"RangeError\\\",\\\"ReferenceError\\\",\\\"SyntaxError\\\",\\\"TypeError\\\",\\\"URIError\\\"],r=[\\\"setInterval\\\",\\\"setTimeout\\\",\\\"clearInterval\\\",\\\"clearTimeout\\\",\\\"require\\\",\\\"exports\\\",\\\"eval\\\",\\\"isFinite\\\",\\\"isNaN\\\",\\\"parseFloat\\\",\\\"parseInt\\\",\\\"decodeURI\\\",\\\"decodeURIComponent\\\",\\\"encodeURI\\\",\\\"encodeURIComponent\\\",\\\"escape\\\",\\\"unescape\\\"],c=[\\\"arguments\\\",\\\"this\\\",\\\"super\\\",\\\"console\\\",\\\"window\\\",\\\"document\\\",\\\"localStorage\\\",\\\"module\\\",\\\"global\\\"],i=[].concat(r,t,s)\\n;return o=>{const l=o.regex,b=e,d={begin:/<[A-Za-z0-9\\\\\\\\._:-]+/,\\nend:/\\\\/[A-Za-z0-9\\\\\\\\._:-]+>|\\\\/>/,isTrulyOpeningTag:(e,n)=>{\\nconst a=e[0].length+e.index,t=e.input[a]\\n;if(\\\"<\\\"===t||\\\",\\\"===t)return void n.ignoreMatch();let s\\n;\\\">\\\"===t&&(((e,{after:n})=>{const a=\\\"</\\\"+e[0].slice(1)\\n;return-1!==e.input.indexOf(a,n)})(e,{after:a\\n})||n.ignoreMatch()),(s=e.input.substr(a).match(/^\\\\s+extends\\\\s+/))&&0===s.index&&n.ignoreMatch()\\n}},g={$pattern:e,keyword:n,literal:a,built_in:i,\\\"variable.language\\\":c\\n},u=\\\"\\\\\\\\.([0-9](_?[0-9])*)\\\",m=\\\"0|[1-9](_?[0-9])*|0[0-7]*[89][0-9]*\\\",E={\\nclassName:\\\"number\\\",variants:[{\\nbegin:`(\\\\\\\\b(${m})((${u})|\\\\\\\\.)?|(${u}))[eE][+-]?([0-9](_?[0-9])*)\\\\\\\\b`},{\\nbegin:`\\\\\\\\b(${m})\\\\\\\\b((${u})\\\\\\\\b|\\\\\\\\.)?|(${u})\\\\\\\\b`},{\\nbegin:\\\"\\\\\\\\b(0|[1-9](_?[0-9])*)n\\\\\\\\b\\\"},{\\nbegin:\\\"\\\\\\\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*n?\\\\\\\\b\\\"},{\\nbegin:\\\"\\\\\\\\b0[bB][0-1](_?[0-1])*n?\\\\\\\\b\\\"},{begin:\\\"\\\\\\\\b0[oO][0-7](_?[0-7])*n?\\\\\\\\b\\\"},{\\nbegin:\\\"\\\\\\\\b0[0-7]+n?\\\\\\\\b\\\"}],relevance:0},A={className:\\\"subst\\\",begin:\\\"\\\\\\\\$\\\\\\\\{\\\",\\nend:\\\"\\\\\\\\}\\\",keywords:g,contains:[]},y={begin:\\\"html`\\\",end:\\\"\\\",starts:{end:\\\"`\\\",\\nreturnEnd:!1,contains:[o.BACKSLASH_ESCAPE,A],subLanguage:\\\"xml\\\"}},N={\\nbegin:\\\"css`\\\",end:\\\"\\\",starts:{end:\\\"`\\\",returnEnd:!1,\\ncontains:[o.BACKSLASH_ESCAPE,A],subLanguage:\\\"css\\\"}},_={className:\\\"string\\\",\\nbegin:\\\"`\\\",end:\\\"`\\\",contains:[o.BACKSLASH_ESCAPE,A]},f={className:\\\"comment\\\",\\nvariants:[o.COMMENT(/\\\\/\\\\*\\\\*(?!\\\\/)/,\\\"\\\\\\\\*/\\\",{relevance:0,contains:[{\\nbegin:\\\"(?=@[A-Za-z]+)\\\",relevance:0,contains:[{className:\\\"doctag\\\",\\nbegin:\\\"@[A-Za-z]+\\\"},{className:\\\"type\\\",begin:\\\"\\\\\\\\{\\\",end:\\\"\\\\\\\\}\\\",excludeEnd:!0,\\nexcludeBegin:!0,relevance:0},{className:\\\"variable\\\",begin:b+\\\"(?=\\\\\\\\s*(-)|$)\\\",\\nendsParent:!0,relevance:0},{begin:/(?=[^\\\\n])\\\\s/,relevance:0}]}]\\n}),o.C_BLOCK_COMMENT_MODE,o.C_LINE_COMMENT_MODE]\\n},h=[o.APOS_STRING_MODE,o.QUOTE_STRING_MODE,y,N,_,E];A.contains=h.concat({\\nbegin:/\\\\{/,end:/\\\\}/,keywords:g,contains:[\\\"self\\\"].concat(h)})\\n;const v=[].concat(f,A.contains),p=v.concat([{begin:/\\\\(/,end:/\\\\)/,keywords:g,\\ncontains:[\\\"self\\\"].concat(v)}]),S={className:\\\"params\\\",begin:/\\\\(/,end:/\\\\)/,\\nexcludeBegin:!0,excludeEnd:!0,keywords:g,contains:p},w={variants:[{\\nmatch:[/class/,/\\\\s+/,b,/\\\\s+/,/extends/,/\\\\s+/,l.concat(b,\\\"(\\\",l.concat(/\\\\./,b),\\\")*\\\")],\\nscope:{1:\\\"keyword\\\",3:\\\"title.class\\\",5:\\\"keyword\\\",7:\\\"title.class.inherited\\\"}},{\\nmatch:[/class/,/\\\\s+/,b],scope:{1:\\\"keyword\\\",3:\\\"title.class\\\"}}]},R={relevance:0,\\nmatch:l.either(/\\\\bJSON/,/\\\\b[A-Z][a-z]+([A-Z][a-z]*|\\\\d)*/,/\\\\b[A-Z]{2,}([A-Z][a-z]+|\\\\d)+([A-Z][a-z]*)*/,/\\\\b[A-Z]{2,}[a-z]+([A-Z][a-z]+|\\\\d)*([A-Z][a-z]*)*/),\\nclassName:\\\"title.class\\\",keywords:{_:[...t,...s]}},O={variants:[{\\nmatch:[/function/,/\\\\s+/,b,/(?=\\\\s*\\\\()/]},{match:[/function/,/\\\\s*(?=\\\\()/]}],\\nclassName:{1:\\\"keyword\\\",3:\\\"title.function\\\"},label:\\\"func.def\\\",contains:[S],\\nillegal:/%/},k={\\nmatch:l.concat(/\\\\b/,(I=[...r,\\\"super\\\"],l.concat(\\\"(?!\\\",I.join(\\\"|\\\"),\\\")\\\")),b,l.lookahead(/\\\\(/)),\\nclassName:\\\"title.function\\\",relevance:0};var I;const x={\\nbegin:l.concat(/\\\\./,l.lookahead(l.concat(b,/(?![0-9A-Za-z$_(])/))),end:b,\\nexcludeBegin:!0,keywords:\\\"prototype\\\",className:\\\"property\\\",relevance:0},T={\\nmatch:[/get|set/,/\\\\s+/,b,/(?=\\\\()/],className:{1:\\\"keyword\\\",3:\\\"title.function\\\"},\\ncontains:[{begin:/\\\\(\\\\)/},S]\\n},C=\\\"(\\\\\\\\([^()]*(\\\\\\\\([^()]*(\\\\\\\\([^()]*\\\\\\\\)[^()]*)*\\\\\\\\)[^()]*)*\\\\\\\\)|\\\"+o.UNDERSCORE_IDENT_RE+\\\")\\\\\\\\s*=>\\\",M={\\nmatch:[/const|var|let/,/\\\\s+/,b,/\\\\s*/,/=\\\\s*/,/(async\\\\s*)?/,l.lookahead(C)],\\nkeywords:\\\"async\\\",className:{1:\\\"keyword\\\",3:\\\"title.function\\\"},contains:[S]}\\n;return{name:\\\"Javascript\\\",aliases:[\\\"js\\\",\\\"jsx\\\",\\\"mjs\\\",\\\"cjs\\\"],keywords:g,exports:{\\nPARAMS_CONTAINS:p,CLASS_REFERENCE:R},illegal:/#(?![$_A-z])/,\\ncontains:[o.SHEBANG({label:\\\"shebang\\\",binary:\\\"node\\\",relevance:5}),{\\nlabel:\\\"use_strict\\\",className:\\\"meta\\\",relevance:10,\\nbegin:/^\\\\s*['\\\"]use (strict|asm)['\\\"]/\\n},o.APOS_STRING_MODE,o.QUOTE_STRING_MODE,y,N,_,f,E,R,{className:\\\"attr\\\",\\nbegin:b+l.lookahead(\\\":\\\"),relevance:0},M,{\\nbegin:\\\"(\\\"+o.RE_STARTERS_RE+\\\"|\\\\\\\\b(case|return|throw)\\\\\\\\b)\\\\\\\\s*\\\",\\nkeywords:\\\"return throw case\\\",relevance:0,contains:[f,o.REGEXP_MODE,{\\nclassName:\\\"function\\\",begin:C,returnBegin:!0,end:\\\"\\\\\\\\s*=>\\\",contains:[{\\nclassName:\\\"params\\\",variants:[{begin:o.UNDERSCORE_IDENT_RE,relevance:0},{\\nclassName:null,begin:/\\\\(\\\\s*\\\\)/,skip:!0},{begin:/\\\\(/,end:/\\\\)/,excludeBegin:!0,\\nexcludeEnd:!0,keywords:g,contains:p}]}]},{begin:/,/,relevance:0},{match:/\\\\s+/,\\nrelevance:0},{variants:[{begin:\\\"<>\\\",end:\\\"</>\\\"},{\\nmatch:/<[A-Za-z0-9\\\\\\\\._:-]+\\\\s*\\\\/>/},{begin:d.begin,\\n\\\"on:begin\\\":d.isTrulyOpeningTag,end:d.end}],subLanguage:\\\"xml\\\",contains:[{\\nbegin:d.begin,end:d.end,skip:!0,contains:[\\\"self\\\"]}]}]},O,{\\nbeginKeywords:\\\"while if switch catch for\\\"},{\\nbegin:\\\"\\\\\\\\b(?!function)\\\"+o.UNDERSCORE_IDENT_RE+\\\"\\\\\\\\([^()]*(\\\\\\\\([^()]*(\\\\\\\\([^()]*\\\\\\\\)[^()]*)*\\\\\\\\)[^()]*)*\\\\\\\\)\\\\\\\\s*\\\\\\\\{\\\",\\nreturnBegin:!0,label:\\\"func.def\\\",contains:[S,o.inherit(o.TITLE_MODE,{begin:b,\\nclassName:\\\"title.function\\\"})]},{match:/\\\\.\\\\.\\\\./,relevance:0},x,{match:\\\"\\\\\\\\$\\\"+b,\\nrelevance:0},{match:[/\\\\bconstructor(?=\\\\s*\\\\()/],className:{1:\\\"title.function\\\"},\\ncontains:[S]},k,{relevance:0,match:/\\\\b[A-Z][A-Z_0-9]+\\\\b/,\\nclassName:\\\"variable.constant\\\"},w,T,{match:/\\\\$[(.]/}]}}})()\\n;hljs.registerLanguage(\\\"javascript\\\",e)})();/*! `rust` grammar compiled for Highlight.js 11.4.0 */\\n(()=>{var e=(()=>{\\\"use strict\\\";return e=>{const t=e.regex,n={\\nclassName:\\\"title.function.invoke\\\",relevance:0,\\nbegin:t.concat(/\\\\b/,/(?!let\\\\b)/,e.IDENT_RE,t.lookahead(/\\\\s*\\\\(/))\\n},a=\\\"([ui](8|16|32|64|128|size)|f(32|64))?\\\",i=[\\\"drop \\\",\\\"Copy\\\",\\\"Send\\\",\\\"Sized\\\",\\\"Sync\\\",\\\"Drop\\\",\\\"Fn\\\",\\\"FnMut\\\",\\\"FnOnce\\\",\\\"ToOwned\\\",\\\"Clone\\\",\\\"Debug\\\",\\\"PartialEq\\\",\\\"PartialOrd\\\",\\\"Eq\\\",\\\"Ord\\\",\\\"AsRef\\\",\\\"AsMut\\\",\\\"Into\\\",\\\"From\\\",\\\"Default\\\",\\\"Iterator\\\",\\\"Extend\\\",\\\"IntoIterator\\\",\\\"DoubleEndedIterator\\\",\\\"ExactSizeIterator\\\",\\\"SliceConcatExt\\\",\\\"ToString\\\",\\\"assert!\\\",\\\"assert_eq!\\\",\\\"bitflags!\\\",\\\"bytes!\\\",\\\"cfg!\\\",\\\"col!\\\",\\\"concat!\\\",\\\"concat_idents!\\\",\\\"debug_assert!\\\",\\\"debug_assert_eq!\\\",\\\"env!\\\",\\\"panic!\\\",\\\"file!\\\",\\\"format!\\\",\\\"format_args!\\\",\\\"include_bin!\\\",\\\"include_str!\\\",\\\"line!\\\",\\\"local_data_key!\\\",\\\"module_path!\\\",\\\"option_env!\\\",\\\"print!\\\",\\\"println!\\\",\\\"select!\\\",\\\"stringify!\\\",\\\"try!\\\",\\\"unimplemented!\\\",\\\"unreachable!\\\",\\\"vec!\\\",\\\"write!\\\",\\\"writeln!\\\",\\\"macro_rules!\\\",\\\"assert_ne!\\\",\\\"debug_assert_ne!\\\"]\\n;return{name:\\\"Rust\\\",aliases:[\\\"rs\\\"],keywords:{$pattern:e.IDENT_RE+\\\"!?\\\",\\ntype:[\\\"i8\\\",\\\"i16\\\",\\\"i32\\\",\\\"i64\\\",\\\"i128\\\",\\\"isize\\\",\\\"u8\\\",\\\"u16\\\",\\\"u32\\\",\\\"u64\\\",\\\"u128\\\",\\\"usize\\\",\\\"f32\\\",\\\"f64\\\",\\\"str\\\",\\\"char\\\",\\\"bool\\\",\\\"Box\\\",\\\"Option\\\",\\\"Result\\\",\\\"String\\\",\\\"Vec\\\"],\\nkeyword:[\\\"abstract\\\",\\\"as\\\",\\\"async\\\",\\\"await\\\",\\\"become\\\",\\\"box\\\",\\\"break\\\",\\\"const\\\",\\\"continue\\\",\\\"crate\\\",\\\"do\\\",\\\"dyn\\\",\\\"else\\\",\\\"enum\\\",\\\"extern\\\",\\\"false\\\",\\\"final\\\",\\\"fn\\\",\\\"for\\\",\\\"if\\\",\\\"impl\\\",\\\"in\\\",\\\"let\\\",\\\"loop\\\",\\\"macro\\\",\\\"match\\\",\\\"mod\\\",\\\"move\\\",\\\"mut\\\",\\\"override\\\",\\\"priv\\\",\\\"pub\\\",\\\"ref\\\",\\\"return\\\",\\\"self\\\",\\\"Self\\\",\\\"static\\\",\\\"struct\\\",\\\"super\\\",\\\"trait\\\",\\\"true\\\",\\\"try\\\",\\\"type\\\",\\\"typeof\\\",\\\"unsafe\\\",\\\"unsized\\\",\\\"use\\\",\\\"virtual\\\",\\\"where\\\",\\\"while\\\",\\\"yield\\\"],\\nliteral:[\\\"true\\\",\\\"false\\\",\\\"Some\\\",\\\"None\\\",\\\"Ok\\\",\\\"Err\\\"],built_in:i},illegal:\\\"</\\\",\\ncontains:[e.C_LINE_COMMENT_MODE,e.COMMENT(\\\"/\\\\\\\\*\\\",\\\"\\\\\\\\*/\\\",{contains:[\\\"self\\\"]\\n}),e.inherit(e.QUOTE_STRING_MODE,{begin:/b?\\\"/,illegal:null}),{\\nclassName:\\\"string\\\",variants:[{begin:/b?r(#*)\\\"(.|\\\\n)*?\\\"\\\\1(?!#)/},{\\nbegin:/b?'\\\\\\\\?(x\\\\w{2}|u\\\\w{4}|U\\\\w{8}|.)'/}]},{className:\\\"symbol\\\",\\nbegin:/'[a-zA-Z_][a-zA-Z0-9_]*/},{className:\\\"number\\\",variants:[{\\nbegin:\\\"\\\\\\\\b0b([01_]+)\\\"+a},{begin:\\\"\\\\\\\\b0o([0-7_]+)\\\"+a},{\\nbegin:\\\"\\\\\\\\b0x([A-Fa-f0-9_]+)\\\"+a},{\\nbegin:\\\"\\\\\\\\b(\\\\\\\\d[\\\\\\\\d_]*(\\\\\\\\.[0-9_]+)?([eE][+-]?[0-9_]+)?)\\\"+a}],relevance:0},{\\nbegin:[/fn/,/\\\\s+/,e.UNDERSCORE_IDENT_RE],className:{1:\\\"keyword\\\",\\n3:\\\"title.function\\\"}},{className:\\\"meta\\\",begin:\\\"#!?\\\\\\\\[\\\",end:\\\"\\\\\\\\]\\\",contains:[{\\nclassName:\\\"string\\\",begin:/\\\"/,end:/\\\"/}]},{\\nbegin:[/let/,/\\\\s+/,/(?:mut\\\\s+)?/,e.UNDERSCORE_IDENT_RE],className:{1:\\\"keyword\\\",\\n3:\\\"keyword\\\",4:\\\"variable\\\"}},{\\nbegin:[/for/,/\\\\s+/,e.UNDERSCORE_IDENT_RE,/\\\\s+/,/in/],className:{1:\\\"keyword\\\",\\n3:\\\"variable\\\",5:\\\"keyword\\\"}},{begin:[/type/,/\\\\s+/,e.UNDERSCORE_IDENT_RE],\\nclassName:{1:\\\"keyword\\\",3:\\\"title.class\\\"}},{\\nbegin:[/(?:trait|enum|struct|union|impl|for)/,/\\\\s+/,e.UNDERSCORE_IDENT_RE],\\nclassName:{1:\\\"keyword\\\",3:\\\"title.class\\\"}},{begin:e.IDENT_RE+\\\"::\\\",keywords:{\\nkeyword:\\\"Self\\\",built_in:i}},{className:\\\"punctuation\\\",begin:\\\"->\\\"},n]}}})()\\n;hljs.registerLanguage(\\\"rust\\\",e)})();/*! `java` grammar compiled for Highlight.js 11.4.0 */\\n(()=>{var e=(()=>{\\\"use strict\\\"\\n;var e=\\\"\\\\\\\\.([0-9](_*[0-9])*)\\\",a=\\\"[0-9a-fA-F](_*[0-9a-fA-F])*\\\",n={\\nclassName:\\\"number\\\",variants:[{\\nbegin:`(\\\\\\\\b([0-9](_*[0-9])*)((${e})|\\\\\\\\.)?|(${e}))[eE][+-]?([0-9](_*[0-9])*)[fFdD]?\\\\\\\\b`\\n},{begin:`\\\\\\\\b([0-9](_*[0-9])*)((${e})[fFdD]?\\\\\\\\b|\\\\\\\\.([fFdD]\\\\\\\\b)?)`},{\\nbegin:`(${e})[fFdD]?\\\\\\\\b`},{begin:\\\"\\\\\\\\b([0-9](_*[0-9])*)[fFdD]\\\\\\\\b\\\"},{\\nbegin:`\\\\\\\\b0[xX]((${a})\\\\\\\\.?|(${a})?\\\\\\\\.(${a}))[pP][+-]?([0-9](_*[0-9])*)[fFdD]?\\\\\\\\b`\\n},{begin:\\\"\\\\\\\\b(0|[1-9](_*[0-9])*)[lL]?\\\\\\\\b\\\"},{begin:`\\\\\\\\b0[xX](${a})[lL]?\\\\\\\\b`},{\\nbegin:\\\"\\\\\\\\b0(_*[0-7])*[lL]?\\\\\\\\b\\\"},{begin:\\\"\\\\\\\\b0[bB][01](_*[01])*[lL]?\\\\\\\\b\\\"}],\\nrelevance:0};function s(e,a,n){return-1===n?\\\"\\\":e.replace(a,(t=>s(e,a,n-1)))}\\nreturn e=>{e.regex\\n;const a=\\\"[\\\\xc0-\\\\u02b8a-zA-Z_$][\\\\xc0-\\\\u02b8a-zA-Z_$0-9]*\\\",t=a+s(\\\"(?:<\\\"+a+\\\"~~~(?:\\\\\\\\s*,\\\\\\\\s*\\\"+a+\\\"~~~)*>)?\\\",/~~~/g,2),i={\\nkeyword:[\\\"synchronized\\\",\\\"abstract\\\",\\\"private\\\",\\\"var\\\",\\\"static\\\",\\\"if\\\",\\\"const \\\",\\\"for\\\",\\\"while\\\",\\\"strictfp\\\",\\\"finally\\\",\\\"protected\\\",\\\"import\\\",\\\"native\\\",\\\"final\\\",\\\"void\\\",\\\"enum\\\",\\\"else\\\",\\\"break\\\",\\\"transient\\\",\\\"catch\\\",\\\"instanceof\\\",\\\"volatile\\\",\\\"case\\\",\\\"assert\\\",\\\"package\\\",\\\"default\\\",\\\"public\\\",\\\"try\\\",\\\"switch\\\",\\\"continue\\\",\\\"throws\\\",\\\"protected\\\",\\\"public\\\",\\\"private\\\",\\\"module\\\",\\\"requires\\\",\\\"exports\\\",\\\"do\\\",\\\"sealed\\\"],\\nliteral:[\\\"false\\\",\\\"true\\\",\\\"null\\\"],\\ntype:[\\\"char\\\",\\\"boolean\\\",\\\"long\\\",\\\"float\\\",\\\"int\\\",\\\"byte\\\",\\\"short\\\",\\\"double\\\"],\\nbuilt_in:[\\\"super\\\",\\\"this\\\"]},r={className:\\\"meta\\\",begin:\\\"@\\\"+a,contains:[{\\nbegin:/\\\\(/,end:/\\\\)/,contains:[\\\"self\\\"]}]},l={className:\\\"params\\\",begin:/\\\\(/,\\nend:/\\\\)/,keywords:i,relevance:0,contains:[e.C_BLOCK_COMMENT_MODE],endsParent:!0}\\n;return{name:\\\"Java\\\",aliases:[\\\"jsp\\\"],keywords:i,illegal:/<\\\\/|#/,\\ncontains:[e.COMMENT(\\\"/\\\\\\\\*\\\\\\\\*\\\",\\\"\\\\\\\\*/\\\",{relevance:0,contains:[{begin:/\\\\w+@/,\\nrelevance:0},{className:\\\"doctag\\\",begin:\\\"@[A-Za-z]+\\\"}]}),{\\nbegin:/import java\\\\.[a-z]+\\\\./,keywords:\\\"import\\\",relevance:2\\n},e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,{begin:/\\\"\\\"\\\"/,end:/\\\"\\\"\\\"/,\\nclassName:\\\"string\\\",contains:[e.BACKSLASH_ESCAPE]\\n},e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,{\\nmatch:[/\\\\b(?:class|interface|enum|extends|implements|new)/,/\\\\s+/,a],className:{\\n1:\\\"keyword\\\",3:\\\"title.class\\\"}},{match:/non-sealed/,scope:\\\"keyword\\\"},{\\nbegin:[a,/\\\\s+/,a,/\\\\s+/,/=/],className:{1:\\\"type\\\",3:\\\"variable\\\",5:\\\"operator\\\"}},{\\nbegin:[/record/,/\\\\s+/,a],className:{1:\\\"keyword\\\",3:\\\"title.class\\\"},\\ncontains:[l,e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE]},{\\nbeginKeywords:\\\"new throw return else\\\",relevance:0},{\\nbegin:[\\\"(?:\\\"+t+\\\"\\\\\\\\s+)\\\",e.UNDERSCORE_IDENT_RE,/\\\\s*(?=\\\\()/],className:{\\n2:\\\"title.function\\\"},keywords:i,contains:[{className:\\\"params\\\",begin:/\\\\(/,\\nend:/\\\\)/,keywords:i,relevance:0,\\ncontains:[r,e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,n,e.C_BLOCK_COMMENT_MODE]\\n},e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE]},n,r]}}})()\\n;hljs.registerLanguage(\\\"java\\\",e)})();\\nexports.hljs = hljs;\\n\",\"type\":\"application/javascript\",\"title\":\"$:/plugins/tiddlywiki/highlight/highlight.js\",\"module-type\":\"library\"},\"$:/plugins/tiddlywiki/highlight/highlight.css\":{\"text\":\"/*!\\n  Theme: Default\\n  Description: Original highlight.js style\\n  Author: (c) Ivan Sagalaev <maniac@softwaremaniacs.org>\\n  Maintainer: @highlightjs/core-team\\n  Website: https://highlightjs.org/\\n  License: see project LICENSE\\n  Touched: 2021\\n*/pre code.hljs{display:block;overflow-x:auto;padding:1em}code.hljs{padding:3px 5px}.hljs{background:#f3f3f3;color:#444}.hljs-comment{color:#697070}.hljs-punctuation,.hljs-tag{color:#444a}.hljs-tag .hljs-attr,.hljs-tag .hljs-name{color:#444}.hljs-attribute,.hljs-doctag,.hljs-keyword,.hljs-meta .hljs-keyword,.hljs-name,.hljs-selector-tag{font-weight:700}.hljs-deletion,.hljs-number,.hljs-quote,.hljs-selector-class,.hljs-selector-id,.hljs-string,.hljs-template-tag,.hljs-type{color:#800}.hljs-section,.hljs-title{color:#800;font-weight:700}.hljs-link,.hljs-operator,.hljs-regexp,.hljs-selector-attr,.hljs-selector-pseudo,.hljs-symbol,.hljs-template-variable,.hljs-variable{color:#ab5656}.hljs-literal{color:#695}.hljs-addition,.hljs-built_in,.hljs-bullet,.hljs-code{color:#397300}.hljs-meta{color:#1f7199}.hljs-meta .hljs-string{color:#38a}.hljs-emphasis{font-style:italic}.hljs-strong{font-weight:700}\",\"type\":\"text/css\",\"title\":\"$:/plugins/tiddlywiki/highlight/highlight.css\",\"tags\":\"[[$:/tags/Stylesheet]]\"},\"$:/plugins/tiddlywiki/highlight/highlightblock.js\":{\"title\":\"$:/plugins/tiddlywiki/highlight/highlightblock.js\",\"text\":\"/*\\\\\\ntitle: $:/plugins/tiddlywiki/highlight/highlightblock.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nWraps up the fenced code blocks parser for highlight and use in TiddlyWiki5\\n\\n\\\\*/\\n(function() {\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar TYPE_MAPPINGS_BASE = \\\"$:/config/HighlightPlugin/TypeMappings/\\\";\\n\\nvar CodeBlockWidget = require(\\\"$:/core/modules/widgets/codeblock.js\\\").codeblock;\\n\\nvar hljs = require(\\\"$:/plugins/tiddlywiki/highlight/highlight.js\\\");\\n\\nif(hljs.getLanguage !== undefined) {\\n\\t// load language definitions\\n\\t$tw.utils.each($tw.modules.types[\\\"highlight\\\"],function(moduleInfo,moduleName) {\\n\\t\\t$tw.utils.evalSandboxed(moduleInfo.definition,{hljs:hljs, exports:{}},moduleName);\\n\\t});\\n\\t\\n\\tCodeBlockWidget.prototype.postRender = function() {\\n\\t\\tvar domNode = this.domNodes[0],\\n\\t\\t\\tlanguage = this.language,\\n\\t\\t\\ttiddler = this.wiki.getTiddler(TYPE_MAPPINGS_BASE + language);\\n\\t\\tif(tiddler) {\\n\\t\\t\\tlanguage = tiddler.fields.text || \\\"\\\";\\n\\t\\t}\\n\\t\\tif(language && hljs.getLanguage(language)) {\\n\\t\\t\\tdomNode.className = \\\"hljs\\\";\\n\\t\\t\\tdomNode.children[0].className = language.toLowerCase() + \\\" hljs\\\";\\n\\t\\t\\tif($tw.browser && !domNode.isTiddlyWikiFakeDom) {\\n\\t\\t\\t\\thljs.highlightElement(domNode.children[0]);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tvar text = domNode.textContent;\\n\\t\\t\\t\\tdomNode.children[0].innerHTML = hljs.highlight(text,{language: language, ignoreIllegals: true}).value;\\n\\t\\t\\t\\t// If we're using the fakedom then specially save the original raw text\\n\\t\\t\\t\\tif(domNode.isTiddlyWikiFakeDom) {\\n\\t\\t\\t\\t\\tdomNode.children[0].textInnerHTML = text;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n}\\t\\n\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/plugins/tiddlywiki/highlight/license\":{\"title\":\"$:/plugins/tiddlywiki/highlight/license\",\"type\":\"text/plain\",\"text\":\"Copyright (c) 2006, Ivan Sagalaev\\nAll rights reserved.\\nRedistribution and use in source and binary forms, with or without\\nmodification, are permitted provided that the following conditions are met:\\n\\n    * Redistributions of source code must retain the above copyright\\n      notice, this list of conditions and the following disclaimer.\\n    * Redistributions in binary form must reproduce the above copyright\\n      notice, this list of conditions and the following disclaimer in the\\n      documentation and/or other materials provided with the distribution.\\n    * Neither the name of highlight.js nor the names of its contributors\\n      may be used to endorse or promote products derived from this software\\n      without specific prior written permission.\\n\\nTHIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND ANY\\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\\nDISCLAIMED. IN NO EVENT SHALL THE REGENTS AND CONTRIBUTORS BE LIABLE FOR ANY\\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n\"},\"$:/plugins/tiddlywiki/highlight/readme\":{\"title\":\"$:/plugins/tiddlywiki/highlight/readme\",\"text\":\"\\\\define highlightVersion() 11.4.0\\n\\nThis plugin provides syntax highlighting of code blocks using version <<highlightVersion>> of [[highlight.js|https://github.com/isagalaev/highlight.js]] from Ivan Sagalaev. This plugin does not work on browsers that do not fully support ~JavaScript ES6 (2015). If you need highlight.js running on those legacy browsers, you would need to install the \\\"Highlight (Legacy)\\\" plugin instead. Here's a [[ES6 compatibility table|https://caniuse.com/?search=es6]].\\n\\n! Built-in Language Brushes\\n\\nThe plugin includes support for the following common languages (referred to as \\\"brushes\\\" by highlight.js):\\n\\n* bash\\n* c\\n* cpp\\n* csharp\\n* css\\n* diff\\n* go\\n* html, xml\\n* java\\n* javascript\\n* json\\n* kotlin\\n* less\\n* lua\\n* makefile\\n* markdown\\n* objectivec\\n* perl\\n* php\\n* plaintext\\n* python\\n* R\\n* ruby\\n* rust\\n* scss\\n* sql\\n* shell session\\n* swift\\n* toml, ini\\n* typescript\\n* visual basic .net\\n* yaml\\n\\nAnd these additional ones:\\n\\n* apache config\\n* dockerfile\\n* fortran\\n* latex\\n* nginx config\\n\\nThe mapping between a MIME type and a highlight.js language specifier is accomplished via mapping tiddlers whose titles start with `$:/config/HighlightPlugin/TypeMappings/`.\\n\"},\"$:/plugins/tiddlywiki/highlight/styles\":{\"title\":\"$:/plugins/tiddlywiki/highlight/styles\",\"tags\":\"[[$:/tags/Stylesheet]]\",\"text\":\"pre.hljs {\\n  padding: 0;\\n}\\n\\npre code.hljs {\\n  padding: 0.5em;\\n}\\n\\n.hljs {\\n  background: <<colour tiddler-editor-background>>;\\n  color: <<colour foreground>>;\\n  -webkit-text-size-adjust:none;\\n}\\n\\n.hljs-comment,\\n.hljs-quote {\\n  color: #93a1a1;\\n}\\n\\n/* Solarized Green */\\n.hljs-keyword,\\n.hljs-selector-tag,\\n.hljs-addition {\\n  color: #859900;\\n}\\n\\n/* Solarized Cyan */\\n.hljs-number,\\n.hljs-string,\\n.hljs-meta .hljs-string,\\n.hljs-literal,\\n.hljs-doctag,\\n.hljs-regexp {\\n  color: #2aa198;\\n}\\n\\n/* Solarized Blue */\\n.hljs-title,\\n.hljs-section,\\n.hljs-name,\\n.hljs-selector-id,\\n.hljs-selector-class {\\n  color: #268bd2;\\n}\\n\\n/* Solarized Yellow */\\n.hljs-attribute,\\n.hljs-attr,\\n.hljs-variable,\\n.hljs-template-variable,\\n.hljs-class .hljs-title,\\n.hljs-type {\\n  color: #b58900;\\n}\\n\\n/* Solarized Orange */\\n.hljs-symbol,\\n.hljs-bullet,\\n.hljs-subst,\\n.hljs-meta,\\n.hljs-meta .hljs-keyword,\\n.hljs-selector-attr,\\n.hljs-selector-pseudo,\\n.hljs-link {\\n  color: #cb4b16;\\n}\\n\\n/* Solarized Red */\\n.hljs-built_in,\\n.hljs-deletion {\\n  color: #dc322f;\\n}\\n\\n.hljs-formula {\\n  background: #eee8d5;\\n}\\n\\n.hljs-emphasis {\\n  font-style: italic;\\n}\\n\\n.hljs-strong {\\n  font-weight: bold;\\n}\\n\"},\"$:/plugins/tiddlywiki/highlight/usage\":{\"title\":\"$:/plugins/tiddlywiki/highlight/usage\",\"text\":\"\\\\import $:/plugins/tiddlywiki/highlight/readme\\n\\n\\\\define jsDelivrLink() https://www.jsdelivr.com/package/gh/highlightjs/cdn-release?path=build%2Flanguages&version=$(highlightVersion)$\\n\\\\define unpkgLink() https://unpkg.com/browse/@highlightjs/cdn-assets@$(highlightVersion)$/languages/\\n\\n! Usage\\n\\nSyntax highlighting is triggered when you add language information to code blocks defined with triple backticks or with the `<$codeblock>` widget. For fenced code blocks, specify the code's language immediately after the first set of backticks:\\n\\n```\\n ```js\\n var a = b + c; // Highlighted as JavaScript\\n ```\\n```\\n\\n! Adding Themes\\n\\nYou can add themes from highlight.js by copying the CSS to a new tiddler and tagging it with [[$:/tags/Stylesheet]]. The available themes can be found on GitHub:\\n\\nhttps://github.com/isagalaev/highlight.js/tree/master/src/styles\\n\\n! Supporting Additional Languages\\n\\nThe [[highlight.js|https://github.com/highlightjs/highlight.js]] project supports many languages. Only a subset of these languages are supported by the plugin. You can change the language set using either of the following methods:\\n\\n!! Browser-based Method\\n\\nYou can import language definitions into <$text text=\\\"JavaScript\\\"/> tiddlers, with their `module-type` set to \\\"highlight\\\".\\n\\nFirst, locate the language file(s) you need. You can fetch the files from the following CDNs:\\n\\n* <a href=<<jsDelivrLink>>>jsDelivr</a>\\n* <a href=<<unpkgLink>>>unpkg</a>\\n\\nThen, click the button below to create a \\\"highlight\\\" module. Copy and paste the content of a language file into the the text area. Give your tiddler a meaningful title so you can keep track of the languages you've installed. You may choose to either create one tiddler per language or lump all language definitions into one tiddler. Save and reload your wiki.\\n\\n<$button tooltip=\\\"add new languages\\\" aria-label=\\\"add new languages\\\"  >\\n<$action-createtiddler $basetitle=\\\"highlight-language.js\\\"  text=\\\"\\\" type=\\\"application/javascript\\\" module-type=\\\"highlight\\\">\\n<$action-sendmessage $message=\\\"tm-edit-tiddler\\\" $param=<<createTiddler-title>>/>\\n</$action-createtiddler>\\nAdd New Language(s)\\n</$button>\\n\\n!!! Keeping Your Language Definitions Up-to-date\\n\\nRemember to update installed languages whenever this plugin is upgraded: \\n\\n<ul>\\n<$list filter=\\\"[[highlight]modules[]]\\\" emptyMessage=\\\"\\\"\\\"<li>(none installed)</li>\\\"\\\"\\\">\\n<li><$link><<currentTiddler>></$link></li>\\n</$list>\\n</ul>\\n\\n!! Via <$text text=\\\"TiddlyWiki\\\"/> on Node.js\\n\\nYou can replace the supplied highlight.js library with a custom version:\\n\\n# Go to the highlight.js project [[download page|https://highlightjs.org/download/]], select the language definitions to include, and press the Download button to download a zip archive containing customised support files for a highlight.js syntax highlighting server.\\n# Locate the `highlight.min.js` file in the highlight plugin -- on a stock Debian 8 system running Tiddlywiki5 under node-js, it is in `/usr/local/lib/node_modules/tiddlywiki/plugins/tiddlywiki/highlight/files/`.\\n# Replace the plugin `highlight.min.js` file located in step 2 with the one from the downloaded archive obtained in step 1.\\n# Restart the ~TiddlyWiki server.\"}}}"
  },
  {
    "title": "$:/themes/tiddlywiki/snowwhite",
    "name": "Snow White",
    "author": "JeremyRuston",
    "core-version": ">=5.0.0",
    "plugin-type": "theme",
    "description": "Emphasises individual tiddlers",
    "dependents": "$:/themes/tiddlywiki/vanilla",
    "plugin-priority": "0",
    "version": "5.3.5",
    "type": "application/json",
    "text": "{\"tiddlers\":{\"$:/themes/tiddlywiki/snowwhite/base\":{\"title\":\"$:/themes/tiddlywiki/snowwhite/base\",\"tags\":\"[[$:/tags/Stylesheet]]\",\"text\":\"\\\\define sidebarbreakpoint-minus-one()\\n<$text text={{{ [{$:/themes/tiddlywiki/vanilla/metrics/sidebarbreakpoint}removesuffix[px]subtract[1]addsuffix[px]] ~[{$:/themes/tiddlywiki/vanilla/metrics/sidebarbreakpoint}] }}}/>\\n\\\\end\\n\\n\\\\rules only filteredtranscludeinline transcludeinline macrodef macrocallinline\\n\\n.tc-sidebar-header {\\n\\ttext-shadow: 0 1px 0 <<colour sidebar-foreground-shadow>>;\\n}\\n\\n.tc-tiddler-info {\\n\\t<<box-shadow \\\"inset 1px 2px 3px rgba(0,0,0,0.1)\\\">>\\n}\\n\\n@media screen {\\n\\t.tc-tiddler-frame {\\n\\t\\t<<box-shadow \\\"1px 1px 5px rgba(0, 0, 0, 0.3)\\\">>\\n\\t}\\n}\\n\\n@media (max-width: <<sidebarbreakpoint-minus-one>>) {\\n\\t.tc-tiddler-frame {\\n\\t\\t<<box-shadow none>>\\n\\t}\\n}\\n\\n.tc-page-controls button svg, .tc-tiddler-controls button svg, .tc-topbar button svg {\\n\\t<<transition \\\"fill 150ms ease-in-out\\\">>\\n}\\n\\n.tc-tiddler-controls button.tc-selected,\\n.tc-page-controls button.tc-selected {\\n\\t<<filter \\\"drop-shadow(0px -1px 2px rgba(0,0,0,0.25))\\\">>\\n}\\n\\n.tc-tiddler-frame input.tc-edit-texteditor,\\n.tc-tiddler-frame select.tc-edit-texteditor {\\n\\t<<box-shadow \\\"inset 0 1px 8px rgba(0, 0, 0, 0.15)\\\">>\\n}\\n\\n.tc-edit-tags {\\n\\t<<box-shadow \\\"inset 0 1px 8px rgba(0, 0, 0, 0.15)\\\">>\\n}\\n\\n.tc-tiddler-frame .tc-edit-tags input.tc-edit-texteditor {\\n\\t<<box-shadow \\\"none\\\">>\\n\\tborder: none;\\n\\toutline: none;\\n}\\n\\ntextarea.tc-edit-texteditor {\\n\\tfont-family: {{$:/themes/tiddlywiki/vanilla/settings/editorfontfamily}};\\n}\\n\\ncanvas.tc-edit-bitmapeditor  {\\n\\t<<box-shadow \\\"2px 2px 5px rgba(0, 0, 0, 0.5)\\\">>\\n}\\n\\n.tc-drop-down {\\n\\tborder-radius: 4px;\\n\\t<<box-shadow \\\"2px 2px 10px rgba(0, 0, 0, 0.5)\\\">>\\n}\\n\\n.tc-block-dropdown {\\n\\tborder-radius: 4px;\\n\\t<<box-shadow \\\"2px 2px 10px rgba(0, 0, 0, 0.5)\\\">>\\n}\\n\\n.tc-modal {\\n\\tborder-radius: 6px;\\n\\t<<box-shadow \\\"0 3px 7px rgba(0,0,0,0.3)\\\">>\\n}\\n\\n.tc-modal-footer {\\n\\tborder-radius: 0 0 6px 6px;\\n\\t<<box-shadow \\\"inset 0 1px 0 #fff\\\">>;\\n}\\n\\n\\n.tc-alert {\\n\\tborder-radius: 6px;\\n\\t<<box-shadow \\\"0 3px 7px rgba(0,0,0,0.6)\\\">>\\n}\\n\\n.tc-notification {\\n\\tborder-radius: 6px;\\n\\t<<box-shadow \\\"0 3px 7px rgba(0,0,0,0.3)\\\">>\\n\\ttext-shadow: 0 1px 0 rgba(255,255,255, 0.8);\\n}\\n\\n.tc-sidebar-lists .tc-tab-set .tc-tab-divider {\\n\\tborder-top: none;\\n\\theight: 1px;\\n\\t<<background-linear-gradient \\\"left, rgba(0,0,0,0.15) 0%, rgba(0,0,0,0.0) 100%\\\">>\\n}\\n\\n.tc-more-sidebar > .tc-tab-set > .tc-tab-buttons > button {\\n\\t<<background-linear-gradient \\\"left, rgba(0,0,0,0.01) 0%, rgba(0,0,0,0.1) 100%\\\">>\\n}\\n\\n.tc-more-sidebar > .tc-tab-set > .tc-tab-buttons > button.tc-tab-selected {\\n\\t<<background-linear-gradient \\\"left, rgba(0,0,0,0.05) 0%, rgba(255,255,255,0.05) 100%\\\">>\\n}\\n\\n.tc-message-box img {\\n\\t<<box-shadow \\\"1px 1px 3px rgba(0,0,0,0.5)\\\">>\\n}\\n\\n.tc-plugin-info {\\n\\t<<box-shadow \\\"1px 1px 3px rgba(0,0,0,0.5)\\\">>\\n}\\n\"}}}"
  },
  {
    "title": "$:/themes/tiddlywiki/vanilla",
    "name": "Vanilla",
    "author": "JeremyRuston",
    "core-version": ">=5.0.0",
    "plugin-type": "theme",
    "description": "Basic theme",
    "plugin-priority": "0",
    "version": "5.3.5",
    "dependents": "",
    "type": "application/json",
    "text": "{\"tiddlers\":{\"$:/themes/tiddlywiki/vanilla/themetweaks\":{\"title\":\"$:/themes/tiddlywiki/vanilla/themetweaks\",\"tags\":\"$:/tags/ControlPanel/Appearance\",\"caption\":\"{{$:/language/ThemeTweaks/ThemeTweaks}}\",\"text\":\"\\\\define lingo-base() $:/language/ThemeTweaks/\\n\\n\\\\define replacement-text()\\n[img[$(imageTitle)$]]\\n\\\\end\\n\\n\\\\define backgroundimage-dropdown()\\n<div class=\\\"tc-drop-down-wrapper\\\">\\n<$set name=\\\"state\\\" value=<<qualify \\\"$:/state/popup/themetweaks/backgroundimage\\\">>>\\n<$button popup=<<state>> class=\\\"tc-btn-invisible tc-btn-dropdown\\\">{{$:/core/images/down-arrow}}</$button>\\n<$reveal state=<<state>> type=\\\"popup\\\" position=\\\"belowleft\\\" text=\\\"\\\" default=\\\"\\\" class=\\\"tc-popup-keep\\\">\\n<div class=\\\"tc-drop-down\\\" style=\\\"text-align:center;\\\">\\n<$macrocall $name=\\\"image-picker\\\" actions=\\\"\\\"\\\"\\n\\n<$action-setfield\\n\\t$tiddler=\\\"$:/themes/tiddlywiki/vanilla/settings/backgroundimage\\\"\\n\\t$value=<<imageTitle>>\\n/>\\n\\n<$action-deletetiddler $tiddler=<<state>>/>\\n\\n\\\"\\\"\\\"/>\\n</div>\\n</$reveal>\\n</$set>\\n</div>\\n\\\\end\\n\\n\\\\define backgroundimageattachment-dropdown()\\n<$select tiddler=\\\"$:/themes/tiddlywiki/vanilla/settings/backgroundimageattachment\\\" default=\\\"scroll\\\">\\n<option value=\\\"scroll\\\"><<lingo Settings/BackgroundImageAttachment/Scroll>></option>\\n<option value=\\\"fixed\\\"><<lingo Settings/BackgroundImageAttachment/Fixed>></option>\\n</$select>\\n\\\\end\\n\\n\\\\define backgroundimagesize-dropdown()\\n<$select tiddler=\\\"$:/themes/tiddlywiki/vanilla/settings/backgroundimagesize\\\" default=\\\"scroll\\\">\\n<option value=\\\"auto\\\"><<lingo Settings/BackgroundImageSize/Auto>></option>\\n<option value=\\\"cover\\\"><<lingo Settings/BackgroundImageSize/Cover>></option>\\n<option value=\\\"contain\\\"><<lingo Settings/BackgroundImageSize/Contain>></option>\\n</$select>\\n\\\\end\\n\\n<<lingo ThemeTweaks/Hint>>\\n\\n! <<lingo Options>>\\n\\n|<$link to=\\\"$:/themes/tiddlywiki/vanilla/options/sidebarlayout\\\"><<lingo Options/SidebarLayout>></$link> |<$select tiddler=\\\"$:/themes/tiddlywiki/vanilla/options/sidebarlayout\\\"><option value=\\\"fixed-fluid\\\"><<lingo Options/SidebarLayout/Fixed-Fluid>></option><option value=\\\"fluid-fixed\\\"><<lingo Options/SidebarLayout/Fluid-Fixed>></option></$select> |\\n|<$link to=\\\"$:/themes/tiddlywiki/vanilla/options/stickytitles\\\"><<lingo Options/StickyTitles>></$link><br>//<<lingo Options/StickyTitles/Hint>>// |<$select tiddler=\\\"$:/themes/tiddlywiki/vanilla/options/stickytitles\\\"><option value=\\\"no\\\">{{$:/language/No}}</option><option value=\\\"yes\\\">{{$:/language/Yes}}</option></$select> |\\n|<$link to=\\\"$:/themes/tiddlywiki/vanilla/options/codewrapping\\\"><<lingo Options/CodeWrapping>></$link> |<$select tiddler=\\\"$:/themes/tiddlywiki/vanilla/options/codewrapping\\\"><option value=\\\"pre\\\">{{$:/language/No}}</option><option value=\\\"pre-wrap\\\">{{$:/language/Yes}}</option></$select> |\\n\\n! <<lingo Settings>>\\n\\n|<$link to=\\\"$:/themes/tiddlywiki/vanilla/settings/fontfamily\\\"><<lingo Settings/FontFamily>></$link> |<$edit-text tiddler=\\\"$:/themes/tiddlywiki/vanilla/settings/fontfamily\\\" default=\\\"\\\" tag=\\\"input\\\"/> | |\\n|<$link to=\\\"$:/themes/tiddlywiki/vanilla/settings/codefontfamily\\\"><<lingo Settings/CodeFontFamily>></$link> |<$edit-text tiddler=\\\"$:/themes/tiddlywiki/vanilla/settings/codefontfamily\\\" default=\\\"\\\" tag=\\\"input\\\"/> | |\\n|<$link to=\\\"$:/themes/tiddlywiki/vanilla/settings/editorfontfamily\\\"><<lingo Settings/EditorFontFamily>></$link> |<$edit-text tiddler=\\\"$:/themes/tiddlywiki/vanilla/settings/editorfontfamily\\\" default=\\\"\\\" tag=\\\"input\\\"/> | |\\n|<$link to=\\\"$:/themes/tiddlywiki/vanilla/settings/backgroundimage\\\"><<lingo Settings/BackgroundImage>></$link> |<$edit-text tiddler=\\\"$:/themes/tiddlywiki/vanilla/settings/backgroundimage\\\" default=\\\"\\\" tag=\\\"input\\\"/> |<<backgroundimage-dropdown>> |\\n|<$link to=\\\"$:/themes/tiddlywiki/vanilla/settings/backgroundimageattachment\\\"><<lingo Settings/BackgroundImageAttachment>></$link> |<<backgroundimageattachment-dropdown>> | |\\n|<$link to=\\\"$:/themes/tiddlywiki/vanilla/settings/backgroundimagesize\\\"><<lingo Settings/BackgroundImageSize>></$link> |<<backgroundimagesize-dropdown>> | |\\n\\n! <<lingo Metrics>>\\n\\n|<$link to=\\\"$:/themes/tiddlywiki/vanilla/metrics/fontsize\\\"><<lingo Metrics/FontSize>></$link> |<$edit-text tiddler=\\\"$:/themes/tiddlywiki/vanilla/metrics/fontsize\\\" default=\\\"\\\" tag=\\\"input\\\"/> |\\n|<$link to=\\\"$:/themes/tiddlywiki/vanilla/metrics/lineheight\\\"><<lingo Metrics/LineHeight>></$link> |<$edit-text tiddler=\\\"$:/themes/tiddlywiki/vanilla/metrics/lineheight\\\" default=\\\"\\\" tag=\\\"input\\\"/> |\\n|<$link to=\\\"$:/themes/tiddlywiki/vanilla/metrics/bodyfontsize\\\"><<lingo Metrics/BodyFontSize>></$link> |<$edit-text tiddler=\\\"$:/themes/tiddlywiki/vanilla/metrics/bodyfontsize\\\" default=\\\"\\\" tag=\\\"input\\\"/> |\\n|<$link to=\\\"$:/themes/tiddlywiki/vanilla/metrics/bodylineheight\\\"><<lingo Metrics/BodyLineHeight>></$link> |<$edit-text tiddler=\\\"$:/themes/tiddlywiki/vanilla/metrics/bodylineheight\\\" default=\\\"\\\" tag=\\\"input\\\"/> |\\n|<$link to=\\\"$:/themes/tiddlywiki/vanilla/metrics/storyleft\\\"><<lingo Metrics/StoryLeft>></$link><br>//<<lingo Metrics/StoryLeft/Hint>>// |^<$edit-text tiddler=\\\"$:/themes/tiddlywiki/vanilla/metrics/storyleft\\\" default=\\\"\\\" tag=\\\"input\\\"/> |\\n|<$link to=\\\"$:/themes/tiddlywiki/vanilla/metrics/storytop\\\"><<lingo Metrics/StoryTop>></$link><br>//<<lingo Metrics/StoryTop/Hint>>// |^<$edit-text tiddler=\\\"$:/themes/tiddlywiki/vanilla/metrics/storytop\\\" default=\\\"\\\" tag=\\\"input\\\"/> |\\n|<$link to=\\\"$:/themes/tiddlywiki/vanilla/metrics/storyright\\\"><<lingo Metrics/StoryRight>></$link><br>//<<lingo Metrics/StoryRight/Hint>>// |^<$edit-text tiddler=\\\"$:/themes/tiddlywiki/vanilla/metrics/storyright\\\" default=\\\"\\\" tag=\\\"input\\\"/> |\\n|<$link to=\\\"$:/themes/tiddlywiki/vanilla/metrics/storywidth\\\"><<lingo Metrics/StoryWidth>></$link><br>//<<lingo Metrics/StoryWidth/Hint>>// |^<$edit-text tiddler=\\\"$:/themes/tiddlywiki/vanilla/metrics/storywidth\\\" default=\\\"\\\" tag=\\\"input\\\"/> |\\n|<$link to=\\\"$:/themes/tiddlywiki/vanilla/metrics/tiddlerwidth\\\"><<lingo Metrics/TiddlerWidth>></$link><br>//<<lingo Metrics/TiddlerWidth/Hint>>//<br> |^<$edit-text tiddler=\\\"$:/themes/tiddlywiki/vanilla/metrics/tiddlerwidth\\\" default=\\\"\\\" tag=\\\"input\\\"/> |\\n|<$link to=\\\"$:/themes/tiddlywiki/vanilla/metrics/sidebarbreakpoint\\\"><<lingo Metrics/SidebarBreakpoint>></$link><br>//<<lingo Metrics/SidebarBreakpoint/Hint>>// |^<$edit-text tiddler=\\\"$:/themes/tiddlywiki/vanilla/metrics/sidebarbreakpoint\\\" default=\\\"\\\" tag=\\\"input\\\"/> |\\n|<$link to=\\\"$:/themes/tiddlywiki/vanilla/metrics/sidebarwidth\\\"><<lingo Metrics/SidebarWidth>></$link><br>//<<lingo Metrics/SidebarWidth/Hint>>// |^<$edit-text tiddler=\\\"$:/themes/tiddlywiki/vanilla/metrics/sidebarwidth\\\" default=\\\"\\\" tag=\\\"input\\\"/> |\\n\"},\"$:/themes/tiddlywiki/vanilla/base\":{\"title\":\"$:/themes/tiddlywiki/vanilla/base\",\"tags\":\"[[$:/tags/Stylesheet]]\",\"list-before\":\"\",\"code-body\":\"yes\",\"text\":\"\\\\define custom-background-datauri()\\n<$set name=\\\"background\\\" value={{$:/themes/tiddlywiki/vanilla/settings/backgroundimage}}>\\n<$list filter=\\\"[<background>is[image]]\\\">\\n`background: url(`\\n<$list filter=\\\"[<background>!has[_canonical_uri]]\\\">\\n`\\\"`<$macrocall $name=\\\"datauri\\\" title={{$:/themes/tiddlywiki/vanilla/settings/backgroundimage}}/>`\\\"`\\n</$list>\\n<$list filter=\\\"[<background>has[_canonical_uri]]\\\">\\n`\\\"`<$view tiddler={{$:/themes/tiddlywiki/vanilla/settings/backgroundimage}} field=\\\"_canonical_uri\\\"/>`\\\"`\\n</$list>\\n`) center center;`\\n`background-attachment: `{{$:/themes/tiddlywiki/vanilla/settings/backgroundimageattachment}}`;\\n-webkit-background-size:` {{$:/themes/tiddlywiki/vanilla/settings/backgroundimagesize}}`;\\n-moz-background-size:` {{$:/themes/tiddlywiki/vanilla/settings/backgroundimagesize}}`;\\n-o-background-size:` {{$:/themes/tiddlywiki/vanilla/settings/backgroundimagesize}}`;\\nbackground-size:` {{$:/themes/tiddlywiki/vanilla/settings/backgroundimagesize}}`;`\\n</$list>\\n</$set>\\n\\\\end\\n\\n\\\\define sidebarbreakpoint()\\n<$text text={{$:/themes/tiddlywiki/vanilla/metrics/sidebarbreakpoint}}/>\\n\\\\end\\n\\n\\\\define sidebarbreakpoint-minus-one()\\n<$text text={{{ [{$:/themes/tiddlywiki/vanilla/metrics/sidebarbreakpoint}removesuffix[px]subtract[1]addsuffix[px]] ~[{$:/themes/tiddlywiki/vanilla/metrics/sidebarbreakpoint}] }}}/>\\n\\\\end\\n\\n\\\\define if-fluid-fixed(text,hiddenSidebarText)\\n<$reveal state=\\\"$:/themes/tiddlywiki/vanilla/options/sidebarlayout\\\" type=\\\"match\\\" text=\\\"fluid-fixed\\\">\\n$text$\\n<$reveal state=\\\"$:/state/sidebar\\\" type=\\\"nomatch\\\" text=\\\"yes\\\" default=\\\"yes\\\">\\n$hiddenSidebarText$\\n</$reveal>\\n</$reveal>\\n\\\\end\\n\\n\\\\define if-editor-height-fixed(then,else)\\n<$reveal state=\\\"$:/config/TextEditor/EditorHeight/Mode\\\" type=\\\"match\\\" text=\\\"fixed\\\">\\n$then$\\n</$reveal>\\n<$reveal state=\\\"$:/config/TextEditor/EditorHeight/Mode\\\" type=\\\"match\\\" text=\\\"auto\\\">\\n$else$\\n</$reveal>\\n\\\\end\\n\\n\\\\define set-type-selector-min-width()\\n<$set name=\\\"typeLength\\\" value={{{ [all[shadows+tiddlers]prefix[$:/language/Docs/Types/]get[name]length[]maxall[]] }}}>\\n\\n\\t.tc-type-selector-dropdown-wrapper {\\n\\t\\tmin-width: calc(<<typeLength>>ch + 4em);\\n\\t}\\n\\n\\t.tc-type-selector-dropdown-wrapper input.tc-edit-typeeditor {\\n\\t\\tmin-width: <<typeLength>>ch;\\n\\t}\\n\\n</$set>\\n\\\\end\\n\\n\\\\rules only filteredtranscludeinline transcludeinline macrodef macrocallinline macrocallblock\\n\\n/*\\n** Start with the normalize CSS reset, and then belay some of its effects\\n*/\\n\\n{{$:/themes/tiddlywiki/vanilla/reset}}\\n\\n*, input[type=\\\"search\\\"] {\\n\\tbox-sizing: border-box;\\n\\t-moz-box-sizing: border-box;\\n\\t-webkit-box-sizing: border-box;\\n}\\n\\n/*\\n** Button default styles. Makes them look consistent for all browsers\\n*/\\nhtml button {\\n\\tline-height: 1.2;\\n\\tcolor: <<colour button-foreground>>;\\n\\tfill: <<colour button-foreground>>;\\n\\tbackground: <<colour button-background>>;\\n\\tborder-color: <<colour button-border>>;\\n}\\n\\nbutton:disabled svg {\\n\\tfill: <<colour muted-foreground>>;\\n}\\n\\n/*\\n** Basic element styles\\n*/\\n\\nhtml, body {\\n\\tfont-family: {{$:/themes/tiddlywiki/vanilla/settings/fontfamily}};\\n\\ttext-rendering: optimizeLegibility; /* Enables kerning and ligatures etc. */\\n\\t-webkit-font-smoothing: antialiased;\\n\\t-moz-osx-font-smoothing: grayscale;\\n}\\n\\nhtml:-webkit-full-screen {\\n\\tbackground-color: <<colour page-background>>;\\n}\\n\\nbody.tc-body {\\n\\tfont-size: {{$:/themes/tiddlywiki/vanilla/metrics/fontsize}};\\n\\tline-height: {{$:/themes/tiddlywiki/vanilla/metrics/lineheight}};\\n\\tword-wrap: break-word;\\n\\t<<custom-background-datauri>>\\n\\tcolor: <<colour foreground>>;\\n\\tbackground-color: <<colour page-background>>;\\n\\tfill: <<colour foreground>>;\\n}\\n\\n<<if-background-attachment \\\"\\\"\\\"\\n\\nbody.tc-body {\\n\\tbackground-color: transparent;\\n}\\n\\n\\\"\\\"\\\">>\\n\\n/**\\n * Correct the font size and margin on `h1` elements within `section` and\\n * `article` contexts in Chrome, Firefox, and Safari.\\n */\\n\\nh1 {\\n\\tfont-size: 2em;\\n}\\n\\nh1, h2, h3, h4, h5, h6 {\\n\\tline-height: 1.2;\\n\\tfont-weight: normal;\\n}\\n\\npre {\\n\\tdisplay: block;\\n\\tmargin-top: 1em;\\n\\tmargin-bottom: 1em;\\n\\tword-break: normal;\\n\\tword-wrap: break-word;\\n\\twhite-space: {{$:/themes/tiddlywiki/vanilla/options/codewrapping}};\\n\\tbackground-color: <<colour pre-background>>;\\n\\tborder: 1px solid <<colour pre-border>>;\\n\\tpadding: 0 3px 2px;\\n\\tborder-radius: 3px;\\n\\tfont-family: {{$:/themes/tiddlywiki/vanilla/settings/codefontfamily}};\\n}\\n\\ncode {\\n\\tcolor: <<colour code-foreground>>;\\n\\tbackground-color: <<colour code-background>>;\\n\\tborder: 1px solid <<colour code-border>>;\\n\\twhite-space: {{$:/themes/tiddlywiki/vanilla/options/codewrapping}};\\n\\tpadding: 0 3px 2px;\\n\\tborder-radius: 3px;\\n\\tfont-family: {{$:/themes/tiddlywiki/vanilla/settings/codefontfamily}};\\n}\\n\\nblockquote {\\n\\tborder-left: 5px solid <<colour blockquote-bar>>;\\n\\tmargin-left: 25px;\\n\\tpadding-left: 10px;\\n\\tquotes: \\\"\\\\201C\\\"\\\"\\\\201D\\\"\\\"\\\\2018\\\"\\\"\\\\2019\\\";\\n}\\n\\nblockquote > div {\\n\\tmargin-top: 1em;\\n\\tmargin-bottom: 1em;\\n}\\n\\nblockquote.tc-big-quote {\\n\\tfont-family: Georgia, serif;\\n\\tposition: relative;\\n\\tbackground: <<colour pre-background>>;\\n\\tborder-left: none;\\n\\tmargin-left: 50px;\\n\\tmargin-right: 50px;\\n\\tpadding: 10px;\\n\\tborder-radius: 8px;\\n}\\n\\nblockquote.tc-big-quote cite:before {\\n\\tcontent: \\\"\\\\2014 \\\\2009\\\";\\n}\\n\\nblockquote.tc-big-quote:before {\\n\\tfont-family: Georgia, serif;\\n\\tcolor: <<colour blockquote-bar>>;\\n\\tcontent: open-quote;\\n\\tfont-size: 8em;\\n\\tline-height: 0.1em;\\n\\tmargin-right: 0.25em;\\n\\tvertical-align: -0.4em;\\n\\tposition: absolute;\\n\\tleft: -50px;\\n\\ttop: 42px;\\n}\\n\\nblockquote.tc-big-quote:after {\\n\\tfont-family: Georgia, serif;\\n\\tcolor: <<colour blockquote-bar>>;\\n\\tcontent: close-quote;\\n\\tfont-size: 8em;\\n\\tline-height: 0.1em;\\n\\tmargin-right: 0.25em;\\n\\tvertical-align: -0.4em;\\n\\tposition: absolute;\\n\\tright: -80px;\\n\\tbottom: -20px;\\n}\\n\\ndl dt {\\n\\tfont-weight: bold;\\n\\tmargin-top: 6px;\\n}\\n\\ntextarea,\\ninput[type=text],\\ninput[type=search],\\ninput[type=\\\"\\\"],\\ninput:not([type]) {\\n\\tcolor: <<colour foreground>>;\\n\\tbackground: <<colour background>>;\\n}\\n\\ninput[type=\\\"checkbox\\\"] {\\n\\tvertical-align: middle;\\n}\\n\\ninput[type=\\\"search\\\"]::-webkit-search-decoration,\\ninput[type=\\\"search\\\"]::-webkit-search-cancel-button,\\ninput[type=\\\"search\\\"]::-webkit-search-results-button,\\ninput[type=\\\"search\\\"]::-webkit-search-results-decoration {\\n\\t-webkit-appearance:none;\\n}\\n\\n.tc-muted {\\n\\tcolor: <<colour muted-foreground>>;\\n}\\n\\nsvg.tc-image-button {\\n\\tpadding: 0px 1px 1px 0px;\\n}\\n\\n.tc-icon-wrapper > svg {\\n\\twidth: 1em;\\n\\theight: 1em;\\n}\\n\\nkbd {\\n\\tdisplay: inline-block;\\n\\tpadding: 3px 5px;\\n\\tfont-size: 0.8em;\\n\\tline-height: 1.2;\\n\\tcolor: <<colour foreground>>;\\n\\tvertical-align: middle;\\n\\tbackground-color: <<colour background>>;\\n\\tborder: solid 1px <<colour muted-foreground>>;\\n\\tborder-bottom-color: <<colour muted-foreground>>;\\n\\tborder-radius: 3px;\\n\\tbox-shadow: inset 0 -1px 0 <<colour muted-foreground>>;\\n}\\n\\n::selection {\\n\\tbackground-color: Highlight;\\n\\tcolor: HighlightText;\\n\\tbackground-color: <<colour selection-background>>;\\n\\tcolor: <<colour selection-foreground>>;\\n}\\n\\n.tc-inline-style {\\n\\tbackground: <<colour highlight-background>>;\\n\\tcolor: <<colour highlight-foreground>>;\\n}\\n\\nform.tc-form-inline {\\n\\tdisplay: inline;\\n}\\n\\n/*\\nMarkdown likes putting code elements inside pre elements\\n*/\\npre > code {\\n\\tpadding: 0;\\n\\tborder: none;\\n\\tbackground-color: inherit;\\n\\tcolor: inherit;\\n}\\n\\n/*\\nTable defaults\\n*/\\n\\ntable {\\n\\tborder: 1px solid <<colour table-border>>;\\n\\twidth: auto;\\n\\tmax-width: 100%;\\n\\tcaption-side: bottom;\\n\\tmargin-top: 1em;\\n\\tmargin-bottom: 1em;\\n\\t/* next 2 elements needed, since normalize 8.0.1 */\\n\\tborder-collapse: collapse;\\n\\tborder-spacing: 0;\\n}\\n\\ntable th, table td {\\n\\tpadding: 0 7px 0 7px;\\n\\tborder-top: 1px solid <<colour table-border>>;\\n\\tborder-left: 1px solid <<colour table-border>>;\\n}\\n\\ntable thead tr td, table th {\\n\\tbackground-color: <<colour table-header-background>>;\\n\\tfont-weight: bold;\\n}\\n\\ntable tfoot tr td {\\n\\tbackground-color: <<colour table-footer-background>>;\\n}\\n\\n/*\\nTable utility classes\\n*/\\n\\n/* Remove borders from table as used in eg: GettingStarted*/\\n.tc-table-no-border,\\n.tc-table-no-border th,\\n.tc-table-no-border td {\\n\\tborder: initial;\\n}\\n\\n/* First column in table width will fit to text.*/\\n/* This rule makes most sense with tc-first-link-nowrap*/\\n.tc-first-col-min-width td:nth-child(1) {\\n\\twidth: 1%;\\n}\\n\\n/*\\n** Utility classes work well with tables but also for other containers\\n*/\\n\\n/* First link A element will not wrap */\\n.tc-first-link-nowrap:first-of-type a {\\n\\twhite-space: nowrap;\\n}\\n\\n/* Move the table to the center of the container */\\n.tc-center {\\n\\tmargin-left: auto;\\n\\tmargin-right: auto;\\n}\\n\\n.tc-max-width {\\n\\twidth: 100%;\\n}\\n\\n.tc-max-width-80 {\\n\\tmax-width: 80%;\\n}\\n\\n/* Allow input and textarea to look like the ControlPanel inputs */\\n.tc-edit-max-width input,\\n.tc-edit-max-width textarea {\\n\\twidth: 100%;\\n\\tpadding: 3px;\\n}\\n\\n/*\\nCSV parser plugin\\n*/\\n\\n.tc-csv-table {\\n\\twhite-space: nowrap;\\n}\\n\\n.tc-csv-table th,\\n.tc-csv-table td {\\n\\twhite-space: pre-line;\\n}\\n\\n/*\\nTiddler frame in story river\\n*/\\n\\n.tc-tiddler-frame img,\\n.tc-tiddler-frame svg,\\n.tc-tiddler-frame canvas,\\n.tc-tiddler-frame embed,\\n.tc-tiddler-frame iframe {\\n\\tmax-width: 100%;\\n}\\n\\n.tc-tiddler-body > embed,\\n.tc-tiddler-body > iframe {\\n\\twidth: 100%;\\n\\theight: 600px;\\n}\\n\\n:root {\\n\\tcolor-scheme: {{{ [{$:/palette}get[color-scheme]] ~light }}};\\n}\\n\\n/*\\n** Links\\n*/\\n\\nbutton.tc-tiddlylink,\\na.tc-tiddlylink {\\n\\ttext-decoration: none;\\n\\tfont-weight: 500;\\n\\tcolor: <<colour tiddler-link-foreground>>;\\n\\t-webkit-user-select: inherit; /* Otherwise the draggable attribute makes links impossible to select */\\n\\t-webkit-touch-callout: none; /* Prevents long presses from bringing up a link preview */\\n}\\n\\n.tc-sidebar-lists a.tc-tiddlylink {\\n\\tcolor: <<colour sidebar-tiddler-link-foreground>>;\\n}\\n\\n.tc-sidebar-lists a.tc-tiddlylink:hover {\\n\\tcolor: <<colour sidebar-tiddler-link-foreground-hover>>;\\n}\\n\\nbutton.tc-tiddlylink:hover,\\na.tc-tiddlylink:hover {\\n\\ttext-decoration: underline;\\n}\\n\\na.tc-tiddlylink-resolves {\\n}\\n\\na.tc-tiddlylink-shadow {\\n\\tfont-weight: bold;\\n}\\n\\na.tc-tiddlylink-shadow.tc-tiddlylink-resolves {\\n\\tfont-weight: normal;\\n}\\n\\na.tc-tiddlylink-missing {\\n\\tfont-style: italic;\\n}\\n\\na.tc-tiddlylink-external {\\n\\ttext-decoration: underline;\\n\\tcolor: <<colour external-link-foreground>>;\\n\\tbackground-color: <<colour external-link-background>>;\\n}\\n\\na.tc-tiddlylink-external:visited {\\n\\tcolor: <<colour external-link-foreground-visited>>;\\n\\tbackground-color: <<colour external-link-background-visited>>;\\n}\\n\\na.tc-tiddlylink-external:hover {\\n\\tcolor: <<colour external-link-foreground-hover>>;\\n\\tbackground-color: <<colour external-link-background-hover>>;\\n}\\n\\n.tc-drop-down a.tc-tiddlylink:hover {\\n\\tcolor: <<colour tiddler-link-background>>;\\n}\\n\\n/*\\n** Drag and drop styles\\n*/\\n\\n.tc-tiddler-dragger {\\n\\tposition: relative;\\n\\tz-index: -10000;\\n}\\n\\n.tc-tiddler-dragger-inner {\\n\\tposition: absolute;\\n\\ttop: -1000px;\\n\\tleft: -1000px;\\n\\tdisplay: inline-block;\\n\\tpadding: 8px 20px;\\n\\tfont-size: 16.9px;\\n\\tfont-weight: bold;\\n\\tline-height: 20px;\\n\\tcolor: <<colour dragger-foreground>>;\\n\\ttext-shadow: 0 1px 0 rgba(0, 0, 0, 1);\\n\\twhite-space: nowrap;\\n\\tvertical-align: baseline;\\n\\tbackground-color: <<colour dragger-background>>;\\n\\tborder-radius: 20px;\\n}\\n\\n.tc-tiddler-dragger-cover {\\n\\tposition: absolute;\\n\\tbackground-color: <<colour page-background>>;\\n}\\n\\n.tc-page-container > .tc-dropzone {\\n\\tmin-height: 100vh;\\n}\\n\\n.tc-dropzone {\\n\\tposition: relative;\\n}\\n\\n.tc-dropzone.tc-dragover:before {\\n\\tz-index: 10000;\\n\\tdisplay: block;\\n\\tposition: fixed;\\n\\ttop: 0;\\n\\tleft: 0;\\n\\tright: 0;\\n\\tbackground: <<colour dropzone-background>>;\\n\\ttext-align: center;\\n\\tcontent: \\\"<<lingo DropMessage>>\\\";\\n}\\n\\n.tc-droppable > .tc-droppable-placeholder {\\n\\tdisplay: none;\\n}\\n\\n.tc-droppable.tc-dragover > .tc-droppable-placeholder {\\n\\tdisplay: block;\\n\\tborder: 2px dashed <<colour dropzone-background>>;\\n}\\n\\n.tc-draggable {\\n\\tcursor: move;\\n}\\n\\n.tc-sidebar-tab-open .tc-droppable-placeholder, .tc-tagged-draggable-list .tc-droppable-placeholder,\\n.tc-links-draggable-list .tc-droppable-placeholder {\\n\\tline-height: 2em;\\n\\theight: 2em;\\n}\\n\\n.tc-sidebar-tab-open-item {\\n\\tposition: relative;\\n}\\n\\n.tc-sidebar-tab-open .tc-btn-invisible.tc-btn-mini svg {\\n\\tfont-size: 0.7em;\\n\\tfill: <<colour muted-foreground>>;\\n}\\n\\n/*\\n** Plugin reload warning\\n*/\\n\\n.tc-plugin-reload-warning {\\n\\tz-index: 1000;\\n\\tdisplay: block;\\n\\tposition: fixed;\\n\\ttop: 0;\\n\\tleft: 0;\\n\\tright: 0;\\n\\tbackground: <<colour alert-background>>;\\n\\ttext-align: center;\\n}\\n\\n/*\\n** Buttons\\n*/\\n\\nbutton svg, button img, label svg, label img {\\n\\tvertical-align: middle;\\n}\\n\\n.tc-btn-invisible {\\n\\tpadding: 0;\\n\\tmargin: 0;\\n\\tbackground: none;\\n\\tborder: none;\\n\\tcursor: pointer;\\n\\tcolor: <<colour foreground>>;\\n\\tfill: <<colour foreground>>;\\n}\\n\\nbutton:disabled.tc-btn-invisible  {\\n\\tcursor: default;\\n\\tcolor: <<colour muted-foreground>>;\\n}\\n\\n.tc-btn-boxed {\\n\\tfont-size: 0.6em;\\n\\tpadding: 0.2em;\\n\\tmargin: 1px;\\n\\tbackground: none;\\n\\tborder: 1px solid <<colour tiddler-controls-foreground>>;\\n\\tborder-radius: 0.25em;\\n}\\n\\nhtml body.tc-body .tc-btn-boxed svg {\\n\\tfont-size: 1.6666em;\\n}\\n\\n.tc-btn-boxed:hover {\\n\\tbackground: <<colour muted-foreground>>;\\n\\tcolor: <<colour background>>;\\n}\\n\\nhtml body.tc-body .tc-btn-boxed:hover svg {\\n\\tfill: <<colour background>>;\\n}\\n\\n.tc-btn-rounded {\\n\\tfont-size: 0.5em;\\n\\tline-height: 2;\\n\\tpadding: 0em 0.3em 0.2em 0.4em;\\n\\tmargin: 1px;\\n\\tborder: 1px solid <<colour muted-foreground>>;\\n\\tbackground: <<colour muted-foreground>>;\\n\\tcolor: <<colour background>>;\\n\\tborder-radius: 2em;\\n}\\n\\nhtml body.tc-body .tc-btn-rounded svg {\\n\\tfont-size: 1.6666em;\\n\\tfill: <<colour background>>;\\n}\\n\\n.tc-btn-rounded:hover {\\n\\tborder: 1px solid <<colour muted-foreground>>;\\n\\tbackground: <<colour background>>;\\n\\tcolor: <<colour muted-foreground>>;\\n}\\n\\nhtml body.tc-body .tc-btn-rounded:hover svg {\\n\\tfill: <<colour muted-foreground>>;\\n}\\n\\n.tc-btn-icon svg {\\n\\theight: 1em;\\n\\twidth: 1em;\\n\\tfill: <<colour muted-foreground>>;\\n}\\n\\n\\n.tc-btn-text {\\n\\tmargin-left: 7px;\\n}\\n\\n/* used for documentation \\\"fake\\\" buttons */\\n.tc-btn-standard {\\n\\tline-height: 1.8;\\n\\tcolor: #667;\\n\\tbackground-color: #e0e0e0;\\n\\tborder: 1px solid #888;\\n\\tpadding: 2px 1px 2px 1px;\\n\\tmargin: 1px 4px 1px 4px;\\n}\\n\\n.tc-btn-big-green {\\n\\tdisplay: inline-block;\\n\\tpadding: 8px;\\n\\tmargin: 4px 8px 4px 8px;\\n\\tbackground: <<colour download-background>>;\\n\\tcolor: <<colour download-foreground>>;\\n\\tfill: <<colour download-foreground>>;\\n\\tborder: none;\\n\\tborder-radius: 2px;\\n\\tfont-size: 1.2em;\\n\\tline-height: 1.4em;\\n\\ttext-decoration: none;\\n}\\n\\n.tc-btn-big-green svg,\\n.tc-btn-big-green img {\\n\\theight: 2em;\\n\\twidth: 2em;\\n\\tvertical-align: middle;\\n\\tfill: <<colour download-foreground>>;\\n}\\n\\n.tc-primary-btn {\\n\\tbackground: <<colour primary>>;\\n}\\n\\n.tc-sidebar-lists input {\\n\\tcolor: <<colour foreground>>;\\n}\\n\\n.tc-sidebar-lists button {\\n\\tcolor: <<colour sidebar-button-foreground>>;\\n\\tfill: <<colour sidebar-button-foreground>>;\\n}\\n\\n.tc-sidebar-lists button.tc-btn-mini {\\n\\tcolor: <<colour sidebar-muted-foreground>>;\\n}\\n\\n.tc-sidebar-lists button.tc-btn-mini:hover {\\n\\tcolor: <<colour sidebar-muted-foreground-hover>>;\\n}\\n\\n.tc-sidebar-lists button small {\\n\\tcolor: <<colour foreground>>;\\n}\\n\\nbutton svg.tc-image-button, button .tc-image-button img {\\n\\theight: 1em;\\n\\twidth: 1em;\\n}\\n\\n.tc-unfold-banner {\\n\\tposition: absolute;\\n\\tpadding: 0;\\n\\tmargin: 0;\\n\\tbackground: none;\\n\\tborder: none;\\n\\twidth: 100%;\\n\\twidth: calc(100% + 2px);\\n\\tmargin-left: -43px;\\n\\ttext-align: center;\\n\\tborder-top: 2px solid <<colour tiddler-info-background>>;\\n\\tmargin-top: 4px;\\n}\\n\\n.tc-unfold-banner:hover {\\n\\tbackground: <<colour tiddler-info-background>>;\\n\\tborder-top: 2px solid <<colour tiddler-info-border>>;\\n}\\n\\n.tc-unfold-banner svg, .tc-fold-banner svg {\\n\\theight: 0.75em;\\n\\tfill: <<colour tiddler-controls-foreground>>;\\n}\\n\\n.tc-unfold-banner:hover svg, .tc-fold-banner:hover svg {\\n\\tfill: <<colour tiddler-controls-foreground-hover>>;\\n}\\n\\n.tc-fold-banner {\\n\\tposition: absolute;\\n\\tpadding: 0;\\n\\tmargin: 0;\\n\\tbackground: none;\\n\\tborder: none;\\n\\twidth: 23px;\\n\\ttext-align: center;\\n\\tmargin-left: -35px;\\n\\ttop: 6px;\\n\\tbottom: 6px;\\n}\\n\\n.tc-fold-banner:hover {\\n\\tbackground: <<colour tiddler-info-background>>;\\n}\\n\\n@media (max-width: <<sidebarbreakpoint-minus-one>>) {\\n\\n\\t.tc-unfold-banner {\\n\\t\\tposition: static;\\n\\t\\twidth: calc(100% + 59px);\\n\\t}\\n\\n\\t.tc-fold-banner {\\n\\t\\twidth: 16px;\\n\\t\\tmargin-left: -16px;\\n\\t\\tfont-size: 0.75em;\\n\\t}\\n\\n}\\n\\n/*\\n** Tags and missing tiddlers\\n*/\\n\\n.tc-tag-list-item {\\n\\tposition: relative;\\n\\tdisplay: inline-block;\\n}\\n\\n.tc-tags-wrapper {\\n\\tmargin: 4px 0 14px 0;\\n}\\n\\n.tc-tags-wrapper .tc-tag-list-item {\\n\\tmargin-right: 7px;\\n}\\n\\n.tc-missing-tiddler-label {\\n\\tfont-style: italic;\\n\\tfont-weight: normal;\\n\\tdisplay: inline-block;\\n\\tfont-size: 11.844px;\\n\\tline-height: 14px;\\n\\twhite-space: nowrap;\\n\\tvertical-align: baseline;\\n}\\n\\n.tc-block-tags-dropdown > .tc-btn-invisible:hover {\\n\\tbackground-color: <<colour primary>>;\\n}\\n\\nbutton.tc-tag-label, span.tc-tag-label {\\n\\tdisplay: inline-block;\\n\\tpadding: 0.16em 0.7em;\\n\\tfont-size: 0.9em;\\n\\tfont-weight: normal;\\n\\tline-height: 1.2em;\\n\\tcolor: <<colour tag-foreground>>;\\n\\twhite-space: break-spaces;\\n\\tvertical-align: baseline;\\n\\tbackground-color: <<colour tag-background>>;\\n\\tborder-radius: 1em;\\n}\\n\\n.tc-sidebar-scrollable .tc-tag-label {\\n\\ttext-shadow: none;\\n}\\n\\n.tc-untagged-separator {\\n\\tborder: 0;\\n\\theight: 1px;\\n\\tbackground: <<colour tab-divider>>;\\n}\\n\\nbutton.tc-untagged-label {\\n\\tbackground-color: <<colour untagged-background>>;\\n}\\n\\n.tc-tag-label svg, .tc-tag-label img {\\n\\theight: 1em;\\n\\twidth: 1em;\\n\\tmargin-right: 3px;\\n\\tmargin-bottom: 1px;\\n\\tvertical-align: bottom;\\n}\\n\\n.tc-edit-tags button.tc-remove-tag-button svg {\\n\\tfont-size: 0.7em;\\n\\tvertical-align: middle;\\n}\\n\\n.tc-tag-manager-table .tc-tag-label {\\n}\\n\\n.tc-tag-manager-tag {\\n\\twidth: 100%;\\n}\\n\\nbutton.tc-btn-invisible.tc-remove-tag-button {\\n\\toutline: none;\\n}\\n\\n.tc-tag-button-selected,\\n.tc-list-item-selected a.tc-tiddlylink, a.tc-list-item-selected {\\n\\tbackground-color: <<colour primary>>;\\n\\tcolor: <<colour tiddler-background>>;\\n}\\n\\n/*\\n** Page layout\\n*/\\n\\n.tc-topbar {\\n\\tposition: fixed;\\n\\tz-index: 1200;\\n}\\n\\n.tc-topbar-left {\\n\\tleft: 29px;\\n\\ttop: 5px;\\n}\\n\\n.tc-topbar-right {\\n\\ttop: 5px;\\n\\tright: 29px;\\n}\\n\\n@media (max-width: <<sidebarbreakpoint-minus-one>>) {\\n\\n\\t.tc-topbar-right {\\n\\t\\tright: 10px;\\n\\t}\\n\\n}\\n\\n.tc-topbar button {\\n\\tpadding: 8px;\\n}\\n\\n.tc-topbar svg {\\n\\tfill: <<colour muted-foreground>>;\\n}\\n\\n.tc-topbar button:hover svg {\\n\\tfill: <<colour foreground>>;\\n}\\n\\n@media (max-width: <<sidebarbreakpoint-minus-one>>) {\\n\\n\\t.tc-show-sidebar-btn svg.tc-image-chevron-left, .tc-hide-sidebar-btn svg.tc-image-chevron-right {\\n\\t\\ttransform: rotate(-90deg);\\n\\t}\\n\\n}\\n\\n.tc-sidebar-header {\\n\\tcolor: <<colour sidebar-foreground>>;\\n\\tfill: <<colour sidebar-foreground>>;\\n}\\n\\n.tc-sidebar-header .tc-title a.tc-tiddlylink-resolves {\\n\\tfont-weight: normal;\\n}\\n\\n.tc-sidebar-header .tc-sidebar-lists p {\\n\\tmargin-top: 3px;\\n\\tmargin-bottom: 3px;\\n}\\n\\n.tc-sidebar-header .tc-missing-tiddler-label {\\n\\tcolor: <<colour sidebar-foreground>>;\\n}\\n\\n.tc-advanced-search input {\\n\\twidth: 60%;\\n}\\n\\n.tc-search a svg {\\n\\twidth: 1.2em;\\n\\theight: 1.2em;\\n\\tvertical-align: middle;\\n}\\n\\n.tc-page-controls {\\n\\tmargin-top: 14px;\\n\\tmargin-bottom: 14px;\\n\\tfont-size: 1.5em;\\n}\\n\\n.tc-page-controls .tc-drop-down {\\n\\tfont-size: 1rem;\\n}\\n\\n.tc-page-controls button {\\n\\tmargin-right: 0.5em;\\n}\\n\\n.tc-page-controls a.tc-tiddlylink:hover {\\n\\ttext-decoration: none;\\n}\\n\\n.tc-page-controls img {\\n\\twidth: 1em;\\n}\\n\\n.tc-page-controls svg {\\n\\tfill: <<colour sidebar-controls-foreground>>;\\n}\\n\\n.tc-page-controls button:hover svg, .tc-page-controls a:hover svg {\\n\\tfill: <<colour sidebar-controls-foreground-hover>>;\\n}\\n\\n.tc-sidebar-lists .tc-menu-list-item {\\n\\twhite-space: nowrap;\\n}\\n\\n.tc-menu-list-count {\\n\\tfont-weight: bold;\\n}\\n\\n.tc-menu-list-subitem {\\n\\tpadding-left: 7px;\\n}\\n\\n.tc-story-river {\\n\\tposition: relative;\\n}\\n\\n@media (max-width: <<sidebarbreakpoint-minus-one>>) {\\n\\n\\t.tc-sidebar-header {\\n\\t\\tpadding: 14px;\\n\\t\\tmin-height: 32px;\\n\\t\\tmargin-top: {{$:/themes/tiddlywiki/vanilla/metrics/storytop}};\\n\\t\\ttransition:  min-height {{$:/config/AnimationDuration}}ms ease-in-out, padding-top {{$:/config/AnimationDuration}}ms ease-in-out, padding-bottom {{$:/config/AnimationDuration}}ms ease-in-out;\\n\\t}\\n\\n\\t<<if-no-sidebar \\\"\\\"\\\"\\n\\n\\t\\t.tc-sidebar-header {\\n\\t\\t\\tmin-height: 0;\\n\\t\\t\\tpadding-top: 0;\\n\\t\\t\\tpadding-bottom: 0;\\n\\t\\t}\\n\\n\\t\\\"\\\"\\\">>\\n\\n\\t.tc-story-river {\\n\\t\\tposition: relative;\\n\\t\\tpadding: 0;\\n\\t}\\n}\\n\\n@media (min-width: <<sidebarbreakpoint>>) {\\n\\n\\t.tc-message-box {\\n\\t\\tmargin: 21px -21px 21px -21px;\\n\\t}\\n\\n\\t.tc-sidebar-scrollable {\\n\\t\\tposition: fixed;\\n\\t\\ttop: {{$:/themes/tiddlywiki/vanilla/metrics/storytop}};\\n\\t\\tleft: {{$:/themes/tiddlywiki/vanilla/metrics/storyright}};\\n\\t\\tbottom: 0;\\n\\t\\tright: 0;\\n\\t\\toverflow-y: auto;\\n\\t\\toverflow-x: auto;\\n\\t\\t-webkit-overflow-scrolling: touch;\\n\\t\\tmargin: 0 0 0 -42px;\\n\\t\\tpadding: 71px 0 28px 42px;\\n\\t}\\n\\n\\thtml[dir=\\\"rtl\\\"] .tc-sidebar-scrollable {\\n\\t\\tleft: auto;\\n\\t\\tright: {{$:/themes/tiddlywiki/vanilla/metrics/storyright}};\\n\\t}\\n\\n\\t.tc-story-river {\\n\\t\\tposition: relative;\\n\\t\\tleft: {{$:/themes/tiddlywiki/vanilla/metrics/storyleft}};\\n\\t\\ttop: {{$:/themes/tiddlywiki/vanilla/metrics/storytop}};\\n\\t\\twidth: {{$:/themes/tiddlywiki/vanilla/metrics/storywidth}};\\n\\t\\tpadding: 42px 42px 42px 42px;\\n\\t}\\n\\n<<if-no-sidebar \\\"\\n\\n\\t.tc-story-river {\\n\\t\\twidth: calc(100% - {{$:/themes/tiddlywiki/vanilla/metrics/storyleft}});\\n\\t}\\n\\n\\\">>\\n\\n\\t.tc-story-river.tc-static-story-river {\\n\\t\\tmargin-right: 0;\\n\\t\\tpadding-right: 42px;\\n\\t}\\n\\n}\\n\\n@media print {\\n\\n\\tbody.tc-body {\\n\\t\\tbackground-color: transparent;\\n\\t}\\n\\n\\t.tc-sidebar-header, .tc-topbar {\\n\\t\\tdisplay: none;\\n\\t}\\n\\n\\t.tc-story-river {\\n\\t\\tmargin: 0;\\n\\t\\tpadding: 0;\\n\\t}\\n\\n\\t.tc-story-river .tc-tiddler-frame {\\n\\t\\tmargin: 0;\\n\\t\\tborder: none;\\n\\t\\tpadding: 0;\\n\\t}\\n}\\n\\n/*\\n** Tiddler styles\\n*/\\n\\n.tc-tiddler-frame {\\n\\tposition: relative;\\n\\tmargin-bottom: 28px;\\n\\tbackground-color: <<colour tiddler-background>>;\\n\\tborder: 1px solid <<colour tiddler-border>>;\\n}\\n\\n{{$:/themes/tiddlywiki/vanilla/sticky}}\\n\\n.tc-tiddler-info {\\n\\toverflow: hidden;\\n\\tpadding: 14px 42px 14px 42px;\\n\\tbackground-color: <<colour tiddler-info-background>>;\\n\\tborder-top: 1px solid <<colour tiddler-info-border>>;\\n\\tborder-bottom: 1px solid <<colour tiddler-info-border>>;\\n}\\n\\n.tc-tiddler-info p {\\n\\tmargin-top: 3px;\\n\\tmargin-bottom: 3px;\\n}\\n\\n.tc-tiddler-info .tc-tab-buttons button.tc-tab-selected {\\n\\tbackground-color: <<colour tiddler-info-tab-background>>;\\n\\tborder-bottom: 1px solid <<colour tiddler-info-tab-background>>;\\n}\\n\\n@media (max-width: <<sidebarbreakpoint-minus-one>>) {\\n\\n\\t.tc-tiddler-info {\\n\\t\\tpadding: 14px 14px 14px 14px;\\n\\t}\\n\\n}\\n\\n.tc-view-field-table {\\n\\twidth: 100%;\\n}\\n\\n.tc-view-field-name {\\n\\twidth: 1%; /* Makes this column be as narrow as possible */\\n\\twhite-space: nowrap;\\n\\tvertical-align: top;\\n\\ttext-align: right;\\n\\tfont-style: italic;\\n\\tfont-weight: normal;\\n}\\n\\n.tc-view-field-value {\\n\\tword-break: break-all;\\n}\\n\\n@media (max-width: <<sidebarbreakpoint-minus-one>>) {\\n\\t.tc-tiddler-frame {\\n\\t\\tpadding: 14px 14px 14px 14px;\\n\\t\\tmargin-bottom: .5em;\\n\\t}\\n\\n\\t.tc-tiddler-info {\\n\\t\\tmargin: 0 -14px 0 -14px;\\n\\t}\\n}\\n\\n@media (min-width: <<sidebarbreakpoint>>) {\\n\\t.tc-tiddler-frame {\\n\\t\\tpadding: 28px 42px 42px 42px;\\n\\t\\twidth: {{$:/themes/tiddlywiki/vanilla/metrics/tiddlerwidth}};\\n\\t\\tborder-radius: 2px;\\n\\t}\\n\\n<<if-no-sidebar \\\"\\n\\n\\t.tc-tiddler-frame {\\n\\t\\twidth: 100%;\\n\\t}\\n\\n\\\">>\\n\\n\\t.tc-tiddler-info {\\n\\t\\tmargin: 0 -42px 0 -42px;\\n\\t}\\n}\\n\\n.tc-site-title,\\n.tc-titlebar {\\n\\tfont-weight: normal;\\n\\tfont-size: 2.35em;\\n\\tline-height: 1.35em;\\n\\tcolor: <<colour tiddler-title-foreground>>;\\n\\tmargin: 0;\\n}\\n\\n.tc-site-title {\\n\\tcolor: <<colour site-title-foreground>>;\\n}\\n\\n.tc-tiddler-title-icon {\\n\\tvertical-align: middle;\\n\\tmargin-right: .1em;\\n}\\n\\n.tc-tiddler-title-icon svg {\\n\\twidth: 0.9em;\\n\\theight: 0.9em;\\n}\\n\\n.tc-system-title-prefix {\\n\\tcolor: <<colour muted-foreground>>;\\n}\\n\\n.tc-titlebar h2 {\\n\\tfont-size: 1em;\\n\\tdisplay: inline;\\n}\\n\\n.tc-titlebar img {\\n\\theight: 1em;\\n}\\n\\n.tc-subtitle {\\n\\tfont-size: 0.9em;\\n\\tcolor: <<colour tiddler-subtitle-foreground>>;\\n\\tfont-weight: normal;\\n}\\n\\n.tc-subtitle .tc-tiddlylink {\\n\\tmargin-right: .3em;\\n}\\n\\n.tc-tiddler-missing .tc-title {\\n\\tfont-style: italic;\\n\\tfont-weight: normal;\\n}\\n\\n.tc-tiddler-frame .tc-tiddler-controls {\\n\\tfloat: right;\\n\\tpadding: 3px; /* make space for outline */\\n}\\n\\n.tc-tiddler-controls .tc-drop-down {\\n\\tfont-size: 0.6em;\\n}\\n\\n.tc-tiddler-controls .tc-drop-down .tc-drop-down {\\n\\tfont-size: 1em;\\n}\\n\\n.tc-tiddler-controls > span > button,\\n.tc-tiddler-controls > span > span > button,\\n.tc-tiddler-controls > span > span > span > button {\\n\\tvertical-align: baseline;\\n\\tmargin-left:5px;\\n}\\n\\n.tc-tiddler-controls button svg, .tc-tiddler-controls button img,\\n.tc-search button svg, .tc-search a svg {\\n\\tfill: <<colour tiddler-controls-foreground>>;\\n}\\n\\n.tc-tiddler-controls button svg, .tc-tiddler-controls button img {\\n\\theight: 0.75em;\\n}\\n\\n.tc-search button svg, .tc-search a svg {\\n\\theight: 1.2em;\\n\\twidth: 1.2em;\\n\\tmargin: 0 0.25em;\\n}\\n\\n.tc-tiddler-controls button.tc-selected svg,\\n.tc-page-controls button.tc-selected svg  {\\n\\tfill: <<colour tiddler-controls-foreground-selected>>;\\n}\\n\\n.tc-tiddler-controls button.tc-btn-invisible:hover svg,\\n.tc-search button:hover svg, .tc-search a:hover svg {\\n\\tfill: <<colour tiddler-controls-foreground-hover>>;\\n}\\n\\n@media print {\\n\\t.tc-tiddler-controls {\\n\\t\\tdisplay: none;\\n\\t}\\n}\\n\\n.tc-tiddler-help { /* Help prompts within tiddler template */\\n\\tcolor: <<colour muted-foreground>>;\\n\\tmargin-top: 14px;\\n}\\n\\n.tc-tiddler-help a.tc-tiddlylink {\\n\\tcolor: <<colour very-muted-foreground>>;\\n}\\n\\n.tc-tiddler-frame .tc-edit-texteditor {\\n\\twidth: 100%;\\n\\tmargin: 4px 0 4px 0;\\n}\\n\\n.tc-tiddler-frame input.tc-edit-texteditor,\\n.tc-tiddler-frame textarea.tc-edit-texteditor,\\n.tc-tiddler-frame iframe.tc-edit-texteditor,\\n.tc-tiddler-frame select.tc-edit-texteditor {\\n\\tpadding: 3px 3px 3px 3px;\\n\\tborder: 1px solid <<colour tiddler-editor-border>>;\\n\\tline-height: 1.3em;\\n\\tfont-family: {{$:/themes/tiddlywiki/vanilla/settings/editorfontfamily}};\\n}\\n\\n.tc-tiddler-frame input.tc-edit-texteditor,\\n.tc-tiddler-frame textarea.tc-edit-texteditor,\\n.tc-tiddler-frame iframe.tc-edit-texteditor {\\n\\t-webkit-appearance: none;\\n}\\n\\n.tc-tiddler-frame input.tc-edit-texteditor,\\n.tc-tiddler-frame select.tc-edit-texteditor,\\n.tc-tiddler-frame textarea.tc-edit-texteditor {\\n\\tbackground-color: <<colour tiddler-editor-background>>;\\n}\\n\\n.tc-tiddler-frame iframe.tc-edit-texteditor {\\n\\tbackground-color: <<colour tiddler-background>>;\\n}\\n\\n.tc-tiddler-frame .tc-edit-fields input.tc-edit-fieldeditor,\\n.tc-tiddler-frame .tc-edit-fields select.tc-edit-fieldeditor,\\n.tc-tiddler-frame .tc-edit-fields textarea.tc-edit-fieldeditor {\\n\\tmargin: 0;\\n\\tpadding: 2px 3px;\\n}\\n\\n.tc-tiddler-frame .tc-binary-warning {\\n\\twidth: 100%;\\n\\theight: 5em;\\n\\ttext-align: center;\\n\\tpadding: 3em 3em 6em 3em;\\n\\tbackground: <<colour alert-background>>;\\n\\tborder: 1px solid <<colour alert-border>>;\\n}\\n\\ncanvas.tc-edit-bitmapeditor  {\\n\\tborder: 6px solid <<colour tiddler-editor-border-image>>;\\n\\tcursor: crosshair;\\n\\t-moz-user-select: none;\\n\\t-webkit-user-select: none;\\n\\t-ms-user-select: none;\\n\\tmargin-top: 6px;\\n\\tmargin-bottom: 6px;\\n}\\n\\n.tc-edit-bitmapeditor-width {\\n\\tdisplay: block;\\n}\\n\\n.tc-edit-bitmapeditor-height {\\n\\tdisplay: block;\\n}\\n\\n.tc-tiddler-body {\\n\\tclear: both;\\n}\\n\\n.tc-single-tiddler-window .tc-tiddler-body,\\n.tc-tiddler-frame .tc-tiddler-body {\\n\\tfont-size: {{$:/themes/tiddlywiki/vanilla/metrics/bodyfontsize}};\\n\\tline-height: {{$:/themes/tiddlywiki/vanilla/metrics/bodylineheight}};\\n}\\n\\n.tc-titlebar, .tc-tiddler-edit-title {\\n\\toverflow: hidden; /* https://github.com/Jermolene/TiddlyWiki5/issues/282 */\\n}\\n\\n/*\\n* Tiddler in a new window.\\n* Also see: .tc-single-tiddler-window .tc-tiddler-body, above\\n*/\\n\\nhtml body.tc-body.tc-single-tiddler-window {\\n\\tmargin: 1em;\\n\\tbackground: <<colour tiddler-background>>;\\n}\\n\\n.tc-single-tiddler-window img,\\n.tc-single-tiddler-window svg,\\n.tc-single-tiddler-window canvas,\\n.tc-single-tiddler-window embed,\\n.tc-single-tiddler-window iframe {\\n\\tmax-width: 100%;\\n}\\n\\n/*\\n** Editor\\n*/\\n\\n.tc-editor-toolbar {\\n\\tmargin-top: 8px;\\n}\\n\\n.tc-tiddler-frame .tc-tiddler-editor.tc-tiddler-preview .tc-editor-toolbar,\\n.tc-tiddler-frame .tc-tiddler-editor.tc-tiddler-preview-hidden .tc-editor-toolbar {\\n\\tgrid-area: toolbar;\\n}\\n\\n.tc-editor-toolbar button {\\n\\tvertical-align: middle;\\n\\tbackground-color: <<colour tiddler-controls-foreground>>;\\n\\tcolor: <<colour tiddler-controls-foreground-selected>>;\\n\\tfill: <<colour tiddler-controls-foreground-selected>>;\\n\\tborder-radius: 4px;\\n\\tpadding: 3px;\\n\\tmargin: 2px 0 2px 4px;\\n}\\n\\n.tc-editor-toolbar button.tc-text-editor-toolbar-item-adjunct {\\n\\tmargin-left: 1px;\\n\\twidth: 1em;\\n\\tborder-radius: 8px;\\n}\\n\\n.tc-editor-toolbar button.tc-text-editor-toolbar-item-start-group {\\n\\tmargin-left: 11px;\\n}\\n\\n.tc-editor-toolbar button.tc-selected {\\n\\tbackground-color: <<colour primary>>;\\n}\\n\\n.tc-editor-toolbar button svg {\\n\\twidth: 1.6em;\\n\\theight: 1.2em;\\n}\\n\\n.tc-editor-toolbar .tc-drop-down button.tc-btn-mini {\\n\\tpadding: 2px 4px;\\n}\\n\\n.tc-editor-toolbar button:hover {\\n\\tbackground-color: <<colour tiddler-controls-foreground-selected>>;\\n\\tfill: <<colour background>>;\\n\\tcolor: <<colour background>>;\\n}\\n\\n.tc-editor-toolbar .tc-text-editor-toolbar-more {\\n\\twhite-space: normal;\\n}\\n\\n.tc-editor-toolbar .tc-text-editor-toolbar-more button {\\n\\tdisplay: inline-block;\\n\\tpadding: 3px;\\n\\twidth: auto;\\n}\\n\\n.tc-editor-toolbar .tc-search-results {\\n\\tpadding: 0;\\n}\\n\\n.tc-editor-toolbar button.tc-editortoolbar-stamp-button + .tc-popup .tc-drop-down > p {\\n\\tmargin: 0;\\n\\tpadding: 0;\\n}\\n\\n.tc-editor-toolbar button.tc-editortoolbar-stamp-button + .tc-popup .tc-drop-down a.tc-tiddlylink {\\n\\tfont-weight: normal;\\n}\\n\\n/*\\n** Adjustments for fluid-fixed mode\\n*/\\n\\n@media (min-width: <<sidebarbreakpoint>>) {\\n\\n<<if-fluid-fixed text:\\\"\\\"\\\"\\n\\n\\t.tc-story-river {\\n\\t\\tpadding-right: 0;\\n\\t\\tposition: relative;\\n\\t\\twidth: auto;\\n\\t\\tleft: 0;\\n\\t\\tmargin-left: {{$:/themes/tiddlywiki/vanilla/metrics/storyleft}};\\n\\t\\tmargin-right: {{$:/themes/tiddlywiki/vanilla/metrics/sidebarwidth}};\\n\\t}\\n\\n\\t.tc-tiddler-frame {\\n\\t\\twidth: 100%;\\n\\t}\\n\\n\\t.tc-sidebar-scrollable {\\n\\t\\tleft: auto;\\n\\t\\tbottom: 0;\\n\\t\\tright: 0;\\n\\t\\twidth: {{$:/themes/tiddlywiki/vanilla/metrics/sidebarwidth}};\\n\\t}\\n\\n\\tbody.tc-body .tc-page-container.tc-page-view-zoomin .tc-tiddler-frame {\\n\\t\\twidth: 100%;\\n\\t\\twidth: calc(100% - 42px);\\n\\t}\\n\\n\\\"\\\"\\\" hiddenSidebarText:\\\"\\\"\\\"\\n\\n\\t.tc-story-river {\\n\\t\\tpadding-right: 3em;\\n\\t\\tmargin-right: 0;\\n\\t}\\n\\n\\tbody.tc-body .tc-page-container.tc-page-view-zoomin .tc-tiddler-frame {\\n\\t\\twidth: 100%;\\n\\t\\twidth: calc(100% - 84px);\\n\\t}\\n\\n\\\"\\\"\\\">>\\n\\n}\\n\\n/*\\n** Toolbar buttons\\n*/\\n\\n.tc-page-controls svg.tc-image-new-button {\\n\\tfill: <<colour toolbar-new-button>>;\\n}\\n\\n.tc-page-controls svg.tc-image-options-button {\\n\\tfill: <<colour toolbar-options-button>>;\\n}\\n\\n.tc-page-controls svg.tc-image-save-button {\\n\\tfill: <<colour toolbar-save-button>>;\\n}\\n\\n.tc-tiddler-controls button svg.tc-image-info-button {\\n\\tfill: <<colour toolbar-info-button>>;\\n}\\n\\n.tc-tiddler-controls button svg.tc-image-edit-button {\\n\\tfill: <<colour toolbar-edit-button>>;\\n}\\n\\n.tc-tiddler-controls button svg.tc-image-close-button {\\n\\tfill: <<colour toolbar-close-button>>;\\n}\\n\\n.tc-tiddler-controls button svg.tc-image-delete-button {\\n\\tfill: <<colour toolbar-delete-button>>;\\n}\\n\\n.tc-tiddler-controls button svg.tc-image-cancel-button {\\n\\tfill: <<colour toolbar-cancel-button>>;\\n}\\n\\n.tc-tiddler-controls button svg.tc-image-done-button {\\n\\tfill: <<colour toolbar-done-button>>;\\n}\\n\\n.tc-page-controls svg.tc-image-layout-button {\\n\\tfill: <<colour toolbar-options-button>>;\\n}\\n\\n/*\\n** Tiddler edit mode\\n*/\\n\\n.tc-tiddler-edit-frame em.tc-edit {\\n\\tcolor: <<colour muted-foreground>>;\\n\\tfont-style: normal;\\n}\\n\\n.tc-edit-type-dropdown a.tc-tiddlylink-missing {\\n\\tfont-style: normal;\\n}\\n\\n.tc-type-selector .tc-edit-typeeditor {\\n\\twidth: auto;\\n}\\n\\n.tc-type-selector-dropdown-wrapper {\\n\\tdisplay: inline-block;\\n}\\n\\n<<set-type-selector-min-width>>\\n\\n.tc-edit-tags {\\n\\tborder: 1px solid <<colour tiddler-editor-border>>;\\n\\tpadding: 4px 8px 4px 8px;\\n}\\n\\n.tc-edit-add-tag {\\n\\tdisplay: inline-block;\\n}\\n\\n.tc-edit-add-tag .tc-add-tag-name input {\\n\\twidth: 50%;\\n}\\n\\n.tc-edit-add-tag .tc-keyboard {\\n\\tdisplay:inline;\\n}\\n\\n.tc-edit-tags .tc-tag-label {\\n\\tdisplay: inline-block;\\n}\\n\\n.tc-edit-tags-list {\\n\\tmargin: 14px 0 14px 0;\\n}\\n\\n.tc-remove-tag-button {\\n\\tpadding-left: 4px;\\n}\\n\\n.tc-tiddler-editor {\\n\\tdisplay: grid;\\n}\\n\\n.tc-tiddler-frame .tc-tiddler-editor.tc-tiddler-preview {\\n\\tgrid-template-areas:\\n\\t\\t\\\"toolbar toolbar\\\"\\n\\t\\t\\\"editor preview\\\";\\n\\tgrid-template-columns: repeat(2, minmax(0px, 1fr));\\n\\tgrid-template-rows: auto 1fr;\\n}\\n\\n.tc-tiddler-frame .tc-tiddler-editor.tc-tiddler-preview-hidden {\\n\\tgrid-template-areas:\\n\\t\\t\\\"toolbar\\\"\\n\\t\\t\\\"editor\\\";\\n\\tgrid-template-columns: 1fr;\\n\\tgrid-template-rows: auto 1fr;\\n}\\n\\n.tc-tiddler-frame .tc-tiddler-editor.tc-tiddler-preview .tc-tiddler-preview-preview {\\n\\tgrid-area: preview;\\n\\toverflow-wrap: anywhere;\\n\\tword-break: normal;\\n\\tborder: 1px solid <<colour tiddler-editor-border>>;\\n\\tmargin: 4px 0 3px 3px;\\n\\tpadding: 3px 3px 3px 3px;\\n}\\n\\n<<if-editor-height-fixed then:\\\"\\\"\\\"\\n\\n.tc-tiddler-preview-preview {\\n\\toverflow-y: scroll;\\n\\theight: {{$:/config/TextEditor/EditorHeight/Height}};\\n}\\n\\n\\\"\\\"\\\">>\\n\\n.tc-tiddler-frame .tc-tiddler-editor.tc-tiddler-preview .tc-edit-texteditor,\\n.tc-tiddler-frame .tc-tiddler-editor.tc-tiddler-preview-hidden .tc-edit-texteditor {\\n\\tgrid-area: editor;\\n}\\n\\n.tc-tiddler-frame .tc-tiddler-editor.tc-tiddler-preview canvas.tc-edit-bitmapeditor,\\n.tc-tiddler-frame .tc-tiddler-editor.tc-tiddler-preview-hidden canvas.tc-edit-bitmapeditor {\\n\\tgrid-area: editor;\\n\\tmax-width: 100%;\\n}\\n\\n.tc-edit-fields {\\n\\twidth: 100%;\\n}\\n\\n.tc-edit-fields.tc-edit-fields-small {\\n\\tmargin-top: 0;\\n\\tmargin-bottom: 0;\\n}\\n\\n.tc-edit-fields table, .tc-edit-fields tr, .tc-edit-fields td {\\n\\tborder: none;\\n\\tpadding: 4px;\\n}\\n\\n.tc-edit-fields > tbody > .tc-edit-field:nth-child(odd) {\\n\\tbackground-color: <<colour tiddler-editor-fields-odd>>;\\n}\\n\\n.tc-edit-fields > tbody > .tc-edit-field:nth-child(even) {\\n\\tbackground-color: <<colour tiddler-editor-fields-even>>;\\n}\\n\\n.tc-edit-field-name {\\n\\ttext-align: right;\\n}\\n\\n.tc-edit-field-value input {\\n\\twidth: 100%;\\n}\\n\\n.tc-edit-field-remove {\\n}\\n\\n.tc-edit-field-remove svg {\\n\\theight: 1em;\\n\\twidth: 1em;\\n\\tfill: <<colour muted-foreground>>;\\n\\tvertical-align: middle;\\n}\\n\\n.tc-edit-field-add-name-wrapper input.tc-edit-texteditor {\\n\\twidth: auto;\\n}\\n\\n.tc-edit-field-add-name-wrapper {\\n\\tdisplay: inline-block;\\n}\\n\\n.tc-edit-field-add-value {\\n\\tdisplay: inline-block;\\n}\\n\\n@media (min-width: <<sidebarbreakpoint>>) {\\n\\n\\t.tc-edit-field-add-value {\\n\\t\\twidth: 35%;\\n\\t}\\n\\n}\\n\\n.tc-edit-field-add-button {\\n\\tdisplay: inline-block;\\n\\twidth: 10%;\\n}\\n\\n\\n/*\\n** Tiddler editor dropzone\\n*/\\n\\n.tc-dropzone-editor {\\n\\tposition:relative;\\n}\\n\\n.tc-dropzone-editor.tc-dragover .tc-editor-toolbar::after{\\n\\tz-index: 10000;\\n\\ttop:0;\\n\\tleft:0;\\n\\tright:0;\\n\\theight: 100%;\\n\\tbackground: <<colour dropzone-background>>;\\n\\tcontent: \\\"<<lingo DropMessage>>\\\";\\n\\tpointer-events: none;\\n\\tposition: absolute;\\n\\tdisplay: flex;\\n\\talign-items: center;\\n\\tjustify-content: center;\\n\\tbackground-color: <<color background>>;\\n\\tborder: 4px dashed <<color modal-border>>;\\n\\tfont-weight: bold;\\n\\tfont-size: 150%;\\n\\topacity: 0.8;\\n\\tcolor: <<color foreground>>;\\n}\\n\\n.tc-editor-importpopup {\\n\\twidth: 100%;\\n\\theight: 100%;\\n}\\n\\n.tc-editor-import {\\n\\tposition: absolute;\\n\\ttop: 50%;\\n\\tleft: 50%;\\n\\ttransform: translate(-50%, -50%);\\n\\tbackground: <<color pre-background>>;\\n\\tbox-shadow: 2px 2px 10px <<colour foreground>>;\\n\\tpadding: 10px;\\n\\twidth: 96%;\\n\\tborder: 1px solid <<color tiddler-controls-foreground>>;\\n\\ttext-align:center;\\n}\\n\\n.tc-editor-import img {\\n\\tmax-height: 500px;\\n}\\n\\n/*\\n** Storyview Classes\\n*/\\n\\n.tc-viewswitcher .tc-image-button {\\n\\tmargin-right: .3em;\\n}\\n\\n.tc-page-container.tc-page-view-zoomin .tc-tiddler-frame {\\n\\tposition: absolute;\\n\\tdisplay: block;\\n\\twidth: 100%;\\n}\\n\\n@media (min-width: <<sidebarbreakpoint>>) {\\n\\n\\t.tc-page-container.tc-page-view-zoomin .tc-tiddler-frame {\\n\\t\\twidth: calc(100% - 84px);\\n\\t}\\n\\n}\\n\\n/*\\n** Dropdowns\\n*/\\n\\n.tc-btn-dropdown {\\n\\ttext-align: left;\\n}\\n\\n.tc-btn-dropdown svg, .tc-btn-dropdown img {\\n\\theight: 1em;\\n\\twidth: 1em;\\n\\tfill: <<colour muted-foreground>>;\\n}\\n\\n.tc-drop-down-wrapper {\\n\\tposition: relative;\\n}\\n\\n.tc-drop-down {\\n\\tmin-width: 380px;\\n\\tborder: 1px solid <<colour dropdown-border>>;\\n\\tbackground-color: <<colour dropdown-background>>;\\n\\tpadding: 7px 0 7px 0;\\n\\tmargin: 4px 0 0 0;\\n\\twhite-space: nowrap;\\n\\ttext-shadow: none;\\n\\tline-height: 1.4;\\n}\\n\\n.tc-drop-down .tc-drop-down {\\n\\tmargin-left: 14px;\\n}\\n\\n.tc-drop-down button svg, .tc-drop-down a svg  {\\n\\tfill: <<colour foreground>>;\\n}\\n\\n.tc-drop-down button:disabled svg {\\n\\tfill: <<colour muted-foreground>>;\\n}\\n\\n.tc-drop-down button.tc-btn-invisible:hover svg {\\n\\tfill: <<colour background>>;\\n}\\n\\n.tc-drop-down .tc-drop-down-info {\\n\\tpadding-left: 14px;\\n}\\n\\n.tc-drop-down p {\\n\\tpadding: 0 14px 0 14px;\\n}\\n\\n.tc-drop-down svg {\\n\\twidth: 1em;\\n\\theight: 1em;\\n}\\n\\n.tc-drop-down img {\\n\\twidth: 1em;\\n}\\n\\n.tc-drop-down a, .tc-drop-down button {\\n\\tdisplay: block;\\n\\tpadding: 0 14px 0 14px;\\n\\twidth: 100%;\\n\\ttext-align: left;\\n\\tcolor: <<colour foreground>>;\\n\\tline-height: 1.4;\\n}\\n\\n.tc-drop-down .tc-tab-set .tc-tab-buttons button {\\n\\tdisplay: inline-block;\\n\\twidth: auto;\\n\\tmargin-bottom: 0px;\\n\\tborder-bottom-left-radius: 0;\\n\\tborder-bottom-right-radius: 0;\\n}\\n\\n.tc-drop-down .tc-prompt {\\n\\tpadding: 0 14px;\\n}\\n\\n.tc-drop-down .tc-chooser {\\n\\tborder: none;\\n}\\n\\n.tc-drop-down .tc-chooser .tc-swatches-horiz {\\n\\tfont-size: 0.4em;\\n\\tpadding-left: 1.2em;\\n}\\n\\n.tc-drop-down .tc-file-input-wrapper {\\n\\twidth: 100%;\\n}\\n\\n.tc-drop-down .tc-file-input-wrapper button {\\n\\tcolor: <<colour foreground>>;\\n}\\n\\n.tc-drop-down a:hover, .tc-drop-down button:hover, .tc-drop-down .tc-file-input-wrapper:hover button {\\n\\tcolor: <<colour tiddler-link-background>>;\\n\\tbackground-color: <<colour tiddler-link-foreground>>;\\n\\ttext-decoration: none;\\n}\\n\\n.tc-drop-down .tc-tab-buttons button {\\n\\tbackground-color: <<colour dropdown-tab-background>>;\\n}\\n\\n.tc-drop-down .tc-tab-buttons button.tc-tab-selected {\\n\\tbackground-color: <<colour dropdown-tab-background-selected>>;\\n\\tborder-bottom: 1px solid <<colour dropdown-tab-background-selected>>;\\n}\\n\\n.tc-drop-down-bullet {\\n\\tdisplay: inline-block;\\n\\twidth: 0.5em;\\n}\\n\\n.tc-drop-down .tc-tab-contents a {\\n\\tpadding: 0 0.5em 0 0.5em;\\n}\\n\\n.tc-block-dropdown-wrapper {\\n\\tposition: relative;\\n}\\n\\n.tc-block-dropdown {\\n\\tposition: absolute;\\n\\tmin-width: 220px;\\n\\tborder: 1px solid <<colour dropdown-border>>;\\n\\tbackground-color: <<colour dropdown-background>>;\\n\\tpadding: 7px 0;\\n\\tmargin: 4px 0 0 0;\\n\\twhite-space: nowrap;\\n\\tz-index: 1000;\\n\\ttext-shadow: none;\\n}\\n\\n.tc-block-dropdown.tc-search-drop-down {\\n\\tmargin-left: -12px;\\n}\\n\\n.tc-block-dropdown a {\\n\\tdisplay: block;\\n\\tpadding: 4px 14px 4px 14px;\\n}\\n\\n.tc-block-dropdown.tc-search-drop-down a {\\n\\tdisplay: block;\\n\\tpadding: 0px 10px 0px 10px;\\n}\\n\\n.tc-drop-down .tc-dropdown-item-plain,\\n.tc-block-dropdown .tc-dropdown-item-plain {\\n\\tpadding: 4px 14px 4px 7px;\\n}\\n\\n.tc-drop-down .tc-dropdown-item,\\n.tc-block-dropdown .tc-dropdown-item {\\n\\tpadding: 4px 14px 4px 7px;\\n\\tcolor: <<colour muted-foreground>>;\\n}\\n\\n.tc-block-dropdown a.tc-tiddlylink:hover {\\n\\tcolor: <<colour tiddler-link-background>>;\\n\\tbackground-color: <<colour tiddler-link-foreground>>;\\n\\ttext-decoration: none;\\n}\\n\\n.tc-search-results {\\n\\tpadding: 0 7px 0 7px;\\n}\\n\\n.tc-image-chooser, .tc-colour-chooser {\\n\\twhite-space: normal;\\n}\\n\\n.tc-image-chooser a,\\n.tc-colour-chooser a {\\n\\tdisplay: inline-block;\\n\\tvertical-align: top;\\n\\ttext-align: center;\\n\\tposition: relative;\\n}\\n\\n.tc-image-chooser a {\\n\\tborder: 1px solid <<colour muted-foreground>>;\\n\\tpadding: 2px;\\n\\tmargin: 2px;\\n\\twidth: 4em;\\n\\theight: 4em;\\n}\\n\\n.tc-colour-chooser a {\\n\\tpadding: 3px;\\n\\twidth: 2em;\\n\\theight: 2em;\\n\\tvertical-align: middle;\\n}\\n\\n.tc-image-chooser a:hover,\\n.tc-colour-chooser a:hover {\\n\\tbackground: <<colour primary>>;\\n\\tpadding: 0px;\\n\\tborder: 3px solid <<colour primary>>;\\n}\\n\\n.tc-image-chooser a svg,\\n.tc-image-chooser a img {\\n\\tdisplay: inline-block;\\n\\twidth: auto;\\n\\theight: auto;\\n\\tmax-width: 3.5em;\\n\\tmax-height: 3.5em;\\n\\tposition: absolute;\\n\\ttop: 0;\\n\\tbottom: 0;\\n\\tleft: 0;\\n\\tright: 0;\\n\\tmargin: auto;\\n}\\n\\n/* Make search dropdown visible on small screens. issue #7003 */\\n@media (max-width: <<sidebarbreakpoint>>) {\\n\\n\\t.tc-sidebar-search .tc-block-dropdown-wrapper {\\n\\t\\tposition: initial;\\n\\t}\\n\\n}\\n\\n/*\\n** Modals\\n*/\\n\\n.tc-modal-wrapper {\\n\\tposition: fixed;\\n\\toverflow: auto;\\n\\toverflow-y: scroll;\\n\\ttop: 0;\\n\\tright: 0;\\n\\tbottom: 0;\\n\\tleft: 0;\\n\\tz-index: 900;\\n}\\n\\n.tc-modal-backdrop {\\n\\tposition: fixed;\\n\\ttop: 0;\\n\\tright: 0;\\n\\tbottom: 0;\\n\\tleft: 0;\\n\\tz-index: 1000;\\n\\tbackground-color: <<colour modal-backdrop>>;\\n}\\n\\n.tc-modal {\\n\\tz-index: 1100;\\n\\tbackground-color: <<colour modal-background>>;\\n\\tborder: 1px solid <<colour modal-border>>;\\n}\\n\\n@media (max-width: 55em) {\\n\\t.tc-modal {\\n\\t\\tposition: fixed;\\n\\t\\ttop: 1em;\\n\\t\\tleft: 1em;\\n\\t\\tright: 1em;\\n\\t}\\n\\n\\t.tc-modal-body {\\n\\t\\toverflow-y: auto;\\n\\t\\tmax-height: 400px;\\n\\t\\tmax-height: 60vh;\\n\\t}\\n}\\n\\n@media (min-width: 55em) {\\n\\t.tc-modal {\\n\\t\\tposition: fixed;\\n\\t\\ttop: 2em;\\n\\t\\tleft: 25%;\\n\\t\\twidth: 50%;\\n\\t}\\n\\n\\t.tc-modal-body {\\n\\t\\toverflow-y: auto;\\n\\t\\tmax-height: 400px;\\n\\t\\tmax-height: 60vh;\\n\\t}\\n}\\n\\n.tc-modal-header {\\n\\tpadding: 9px 15px;\\n\\tborder-bottom: 1px solid <<colour modal-header-border>>;\\n}\\n\\n.tc-modal-header h3 {\\n\\tmargin: 0;\\n\\tline-height: 30px;\\n}\\n\\n.tc-modal-header img, .tc-modal-header svg {\\n\\twidth: 1em;\\n\\theight: 1em;\\n}\\n\\n.tc-modal-body {\\n\\tpadding: 15px;\\n}\\n\\n.tc-modal-footer {\\n\\tpadding: 14px 15px 15px;\\n\\tmargin-bottom: 0;\\n\\ttext-align: right;\\n\\tbackground-color: <<colour modal-footer-background>>;\\n\\tborder-top: 1px solid <<colour modal-footer-border>>;\\n}\\n\\n.tc-modal-prevent-scroll {\\n\\toverflow: hidden;\\n}\\n\\n/*\\n** Centered modals\\n*/\\n.tc-modal-centered .tc-modal {\\n\\twidth: auto;\\n\\ttop: 50%;\\n\\tleft: 50%;\\n\\ttransform: translate(-50%, -50%) !important;\\n}\\n\\n/*\\n** Notifications\\n*/\\n\\n.tc-notification {\\n\\tposition: fixed;\\n\\ttop: 14px;\\n\\tright: 42px;\\n\\tz-index: 1300;\\n\\tmax-width: 280px;\\n\\tpadding: 0 14px 0 14px;\\n\\tbackground-color: <<colour notification-background>>;\\n\\tborder: 1px solid <<colour notification-border>>;\\n}\\n\\n/*\\n** Tabs\\n*/\\n\\n.tc-tab-set.tc-vertical {\\n\\tdisplay: -webkit-flex;\\n\\tdisplay: flex;\\n}\\n\\n.tc-tab-buttons {\\n\\tfont-size: 0.85em;\\n\\tpadding-top: 1em;\\n\\tmargin-bottom: -2px;\\n}\\n\\n.tc-tab-buttons.tc-vertical  {\\n\\tz-index: 100;\\n\\tdisplay: block;\\n\\tpadding-top: 14px;\\n\\tvertical-align: top;\\n\\ttext-align: right;\\n\\tmargin-bottom: inherit;\\n\\tmargin-right: -1px;\\n\\tmax-width: 33%;\\n\\t-webkit-flex: 0 0 auto;\\n\\tflex: 0 0 auto;\\n}\\n\\n.tc-tab-buttons button.tc-tab-selected {\\n\\tcolor: <<colour tab-foreground-selected>>;\\n\\tbackground-color: <<colour tab-background-selected>>;\\n\\tborder-left: 1px solid <<colour tab-border-selected>>;\\n\\tborder-top: 1px solid <<colour tab-border-selected>>;\\n\\tborder-right: 1px solid <<colour tab-border-selected>>;\\n}\\n\\n.tc-tab-buttons button {\\n\\tcolor: <<colour tab-foreground>>;\\n\\tpadding: 3px 5px 3px 5px;\\n\\tmargin-right: 0.3em;\\n\\tfont-weight: normal;\\n\\tborder: none;\\n\\tbackground: inherit;\\n\\tbackground-color: <<colour tab-background>>;\\n\\tborder-left: 1px solid <<colour tab-border>>;\\n\\tborder-top: 1px solid <<colour tab-border>>;\\n\\tborder-right: 1px solid <<colour tab-border>>;\\n\\tborder-top-left-radius: 2px;\\n\\tborder-top-right-radius: 2px;\\n\\tborder-bottom-left-radius: 0;\\n\\tborder-bottom-right-radius: 0;\\n}\\n\\n.tc-tab-buttons.tc-vertical button {\\n\\tdisplay: block;\\n\\twidth: 100%;\\n\\tmargin-top: 3px;\\n\\tmargin-right: 0;\\n\\ttext-align: right;\\n\\tbackground-color: <<colour tab-background>>;\\n\\tborder-left: 1px solid <<colour tab-border>>;\\n\\tborder-bottom: 1px solid <<colour tab-border>>;\\n\\tborder-right: none;\\n\\tborder-top-left-radius: 2px;\\n\\tborder-bottom-left-radius: 2px;\\n\\tborder-top-right-radius: 0;\\n\\tborder-bottom-right-radius: 0;\\n}\\n\\n.tc-tab-buttons.tc-vertical button.tc-tab-selected {\\n\\tbackground-color: <<colour tab-background-selected>>;\\n\\tborder-right: 1px solid <<colour tab-background-selected>>;\\n}\\n\\n.tc-tab-divider {\\n\\tborder-top: 1px solid <<colour tab-divider>>;\\n}\\n\\n.tc-tab-divider.tc-vertical  {\\n\\tdisplay: none;\\n}\\n\\n.tc-tab-content {\\n\\tmargin-top: 14px;\\n}\\n\\n.tc-tab-content.tc-vertical  {\\n\\tdisplay: inline-block;\\n\\tvertical-align: top;\\n\\tpadding-top: 0;\\n\\tpadding-left: 14px;\\n\\tborder-left: 1px solid <<colour tab-border>>;\\n\\t-webkit-flex: 1 0 70%;\\n\\tflex: 1 0 70%;\\n\\toverflow: auto;\\n}\\n\\n.tc-sidebar-lists .tc-tab-buttons {\\n\\tmargin-bottom: -1px;\\n}\\n\\n.tc-sidebar-lists .tc-tab-buttons button.tc-tab-selected {\\n\\tbackground-color: <<colour sidebar-tab-background-selected>>;\\n\\tcolor: <<colour sidebar-tab-foreground-selected>>;\\n\\tborder-left: 1px solid <<colour sidebar-tab-border-selected>>;\\n\\tborder-top: 1px solid <<colour sidebar-tab-border-selected>>;\\n\\tborder-right: 1px solid <<colour sidebar-tab-border-selected>>;\\n}\\n\\n.tc-sidebar-lists .tc-tab-buttons button {\\n\\tbackground-color: <<colour sidebar-tab-background>>;\\n\\tcolor: <<colour sidebar-tab-foreground>>;\\n\\tborder-left: 1px solid <<colour sidebar-tab-border>>;\\n\\tborder-top: 1px solid <<colour sidebar-tab-border>>;\\n\\tborder-right: 1px solid <<colour sidebar-tab-border>>;\\n}\\n\\n.tc-sidebar-lists .tc-tab-divider {\\n\\tborder-top: 1px solid <<colour sidebar-tab-divider>>;\\n}\\n\\n.tc-more-sidebar > .tc-tab-set > .tc-tab-buttons > button {\\n\\tdisplay: block;\\n\\twidth: 100%;\\n\\tbackground-color: <<colour sidebar-tab-background>>;\\n\\tborder-top: none;\\n\\tborder-left: none;\\n\\tborder-bottom: none;\\n\\tborder-right: 1px solid #ccc;\\n\\tmargin-bottom: inherit;\\n}\\n\\n.tc-more-sidebar > .tc-tab-set > .tc-tab-buttons > button.tc-tab-selected {\\n\\tbackground-color: <<colour sidebar-tab-background-selected>>;\\n\\tborder: none;\\n}\\n\\n/*\\n** Manager\\n*/\\n\\n.tc-manager-wrapper {\\n\\n}\\n\\n.tc-manager-controls {\\n\\n}\\n\\n.tc-manager-control {\\n\\tmargin: 0.5em 0;\\n}\\n\\n.tc-manager-control select {\\n\\tmax-width: 100%;\\n}\\n\\n.tc-manager-list {\\n\\twidth: 100%;\\n\\tborder-top: 1px solid <<colour muted-foreground>>;\\n\\tborder-left: 1px solid <<colour muted-foreground>>;\\n\\tborder-right: 1px solid <<colour muted-foreground>>;\\n}\\n\\n.tc-manager-list-item {\\n\\n}\\n\\n.tc-manager-list-item-heading {\\n\\tdisplay: block;\\n\\twidth: 100%;\\n\\ttext-align: left;\\n\\tborder-bottom: 1px solid <<colour muted-foreground>>;\\n\\tpadding: 3px;\\n}\\n\\n.tc-manager-list-item-heading-selected {\\n\\tfont-weight: bold;\\n\\tcolor: <<colour background>>;\\n\\tfill: <<colour background>>;\\n\\tbackground-color: <<colour foreground>>;\\n}\\n\\n.tc-manager-list-item-heading:hover {\\n\\tbackground: <<colour primary>>;\\n\\tcolor: <<colour background>>;\\n}\\n\\n.tc-manager-list-item-content {\\n\\tdisplay: flex;\\n}\\n\\n.tc-manager-list-item-content-sidebar {\\n\\tflex: 1 0;\\n\\tbackground: <<colour tiddler-editor-background>>;\\n\\tborder-right: 0.5em solid <<colour muted-foreground>>;\\n\\tborder-bottom: 0.5em solid <<colour muted-foreground>>;\\n\\twhite-space: nowrap;\\n}\\n\\n.tc-manager-list-item-content-item-heading {\\n\\tdisplay: block;\\n\\twidth: 100%;\\n\\ttext-align: left;\\n\\tbackground: <<colour muted-foreground>>;\\n\\ttext-transform: uppercase;\\n\\tfont-size: 0.6em;\\n\\tfont-weight: bold;\\n\\tpadding: 0.5em 0 0.5em 0;\\n}\\n\\n.tc-manager-list-item-content-item-body {\\n\\tpadding: 0 0.5em 0 0.5em;\\n}\\n\\n.tc-manager-list-item-content-item-body > pre {\\n\\tmargin: 0.5em 0 0.5em 0;\\n\\tborder: none;\\n\\tbackground: inherit;\\n}\\n\\n.tc-manager-list-item-content-tiddler {\\n\\tflex: 3 1;\\n\\tborder-left: 0.5em solid <<colour muted-foreground>>;\\n\\tborder-right: 0.5em solid <<colour muted-foreground>>;\\n\\tborder-bottom: 0.5em solid <<colour muted-foreground>>;\\n}\\n\\n.tc-manager-list-item-content-item-body > table {\\n\\tborder: none;\\n\\tpadding: 0;\\n\\tmargin: 0;\\n}\\n\\n.tc-manager-list-item-content-item-body > table td {\\n\\tborder: none;\\n}\\n\\n.tc-manager-icon-editor > button {\\n\\twidth: 100%;\\n}\\n\\n.tc-manager-icon-editor > button > svg,\\n.tc-manager-icon-editor > button > button {\\n\\twidth: 100%;\\n\\theight: auto;\\n}\\n\\n/*\\n** Import table\\n*/\\n\\n.tc-import-table {\\n\\twidth: 100%;\\n}\\n\\n.tc-import-table svg.tc-image-edit-button {\\n\\tmax-width: unset;\\n}\\n\\n.tc-import-table th:first-of-type {\\n\\twidth: 10%;\\n}\\n\\n.tc-import-table th:last-of-type {\\n\\twidth: 30%;\\n}\\n\\n.tc-import-table .tc-row-disabled {\\n\\tbackground: <<colour very-muted-foreground>>10;\\n\\topacity: 0.8;\\n}\\n\\n.tc-import-table .tc-row-warning {\\n\\tbackground: <<colour diff-delete-background>>50;\\n}\\n\\n/*\\n** Alerts\\n*/\\n\\n.tc-alerts {\\n\\tposition: fixed;\\n\\ttop: 28px;\\n\\tleft: 0;\\n\\tright: 0;\\n\\tmax-width: 50%;\\n\\tz-index: 20000;\\n}\\n\\n.tc-alert {\\n\\tposition: relative;\\n\\tmargin: 14px;\\n\\tpadding: 7px;\\n\\tborder: 1px solid <<colour alert-border>>;\\n\\tbackground-color: <<colour alert-background>>;\\n}\\n\\n.tc-alert-toolbar {\\n\\tposition: absolute;\\n\\ttop: 7px;\\n\\tright: 7px;\\n\\tline-height: 0;\\n}\\n\\n.tc-alert-toolbar svg {\\n\\tfill: <<colour alert-muted-foreground>>;\\n}\\n\\n.tc-alert-subtitle {\\n\\tcolor: <<colour alert-muted-foreground>>;\\n\\tfont-weight: bold;\\n\\tfont-size: 0.8em;\\n\\tmargin-bottom: 0.5em;\\n}\\n\\n.tc-alert-body > p {\\n\\tmargin: 0;\\n}\\n\\n.tc-alert-highlight {\\n\\tcolor: <<colour alert-highlight>>;\\n}\\n\\n@media (min-width: <<sidebarbreakpoint>>) {\\n\\n\\t.tc-static-alert {\\n\\t\\tposition: relative;\\n\\t}\\n\\n\\t.tc-static-alert-inner {\\n\\t\\tposition: absolute;\\n\\t\\tz-index: 100;\\n\\t}\\n\\n}\\n\\n.tc-static-alert-inner {\\n\\tpadding: 0 2px 2px 42px;\\n\\tcolor: <<colour static-alert-foreground>>;\\n}\\n\\n/*\\n** Floating drafts list\\n*/\\n\\n.tc-drafts-list {\\n\\tz-index: 2000;\\n\\tposition: fixed;\\n\\tfont-size: 0.8em;\\n\\tleft: 0;\\n\\tbottom: 0;\\n}\\n\\n.tc-drafts-list a {\\n\\tmargin: 0 0.5em;\\n\\tpadding: 4px 4px;\\n\\tborder-top-left-radius: 4px;\\n\\tborder-top-right-radius: 4px;\\n\\tborder: 1px solid <<colour background>>;\\n\\tborder-bottom: none;\\n\\tbackground: <<colour dirty-indicator>>;\\n\\tcolor: <<colour background>>;\\n\\tfill: <<colour background>>;\\n}\\n\\n.tc-drafts-list a:hover {\\n\\ttext-decoration: none;\\n\\tbackground: <<colour foreground>>;\\n\\tcolor: <<colour background>>;\\n\\tfill: <<colour background>>;\\n}\\n\\n.tc-drafts-list a svg {\\n\\twidth: 1em;\\n\\theight: 1em;\\n\\tvertical-align: text-bottom;\\n}\\n\\n/*\\n** Control panel\\n*/\\n\\n.tc-control-panel td {\\n\\tpadding: 4px;\\n}\\n\\n.tc-control-panel table, .tc-control-panel table input, .tc-control-panel table textarea {\\n\\twidth: 100%;\\n}\\n\\n.tc-control-panel-setting {\\n\\tborder-top: 1px solid <<colour blockquote-bar>>;\\n}\\n\\n.tc-plugin-info {\\n\\tdisplay: flex;\\n\\ttext-shadow: none;\\n\\tborder: 1px solid <<colour muted-foreground>>;\\n\\tfill: <<colour muted-foreground>>;\\n\\tbackground-color: <<colour background>>;\\n\\tmargin: 0.5em 0 0.5em 0;\\n\\tpadding: 4px;\\n\\talign-items: center;\\n}\\n\\n.tc-sidebar-lists a.tc-tiddlylink.tc-plugin-info {\\n\\tcolor: <<colour tiddler-link-foreground>>;\\n}\\n\\n\\n.tc-plugin-info-sub-plugins .tc-plugin-info {\\n\\tmargin: 0.5em;\\n\\tbackground: <<colour background>>;\\n}\\n\\n.tc-plugin-info-sub-plugin-indicator {\\n\\tmargin: -16px 1em 0 2em;\\n}\\n\\n.tc-plugin-info-sub-plugin-indicator button {\\n\\tcolor: <<colour background>>;\\n\\tbackground: <<colour foreground>>;\\n\\tborder-radius: 8px;\\n\\tpadding: 2px 7px;\\n\\tfont-size: 0.75em;\\n}\\n\\n.tc-plugin-info-sub-plugins .tc-plugin-info-dropdown {\\n\\tmargin-left: 1em;\\n\\tmargin-right: 1em;\\n}\\n\\n.tc-plugin-info-disabled {\\n\\tbackground: -webkit-repeating-linear-gradient(45deg, #ff0, #ff0 10px, #eee 10px, #eee 20px);\\n\\tbackground: repeating-linear-gradient(45deg, #ff0, #ff0 10px, #eee 10px, #eee 20px);\\n}\\n\\n.tc-plugin-info-disabled:hover {\\n\\tbackground: -webkit-repeating-linear-gradient(45deg, #aa0, #aa0 10px, #888 10px, #888 20px);\\n\\tbackground: repeating-linear-gradient(45deg, #aa0, #aa0 10px, #888 10px, #888 20px);\\n}\\n\\na.tc-tiddlylink.tc-plugin-info:hover {\\n\\ttext-decoration: none;\\n\\tbackground-color: <<colour primary>>;\\n\\tcolor: <<colour background>>;\\n\\tfill: <<colour foreground>>;\\n}\\n\\na.tc-tiddlylink.tc-plugin-info:hover > .tc-plugin-info-chunk > svg {\\n\\tfill: <<colour background>>;\\n}\\n\\n.tc-plugin-info-chunk {\\n\\tmargin: 2px;\\n}\\n\\n.tc-plugin-info-chunk.tc-plugin-info-toggle {\\n\\tflex-grow: 0;\\n\\tflex-shrink: 0;\\n\\tline-height: 1;\\n}\\n\\n.tc-plugin-info-chunk.tc-plugin-info-icon {\\n\\tflex-grow: 0;\\n\\tflex-shrink: 0;\\n\\tline-height: 1;\\n}\\n\\n.tc-plugin-info-chunk.tc-plugin-info-description {\\n\\tflex-grow: 1;\\n}\\n\\n.tc-plugin-info-chunk .tc-plugin-info-stability {\\n\\tmargin-right: 4px;\\n\\tpadding: 1px 3px;\\n\\tfont-size: 0.8em;\\n\\tborder-radius: 4px;\\n\\tfont-weight: bold;\\n}\\n\\n.tc-plugin-info-chunk .tc-plugin-info-stability-stable {\\n\\tborder: 1px solid <<colour stability-stable>>;\\n\\tcolor: <<colour stability-stable>>;\\n}\\n\\n.tc-plugin-info-chunk .tc-plugin-info-stability-experimental {\\n\\tborder: 1px solid <<colour stability-experimental>>;\\n\\tcolor: <<colour stability-experimental>>;\\n}\\n\\n.tc-plugin-info-chunk .tc-plugin-info-stability-deprecated {\\n\\tborder: 1px solid <<colour stability-deprecated>>;\\n\\tcolor: <<colour stability-deprecated>>;\\n}\\n\\n.tc-plugin-info-chunk .tc-plugin-info-stability-legacy {\\n\\tborder: 1px solid <<colour stability-legacy>>;\\n\\tcolor: <<colour stability-legacy>>;\\n}\\n\\n.tc-plugin-info-chunk.tc-plugin-info-buttons {\\n\\tfont-size: 0.8em;\\n\\tline-height: 1.2;\\n\\tflex-grow: 0;\\n\\tflex-shrink: 0;\\n\\ttext-align: right;\\n}\\n\\n.tc-plugin-info-chunk.tc-plugin-info-description h1 {\\n\\tfont-size: 1em;\\n\\tline-height: 1.2;\\n\\tmargin: 2px 0 2px 0;\\n}\\n\\n.tc-plugin-info-chunk.tc-plugin-info-description h2 {\\n\\tfont-size: 0.8em;\\n\\tline-height: 1.2;\\n\\tmargin: 2px 0 2px 0;\\n}\\n\\n.tc-plugin-info-chunk.tc-plugin-info-description div {\\n\\tfont-size: 0.8em;\\n\\tline-height: 1.2;\\n\\tmargin: 2px 0 2px 0;\\n}\\n\\n.tc-plugin-info-chunk.tc-plugin-info-toggle img, .tc-plugin-info-chunk.tc-plugin-info-toggle svg {\\n\\twidth: 1em;\\n\\theight: 1em;\\n}\\n\\n.tc-plugin-info-chunk.tc-plugin-info-icon img, .tc-plugin-info-chunk.tc-plugin-info-icon svg {\\n\\twidth: 2em;\\n\\theight: 2em;\\n}\\n\\n.tc-plugin-info-dropdown {\\n\\tborder: 1px solid <<colour muted-foreground>>;\\n\\tbackground: <<colour background>>;\\n\\tmargin-top: -8px;\\n}\\n\\n.tc-plugin-info-dropdown-message {\\n\\tbackground: <<colour message-background>>;\\n\\tpadding: 0.5em 1em 0.5em 1em;\\n\\tfont-weight: bold;\\n\\tfont-size: 0.8em;\\n}\\n\\n.tc-plugin-info-dropdown-body {\\n\\tpadding: 1em 1em 0 1em;\\n\\tbackground: <<colour background>>;\\n}\\n\\n.tc-plugin-info-sub-plugins {\\n\\tpadding: 0.5em;\\n\\tmargin: 0 1em 1em 1em;\\n\\tbackground: <<colour notification-background>>;\\n}\\n\\n.tc-install-plugin {\\n\\tfont-weight: bold;\\n\\tbackground: green;\\n\\tcolor: white;\\n\\tfill: white;\\n\\tborder-radius: 4px;\\n\\tpadding: 3px;\\n}\\n\\n.tc-install-plugin.tc-reinstall-downgrade {\\n\\tbackground: red;\\n}\\n\\n.tc-install-plugin.tc-reinstall {\\n\\tbackground: blue;\\n}\\n\\n.tc-install-plugin.tc-reinstall-upgrade {\\n\\tbackground: orange;\\n}\\n\\n.tc-check-list {\\n\\tline-height: 2em;\\n}\\n\\n.tc-check-list .tc-image-button {\\n\\theight: 1.5em;\\n}\\n\\n/*\\n** Message boxes\\n*/\\n\\n.tc-message-box {\\n\\tborder: 1px solid <<colour message-border>>;\\n\\tbackground: <<colour message-background>>;\\n\\tpadding: 0px 21px 0px 21px;\\n\\tfont-size: 12px;\\n\\tline-height: 18px;\\n\\tcolor: <<colour message-foreground>>;\\n}\\n\\n.tc-message-box svg {\\n\\twidth: 1em;\\n\\theight: 1em;\\n\\tvertical-align: text-bottom;\\n}\\n\\n/*\\n** Pictures\\n*/\\n\\n.tc-bordered-image {\\n\\tborder: 1px solid <<colour muted-foreground>>;\\n\\tpadding: 5px;\\n\\tmargin: 5px;\\n}\\n\\n/*\\n** Floats\\n*/\\n\\n.tc-float-right {\\n\\tfloat: right;\\n}\\n\\n/*\\n** Chooser\\n*/\\n\\n.tc-chooser {\\n\\tborder-right: 1px solid <<colour table-header-background>>;\\n\\tborder-left: 1px solid <<colour table-header-background>>;\\n}\\n\\n\\n.tc-chooser-item {\\n\\tborder-bottom: 1px solid <<colour table-header-background>>;\\n\\tborder-top: 1px solid <<colour table-header-background>>;\\n\\tpadding: 2px 4px 2px 14px;\\n}\\n\\n.tc-drop-down .tc-chooser-item {\\n\\tpadding: 2px;\\n}\\n\\n.tc-chosen,\\n.tc-chooser-item:hover {\\n\\tbackground-color: <<colour table-header-background>>;\\n\\tborder-color: <<colour table-footer-background>>;\\n}\\n\\n.tc-chosen .tc-tiddlylink {\\n\\tcursor:default;\\n}\\n\\n.tc-chooser-item .tc-tiddlylink {\\n\\tdisplay: block;\\n\\ttext-decoration: none;\\n\\tbackground-color: transparent;\\n}\\n\\n.tc-chooser-item:hover .tc-tiddlylink:hover {\\n\\ttext-decoration: none;\\n}\\n\\n.tc-drop-down .tc-chosen .tc-tiddlylink,\\n.tc-drop-down .tc-chooser-item .tc-tiddlylink:hover {\\n\\tcolor: <<colour foreground>>;\\n}\\n\\n.tc-chosen > .tc-tiddlylink:before {\\n\\tmargin-left: -10px;\\n\\tposition: relative;\\n\\tcontent: \\\"» \\\";\\n}\\n\\n.tc-chooser-item svg,\\n.tc-chooser-item img{\\n\\twidth: 1em;\\n\\theight: 1em;\\n\\tvertical-align: middle;\\n}\\n\\n.tc-language-chooser .tc-image-button img {\\n\\twidth: 2em;\\n\\tvertical-align: -0.15em;\\n}\\n\\n/*\\n** Palette swatches\\n*/\\n\\n.tc-swatches-horiz {\\n}\\n\\n.tc-swatches-horiz .tc-swatch {\\n\\tdisplay: inline-block;\\n}\\n\\n.tc-swatch {\\n\\twidth: 2em;\\n\\theight: 2em;\\n\\tmargin: 0.4em;\\n\\tborder: 1px solid #888;\\n}\\n\\ninput.tc-palette-manager-colour-input {\\n\\twidth: 100%;\\n\\tpadding: 0;\\n}\\n\\n/*\\n** Table of contents\\n*/\\n\\n.tc-sidebar-lists .tc-table-of-contents {\\n\\twhite-space: nowrap;\\n}\\n\\n.tc-table-of-contents button,\\n.tc-table-of-contents .toc-item-muted {\\n\\tcolor: <<colour sidebar-foreground>>;\\n}\\n\\n.tc-table-of-contents svg {\\n\\twidth: 0.7em;\\n\\theight: 0.7em;\\n\\tvertical-align: middle;\\n\\tfill: <<colour sidebar-foreground>>;\\n}\\n\\n.tc-table-of-contents ol {\\n\\tlist-style-type: none;\\n\\tpadding-left: 0;\\n}\\n\\n.tc-table-of-contents ol ol {\\n\\tpadding-left: 1em;\\n}\\n\\n.tc-table-of-contents li {\\n\\tfont-size: 1.0em;\\n\\tfont-weight: bold;\\n}\\n\\n.tc-table-of-contents li a {\\n\\tfont-weight: bold;\\n}\\n\\n.tc-table-of-contents li li {\\n\\tfont-size: 0.95em;\\n\\tfont-weight: normal;\\n\\tline-height: 1.4;\\n}\\n\\n.tc-table-of-contents li li a {\\n\\tfont-weight: normal;\\n}\\n\\n.tc-table-of-contents li li li {\\n\\tfont-size: 0.95em;\\n\\tfont-weight: normal;\\n\\tline-height: 1.5;\\n}\\n\\n.tc-table-of-contents li li li li {\\n\\tfont-size: 0.95em;\\n\\tfont-weight: normal;\\n}\\n\\n.tc-tabbed-table-of-contents {\\n\\tdisplay: -webkit-flex;\\n\\tdisplay: flex;\\n}\\n\\n.tc-tabbed-table-of-contents .tc-table-of-contents {\\n\\tz-index: 100;\\n\\tdisplay: inline-block;\\n\\tpadding-left: 1em;\\n\\tmax-width: 50%;\\n\\t-webkit-flex: 0 0 auto;\\n\\tflex: 0 0 auto;\\n\\tbackground: <<colour tab-background>>;\\n\\tborder-left: 1px solid <<colour tab-border>>;\\n\\tborder-top: 1px solid <<colour tab-border>>;\\n\\tborder-bottom: 1px solid <<colour tab-border>>;\\n}\\n\\n.tc-tabbed-table-of-contents .tc-table-of-contents .toc-item > a,\\n.tc-tabbed-table-of-contents .tc-table-of-contents .toc-item-selected > a {\\n\\tdisplay: block;\\n\\tpadding: 0.12em 1em 0.12em 0.25em;\\n}\\n\\n.tc-tabbed-table-of-contents .tc-table-of-contents .toc-item > a {\\n\\tborder-top: 1px solid <<colour tab-background>>;\\n\\tborder-left: 1px solid <<colour tab-background>>;\\n\\tborder-bottom: 1px solid <<colour tab-background>>;\\n}\\n\\n.tc-tabbed-table-of-contents .tc-table-of-contents .toc-item > a:hover {\\n\\ttext-decoration: none;\\n\\tborder-top: 1px solid <<colour tab-border>>;\\n\\tborder-left: 1px solid <<colour tab-border>>;\\n\\tborder-bottom: 1px solid <<colour tab-border>>;\\n\\tbackground: <<colour tab-border>>;\\n}\\n\\n.tc-tabbed-table-of-contents .tc-table-of-contents .toc-item-selected > a {\\n\\tborder-top: 1px solid <<colour tab-border>>;\\n\\tborder-left: 1px solid <<colour tab-border>>;\\n\\tborder-bottom: 1px solid <<colour tab-border>>;\\n\\tbackground: <<colour background>>;\\n\\tmargin-right: -1px;\\n}\\n\\n.tc-tabbed-table-of-contents .tc-table-of-contents .toc-item-selected > a:hover {\\n\\ttext-decoration: none;\\n}\\n\\n.tc-tabbed-table-of-contents .tc-tabbed-table-of-contents-content {\\n\\tdisplay: inline-block;\\n\\tvertical-align: top;\\n\\tpadding-left: 1.5em;\\n\\tpadding-right: 1.5em;\\n\\tborder: 1px solid <<colour tab-border>>;\\n\\t-webkit-flex: 1 0 50%;\\n\\tflex: 1 0 50%;\\n}\\n\\n/*\\n** Dirty indicator\\n*/\\n\\nhtml body svg.tc-image-save-button-dynamic .tc-image-save-button-dynamic-clean {\\n\\tvisibility: visible;\\n}\\n\\nhtml body svg.tc-image-save-button-dynamic .tc-image-save-button-dynamic-dirty {\\n\\tvisibility: hidden;\\n}\\n\\nhtml body.tc-dirty svg.tc-image-save-button-dynamic .tc-image-save-button-dynamic-clean {\\n\\tvisibility: hidden;\\n}\\n\\nhtml body.tc-dirty svg.tc-image-save-button-dynamic .tc-image-save-button-dynamic-dirty {\\n\\tvisibility: visible;\\n}\\n\\nhtml body.tc-dirty span.tc-dirty-indicator, html body.tc-dirty span.tc-dirty-indicator svg {\\n\\tfill: <<colour dirty-indicator>>;\\n\\tcolor: <<colour dirty-indicator>>;\\n}\\n\\n/*\\n** File inputs\\n*/\\n\\n.tc-file-input-wrapper {\\n\\tposition: relative;\\n\\toverflow: hidden;\\n\\tdisplay: inline-block;\\n\\tvertical-align: middle;\\n}\\n\\n.tc-file-input-wrapper input[type=file] {\\n\\tposition: absolute;\\n\\ttop: 0;\\n\\tleft: 0;\\n\\tright: 0;\\n\\tbottom: 0;\\n\\tfont-size: 999px;\\n\\tmax-width: 100%;\\n\\tmax-height: 100%;\\n\\tfilter: alpha(opacity=0);\\n\\topacity: 0;\\n\\toutline: none;\\n\\tbackground: white;\\n\\tcursor: pointer;\\n\\tdisplay: inline-block;\\n}\\n\\n::-webkit-file-upload-button {\\n\\tcursor:pointer;\\n}\\n\\n/*\\n** Thumbnail macros\\n*/\\n\\n.tc-thumbnail-wrapper {\\n\\tposition: relative;\\n\\tdisplay: inline-block;\\n\\tmargin: 6px;\\n\\tvertical-align: top;\\n}\\n\\n.tc-thumbnail-right-wrapper {\\n\\tfloat:right;\\n\\tmargin: 0.5em 0 0.5em 0.5em;\\n}\\n\\n.tc-thumbnail-image {\\n\\ttext-align: center;\\n\\toverflow: hidden;\\n\\tborder-radius: 3px;\\n}\\n\\n.tc-thumbnail-image svg,\\n.tc-thumbnail-image img {\\n\\tfilter: alpha(opacity=1);\\n\\topacity: 1;\\n\\tmin-width: 100%;\\n\\tmin-height: 100%;\\n\\tmax-width: 100%;\\n}\\n\\n.tc-thumbnail-wrapper:hover .tc-thumbnail-image svg,\\n.tc-thumbnail-wrapper:hover .tc-thumbnail-image img {\\n\\tfilter: alpha(opacity=0.8);\\n\\topacity: 0.8;\\n}\\n\\n.tc-thumbnail-background {\\n\\tposition: absolute;\\n\\tborder-radius: 3px;\\n}\\n\\n.tc-thumbnail-icon svg,\\n.tc-thumbnail-icon img {\\n\\twidth: 3em;\\n\\theight: 3em;\\n\\t<<filter \\\"drop-shadow(2px 2px 4px rgba(0,0,0,0.3))\\\">>\\n}\\n\\n.tc-thumbnail-wrapper:hover .tc-thumbnail-icon svg,\\n.tc-thumbnail-wrapper:hover .tc-thumbnail-icon img {\\n\\tfill: #fff;\\n\\t<<filter \\\"drop-shadow(3px 3px 4px rgba(0,0,0,0.6))\\\">>\\n}\\n\\n.tc-thumbnail-icon {\\n\\tposition: absolute;\\n\\ttop: 0;\\n\\tleft: 0;\\n\\tright: 0;\\n\\tbottom: 0;\\n\\tdisplay: -webkit-flex;\\n\\t-webkit-align-items: center;\\n\\t-webkit-justify-content: center;\\n\\tdisplay: flex;\\n\\talign-items: center;\\n\\tjustify-content: center;\\n}\\n\\n.tc-thumbnail-caption {\\n\\tposition: absolute;\\n\\tbackground-color: #777;\\n\\tcolor: #fff;\\n\\ttext-align: center;\\n\\tbottom: 0;\\n\\twidth: 100%;\\n\\tfilter: alpha(opacity=0.9);\\n\\topacity: 0.9;\\n\\tline-height: 1.4;\\n\\tborder-bottom-left-radius: 3px;\\n\\tborder-bottom-right-radius: 3px;\\n}\\n\\n.tc-thumbnail-wrapper:hover .tc-thumbnail-caption {\\n\\tfilter: alpha(opacity=1);\\n\\topacity: 1;\\n}\\n\\n/*\\n** Diffs\\n*/\\n\\n.tc-diff-equal {\\n\\tbackground-color: <<colour diff-equal-background>>;\\n\\tcolor: <<colour diff-equal-foreground>>;\\n}\\n\\n.tc-diff-insert {\\n\\tbackground-color: <<colour diff-insert-background>>;\\n\\tcolor: <<colour diff-insert-foreground>>;\\n}\\n\\n.tc-diff-delete {\\n\\tbackground-color: <<colour diff-delete-background>>;\\n\\tcolor: <<colour diff-delete-foreground>>;\\n}\\n\\n.tc-diff-invisible {\\n\\tbackground-color: <<colour diff-invisible-background>>;\\n\\tcolor: <<colour diff-invisible-foreground>>;\\n}\\n\\n.tc-diff-tiddlers th {\\n\\ttext-align: right;\\n\\tbackground: <<colour background>>;\\n\\tfont-weight: normal;\\n\\tfont-style: italic;\\n}\\n\\n.tc-diff-tiddlers pre {\\n\\tmargin: 0;\\n\\tpadding: 0;\\n\\tborder: none;\\n\\tbackground: none;\\n}\\n\\n/*\\n** Errors\\n*/\\n\\n.tc-error {\\n\\tbackground: #f00;\\n\\tcolor: #fff;\\n}\\n\\n/*\\n** Tree macro\\n*/\\n\\n.tc-tree div {\\n\\tpadding-left: 14px;\\n}\\n\\n.tc-tree ol {\\n\\tlist-style-type: none;\\n\\tpadding-left: 0;\\n\\tmargin-top: 0;\\n}\\n\\n.tc-tree ol ol {\\n\\tpadding-left: 1em;\\n}\\n\\n.tc-tree button {\\n\\tcolor: #acacac;\\n}\\n\\n.tc-tree svg {\\n\\tfill: #acacac;\\n}\\n\\n.tc-tree span svg {\\n\\twidth: 1em;\\n\\theight: 1em;\\n\\tvertical-align: baseline;\\n}\\n\\n.tc-tree li span {\\n\\tcolor: lightgray;\\n}\\n\\nselect {\\n\\tcolor: <<colour select-tag-foreground>>;\\n\\tbackground: <<colour select-tag-background>>;\\n}\\n\\n/*\\n** Translink macro\\n*/\\n\\n.tc-translink {\\n\\tbackground-color: <<colour pre-background>>;\\n\\tborder: 1px solid <<colour pre-border>>;\\n\\tpadding: 0 3px;\\n\\tborder-radius: 3px;\\n}\\n\\ndiv.tc-translink > div {\\n\\tmargin: 1em;\\n}\\n\\ndiv.tc-translink > div > a:first-child > h1 {\\n\\tfont-size: 1.2em;\\n\\tfont-weight: bold;\\n}\\n\\nspan.tc-translink > a:first-child {\\n\\tfont-weight: bold;\\n}\\n\\n/*\\n** Classes for displaying globals\\n*/\\n\\n.tc-global-tiddler-body {\\n\\tpadding: 0.25em;\\n\\tborder: 1px solid <<colour foreground>>;\\n\\tbackground-color: <<colour muted-foreground>>;\\n\\tborder-radius: 3px;\\n}\\n\\n.tc-global-tiddler-body-heading {\\n\\tmargin: 0 0 0.25em 0;\\n\\tfont-weight: normal;\\n}\\n\\n.tc-global-tiddler-body-type {\\n\\tmargin: 0 0 0.25em 0;\\n\\tborder-bottom: 1px solid <<colour foreground>>;\\n}\\n\\n.tc-global-tiddler-body-details {\\n\\tbackground-color: <<colour background>>;\\n}\\n\\n.tc-global-tiddler-body pre {\\n\\tmargin: 0;\\n\\tborder: 1px solid <<colour foreground>>;\\n}\\n\\n/*\\n** Utility classes for SVG icons\\n*/\\n\\n.tc-fill-background {\\n\\tfill: <<colour background>>;\\n}\\n\\n.tc-network-activity-background {\\n\\tfill: <<colour network-activity-foreground>>;\\n}\\n\\n/*\\n** Test Cases\\n*/\\n\\n.tc-test-case-wrapper {\\n\\tborder: 1px solid <<colour foreground>>;\\n\\tbackground-color: <<colour muted-foreground>>;\\n\\tborder-radius: 6px;\\n}\\n\\n.tc-test-case-wrapper {\\n\\tbackground-color: <<colour testcase-accent-level-1>>;\\n}\\n\\n.tc-test-case-wrapper .tc-test-case-wrapper {\\n\\tbackground-color: <<colour testcase-accent-level-2>>;\\n}\\n\\n.tc-test-case-wrapper .tc-test-case-wrapper .tc-test-case-wrapper {\\n\\tbackground-color: <<colour testcase-accent-level-3>>;\\n}\\n\\n.tc-test-case-header {\\n\\tfont-weight: normal;\\n\\tmargin: 0.5em 0;\\n\\tpadding: 0 0.5em;\\n}\\n\\n.tc-test-case-divider {\\n\\tx-background-color: <<colour muted-foreground>>;\\n}\\n\\n.tc-test-case-result-icon {\\n\\tfill: #fff;\\n\\tpadding: 0.25em;\\n\\tdisplay: inline-block;\\n\\tline-height: 0;\\n\\tborder-radius: 1em;\\n\\tvertical-align: text-bottom;\\n\\tmargin-right: 0.25em;\\n}\\n\\n.tc-test-case-result-icon-pass {\\n\\tbackground-color: green;\\n}\\n\\n.tc-test-case-result-icon-fail {\\n\\tbackground-color: red;\\n}\\n\\n.tc-test-case-result-icon svg {\\n\\twidth: 0.5em;\\n\\theight: 0.5em;\\n}\\n\\n.tc-test-case-header > h2 {\\n\\tbackground: <<colour background>>;\\n\\tborder-radius: 4px;\\n\\tpadding: 0.25em;\\n}\\n\\n.tc-test-case-header > h2,\\n.tc-test-case-source > pre {\\n\\tmargin: 0;\\n}\\n\\n.tc-test-case-header > h2 a.tc-tiddlylink-missing {\\n\\tfont-style: normal;\\n}\\n\\n.tc-test-case-toolbar {\\n\\tfloat: right;\\n}\\n\\n.tc-test-case-toolbar svg {\\n\\tfill: <<colour tiddler-controls-foreground>>;\\n}\\n\\n.tc-test-case-toolbar .tc-drop-down {\\n\\tfont-size: 0.8em;\\n}\\n\\n.tc-test-case-result-fail {\\n\\tborder: 1px solid <<colour foreground>>;\\n\\tbackground-color: <<colour background>>;\\n\\tborder-radius: 4px;\\n\\tmargin: 0 0.5em;\\n\\tpadding: 0;\\n}\\n\\n.tc-test-case-result-fail-header {\\n\\tbackground: <<colour diff-delete-background>>;\\n\\tcolor: <<colour diff-delete-foreground>>;\\n\\tborder-top-left-radius: 4px;\\n\\tborder-top-right-radius: 4px;\\n\\tpadding: 4px;\\n}\\n\\n.tc-test-case-result-fail-body {\\n\\tpadding: 4px;\\n}\\n\\n.tc-test-case-source > pre {\\n\\theight: 100%;\\n}\\n\\n.tc-test-case-narrative {\\n\\tpadding: 0.5em;\\n}\\n\\n.tc-test-case-panes {\\n\\tdisplay: flex;\\n\\talign-items: stretch;\\n\\tflex-wrap: wrap;\\n\\tpadding: 0.5em;\\n\\tborder-bottom-left-radius: 6px;\\n\\tborder-bottom-right-radius: 6px;\\n}\\n\\n.tc-test-case-source {\\n\\tflex: 1 0 49%;\\n\\tmin-width: 250px;\\n}\\n\\n.tc-test-case-source .tc-tab-content {\\n\\tbackground: inherit;\\n\\tmargin: 0;\\n}\\n\\n.tc-test-case-source .tc-tab-content .tc-field-table {\\n\\tbackground: <<colour background>>;\\n}\\n\\n.tc-test-case-source .tc-field-table {\\n\\twidth: 100%;\\n}\\n\\n.tc-test-case-source table.tc-field-table {\\n\\tmargin: 0;\\n}\\n\\n.tc-test-case-source .tc-tiddler-frame .tc-edit-texteditor {\\n\\tmargin: 0;\\n}\\n\\n.tc-test-case-divider {\\n\\tflex: 0 0 1.5%;\\n}\\n\\n.tc-test-case-source .tc-tab-buttons {\\n\\tpadding-top: 0;\\n}\\n\\n.tc-test-case-footer-toolbar {\\n\\tdisplay: flex;\\n\\tjustify-content: flex-end;\\n}\\n\\n.tc-test-case-output {\\n\\tbox-shadow: inset 2px 2px 10px 0px <<colour muted-foreground>>;\\n\\tbackground: <<colour background>>;\\n\\tborder-radius: 4px;\\n\\tborder: 1px solid <<colour muted-foreground>>;\\n\\tflex: 1 0 49%;\\n\\tmin-width: 250px;\\n\\tpadding: 0.25em 1em;\\n}\\n\\n/*\\n** Flexbox utility classes\\n*/\\n\\n.tc-flex {\\n\\tdisplay: -webkit-flex;\\n\\tdisplay: flex;\\n}\\n\\n.tc-flex-column {\\n\\tflex-direction: column;\\n}\\n\\n.tc-flex-row {\\n\\tflex-direction: row;\\n}\\n\\n.tc-flex-grow-1 {\\n\\tflex-grow: 1;\\n}\\n\\n.tc-flex-grow-2 {\\n\\tflex-grow: 2;\\n}\\n\\n/*\\n** Other utility classes\\n*/\\n\\n/* Horizontal gaps */\\n\\n.tc-tiny-gap {\\n\\tmargin-left: .25em;\\n\\tmargin-right: .25em;\\n}\\n\\n.tc-tiny-gap-left {\\n\\tmargin-left: .25em;\\n}\\n\\n.tc-tiny-gap-right {\\n\\tmargin-right: .25em;\\n}\\n\\n.tc-small-gap {\\n\\tmargin-left: .5em;\\n\\tmargin-right: .5em;\\n}\\n\\n.tc-small-gap-left {\\n\\tmargin-left: .5em;\\n}\\n\\n.tc-small-gap-right {\\n\\tmargin-right: .5em;\\n}\\n\\n.tc-big-gap {\\n\\tmargin-left: 1em;\\n\\tmargin-right: 1em;\\n}\\n\\n.tc-big-gap-left {\\n\\tmargin-left: 1em;\\n}\\n\\n.tc-big-gap-right {\\n\\tmargin-right: 1em;\\n}\\n\\n.tc-word-break {\\n\\tword-break: break-all;\\n}\\n\\n/* Vertical gaps */\\n\\n.tc-tiny-v-gap-bottom {\\n\\tmargin-bottom: 3px;\\n}\\n\"},\"$:/themes/tiddlywiki/vanilla/metrics/bodyfontsize\":{\"title\":\"$:/themes/tiddlywiki/vanilla/metrics/bodyfontsize\",\"text\":\"15px\"},\"$:/themes/tiddlywiki/vanilla/metrics/bodylineheight\":{\"title\":\"$:/themes/tiddlywiki/vanilla/metrics/bodylineheight\",\"text\":\"22px\"},\"$:/themes/tiddlywiki/vanilla/metrics/fontsize\":{\"title\":\"$:/themes/tiddlywiki/vanilla/metrics/fontsize\",\"text\":\"14px\"},\"$:/themes/tiddlywiki/vanilla/metrics/lineheight\":{\"title\":\"$:/themes/tiddlywiki/vanilla/metrics/lineheight\",\"text\":\"20px\"},\"$:/themes/tiddlywiki/vanilla/metrics/storyleft\":{\"title\":\"$:/themes/tiddlywiki/vanilla/metrics/storyleft\",\"text\":\"0px\"},\"$:/themes/tiddlywiki/vanilla/metrics/storytop\":{\"title\":\"$:/themes/tiddlywiki/vanilla/metrics/storytop\",\"text\":\"0px\"},\"$:/themes/tiddlywiki/vanilla/metrics/storyright\":{\"title\":\"$:/themes/tiddlywiki/vanilla/metrics/storyright\",\"text\":\"770px\"},\"$:/themes/tiddlywiki/vanilla/metrics/storywidth\":{\"title\":\"$:/themes/tiddlywiki/vanilla/metrics/storywidth\",\"text\":\"770px\"},\"$:/themes/tiddlywiki/vanilla/metrics/tiddlerwidth\":{\"title\":\"$:/themes/tiddlywiki/vanilla/metrics/tiddlerwidth\",\"text\":\"686px\"},\"$:/themes/tiddlywiki/vanilla/metrics/sidebarbreakpoint\":{\"title\":\"$:/themes/tiddlywiki/vanilla/metrics/sidebarbreakpoint\",\"text\":\"960px\"},\"$:/themes/tiddlywiki/vanilla/metrics/sidebarwidth\":{\"title\":\"$:/themes/tiddlywiki/vanilla/metrics/sidebarwidth\",\"text\":\"350px\"},\"$:/themes/tiddlywiki/vanilla/options/stickytitles\":{\"title\":\"$:/themes/tiddlywiki/vanilla/options/stickytitles\",\"text\":\"no\"},\"$:/themes/tiddlywiki/vanilla/options/sidebarlayout\":{\"title\":\"$:/themes/tiddlywiki/vanilla/options/sidebarlayout\",\"text\":\"fixed-fluid\"},\"$:/themes/tiddlywiki/vanilla/options/codewrapping\":{\"title\":\"$:/themes/tiddlywiki/vanilla/options/codewrapping\",\"text\":\"pre-wrap\"},\"$:/themes/tiddlywiki/vanilla/reset\":{\"title\":\"$:/themes/tiddlywiki/vanilla/reset\",\"type\":\"text/css\",\"text\":\"/*! modern-normalize v2.0.0 | MIT License | https://github.com/sindresorhus/modern-normalize */\\n\\n/*\\nDocument\\n========\\n*/\\n\\n/**\\nUse a better box model (opinionated).\\n*/\\n\\n*,\\n::before,\\n::after {\\n\\tbox-sizing: border-box;\\n}\\n\\nhtml {\\n\\t/* Improve consistency of default fonts in all browsers. (https://github.com/sindresorhus/modern-normalize/issues/3) */\\n\\tfont-family:\\n\\t\\tsystem-ui,\\n\\t\\t'Segoe UI',\\n\\t\\tRoboto,\\n\\t\\tHelvetica,\\n\\t\\tArial,\\n\\t\\tsans-serif,\\n\\t\\t'Apple Color Emoji',\\n\\t\\t'Segoe UI Emoji';\\n\\tline-height: 1.15; /* 1. Correct the line height in all browsers. */\\n\\t-webkit-text-size-adjust: 100%; /* 2. Prevent adjustments of font size after orientation changes in iOS. */\\n\\t-moz-tab-size: 4; /* 3. Use a more readable tab size (opinionated). */\\n\\ttab-size: 4; /* 3 */\\n}\\n\\n/*\\nSections\\n========\\n*/\\n\\nbody {\\n\\tmargin: 0; /* Remove the margin in all browsers. */\\n}\\n\\n/*\\nGrouping content\\n================\\n*/\\n\\n/**\\n1. Add the correct height in Firefox.\\n2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)\\n*/\\n\\nhr {\\n\\theight: 0; /* 1 */\\n\\tcolor: inherit; /* 2 */\\n}\\n\\n/*\\nText-level semantics\\n====================\\n*/\\n\\n/**\\nAdd the correct text decoration in Chrome, Edge, and Safari.\\n*/\\n\\nabbr[title] {\\n\\ttext-decoration: underline dotted;\\n}\\n\\n/**\\nAdd the correct font weight in Edge and Safari.\\n*/\\n\\nb,\\nstrong {\\n\\tfont-weight: bolder;\\n}\\n\\n/**\\n1. Improve consistency of default fonts in all browsers. (https://github.com/sindresorhus/modern-normalize/issues/3)\\n2. Correct the odd 'em' font sizing in all browsers.\\n*/\\n\\ncode,\\nkbd,\\nsamp,\\npre {\\n\\tfont-family:\\n\\t\\tui-monospace,\\n\\t\\tSFMono-Regular,\\n\\t\\tConsolas,\\n\\t\\t'Liberation Mono',\\n\\t\\tMenlo,\\n\\t\\tmonospace; /* 1 */\\n\\tfont-size: 1em; /* 2 */\\n}\\n\\n/**\\nAdd the correct font size in all browsers.\\n*/\\n\\nsmall {\\n\\tfont-size: 80%;\\n}\\n\\n/**\\nPrevent 'sub' and 'sup' elements from affecting the line height in all browsers.\\n*/\\n\\nsub,\\nsup {\\n\\tfont-size: 75%;\\n\\tline-height: 0;\\n\\tposition: relative;\\n\\tvertical-align: baseline;\\n}\\n\\nsub {\\n\\tbottom: -0.25em;\\n}\\n\\nsup {\\n\\ttop: -0.5em;\\n}\\n\\n/*\\nTabular data\\n============\\n*/\\n\\n/**\\n1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)\\n2. Correct table border color inheritance in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)\\n*/\\n\\ntable {\\n\\ttext-indent: 0; /* 1 */\\n\\tborder-color: inherit; /* 2 */\\n}\\n\\n/*\\nForms\\n=====\\n*/\\n\\n/**\\n1. Change the font styles in all browsers.\\n2. Remove the margin in Firefox and Safari.\\n*/\\n\\nbutton,\\ninput,\\noptgroup,\\nselect,\\ntextarea {\\n\\tfont-family: inherit; /* 1 */\\n\\tfont-size: 100%; /* 1 */\\n\\tline-height: 1.15; /* 1 */\\n\\tmargin: 0; /* 2 */\\n}\\n\\n/**\\nRemove the inheritance of text transform in Edge and Firefox.\\n*/\\n\\nbutton,\\nselect {\\n\\ttext-transform: none;\\n}\\n\\n/**\\nCorrect the inability to style clickable types in iOS and Safari.\\n*/\\n\\nbutton,\\n[type='button'],\\n[type='reset'],\\n[type='submit'] {\\n\\t-webkit-appearance: button;\\n}\\n\\n/**\\nRemove the inner border and padding in Firefox.\\n*/\\n\\n::-moz-focus-inner {\\n\\tborder-style: none;\\n\\tpadding: 0;\\n}\\n\\n/**\\nRestore the focus styles unset by the previous rule.\\n*/\\n\\n:-moz-focusring {\\n\\toutline: 1px dotted ButtonText;\\n}\\n\\n/**\\nRemove the additional ':invalid' styles in Firefox.\\nSee: https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737\\n*/\\n\\n:-moz-ui-invalid {\\n\\tbox-shadow: none;\\n}\\n\\n/**\\nRemove the padding so developers are not caught out when they zero out 'fieldset' elements in all browsers.\\n*/\\n\\nlegend {\\n\\tpadding: 0;\\n}\\n\\n/**\\nAdd the correct vertical alignment in Chrome and Firefox.\\n*/\\n\\nprogress {\\n\\tvertical-align: baseline;\\n}\\n\\n/**\\nCorrect the cursor style of increment and decrement buttons in Safari.\\n*/\\n\\n::-webkit-inner-spin-button,\\n::-webkit-outer-spin-button {\\n\\theight: auto;\\n}\\n\\n/**\\n1. Correct the odd appearance in Chrome and Safari.\\n2. Correct the outline style in Safari.\\n*/\\n\\n[type='search'] {\\n\\t-webkit-appearance: textfield; /* 1 */\\n\\toutline-offset: -2px; /* 2 */\\n}\\n\\n/**\\nRemove the inner padding in Chrome and Safari on macOS.\\n*/\\n\\n::-webkit-search-decoration {\\n\\t-webkit-appearance: none;\\n}\\n\\n/**\\n1. Correct the inability to style clickable types in iOS and Safari.\\n2. Change font properties to 'inherit' in Safari.\\n*/\\n\\n::-webkit-file-upload-button {\\n\\t-webkit-appearance: button; /* 1 */\\n\\tfont: inherit; /* 2 */\\n}\\n\\n/*\\nInteractive\\n===========\\n*/\\n\\n/*\\nAdd the correct display in Chrome and Safari.\\n*/\\n\\nsummary {\\n\\tdisplay: list-item;\\n}\\n\"},\"$:/themes/tiddlywiki/vanilla/settings/fontfamily\":{\"title\":\"$:/themes/tiddlywiki/vanilla/settings/fontfamily\",\"text\":\"-apple-system,BlinkMacSystemFont,Segoe UI,Helvetica,Arial,sans-serif,Apple Color Emoji,Segoe UI Emoji\"},\"$:/themes/tiddlywiki/vanilla/settings/codefontfamily\":{\"title\":\"$:/themes/tiddlywiki/vanilla/settings/codefontfamily\",\"text\":\"\\\"SFMono-Regular\\\",Consolas,\\\"Liberation Mono\\\",Menlo,Courier,monospace\"},\"$:/themes/tiddlywiki/vanilla/settings/backgroundimageattachment\":{\"title\":\"$:/themes/tiddlywiki/vanilla/settings/backgroundimageattachment\",\"text\":\"fixed\"},\"$:/themes/tiddlywiki/vanilla/settings/backgroundimagesize\":{\"title\":\"$:/themes/tiddlywiki/vanilla/settings/backgroundimagesize\",\"text\":\"auto\"},\"$:/themes/tiddlywiki/vanilla/sticky\":{\"title\":\"$:/themes/tiddlywiki/vanilla/sticky\",\"code-body\":\"yes\",\"text\":\"<$reveal state=\\\"$:/themes/tiddlywiki/vanilla/options/stickytitles\\\" type=\\\"match\\\" text=\\\"yes\\\">\\n``\\n.tc-tiddler-title {\\n\\tposition: -webkit-sticky;\\n\\tposition: -moz-sticky;\\n\\tposition: -o-sticky;\\n\\tposition: -ms-sticky;\\n\\tposition: sticky;\\n\\ttop: 0px;\\n\\tbackground: ``<<colour tiddler-background>>``;\\n\\tz-index: 500;\\n}\\n\\n``\\n<$list filter=\\\"[range[100]]\\\">\\n`.tc-story-river .tc-tiddler-frame:nth-child(100n+`<$text text=<<currentTiddler>>/>`) {\\nz-index: `<$text text={{{ [[200]subtract<currentTiddler>] }}}/>`;\\n}\\n`\\n</$list>\\n</$reveal>\\n\"}}}"
  }
]);
    return $tw;
})(window.$tw);

